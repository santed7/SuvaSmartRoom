
c:/Users/vcox/Documents/IoT/SuvaSmartRoom/Midterm1/target/4.0.2/argon/Midterm1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003124  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7140  000b7140  00007140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7164  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000488  2003e1cc  000b7168  0001e1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000019c  2003e654  2003e654  0002e654  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b75f0  000b75f0  000275f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b7618  000b7618  00027618  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00116c3e  00000000  00000000  0002761c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00013104  00000000  00000000  0013e25a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000377a3  00000000  00000000  0015135e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ca0  00000000  00000000  00188b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a098  00000000  00000000  0018b7a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a4d7  00000000  00000000  00195839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003f98c  00000000  00000000  001cfd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013399e  00000000  00000000  0020f69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007cb0  00000000  00000000  0034303c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fb19 	bl	b6664 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fb21 	bl	b6680 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e1cc 	.word	0x2003e1cc
   b4048:	000b7168 	.word	0x000b7168
   b404c:	2003e654 	.word	0x2003e654
   b4050:	2003e654 	.word	0x2003e654
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fb1f 	bl	b56a0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7118 	.word	0x000b7118
   b407c:	000b713c 	.word	0x000b713c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b830 	b.w	b40e4 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f861 	bl	b414c <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 babf 	b.w	b5610 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 b887 	b.w	b51a4 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 b885 	b.w	b51a4 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 b88b 	b.w	b51b4 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f000 ffe0 	bl	b506c <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b4d8d 	.word	0x000b4d8d
   b40b4:	000b67f0 	.word	0x000b67f0

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c8:	b40e      	push	{r1, r2, r3}
   b40ca:	b503      	push	{r0, r1, lr}
   b40cc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ce:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40d6:	f001 fa16 	bl	b5506 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40da:	b002      	add	sp, #8
   b40dc:	f85d eb04 	ldr.w	lr, [sp], #4
   b40e0:	b003      	add	sp, #12
   b40e2:	4770      	bx	lr

000b40e4 <setup>:
//SYSTEM_MODE(MANUAL); //when internet connection is needed.

SYSTEM_MODE(SEMI_AUTOMATIC); //when no internet connection is needed.


void setup() {
   b40e4:	b510      	push	{r4, lr}
    // while(WiFi.connecting()) {
    // Serial.printf(".");


//below this line is display stuff
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); // initialize with the I2C addr 0x3C (for the 128x64)
   b40e6:	4c15      	ldr	r4, [pc, #84]	; (b413c <setup+0x58>)
   b40e8:	223c      	movs	r2, #60	; 0x3c
   b40ea:	4620      	mov	r0, r4
   b40ec:	2102      	movs	r1, #2
   b40ee:	f000 fb7b 	bl	b47e8 <_ZN16Adafruit_SSD13065beginEhh>

  display.setCursor(0,0);
   b40f2:	2200      	movs	r2, #0
   b40f4:	4611      	mov	r1, r2
   b40f6:	4620      	mov	r0, r4
   b40f8:	f000 fdf4 	bl	b4ce4 <_ZN12Adafruit_GFX9setCursorEss>
  display.display(); //this will show the Adafruit logo (splashscreen)
   b40fc:	4620      	mov	r0, r4
   b40fe:	f000 fb03 	bl	b4708 <_ZN16Adafruit_SSD13067displayEv>
  delay(1500); //this will delay the splashscreen to increase the marketing effect
   b4102:	f240 50dc 	movw	r0, #1500	; 0x5dc
   b4106:	f001 fa41 	bl	b558c <delay>
  display.clearDisplay();
   b410a:	4620      	mov	r0, r4
//   display.invertDisplay(true);
//   delay(1000);

// below this line is PIN stuff

  pinMode(led, OUTPUT);         // initalize LED as an output
   b410c:	4c0c      	ldr	r4, [pc, #48]	; (b4140 <setup+0x5c>)
  display.clearDisplay();
   b410e:	f000 fa83 	bl	b4618 <_ZN16Adafruit_SSD130612clearDisplayEv>
  pinMode(led, OUTPUT);         // initalize LED as an output
   b4112:	8820      	ldrh	r0, [r4, #0]
   b4114:	2101      	movs	r1, #1
   b4116:	f002 f8ad 	bl	b6274 <pinMode>
  pinMode(ms_sensor, INPUT);    // initialize motion sensor as an input
   b411a:	4b0a      	ldr	r3, [pc, #40]	; (b4144 <setup+0x60>)
   b411c:	2100      	movs	r1, #0
   b411e:	8818      	ldrh	r0, [r3, #0]
   b4120:	f002 f8a8 	bl	b6274 <pinMode>
  pinMode(button, INPUT);       // initialize button as an input
   b4124:	4b08      	ldr	r3, [pc, #32]	; (b4148 <setup+0x64>)
   b4126:	2100      	movs	r1, #0
   b4128:	8818      	ldrh	r0, [r3, #0]
   b412a:	f002 f8a3 	bl	b6274 <pinMode>
  digitalWrite(led, LOW);       // set the LED as off
   b412e:	8820      	ldrh	r0, [r4, #0]
   b4130:	2100      	movs	r1, #0

}
   b4132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(led, LOW);       // set the LED as off
   b4136:	f002 b8ae 	b.w	b6296 <digitalWrite>
   b413a:	bf00      	nop
   b413c:	2003e688 	.word	0x2003e688
   b4140:	2003e1d0 	.word	0x2003e1d0
   b4144:	2003e1d4 	.word	0x2003e1d4
   b4148:	2003e1cc 	.word	0x2003e1cc

000b414c <loop>:




void loop() {
   b414c:	b538      	push	{r3, r4, r5, lr}
//       }
// delay(1000);

//below this line is PIN stuff

  ms_val = digitalRead(ms_sensor);      // read motion sensor value
   b414e:	4b2d      	ldr	r3, [pc, #180]	; (b4204 <loop+0xb8>)
   b4150:	4c2d      	ldr	r4, [pc, #180]	; (b4208 <loop+0xbc>)
   b4152:	8818      	ldrh	r0, [r3, #0]
   b4154:	f002 f8b8 	bl	b62c8 <digitalRead>
  button_val = digitalRead(button);     // read button value
   b4158:	4b2c      	ldr	r3, [pc, #176]	; (b420c <loop+0xc0>)
  ms_val = digitalRead(ms_sensor);      // read motion sensor value
   b415a:	6020      	str	r0, [r4, #0]
  button_val = digitalRead(button);     // read button value
   b415c:	8818      	ldrh	r0, [r3, #0]
   b415e:	f002 f8b3 	bl	b62c8 <digitalRead>
   b4162:	4b2b      	ldr	r3, [pc, #172]	; (b4210 <loop+0xc4>)
  
  if (ms_val == HIGH) {
   b4164:	6824      	ldr	r4, [r4, #0]
  button_val = digitalRead(button);     // read button value
   b4166:	6018      	str	r0, [r3, #0]
  if (ms_val == HIGH) {
   b4168:	4b2a      	ldr	r3, [pc, #168]	; (b4214 <loop+0xc8>)
   b416a:	2c01      	cmp	r4, #1
      if (ms_state == LOW) {
   b416c:	681a      	ldr	r2, [r3, #0]
  if (ms_val == HIGH) {
   b416e:	d13d      	bne.n	b41ec <loop+0xa0>
      if (ms_state == LOW) {
   b4170:	b902      	cbnz	r2, b4174 <loop+0x28>
      // Particle.publish("Motion Sensor Value");
          ms_state = HIGH;
   b4172:	601c      	str	r4, [r3, #0]
         // Particle.publish("Motion Sensor Value", "LOW");
          ms_state = LOW;
      }
  }

  if (button_val == LOW) {
   b4174:	4d28      	ldr	r5, [pc, #160]	; (b4218 <loop+0xcc>)
   b4176:	2800      	cmp	r0, #0
   b4178:	d13d      	bne.n	b41f6 <loop+0xaa>
        button_presses = button_presses + 1;                            // running total of total button presses
   b417a:	4a28      	ldr	r2, [pc, #160]	; (b421c <loop+0xd0>)
   b417c:	6813      	ldr	r3, [r2, #0]


        if (ms_val == HIGH) {                     // motion sensor is activated
   b417e:	2c01      	cmp	r4, #1
        button_presses = button_presses + 1;                            // running total of total button presses
   b4180:	f103 0301 	add.w	r3, r3, #1
   b4184:	6013      	str	r3, [r2, #0]
        if (ms_val == HIGH) {                     // motion sensor is activated
   b4186:	d10b      	bne.n	b41a0 <loop+0x54>
        //if (button_val == HIGH && ms_val == HIGH) {                     // check if button is pressed and motion sensor is activated
            count = count + 1;
   b4188:	682b      	ldr	r3, [r5, #0]
   b418a:	3301      	adds	r3, #1
   b418c:	602b      	str	r3, [r5, #0]
            digitalWrite(led, HIGH);                                    // turn LED on
   b418e:	4b24      	ldr	r3, [pc, #144]	; (b4220 <loop+0xd4>)
   b4190:	4621      	mov	r1, r4
   b4192:	8818      	ldrh	r0, [r3, #0]
   b4194:	f002 f87f 	bl	b6296 <digitalWrite>
        
            if (state == LOW) {                                         // check if state is LOW
   b4198:	4b22      	ldr	r3, [pc, #136]	; (b4224 <loop+0xd8>)
   b419a:	681a      	ldr	r2, [r3, #0]
   b419c:	b902      	cbnz	r2, b41a0 <loop+0x54>
                state = HIGH;                                           // check if state is HIGH
   b419e:	601c      	str	r4, [r3, #0]
    }

  
  else {
      digitalWrite(led, LOW);                       // turn LED OFF
      delay(500);                                   // delay 500 milliseconds 
   b41a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b41a4:	f001 f9f2 	bl	b558c <delay>
  
//   if (Time.second() == 0) {
//        Particle.publish( "Counter", "{ \"People Counted\": \"" + String(count) + "\","+              //Publishes people counted, button presses, and IR sensor triggers to Thingspeak
//        "\"Button Presses\": \"" + String(button_presses) + "\"}", 60, PRIVATE);
//   }
    display.setTextSize(2);
   b41a8:	481f      	ldr	r0, [pc, #124]	; (b4228 <loop+0xdc>)
   b41aa:	2102      	movs	r1, #2
   b41ac:	f000 fd9d 	bl	b4cea <_ZN12Adafruit_GFX11setTextSizeEh>
    display.setTextColor(WHITE);
   b41b0:	481d      	ldr	r0, [pc, #116]	; (b4228 <loop+0xdc>)
   b41b2:	2101      	movs	r1, #1
   b41b4:	f000 fd9e 	bl	b4cf4 <_ZN12Adafruit_GFX12setTextColorEt>
    display.setCursor(1,15);
   b41b8:	220f      	movs	r2, #15
   b41ba:	481b      	ldr	r0, [pc, #108]	; (b4228 <loop+0xdc>)
   b41bc:	2101      	movs	r1, #1
   b41be:	f000 fd91 	bl	b4ce4 <_ZN12Adafruit_GFX9setCursorEss>
    display.printf("Welcome U are\n");
   b41c2:	491a      	ldr	r1, [pc, #104]	; (b422c <loop+0xe0>)
   b41c4:	4818      	ldr	r0, [pc, #96]	; (b4228 <loop+0xdc>)
   b41c6:	f7ff ff7f 	bl	b40c8 <_ZN5Print6printfEPKcz>
    display.printf("vistor=%i\n",count);
   b41ca:	682a      	ldr	r2, [r5, #0]
   b41cc:	4918      	ldr	r1, [pc, #96]	; (b4230 <loop+0xe4>)
   b41ce:	4816      	ldr	r0, [pc, #88]	; (b4228 <loop+0xdc>)
   b41d0:	f7ff ff7a 	bl	b40c8 <_ZN5Print6printfEPKcz>
    display.display();
   b41d4:	4814      	ldr	r0, [pc, #80]	; (b4228 <loop+0xdc>)
   b41d6:	f000 fa97 	bl	b4708 <_ZN16Adafruit_SSD13067displayEv>
    delay(1500); 
   b41da:	f240 50dc 	movw	r0, #1500	; 0x5dc
   b41de:	f001 f9d5 	bl	b558c <delay>
    display.clearDisplay();
}
   b41e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    display.clearDisplay();
   b41e6:	4810      	ldr	r0, [pc, #64]	; (b4228 <loop+0xdc>)
   b41e8:	f000 ba16 	b.w	b4618 <_ZN16Adafruit_SSD130612clearDisplayEv>
      if (ms_state == HIGH) {
   b41ec:	2a01      	cmp	r2, #1
          ms_state = LOW;
   b41ee:	bf04      	itt	eq
   b41f0:	2200      	moveq	r2, #0
   b41f2:	601a      	streq	r2, [r3, #0]
   b41f4:	e7be      	b.n	b4174 <loop+0x28>
      digitalWrite(led, LOW);                       // turn LED OFF
   b41f6:	4b0a      	ldr	r3, [pc, #40]	; (b4220 <loop+0xd4>)
   b41f8:	2100      	movs	r1, #0
   b41fa:	8818      	ldrh	r0, [r3, #0]
   b41fc:	f002 f84b 	bl	b6296 <digitalWrite>
   b4200:	e7ce      	b.n	b41a0 <loop+0x54>
   b4202:	bf00      	nop
   b4204:	2003e1d4 	.word	0x2003e1d4
   b4208:	2003e6b0 	.word	0x2003e6b0
   b420c:	2003e1cc 	.word	0x2003e1cc
   b4210:	2003e680 	.word	0x2003e680
   b4214:	2003e6ac 	.word	0x2003e6ac
   b4218:	2003e684 	.word	0x2003e684
   b421c:	2003e67c 	.word	0x2003e67c
   b4220:	2003e1d0 	.word	0x2003e1d0
   b4224:	2003e6b4 	.word	0x2003e6b4
   b4228:	2003e688 	.word	0x2003e688
   b422c:	000b6805 	.word	0x000b6805
   b4230:	000b6814 	.word	0x000b6814

000b4234 <_GLOBAL__sub_I_WemoClient>:
}
   b4234:	b508      	push	{r3, lr}
 *  Date:     06-FEB-2022
 */

#include "application.h"

TCPClient WemoClient;
   b4236:	4809      	ldr	r0, [pc, #36]	; (b425c <_GLOBAL__sub_I_WemoClient+0x28>)
   b4238:	f001 feda 	bl	b5ff0 <_ZN9TCPClientC1Ev>
Adafruit_SSD1306 display(OLED_RESET);
   b423c:	4808      	ldr	r0, [pc, #32]	; (b4260 <_GLOBAL__sub_I_WemoClient+0x2c>)
   b423e:	2104      	movs	r1, #4
   b4240:	f000 f9d4 	bl	b45ec <_ZN16Adafruit_SSD1306C1Ea>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4244:	4b07      	ldr	r3, [pc, #28]	; (b4264 <_GLOBAL__sub_I_WemoClient+0x30>)
   b4246:	2200      	movs	r2, #0
   b4248:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b424c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4250:	609a      	str	r2, [r3, #8]
}
   b4252:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4256:	2002      	movs	r0, #2
   b4258:	f000 bf18 	b.w	b508c <set_system_mode>
   b425c:	2003e660 	.word	0x2003e660
   b4260:	2003e688 	.word	0x2003e688
   b4264:	2003e654 	.word	0x2003e654

000b4268 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4268:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b426a:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b426c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4270:	2d02      	cmp	r5, #2
   b4272:	d069      	beq.n	b4348 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b4274:	2d03      	cmp	r5, #3
   b4276:	f000 8099 	beq.w	b43ac <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b427a:	2d01      	cmp	r5, #1
   b427c:	d16c      	bne.n	b4358 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b427e:	8905      	ldrh	r5, [r0, #8]
   b4280:	43d2      	mvns	r2, r2
   b4282:	442a      	add	r2, r5
   b4284:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b4286:	2a00      	cmp	r2, #0
   b4288:	db5d      	blt.n	b4346 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b428a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b428e:	4295      	cmp	r5, r2
   b4290:	dd59      	ble.n	b4346 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b4292:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b4294:	bfbe      	ittt	lt
   b4296:	185b      	addlt	r3, r3, r1
   b4298:	b21b      	sxthlt	r3, r3
    __y = 0;
   b429a:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b429c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b42a0:	18cd      	adds	r5, r1, r3
   b42a2:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b42a4:	bfc4      	itt	gt
   b42a6:	1a43      	subgt	r3, r0, r1
   b42a8:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b42aa:	2b00      	cmp	r3, #0
   b42ac:	dd4b      	ble.n	b4346 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b42ae:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b42b2:	f8df c120 	ldr.w	ip, [pc, #288]	; b43d4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b42b6:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b42ba:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b42be:	b2db      	uxtb	r3, r3
  pBuf += x;
   b42c0:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b42c4:	d01a      	beq.n	b42fc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b42c6:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b42ca:	4e40      	ldr	r6, [pc, #256]	; (b43cc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b42cc:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b42ce:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b42d0:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b42d2:	bf3f      	itttt	cc
   b42d4:	eba5 0e03 	subcc.w	lr, r5, r3
   b42d8:	26ff      	movcc	r6, #255	; 0xff
   b42da:	fa46 f60e 	asrcc.w	r6, r6, lr
   b42de:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b42e0:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b42e4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b42e6:	bf0c      	ite	eq
   b42e8:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b42ea:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b42ec:	42ab      	cmp	r3, r5
   b42ee:	f80c 6002 	strb.w	r6, [ip, r2]
   b42f2:	d328      	bcc.n	b4346 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b42f4:	3908      	subs	r1, #8
   b42f6:	440b      	add	r3, r1
   b42f8:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b42fa:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b42fc:	2b07      	cmp	r3, #7
   b42fe:	d919      	bls.n	b4334 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4300:	2c01      	cmp	r4, #1
   b4302:	f04f 35ff 	mov.w	r5, #4294967295
   b4306:	bf18      	it	ne
   b4308:	2500      	movne	r5, #0
   b430a:	b2ed      	uxtb	r5, r5
   b430c:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4310:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b4312:	3a08      	subs	r2, #8
   b4314:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4316:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4318:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b431c:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4320:	d8f7      	bhi.n	b4312 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b4322:	f1a3 0208 	sub.w	r2, r3, #8
   b4326:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b432a:	3201      	adds	r2, #1
   b432c:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4330:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b4334:	b13b      	cbz	r3, b4346 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b4336:	4a26      	ldr	r2, [pc, #152]	; (b43d0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b4338:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b433a:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b433c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b433e:	bf0c      	ite	eq
   b4340:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b4342:	4393      	bicne	r3, r2
   b4344:	7003      	strb	r3, [r0, #0]
}
   b4346:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4348:	8945      	ldrh	r5, [r0, #10]
   b434a:	43d2      	mvns	r2, r2
   b434c:	442a      	add	r2, r5
      x -= (w-1);
   b434e:	18cd      	adds	r5, r1, r3
   b4350:	8901      	ldrh	r1, [r0, #8]
   b4352:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b4354:	b212      	sxth	r2, r2
      x -= (w-1);
   b4356:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b4358:	2a00      	cmp	r2, #0
   b435a:	dbf4      	blt.n	b4346 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b435c:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4360:	4295      	cmp	r5, r2
   b4362:	ddf0      	ble.n	b4346 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b4364:	2900      	cmp	r1, #0
    w += x;
   b4366:	bfbe      	ittt	lt
   b4368:	185b      	addlt	r3, r3, r1
   b436a:	b21b      	sxthlt	r3, r3
    x = 0;
   b436c:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b436e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4372:	18ce      	adds	r6, r1, r3
   b4374:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4376:	bfc4      	itt	gt
   b4378:	1a6b      	subgt	r3, r5, r1
   b437a:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b437c:	2b00      	cmp	r3, #0
   b437e:	dde2      	ble.n	b4346 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4380:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b4382:	2580      	movs	r5, #128	; 0x80
   b4384:	fb10 1105 	smlabb	r1, r0, r5, r1
   b4388:	4812      	ldr	r0, [pc, #72]	; (b43d4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b438a:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b438c:	f002 0007 	and.w	r0, r2, #7
   b4390:	2201      	movs	r2, #1
   b4392:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b4394:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4396:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b4398:	440b      	add	r3, r1
   b439a:	d10c      	bne.n	b43b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b439c:	428b      	cmp	r3, r1
   b439e:	d0d2      	beq.n	b4346 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b43a0:	f811 0b01 	ldrb.w	r0, [r1], #1
   b43a4:	4310      	orrs	r0, r2
   b43a6:	f801 0c01 	strb.w	r0, [r1, #-1]
   b43aa:	e7f7      	b.n	b439c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b43ac:	18cd      	adds	r5, r1, r3
   b43ae:	8941      	ldrh	r1, [r0, #10]
   b43b0:	1b49      	subs	r1, r1, r5
   b43b2:	b209      	sxth	r1, r1
      break;
   b43b4:	e767      	b.n	b4286 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b43b6:	43d2      	mvns	r2, r2
   b43b8:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b43ba:	428b      	cmp	r3, r1
   b43bc:	d0c3      	beq.n	b4346 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b43be:	f811 0b01 	ldrb.w	r0, [r1], #1
   b43c2:	4010      	ands	r0, r2
   b43c4:	f801 0c01 	strb.w	r0, [r1, #-1]
   b43c8:	e7f7      	b.n	b43ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b43ca:	bf00      	nop
   b43cc:	2003e1e0 	.word	0x2003e1e0
   b43d0:	2003e1d8 	.word	0x2003e1d8
   b43d4:	2003e1e8 	.word	0x2003e1e8

000b43d8 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b43d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b43da:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b43dc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b43e0:	2d02      	cmp	r5, #2
   b43e2:	d034      	beq.n	b444e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b43e4:	2d03      	cmp	r5, #3
   b43e6:	f000 809b 	beq.w	b4520 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b43ea:	2d01      	cmp	r5, #1
   b43ec:	d137      	bne.n	b445e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b43ee:	18d5      	adds	r5, r2, r3
   b43f0:	8902      	ldrh	r2, [r0, #8]
   b43f2:	1b52      	subs	r2, r2, r5
   b43f4:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b43f6:	2900      	cmp	r1, #0
   b43f8:	f2c0 8091 	blt.w	b451e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b43fc:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4400:	428d      	cmp	r5, r1
   b4402:	f340 808c 	ble.w	b451e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b4406:	2a00      	cmp	r2, #0
    w += x;
   b4408:	bfbe      	ittt	lt
   b440a:	189b      	addlt	r3, r3, r2
   b440c:	b21b      	sxthlt	r3, r3
    x = 0;
   b440e:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b4410:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4414:	18d6      	adds	r6, r2, r3
   b4416:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4418:	bfc4      	itt	gt
   b441a:	1aab      	subgt	r3, r5, r2
   b441c:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b441e:	2b00      	cmp	r3, #0
   b4420:	dd7d      	ble.n	b451e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4422:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b4424:	2580      	movs	r5, #128	; 0x80
   b4426:	fb10 2205 	smlabb	r2, r0, r5, r2
   b442a:	4845      	ldr	r0, [pc, #276]	; (b4540 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b442c:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b442e:	f001 0007 	and.w	r0, r1, #7
   b4432:	2101      	movs	r1, #1
   b4434:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b4436:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4438:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b443a:	4413      	add	r3, r2
   b443c:	d175      	bne.n	b452a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b443e:	429a      	cmp	r2, r3
   b4440:	d06d      	beq.n	b451e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4442:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4446:	4308      	orrs	r0, r1
   b4448:	f802 0c01 	strb.w	r0, [r2, #-1]
   b444c:	e7f7      	b.n	b443e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b444e:	8905      	ldrh	r5, [r0, #8]
   b4450:	43c9      	mvns	r1, r1
   b4452:	4429      	add	r1, r5
      y -= (h-1);
   b4454:	18d5      	adds	r5, r2, r3
   b4456:	8942      	ldrh	r2, [r0, #10]
   b4458:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b445a:	b209      	sxth	r1, r1
      y -= (h-1);
   b445c:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b445e:	2900      	cmp	r1, #0
   b4460:	db5d      	blt.n	b451e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4462:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4466:	428d      	cmp	r5, r1
   b4468:	dd59      	ble.n	b451e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b446a:	2a00      	cmp	r2, #0
    __h += __y;
   b446c:	bfbe      	ittt	lt
   b446e:	189b      	addlt	r3, r3, r2
   b4470:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4472:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b4474:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4478:	18d5      	adds	r5, r2, r3
   b447a:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b447c:	bfc4      	itt	gt
   b447e:	1a83      	subgt	r3, r0, r2
   b4480:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b4482:	2b00      	cmp	r3, #0
   b4484:	dd4b      	ble.n	b451e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b4486:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b448a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b4540 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b448e:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b4492:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b4496:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4498:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b449c:	d01a      	beq.n	b44d4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b449e:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b44a2:	4e28      	ldr	r6, [pc, #160]	; (b4544 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b44a4:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b44a6:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b44a8:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b44aa:	bf3f      	itttt	cc
   b44ac:	eba5 0e03 	subcc.w	lr, r5, r3
   b44b0:	26ff      	movcc	r6, #255	; 0xff
   b44b2:	fa46 f60e 	asrcc.w	r6, r6, lr
   b44b6:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b44b8:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b44bc:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b44be:	bf0c      	ite	eq
   b44c0:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b44c2:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b44c4:	42ab      	cmp	r3, r5
   b44c6:	f80c 6001 	strb.w	r6, [ip, r1]
   b44ca:	d328      	bcc.n	b451e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b44cc:	3a08      	subs	r2, #8
   b44ce:	4413      	add	r3, r2
   b44d0:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b44d2:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b44d4:	2b07      	cmp	r3, #7
   b44d6:	d919      	bls.n	b450c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b44d8:	2c01      	cmp	r4, #1
   b44da:	f04f 35ff 	mov.w	r5, #4294967295
   b44de:	bf18      	it	ne
   b44e0:	2500      	movne	r5, #0
   b44e2:	b2ed      	uxtb	r5, r5
   b44e4:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b44e8:	461a      	mov	r2, r3
      h -= 8;
   b44ea:	3a08      	subs	r2, #8
   b44ec:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b44ee:	2a07      	cmp	r2, #7
      *pBuf = val;
   b44f0:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b44f4:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b44f8:	d8f7      	bhi.n	b44ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b44fa:	f1a3 0208 	sub.w	r2, r3, #8
   b44fe:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4502:	3201      	adds	r2, #1
   b4504:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4508:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b450c:	b13b      	cbz	r3, b451e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b450e:	4a0e      	ldr	r2, [pc, #56]	; (b4548 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b4510:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b4512:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4514:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4516:	bf0c      	ite	eq
   b4518:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b451a:	4393      	bicne	r3, r2
   b451c:	7003      	strb	r3, [r0, #0]
}
   b451e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4520:	8945      	ldrh	r5, [r0, #10]
   b4522:	43c9      	mvns	r1, r1
   b4524:	4429      	add	r1, r5
   b4526:	b209      	sxth	r1, r1
      break;
   b4528:	e765      	b.n	b43f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b452a:	43c9      	mvns	r1, r1
   b452c:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b452e:	429a      	cmp	r2, r3
   b4530:	d0f5      	beq.n	b451e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4532:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4536:	4008      	ands	r0, r1
   b4538:	f802 0c01 	strb.w	r0, [r2, #-1]
   b453c:	e7f7      	b.n	b452e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b453e:	bf00      	nop
   b4540:	2003e1e8 	.word	0x2003e1e8
   b4544:	2003e1e0 	.word	0x2003e1e0
   b4548:	2003e1d8 	.word	0x2003e1d8

000b454c <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b454c:	4770      	bx	lr
	...

000b4550 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4552:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4554:	4606      	mov	r6, r0
   b4556:	4614      	mov	r4, r2
   b4558:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b455a:	db2d      	blt.n	b45b8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b455c:	f000 fbcf 	bl	b4cfe <_ZN12Adafruit_GFX5widthEv>
   b4560:	42a8      	cmp	r0, r5
   b4562:	dd29      	ble.n	b45b8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4564:	2c00      	cmp	r4, #0
   b4566:	db27      	blt.n	b45b8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4568:	4630      	mov	r0, r6
   b456a:	f000 fbcb 	bl	b4d04 <_ZN12Adafruit_GFX6heightEv>
   b456e:	42a0      	cmp	r0, r4
   b4570:	dd22      	ble.n	b45b8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b4572:	4630      	mov	r0, r6
   b4574:	f000 fbc1 	bl	b4cfa <_ZN12Adafruit_GFX11getRotationEv>
   b4578:	2802      	cmp	r0, #2
   b457a:	d01e      	beq.n	b45ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b457c:	2803      	cmp	r0, #3
   b457e:	d025      	beq.n	b45cc <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b4580:	2801      	cmp	r0, #1
   b4582:	d104      	bne.n	b458e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b4584:	8933      	ldrh	r3, [r6, #8]
   b4586:	43e2      	mvns	r2, r4
   b4588:	441a      	add	r2, r3
    break;
   b458a:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b458c:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b458e:	2c00      	cmp	r4, #0
   b4590:	4622      	mov	r2, r4
   b4592:	bfb8      	it	lt
   b4594:	1de2      	addlt	r2, r4, #7
   b4596:	10d2      	asrs	r2, r2, #3
   b4598:	2180      	movs	r1, #128	; 0x80
   b459a:	fb12 5501 	smlabb	r5, r2, r1, r5
   b459e:	490e      	ldr	r1, [pc, #56]	; (b45d8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b45a0:	2201      	movs	r2, #1
   b45a2:	f004 0407 	and.w	r4, r4, #7
   b45a6:	574b      	ldrsb	r3, [r1, r5]
   b45a8:	fa02 f404 	lsl.w	r4, r2, r4
   b45ac:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b45ae:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b45b0:	bf0c      	ite	eq
   b45b2:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b45b4:	43a3      	bicne	r3, r4
   b45b6:	554b      	strb	r3, [r1, r5]
}
   b45b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b45ba:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b45bc:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b45be:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b45c0:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b45c2:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b45c4:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b45c6:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b45c8:	b224      	sxth	r4, r4
    break;
   b45ca:	e7e0      	b.n	b458e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b45cc:	8973      	ldrh	r3, [r6, #10]
   b45ce:	3b01      	subs	r3, #1
   b45d0:	1b5b      	subs	r3, r3, r5
    break;
   b45d2:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b45d4:	b21c      	sxth	r4, r3
    break;
   b45d6:	e7da      	b.n	b458e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b45d8:	2003e1e8 	.word	0x2003e1e8

000b45dc <_ZN16Adafruit_SSD1306D0Ev>:
   b45dc:	b510      	push	{r4, lr}
   b45de:	2124      	movs	r1, #36	; 0x24
   b45e0:	4604      	mov	r4, r0
   b45e2:	f7ff fd5a 	bl	b409a <_ZdlPvj>
   b45e6:	4620      	mov	r0, r4
   b45e8:	bd10      	pop	{r4, pc}
	...

000b45ec <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b45ec:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b45ee:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b45f0:	4604      	mov	r4, r0
   b45f2:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b45f4:	2180      	movs	r1, #128	; 0x80
   b45f6:	f000 faa7 	bl	b4b48 <_ZN12Adafruit_GFXC1Ess>
   b45fa:	4b06      	ldr	r3, [pc, #24]	; (b4614 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b45fc:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b45fe:	23ff      	movs	r3, #255	; 0xff
   b4600:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b4604:	7763      	strb	r3, [r4, #29]
   b4606:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b460a:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b460c:	f884 5020 	strb.w	r5, [r4, #32]
}
   b4610:	4620      	mov	r0, r4
   b4612:	bd38      	pop	{r3, r4, r5, pc}
   b4614:	000b6828 	.word	0x000b6828

000b4618 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b4618:	4802      	ldr	r0, [pc, #8]	; (b4624 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b461a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b461e:	2100      	movs	r1, #0
   b4620:	f002 b82e 	b.w	b6680 <memset>
   b4624:	2003e1e8 	.word	0x2003e1e8

000b4628 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4628:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b462a:	4c0b      	ldr	r4, [pc, #44]	; (b4658 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b462c:	7821      	ldrb	r1, [r4, #0]
   b462e:	f3bf 8f5b 	dmb	ish
   b4632:	f011 0101 	ands.w	r1, r1, #1
   b4636:	d10b      	bne.n	b4650 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4638:	4620      	mov	r0, r4
   b463a:	9101      	str	r1, [sp, #4]
   b463c:	f7ff fd3c 	bl	b40b8 <__cxa_guard_acquire>
   b4640:	9901      	ldr	r1, [sp, #4]
   b4642:	b128      	cbz	r0, b4650 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4644:	4805      	ldr	r0, [pc, #20]	; (b465c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4646:	f000 fe21 	bl	b528c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b464a:	4620      	mov	r0, r4
   b464c:	f7ff fd39 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b4650:	4802      	ldr	r0, [pc, #8]	; (b465c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4652:	b002      	add	sp, #8
   b4654:	bd10      	pop	{r4, pc}
   b4656:	bf00      	nop
   b4658:	2003e6b8 	.word	0x2003e6b8
   b465c:	2003e6bc 	.word	0x2003e6bc

000b4660 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b4660:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b4662:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b4666:	b143      	cbz	r3, b467a <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b4668:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b466a:	f7ff ffdd 	bl	b4628 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b466e:	9901      	ldr	r1, [sp, #4]
}
   b4670:	b003      	add	sp, #12
   b4672:	f85d eb04 	ldr.w	lr, [sp], #4
   b4676:	f000 bebd 	b.w	b53f4 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b467a:	460b      	mov	r3, r1
   b467c:	7f81      	ldrb	r1, [r0, #30]
   b467e:	7f40      	ldrb	r0, [r0, #29]
   b4680:	2201      	movs	r2, #1
}
   b4682:	b003      	add	sp, #12
   b4684:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4688:	f001 be31 	b.w	b62ee <shiftOut>

000b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b468c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b468e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b4692:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4694:	4604      	mov	r4, r0
   b4696:	460d      	mov	r5, r1
  if (sid != -1)
   b4698:	d01d      	beq.n	b46d6 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b469a:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b469e:	2101      	movs	r1, #1
   b46a0:	b280      	uxth	r0, r0
   b46a2:	f001 fdf8 	bl	b6296 <digitalWrite>
    digitalWrite(dc, LOW);
   b46a6:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b46aa:	2100      	movs	r1, #0
   b46ac:	b280      	uxth	r0, r0
   b46ae:	f001 fdf2 	bl	b6296 <digitalWrite>
    digitalWrite(cs, LOW);
   b46b2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b46b6:	2100      	movs	r1, #0
   b46b8:	b280      	uxth	r0, r0
   b46ba:	f001 fdec 	bl	b6296 <digitalWrite>
    fastSPIwrite(c);
   b46be:	4629      	mov	r1, r5
   b46c0:	4620      	mov	r0, r4
   b46c2:	f7ff ffcd 	bl	b4660 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b46c6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b46ca:	2101      	movs	r1, #1
}
   b46cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b46d0:	b280      	uxth	r0, r0
   b46d2:	f001 bde0 	b.w	b6296 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b46d6:	f001 fe87 	bl	b63e8 <_Z19__fetch_global_Wirev>
   b46da:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b46de:	f001 f9c5 	bl	b5a6c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b46e2:	f001 fe81 	bl	b63e8 <_Z19__fetch_global_Wirev>
   b46e6:	6803      	ldr	r3, [r0, #0]
   b46e8:	2100      	movs	r1, #0
   b46ea:	689b      	ldr	r3, [r3, #8]
   b46ec:	4798      	blx	r3
    Wire.write(c);
   b46ee:	f001 fe7b 	bl	b63e8 <_Z19__fetch_global_Wirev>
   b46f2:	6803      	ldr	r3, [r0, #0]
   b46f4:	4629      	mov	r1, r5
   b46f6:	689b      	ldr	r3, [r3, #8]
   b46f8:	4798      	blx	r3
    Wire.endTransmission();
   b46fa:	f001 fe75 	bl	b63e8 <_Z19__fetch_global_Wirev>
}
   b46fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b4702:	f001 b9ba 	b.w	b5a7a <_ZN7TwoWire15endTransmissionEv>
	...

000b4708 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b4708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b470a:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b470c:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b470e:	f7ff ffbd 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b4712:	2100      	movs	r1, #0
   b4714:	4620      	mov	r0, r4
   b4716:	f7ff ffb9 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b471a:	217f      	movs	r1, #127	; 0x7f
   b471c:	4620      	mov	r0, r4
   b471e:	f7ff ffb5 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b4722:	2122      	movs	r1, #34	; 0x22
   b4724:	4620      	mov	r0, r4
   b4726:	f7ff ffb1 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b472a:	2100      	movs	r1, #0
   b472c:	4620      	mov	r0, r4
   b472e:	f7ff ffad 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b4732:	2107      	movs	r1, #7
   b4734:	4620      	mov	r0, r4
   b4736:	f7ff ffa9 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b473a:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b473e:	4f29      	ldr	r7, [pc, #164]	; (b47e4 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b4740:	3301      	adds	r3, #1
   b4742:	d02a      	beq.n	b479a <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b4744:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4748:	2101      	movs	r1, #1
   b474a:	b280      	uxth	r0, r0
   b474c:	f001 fda3 	bl	b6296 <digitalWrite>
    digitalWrite(dc, HIGH);
   b4750:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b4754:	2101      	movs	r1, #1
   b4756:	b280      	uxth	r0, r0
   b4758:	f001 fd9d 	bl	b6296 <digitalWrite>
    digitalWrite(cs, LOW);
   b475c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4760:	2100      	movs	r1, #0
   b4762:	b280      	uxth	r0, r0
   b4764:	f001 fd97 	bl	b6296 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4768:	2001      	movs	r0, #1
   b476a:	f000 fb0f 	bl	b4d8c <HAL_Delay_Microseconds>
   b476e:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4772:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b4774:	f817 1b01 	ldrb.w	r1, [r7], #1
   b4778:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b477a:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b477c:	f7ff ff70 	bl	b4660 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4780:	2d00      	cmp	r5, #0
   b4782:	d1f6      	bne.n	b4772 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b4784:	2001      	movs	r0, #1
   b4786:	f000 fb01 	bl	b4d8c <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b478a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b478e:	2101      	movs	r1, #1
}
   b4790:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b4794:	b280      	uxth	r0, r0
   b4796:	f001 bd7e 	b.w	b6296 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b479a:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b479c:	f001 fe24 	bl	b63e8 <_Z19__fetch_global_Wirev>
   b47a0:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b47a4:	f001 f962 	bl	b5a6c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b47a8:	f001 fe1e 	bl	b63e8 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b47ac:	6803      	ldr	r3, [r0, #0]
   b47ae:	2140      	movs	r1, #64	; 0x40
   b47b0:	689b      	ldr	r3, [r3, #8]
   b47b2:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b47b4:	f105 0610 	add.w	r6, r5, #16
   b47b8:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b47ba:	f001 fe15 	bl	b63e8 <_Z19__fetch_global_Wirev>
   b47be:	6803      	ldr	r3, [r0, #0]
   b47c0:	5d79      	ldrb	r1, [r7, r5]
   b47c2:	689b      	ldr	r3, [r3, #8]
   b47c4:	4798      	blx	r3
		i++;
   b47c6:	1c6b      	adds	r3, r5, #1
   b47c8:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b47ca:	42ae      	cmp	r6, r5
   b47cc:	d1f5      	bne.n	b47ba <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b47ce:	f001 fe0b 	bl	b63e8 <_Z19__fetch_global_Wirev>
   b47d2:	f001 f952 	bl	b5a7a <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b47d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b47da:	d100      	bne.n	b47de <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b47dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b47de:	4635      	mov	r5, r6
   b47e0:	e7dc      	b.n	b479c <_ZN16Adafruit_SSD13067displayEv+0x94>
   b47e2:	bf00      	nop
   b47e4:	2003e1e8 	.word	0x2003e1e8

000b47e8 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b47e8:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b47ea:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b47ee:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b47f0:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b47f2:	4604      	mov	r4, r0
   b47f4:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b47f6:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b47f8:	f000 80c9 	beq.w	b498e <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b47fc:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b4800:	2101      	movs	r1, #1
   b4802:	b280      	uxth	r0, r0
   b4804:	f001 fd36 	bl	b6274 <pinMode>
    pinMode(cs, OUTPUT);
   b4808:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b480c:	2101      	movs	r1, #1
   b480e:	b280      	uxth	r0, r0
   b4810:	f001 fd30 	bl	b6274 <pinMode>
    if (!hwSPI){
   b4814:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4818:	2b00      	cmp	r3, #0
   b481a:	f000 80a6 	beq.w	b496a <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b481e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4822:	2101      	movs	r1, #1
   b4824:	b280      	uxth	r0, r0
   b4826:	f001 fd36 	bl	b6296 <digitalWrite>
        instance().setBitOrder(order);
   b482a:	f7ff fefd 	bl	b4628 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b482e:	2101      	movs	r1, #1
   b4830:	f000 fd4a 	bl	b52c8 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b4834:	f7ff fef8 	bl	b4628 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4838:	2110      	movs	r1, #16
   b483a:	f000 fdb5 	bl	b53a8 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b483e:	f7ff fef3 	bl	b4628 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4842:	2100      	movs	r1, #0
   b4844:	f000 fd54 	bl	b52f0 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b4848:	f7ff feee 	bl	b4628 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b484c:	f000 fd28 	bl	b52a0 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b4850:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4854:	2101      	movs	r1, #1
   b4856:	b280      	uxth	r0, r0
   b4858:	f001 fd0c 	bl	b6274 <pinMode>
  digitalWrite(rst, HIGH);
   b485c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4860:	2101      	movs	r1, #1
   b4862:	b280      	uxth	r0, r0
   b4864:	f001 fd17 	bl	b6296 <digitalWrite>
  delay(1);
   b4868:	2001      	movs	r0, #1
   b486a:	f000 fe8f 	bl	b558c <delay>
  digitalWrite(rst, LOW);
   b486e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4872:	2100      	movs	r1, #0
   b4874:	b280      	uxth	r0, r0
   b4876:	f001 fd0e 	bl	b6296 <digitalWrite>
  delay(10);
   b487a:	200a      	movs	r0, #10
   b487c:	f000 fe86 	bl	b558c <delay>
  digitalWrite(rst, HIGH);
   b4880:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4884:	2101      	movs	r1, #1
   b4886:	b280      	uxth	r0, r0
   b4888:	f001 fd05 	bl	b6296 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b488c:	4620      	mov	r0, r4
   b488e:	21ae      	movs	r1, #174	; 0xae
   b4890:	f7ff fefc 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b4894:	4620      	mov	r0, r4
   b4896:	21d5      	movs	r1, #213	; 0xd5
   b4898:	f7ff fef8 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b489c:	4620      	mov	r0, r4
   b489e:	2180      	movs	r1, #128	; 0x80
   b48a0:	f7ff fef4 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b48a4:	4620      	mov	r0, r4
   b48a6:	21a8      	movs	r1, #168	; 0xa8
   b48a8:	f7ff fef0 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b48ac:	4620      	mov	r0, r4
   b48ae:	213f      	movs	r1, #63	; 0x3f
   b48b0:	f7ff feec 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b48b4:	4620      	mov	r0, r4
   b48b6:	21d3      	movs	r1, #211	; 0xd3
   b48b8:	f7ff fee8 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b48bc:	4620      	mov	r0, r4
   b48be:	2100      	movs	r1, #0
   b48c0:	f7ff fee4 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b48c4:	4620      	mov	r0, r4
   b48c6:	2140      	movs	r1, #64	; 0x40
   b48c8:	f7ff fee0 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b48cc:	218d      	movs	r1, #141	; 0x8d
   b48ce:	4620      	mov	r0, r4
   b48d0:	f7ff fedc 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b48d4:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b48d6:	bf0c      	ite	eq
   b48d8:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b48da:	2114      	movne	r1, #20
   b48dc:	4620      	mov	r0, r4
   b48de:	f7ff fed5 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b48e2:	4620      	mov	r0, r4
   b48e4:	2120      	movs	r1, #32
   b48e6:	f7ff fed1 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b48ea:	4620      	mov	r0, r4
   b48ec:	2100      	movs	r1, #0
   b48ee:	f7ff fecd 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b48f2:	4620      	mov	r0, r4
   b48f4:	21a1      	movs	r1, #161	; 0xa1
   b48f6:	f7ff fec9 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b48fa:	4620      	mov	r0, r4
   b48fc:	21c8      	movs	r1, #200	; 0xc8
   b48fe:	f7ff fec5 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b4902:	4620      	mov	r0, r4
   b4904:	21da      	movs	r1, #218	; 0xda
   b4906:	f7ff fec1 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b490a:	4620      	mov	r0, r4
   b490c:	2112      	movs	r1, #18
   b490e:	f7ff febd 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b4912:	2181      	movs	r1, #129	; 0x81
   b4914:	4620      	mov	r0, r4
   b4916:	f7ff feb9 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b491a:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b491c:	bf0c      	ite	eq
   b491e:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b4920:	21cf      	movne	r1, #207	; 0xcf
   b4922:	4620      	mov	r0, r4
   b4924:	f7ff feb2 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b4928:	21d9      	movs	r1, #217	; 0xd9
   b492a:	4620      	mov	r0, r4
   b492c:	f7ff feae 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4930:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b4932:	bf0c      	ite	eq
   b4934:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b4936:	21f1      	movne	r1, #241	; 0xf1
   b4938:	4620      	mov	r0, r4
   b493a:	f7ff fea7 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b493e:	4620      	mov	r0, r4
   b4940:	21db      	movs	r1, #219	; 0xdb
   b4942:	f7ff fea3 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b4946:	4620      	mov	r0, r4
   b4948:	2140      	movs	r1, #64	; 0x40
   b494a:	f7ff fe9f 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b494e:	4620      	mov	r0, r4
   b4950:	21a4      	movs	r1, #164	; 0xa4
   b4952:	f7ff fe9b 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b4956:	4620      	mov	r0, r4
   b4958:	21a6      	movs	r1, #166	; 0xa6
   b495a:	f7ff fe97 	bl	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b495e:	4620      	mov	r0, r4
   b4960:	21af      	movs	r1, #175	; 0xaf
}
   b4962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b4966:	f7ff be91 	b.w	b468c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b496a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b496e:	2101      	movs	r1, #1
   b4970:	b280      	uxth	r0, r0
   b4972:	f001 fc7f 	bl	b6274 <pinMode>
    	pinMode(sclk, OUTPUT);
   b4976:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b497a:	2101      	movs	r1, #1
   b497c:	b280      	uxth	r0, r0
   b497e:	f001 fc79 	bl	b6274 <pinMode>
    if (hwSPI){
   b4982:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4986:	2b00      	cmp	r3, #0
   b4988:	f43f af62 	beq.w	b4850 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b498c:	e747      	b.n	b481e <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b498e:	f001 fd2b 	bl	b63e8 <_Z19__fetch_global_Wirev>
   b4992:	f001 f861 	bl	b5a58 <_ZN7TwoWire5beginEv>
   b4996:	e75b      	b.n	b4850 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b4998 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b4998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b499c:	b085      	sub	sp, #20
   b499e:	461f      	mov	r7, r3
   b49a0:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b49a4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b49a8:	eba8 0902 	sub.w	r9, r8, r2
   b49ac:	eba7 0a01 	sub.w	sl, r7, r1
   b49b0:	f1b9 0f00 	cmp.w	r9, #0
   b49b4:	bfb8      	it	lt
   b49b6:	f1c9 0900 	rsblt	r9, r9, #0
   b49ba:	f1ba 0f00 	cmp.w	sl, #0
   b49be:	bfb8      	it	lt
   b49c0:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b49c4:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b49c6:	4683      	mov	fp, r0
   b49c8:	460c      	mov	r4, r1
   b49ca:	4615      	mov	r5, r2
  if (steep) {
   b49cc:	dd04      	ble.n	b49d8 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b49ce:	463a      	mov	r2, r7
    swap(x0, y0);
   b49d0:	462c      	mov	r4, r5
    swap(x1, y1);
   b49d2:	4647      	mov	r7, r8
    swap(x0, y0);
   b49d4:	460d      	mov	r5, r1
    swap(x1, y1);
   b49d6:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b49d8:	42bc      	cmp	r4, r7
   b49da:	dd05      	ble.n	b49e8 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b49dc:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b49de:	4645      	mov	r5, r8
   b49e0:	4690      	mov	r8, r2
  if (x0 > x1) {
   b49e2:	4622      	mov	r2, r4
   b49e4:	463c      	mov	r4, r7
   b49e6:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b49e8:	1b3e      	subs	r6, r7, r4
   b49ea:	b2b2      	uxth	r2, r6
   b49ec:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b49ee:	eba8 0205 	sub.w	r2, r8, r5
   b49f2:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b49f6:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b49fa:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b49fe:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b4a02:	4545      	cmp	r5, r8
   b4a04:	bfb4      	ite	lt
   b4a06:	2201      	movlt	r2, #1
   b4a08:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b4a0c:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b4a0e:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b4a10:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b4a12:	42bc      	cmp	r4, r7
   b4a14:	dc1c      	bgt.n	b4a50 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b4a16:	f8db 2000 	ldr.w	r2, [fp]
   b4a1a:	9303      	str	r3, [sp, #12]
    if (steep) {
   b4a1c:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b4a1e:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b4a22:	bfc7      	ittee	gt
   b4a24:	4629      	movgt	r1, r5
   b4a26:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b4a28:	462a      	movle	r2, r5
   b4a2a:	4621      	movle	r1, r4
   b4a2c:	4658      	mov	r0, fp
   b4a2e:	47c0      	blx	r8
    }
    err -= dy;
   b4a30:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b4a32:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b4a34:	1ab6      	subs	r6, r6, r2
   b4a36:	b2b1      	uxth	r1, r6
   b4a38:	b236      	sxth	r6, r6
    if (err < 0) {
   b4a3a:	2e00      	cmp	r6, #0
   b4a3c:	da05      	bge.n	b4a4a <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b4a3e:	9a02      	ldr	r2, [sp, #8]
   b4a40:	4415      	add	r5, r2
      err += dx;
   b4a42:	9a00      	ldr	r2, [sp, #0]
   b4a44:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b4a46:	b22d      	sxth	r5, r5
      err += dx;
   b4a48:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b4a4a:	3401      	adds	r4, #1
   b4a4c:	b224      	sxth	r4, r4
   b4a4e:	e7e0      	b.n	b4a12 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b4a50:	b005      	add	sp, #20
   b4a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4a56 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b4a56:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4a5a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b4a5e:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b4a60:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b4a64:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b4a68:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b4a6a:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b4a6c:	4616      	mov	r6, r2
   b4a6e:	468a      	mov	sl, r1
   b4a70:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b4a72:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b4a74:	6823      	ldr	r3, [r4, #0]
   b4a76:	f8cd 8000 	str.w	r8, [sp]
   b4a7a:	f109 32ff 	add.w	r2, r9, #4294967295
   b4a7e:	4432      	add	r2, r6
   b4a80:	69df      	ldr	r7, [r3, #28]
   b4a82:	4651      	mov	r1, sl
   b4a84:	462b      	mov	r3, r5
   b4a86:	4620      	mov	r0, r4
   b4a88:	b212      	sxth	r2, r2
   b4a8a:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b4a8c:	6823      	ldr	r3, [r4, #0]
   b4a8e:	f8cd 8000 	str.w	r8, [sp]
   b4a92:	699f      	ldr	r7, [r3, #24]
   b4a94:	4632      	mov	r2, r6
   b4a96:	464b      	mov	r3, r9
   b4a98:	4651      	mov	r1, sl
   b4a9a:	4620      	mov	r0, r4
   b4a9c:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b4a9e:	1e6b      	subs	r3, r5, #1
   b4aa0:	eb03 010a 	add.w	r1, r3, sl
   b4aa4:	6823      	ldr	r3, [r4, #0]
   b4aa6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b4aaa:	699d      	ldr	r5, [r3, #24]
   b4aac:	4632      	mov	r2, r6
   b4aae:	464b      	mov	r3, r9
   b4ab0:	b209      	sxth	r1, r1
   b4ab2:	4620      	mov	r0, r4
   b4ab4:	46ac      	mov	ip, r5
}
   b4ab6:	b002      	add	sp, #8
   b4ab8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b4abc:	4760      	bx	ip

000b4abe <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b4abe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b4ac0:	3b01      	subs	r3, #1
   b4ac2:	4413      	add	r3, r2
   b4ac4:	6804      	ldr	r4, [r0, #0]
   b4ac6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4aca:	9501      	str	r5, [sp, #4]
   b4acc:	b21b      	sxth	r3, r3
   b4ace:	9300      	str	r3, [sp, #0]
   b4ad0:	6964      	ldr	r4, [r4, #20]
   b4ad2:	460b      	mov	r3, r1
   b4ad4:	47a0      	blx	r4
}
   b4ad6:	b003      	add	sp, #12
   b4ad8:	bd30      	pop	{r4, r5, pc}

000b4ada <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b4ada:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b4adc:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4ae0:	6804      	ldr	r4, [r0, #0]
   b4ae2:	e9cd 2500 	strd	r2, r5, [sp]
   b4ae6:	3b01      	subs	r3, #1
   b4ae8:	440b      	add	r3, r1
   b4aea:	6964      	ldr	r4, [r4, #20]
   b4aec:	b21b      	sxth	r3, r3
   b4aee:	47a0      	blx	r4
}
   b4af0:	b003      	add	sp, #12
   b4af2:	bd30      	pop	{r4, r5, pc}

000b4af4 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b4af4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4af8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4afc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4b00:	4605      	mov	r5, r0
   b4b02:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b4b04:	460c      	mov	r4, r1
   b4b06:	18ce      	adds	r6, r1, r3
   b4b08:	42b4      	cmp	r4, r6
   b4b0a:	da0b      	bge.n	b4b24 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b4b0c:	682b      	ldr	r3, [r5, #0]
   b4b0e:	f8cd 8000 	str.w	r8, [sp]
   b4b12:	699f      	ldr	r7, [r3, #24]
   b4b14:	4621      	mov	r1, r4
   b4b16:	464b      	mov	r3, r9
   b4b18:	4652      	mov	r2, sl
   b4b1a:	4628      	mov	r0, r5
   b4b1c:	3401      	adds	r4, #1
   b4b1e:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b4b20:	b224      	sxth	r4, r4
   b4b22:	e7f1      	b.n	b4b08 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b4b24:	b002      	add	sp, #8
   b4b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b4b2a <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b4b2a:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b4b2c:	6802      	ldr	r2, [r0, #0]
   b4b2e:	9101      	str	r1, [sp, #4]
   b4b30:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4b34:	9100      	str	r1, [sp, #0]
   b4b36:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b4b38:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4b3c:	2200      	movs	r2, #0
   b4b3e:	4611      	mov	r1, r2
   b4b40:	47a0      	blx	r4
}
   b4b42:	b002      	add	sp, #8
   b4b44:	bd10      	pop	{r4, pc}

000b4b46 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b4b46:	4770      	bx	lr

000b4b48 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4b48:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b4b4a:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b4b4c:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b4b4e:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   b4b52:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b4b54:	4d05      	ldr	r5, [pc, #20]	; (b4b6c <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b4b56:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b4b58:	2201      	movs	r2, #1
   b4b5a:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b4b5c:	6005      	str	r5, [r0, #0]
   b4b5e:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b4b60:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b4b62:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b4b64:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b4b66:	7682      	strb	r2, [r0, #26]
}
   b4b68:	bd30      	pop	{r4, r5, pc}
   b4b6a:	bf00      	nop
   b4b6c:	000b6d5c 	.word	0x000b6d5c

000b4b70 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b4b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4b74:	ed2d 8b02 	vpush	{d8}
   b4b78:	b08d      	sub	sp, #52	; 0x34
   b4b7a:	4607      	mov	r7, r0
   b4b7c:	9104      	str	r1, [sp, #16]
   b4b7e:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b4b82:	9105      	str	r1, [sp, #20]
   b4b84:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b4b88:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b4b8a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b4b8e:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b4b90:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b4b94:	4281      	cmp	r1, r0
   b4b96:	dd52      	ble.n	b4c3e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b4b98:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b4b9c:	4291      	cmp	r1, r2
   b4b9e:	dd4e      	ble.n	b4c3e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b4ba0:	2106      	movs	r1, #6
   b4ba2:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b4ba6:	2c00      	cmp	r4, #0
   b4ba8:	dd49      	ble.n	b4c3e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b4baa:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b4bae:	2c00      	cmp	r4, #0
   b4bb0:	dd45      	ble.n	b4c3e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b4bb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4bb6:	930b      	str	r3, [sp, #44]	; 0x2c
   b4bb8:	b293      	uxth	r3, r2
   b4bba:	9307      	str	r3, [sp, #28]
   b4bbc:	3308      	adds	r3, #8
   b4bbe:	b29b      	uxth	r3, r3
   b4bc0:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b4bc2:	2400      	movs	r4, #0
   b4bc4:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b4bc6:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b4bc8:	bf1c      	itt	ne
   b4bca:	4b2c      	ldrne	r3, [pc, #176]	; (b4c7c <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b4bcc:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b4bce:	9e07      	ldr	r6, [sp, #28]
   b4bd0:	bf16      	itet	ne
   b4bd2:	191b      	addne	r3, r3, r4
      line = 0x0;
   b4bd4:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b4bd6:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b4bd8:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4bda:	9a04      	ldr	r2, [sp, #16]
   b4bdc:	b2ab      	uxth	r3, r5
   b4bde:	930a      	str	r3, [sp, #40]	; 0x28
   b4be0:	fb04 f305 	mul.w	r3, r4, r5
   b4be4:	fa13 f382 	uxtah	r3, r3, r2
   b4be8:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b4bea:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4bee:	ee08 3a10 	vmov	s16, r3
   b4bf2:	46b0      	mov	r8, r6
   b4bf4:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b4bf8:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b4bfc:	9b03      	ldr	r3, [sp, #12]
   b4bfe:	07db      	lsls	r3, r3, #31
   b4c00:	d52f      	bpl.n	b4c62 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b4c02:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b4c04:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b4c06:	d11f      	bne.n	b4c48 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b4c08:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b4c0c:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b4c0e:	b232      	sxth	r2, r6
   b4c10:	4651      	mov	r1, sl
   b4c12:	4638      	mov	r0, r7
   b4c14:	47d8      	blx	fp
      line >>= 1;
   b4c16:	9b03      	ldr	r3, [sp, #12]
   b4c18:	085b      	lsrs	r3, r3, #1
   b4c1a:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b4c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4c1e:	3601      	adds	r6, #1
   b4c20:	4498      	add	r8, r3
   b4c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4c24:	b2b6      	uxth	r6, r6
   b4c26:	42b3      	cmp	r3, r6
   b4c28:	fa1f f888 	uxth.w	r8, r8
   b4c2c:	d1e6      	bne.n	b4bfc <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b4c2e:	9b08      	ldr	r3, [sp, #32]
   b4c30:	3b01      	subs	r3, #1
   b4c32:	3401      	adds	r4, #1
   b4c34:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4c38:	b264      	sxtb	r4, r4
   b4c3a:	9308      	str	r3, [sp, #32]
   b4c3c:	d1c3      	bne.n	b4bc6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b4c3e:	b00d      	add	sp, #52	; 0x34
   b4c40:	ecbd 8b02 	vpop	{d8}
   b4c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b4c48:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4c4a:	e9cd 9200 	strd	r9, r2, [sp]
   b4c4e:	ee18 1a10 	vmov	r1, s16
   b4c52:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b4c56:	fa0f f288 	sxth.w	r2, r8
   b4c5a:	464b      	mov	r3, r9
   b4c5c:	4638      	mov	r0, r7
   b4c5e:	47d8      	blx	fp
   b4c60:	e7d9      	b.n	b4c16 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b4c62:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b4c66:	4293      	cmp	r3, r2
   b4c68:	d0d5      	beq.n	b4c16 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b4c6a:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b4c6c:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b4c6e:	d103      	bne.n	b4c78 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b4c70:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b4c74:	9b06      	ldr	r3, [sp, #24]
   b4c76:	e7ca      	b.n	b4c0e <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4c78:	9a06      	ldr	r2, [sp, #24]
   b4c7a:	e7e6      	b.n	b4c4a <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b4c7c:	000b6858 	.word	0x000b6858

000b4c80 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b4c80:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b4c82:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b4c84:	b085      	sub	sp, #20
   b4c86:	4604      	mov	r4, r0
  if (c == '\n') {
   b4c88:	d107      	bne.n	b4c9a <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b4c8a:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b4c8c:	8a63      	ldrh	r3, [r4, #18]
   b4c8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b4c92:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b4c94:	2300      	movs	r3, #0
   b4c96:	8223      	strh	r3, [r4, #16]
   b4c98:	e021      	b.n	b4cde <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b4c9a:	290d      	cmp	r1, #13
   b4c9c:	d01f      	beq.n	b4cde <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b4c9e:	7e03      	ldrb	r3, [r0, #24]
   b4ca0:	9302      	str	r3, [sp, #8]
   b4ca2:	8ac3      	ldrh	r3, [r0, #22]
   b4ca4:	9301      	str	r3, [sp, #4]
   b4ca6:	8a83      	ldrh	r3, [r0, #20]
   b4ca8:	9300      	str	r3, [sp, #0]
   b4caa:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b4cae:	460b      	mov	r3, r1
   b4cb0:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b4cb4:	f7ff ff5c 	bl	b4b70 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b4cb8:	7e20      	ldrb	r0, [r4, #24]
   b4cba:	8a23      	ldrh	r3, [r4, #16]
   b4cbc:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b4cc0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b4cc4:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b4cc6:	b21b      	sxth	r3, r3
   b4cc8:	4602      	mov	r2, r0
   b4cca:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b4ccc:	b139      	cbz	r1, b4cde <_ZN12Adafruit_GFX5writeEh+0x5e>
   b4cce:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b4cd2:	f06f 0505 	mvn.w	r5, #5
   b4cd6:	fb05 1100 	mla	r1, r5, r0, r1
   b4cda:	428b      	cmp	r3, r1
   b4cdc:	dcd6      	bgt.n	b4c8c <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b4cde:	2001      	movs	r0, #1
   b4ce0:	b005      	add	sp, #20
   b4ce2:	bd30      	pop	{r4, r5, pc}

000b4ce4 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b4ce4:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b4ce6:	8242      	strh	r2, [r0, #18]
}
   b4ce8:	4770      	bx	lr

000b4cea <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b4cea:	2901      	cmp	r1, #1
   b4cec:	bf38      	it	cc
   b4cee:	2101      	movcc	r1, #1
   b4cf0:	7601      	strb	r1, [r0, #24]
}
   b4cf2:	4770      	bx	lr

000b4cf4 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b4cf4:	82c1      	strh	r1, [r0, #22]
   b4cf6:	8281      	strh	r1, [r0, #20]
}
   b4cf8:	4770      	bx	lr

000b4cfa <_ZN12Adafruit_GFX11getRotationEv>:
}
   b4cfa:	7e40      	ldrb	r0, [r0, #25]
   b4cfc:	4770      	bx	lr

000b4cfe <_ZN12Adafruit_GFX5widthEv>:
}
   b4cfe:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b4d02:	4770      	bx	lr

000b4d04 <_ZN12Adafruit_GFX6heightEv>:
}
   b4d04:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b4d08:	4770      	bx	lr
	...

000b4d0c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4d0c:	b508      	push	{r3, lr}
   b4d0e:	4b02      	ldr	r3, [pc, #8]	; (b4d18 <netdb_freeaddrinfo+0xc>)
   b4d10:	681b      	ldr	r3, [r3, #0]
   b4d12:	689b      	ldr	r3, [r3, #8]
   b4d14:	9301      	str	r3, [sp, #4]
   b4d16:	bd08      	pop	{r3, pc}
   b4d18:	00030268 	.word	0x00030268

000b4d1c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4d1c:	b508      	push	{r3, lr}
   b4d1e:	4b02      	ldr	r3, [pc, #8]	; (b4d28 <netdb_getaddrinfo+0xc>)
   b4d20:	681b      	ldr	r3, [r3, #0]
   b4d22:	68db      	ldr	r3, [r3, #12]
   b4d24:	9301      	str	r3, [sp, #4]
   b4d26:	bd08      	pop	{r3, pc}
   b4d28:	00030268 	.word	0x00030268

000b4d2c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4d2c:	b508      	push	{r3, lr}
   b4d2e:	4b02      	ldr	r3, [pc, #8]	; (b4d38 <HAL_Pin_Mode+0xc>)
   b4d30:	681b      	ldr	r3, [r3, #0]
   b4d32:	689b      	ldr	r3, [r3, #8]
   b4d34:	9301      	str	r3, [sp, #4]
   b4d36:	bd08      	pop	{r3, pc}
   b4d38:	0003022c 	.word	0x0003022c

000b4d3c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4d3c:	b508      	push	{r3, lr}
   b4d3e:	4b02      	ldr	r3, [pc, #8]	; (b4d48 <HAL_Get_Pin_Mode+0xc>)
   b4d40:	681b      	ldr	r3, [r3, #0]
   b4d42:	68db      	ldr	r3, [r3, #12]
   b4d44:	9301      	str	r3, [sp, #4]
   b4d46:	bd08      	pop	{r3, pc}
   b4d48:	0003022c 	.word	0x0003022c

000b4d4c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4d4c:	b508      	push	{r3, lr}
   b4d4e:	4b02      	ldr	r3, [pc, #8]	; (b4d58 <HAL_GPIO_Write+0xc>)
   b4d50:	681b      	ldr	r3, [r3, #0]
   b4d52:	691b      	ldr	r3, [r3, #16]
   b4d54:	9301      	str	r3, [sp, #4]
   b4d56:	bd08      	pop	{r3, pc}
   b4d58:	0003022c 	.word	0x0003022c

000b4d5c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b4d5c:	b508      	push	{r3, lr}
   b4d5e:	4b02      	ldr	r3, [pc, #8]	; (b4d68 <HAL_GPIO_Read+0xc>)
   b4d60:	681b      	ldr	r3, [r3, #0]
   b4d62:	695b      	ldr	r3, [r3, #20]
   b4d64:	9301      	str	r3, [sp, #4]
   b4d66:	bd08      	pop	{r3, pc}
   b4d68:	0003022c 	.word	0x0003022c

000b4d6c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4d6c:	b508      	push	{r3, lr}
   b4d6e:	4b02      	ldr	r3, [pc, #8]	; (b4d78 <if_index_to_name+0xc>)
   b4d70:	681b      	ldr	r3, [r3, #0]
   b4d72:	695b      	ldr	r3, [r3, #20]
   b4d74:	9301      	str	r3, [sp, #4]
   b4d76:	bd08      	pop	{r3, pc}
   b4d78:	0003026c 	.word	0x0003026c

000b4d7c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4d7c:	b508      	push	{r3, lr}
   b4d7e:	4b02      	ldr	r3, [pc, #8]	; (b4d88 <HAL_RNG_GetRandomNumber+0xc>)
   b4d80:	681b      	ldr	r3, [r3, #0]
   b4d82:	685b      	ldr	r3, [r3, #4]
   b4d84:	9301      	str	r3, [sp, #4]
   b4d86:	bd08      	pop	{r3, pc}
   b4d88:	00030218 	.word	0x00030218

000b4d8c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4d8c:	b508      	push	{r3, lr}
   b4d8e:	4b02      	ldr	r3, [pc, #8]	; (b4d98 <HAL_Delay_Microseconds+0xc>)
   b4d90:	681b      	ldr	r3, [r3, #0]
   b4d92:	68db      	ldr	r3, [r3, #12]
   b4d94:	9301      	str	r3, [sp, #4]
   b4d96:	bd08      	pop	{r3, pc}
   b4d98:	00030218 	.word	0x00030218

000b4d9c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4d9c:	b508      	push	{r3, lr}
   b4d9e:	4b02      	ldr	r3, [pc, #8]	; (b4da8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4da0:	681b      	ldr	r3, [r3, #0]
   b4da2:	695b      	ldr	r3, [r3, #20]
   b4da4:	9301      	str	r3, [sp, #4]
   b4da6:	bd08      	pop	{r3, pc}
   b4da8:	00030218 	.word	0x00030218

000b4dac <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4dac:	b508      	push	{r3, lr}
   b4dae:	4b02      	ldr	r3, [pc, #8]	; (b4db8 <os_mutex_recursive_create+0xc>)
   b4db0:	681b      	ldr	r3, [r3, #0]
   b4db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4db4:	9301      	str	r3, [sp, #4]
   b4db6:	bd08      	pop	{r3, pc}
   b4db8:	00030248 	.word	0x00030248

000b4dbc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4dbc:	b508      	push	{r3, lr}
   b4dbe:	4b02      	ldr	r3, [pc, #8]	; (b4dc8 <inet_inet_ntop+0xc>)
   b4dc0:	681b      	ldr	r3, [r3, #0]
   b4dc2:	695b      	ldr	r3, [r3, #20]
   b4dc4:	9301      	str	r3, [sp, #4]
   b4dc6:	bd08      	pop	{r3, pc}
   b4dc8:	00030264 	.word	0x00030264

000b4dcc <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4dcc:	b508      	push	{r3, lr}
   b4dce:	4b02      	ldr	r3, [pc, #8]	; (b4dd8 <inet_htonl+0xc>)
   b4dd0:	681b      	ldr	r3, [r3, #0]
   b4dd2:	6a1b      	ldr	r3, [r3, #32]
   b4dd4:	9301      	str	r3, [sp, #4]
   b4dd6:	bd08      	pop	{r3, pc}
   b4dd8:	00030264 	.word	0x00030264

000b4ddc <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4ddc:	b508      	push	{r3, lr}
   b4dde:	4b02      	ldr	r3, [pc, #8]	; (b4de8 <inet_htons+0xc>)
   b4de0:	681b      	ldr	r3, [r3, #0]
   b4de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4de4:	9301      	str	r3, [sp, #4]
   b4de6:	bd08      	pop	{r3, pc}
   b4de8:	00030264 	.word	0x00030264

000b4dec <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4dec:	b508      	push	{r3, lr}
   b4dee:	4b02      	ldr	r3, [pc, #8]	; (b4df8 <hal_usart_write+0xc>)
   b4df0:	681b      	ldr	r3, [r3, #0]
   b4df2:	68db      	ldr	r3, [r3, #12]
   b4df4:	9301      	str	r3, [sp, #4]
   b4df6:	bd08      	pop	{r3, pc}
   b4df8:	0003023c 	.word	0x0003023c

000b4dfc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4dfc:	b508      	push	{r3, lr}
   b4dfe:	4b02      	ldr	r3, [pc, #8]	; (b4e08 <hal_usart_available+0xc>)
   b4e00:	681b      	ldr	r3, [r3, #0]
   b4e02:	691b      	ldr	r3, [r3, #16]
   b4e04:	9301      	str	r3, [sp, #4]
   b4e06:	bd08      	pop	{r3, pc}
   b4e08:	0003023c 	.word	0x0003023c

000b4e0c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4e0c:	b508      	push	{r3, lr}
   b4e0e:	4b02      	ldr	r3, [pc, #8]	; (b4e18 <hal_usart_read+0xc>)
   b4e10:	681b      	ldr	r3, [r3, #0]
   b4e12:	695b      	ldr	r3, [r3, #20]
   b4e14:	9301      	str	r3, [sp, #4]
   b4e16:	bd08      	pop	{r3, pc}
   b4e18:	0003023c 	.word	0x0003023c

000b4e1c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4e1c:	b508      	push	{r3, lr}
   b4e1e:	4b02      	ldr	r3, [pc, #8]	; (b4e28 <hal_usart_peek+0xc>)
   b4e20:	681b      	ldr	r3, [r3, #0]
   b4e22:	699b      	ldr	r3, [r3, #24]
   b4e24:	9301      	str	r3, [sp, #4]
   b4e26:	bd08      	pop	{r3, pc}
   b4e28:	0003023c 	.word	0x0003023c

000b4e2c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4e2c:	b508      	push	{r3, lr}
   b4e2e:	4b02      	ldr	r3, [pc, #8]	; (b4e38 <hal_usart_flush+0xc>)
   b4e30:	681b      	ldr	r3, [r3, #0]
   b4e32:	69db      	ldr	r3, [r3, #28]
   b4e34:	9301      	str	r3, [sp, #4]
   b4e36:	bd08      	pop	{r3, pc}
   b4e38:	0003023c 	.word	0x0003023c

000b4e3c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4e3c:	b508      	push	{r3, lr}
   b4e3e:	4b02      	ldr	r3, [pc, #8]	; (b4e48 <hal_usart_is_enabled+0xc>)
   b4e40:	681b      	ldr	r3, [r3, #0]
   b4e42:	6a1b      	ldr	r3, [r3, #32]
   b4e44:	9301      	str	r3, [sp, #4]
   b4e46:	bd08      	pop	{r3, pc}
   b4e48:	0003023c 	.word	0x0003023c

000b4e4c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4e4c:	b508      	push	{r3, lr}
   b4e4e:	4b02      	ldr	r3, [pc, #8]	; (b4e58 <hal_usart_available_data_for_write+0xc>)
   b4e50:	681b      	ldr	r3, [r3, #0]
   b4e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4e54:	9301      	str	r3, [sp, #4]
   b4e56:	bd08      	pop	{r3, pc}
   b4e58:	0003023c 	.word	0x0003023c

000b4e5c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4e5c:	b508      	push	{r3, lr}
   b4e5e:	4b02      	ldr	r3, [pc, #8]	; (b4e68 <hal_usart_init_ex+0xc>)
   b4e60:	681b      	ldr	r3, [r3, #0]
   b4e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e64:	9301      	str	r3, [sp, #4]
   b4e66:	bd08      	pop	{r3, pc}
   b4e68:	0003023c 	.word	0x0003023c

000b4e6c <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4e6c:	b508      	push	{r3, lr}
   b4e6e:	4b02      	ldr	r3, [pc, #8]	; (b4e78 <hal_i2c_begin+0xc>)
   b4e70:	681b      	ldr	r3, [r3, #0]
   b4e72:	68db      	ldr	r3, [r3, #12]
   b4e74:	9301      	str	r3, [sp, #4]
   b4e76:	bd08      	pop	{r3, pc}
   b4e78:	00030228 	.word	0x00030228

000b4e7c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4e7c:	b508      	push	{r3, lr}
   b4e7e:	4b02      	ldr	r3, [pc, #8]	; (b4e88 <hal_i2c_begin_transmission+0xc>)
   b4e80:	681b      	ldr	r3, [r3, #0]
   b4e82:	699b      	ldr	r3, [r3, #24]
   b4e84:	9301      	str	r3, [sp, #4]
   b4e86:	bd08      	pop	{r3, pc}
   b4e88:	00030228 	.word	0x00030228

000b4e8c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4e8c:	b508      	push	{r3, lr}
   b4e8e:	4b02      	ldr	r3, [pc, #8]	; (b4e98 <hal_i2c_end_transmission+0xc>)
   b4e90:	681b      	ldr	r3, [r3, #0]
   b4e92:	69db      	ldr	r3, [r3, #28]
   b4e94:	9301      	str	r3, [sp, #4]
   b4e96:	bd08      	pop	{r3, pc}
   b4e98:	00030228 	.word	0x00030228

000b4e9c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4e9c:	b508      	push	{r3, lr}
   b4e9e:	4b02      	ldr	r3, [pc, #8]	; (b4ea8 <hal_i2c_write+0xc>)
   b4ea0:	681b      	ldr	r3, [r3, #0]
   b4ea2:	6a1b      	ldr	r3, [r3, #32]
   b4ea4:	9301      	str	r3, [sp, #4]
   b4ea6:	bd08      	pop	{r3, pc}
   b4ea8:	00030228 	.word	0x00030228

000b4eac <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4eac:	b508      	push	{r3, lr}
   b4eae:	4b02      	ldr	r3, [pc, #8]	; (b4eb8 <hal_i2c_available+0xc>)
   b4eb0:	681b      	ldr	r3, [r3, #0]
   b4eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4eb4:	9301      	str	r3, [sp, #4]
   b4eb6:	bd08      	pop	{r3, pc}
   b4eb8:	00030228 	.word	0x00030228

000b4ebc <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4ebc:	b508      	push	{r3, lr}
   b4ebe:	4b02      	ldr	r3, [pc, #8]	; (b4ec8 <hal_i2c_read+0xc>)
   b4ec0:	681b      	ldr	r3, [r3, #0]
   b4ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4ec4:	9301      	str	r3, [sp, #4]
   b4ec6:	bd08      	pop	{r3, pc}
   b4ec8:	00030228 	.word	0x00030228

000b4ecc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4ecc:	b508      	push	{r3, lr}
   b4ece:	4b02      	ldr	r3, [pc, #8]	; (b4ed8 <hal_i2c_peek+0xc>)
   b4ed0:	681b      	ldr	r3, [r3, #0]
   b4ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ed4:	9301      	str	r3, [sp, #4]
   b4ed6:	bd08      	pop	{r3, pc}
   b4ed8:	00030228 	.word	0x00030228

000b4edc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4edc:	b508      	push	{r3, lr}
   b4ede:	4b02      	ldr	r3, [pc, #8]	; (b4ee8 <hal_i2c_flush+0xc>)
   b4ee0:	681b      	ldr	r3, [r3, #0]
   b4ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4ee4:	9301      	str	r3, [sp, #4]
   b4ee6:	bd08      	pop	{r3, pc}
   b4ee8:	00030228 	.word	0x00030228

000b4eec <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4eec:	b508      	push	{r3, lr}
   b4eee:	4b02      	ldr	r3, [pc, #8]	; (b4ef8 <hal_i2c_is_enabled+0xc>)
   b4ef0:	681b      	ldr	r3, [r3, #0]
   b4ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4ef4:	9301      	str	r3, [sp, #4]
   b4ef6:	bd08      	pop	{r3, pc}
   b4ef8:	00030228 	.word	0x00030228

000b4efc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4efc:	b508      	push	{r3, lr}
   b4efe:	4b02      	ldr	r3, [pc, #8]	; (b4f08 <hal_i2c_init+0xc>)
   b4f00:	681b      	ldr	r3, [r3, #0]
   b4f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f04:	9301      	str	r3, [sp, #4]
   b4f06:	bd08      	pop	{r3, pc}
   b4f08:	00030228 	.word	0x00030228

000b4f0c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4f0c:	b508      	push	{r3, lr}
   b4f0e:	4b02      	ldr	r3, [pc, #8]	; (b4f18 <sock_setsockopt+0xc>)
   b4f10:	681b      	ldr	r3, [r3, #0]
   b4f12:	699b      	ldr	r3, [r3, #24]
   b4f14:	9301      	str	r3, [sp, #4]
   b4f16:	bd08      	pop	{r3, pc}
   b4f18:	00030238 	.word	0x00030238

000b4f1c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4f1c:	b508      	push	{r3, lr}
   b4f1e:	4b02      	ldr	r3, [pc, #8]	; (b4f28 <sock_close+0xc>)
   b4f20:	681b      	ldr	r3, [r3, #0]
   b4f22:	69db      	ldr	r3, [r3, #28]
   b4f24:	9301      	str	r3, [sp, #4]
   b4f26:	bd08      	pop	{r3, pc}
   b4f28:	00030238 	.word	0x00030238

000b4f2c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4f2c:	b508      	push	{r3, lr}
   b4f2e:	4b02      	ldr	r3, [pc, #8]	; (b4f38 <sock_connect+0xc>)
   b4f30:	681b      	ldr	r3, [r3, #0]
   b4f32:	6a1b      	ldr	r3, [r3, #32]
   b4f34:	9301      	str	r3, [sp, #4]
   b4f36:	bd08      	pop	{r3, pc}
   b4f38:	00030238 	.word	0x00030238

000b4f3c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4f3c:	b508      	push	{r3, lr}
   b4f3e:	4b02      	ldr	r3, [pc, #8]	; (b4f48 <sock_recv+0xc>)
   b4f40:	681b      	ldr	r3, [r3, #0]
   b4f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4f44:	9301      	str	r3, [sp, #4]
   b4f46:	bd08      	pop	{r3, pc}
   b4f48:	00030238 	.word	0x00030238

000b4f4c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4f4c:	b508      	push	{r3, lr}
   b4f4e:	4b02      	ldr	r3, [pc, #8]	; (b4f58 <sock_send+0xc>)
   b4f50:	681b      	ldr	r3, [r3, #0]
   b4f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4f54:	9301      	str	r3, [sp, #4]
   b4f56:	bd08      	pop	{r3, pc}
   b4f58:	00030238 	.word	0x00030238

000b4f5c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4f5c:	b508      	push	{r3, lr}
   b4f5e:	4b02      	ldr	r3, [pc, #8]	; (b4f68 <sock_socket+0xc>)
   b4f60:	681b      	ldr	r3, [r3, #0]
   b4f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4f64:	9301      	str	r3, [sp, #4]
   b4f66:	bd08      	pop	{r3, pc}
   b4f68:	00030238 	.word	0x00030238

000b4f6c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b4f6c:	b508      	push	{r3, lr}
   b4f6e:	4b02      	ldr	r3, [pc, #8]	; (b4f78 <hal_spi_begin+0xc>)
   b4f70:	681b      	ldr	r3, [r3, #0]
   b4f72:	681b      	ldr	r3, [r3, #0]
   b4f74:	9301      	str	r3, [sp, #4]
   b4f76:	bd08      	pop	{r3, pc}
   b4f78:	00030230 	.word	0x00030230

000b4f7c <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b4f7c:	b508      	push	{r3, lr}
   b4f7e:	4b02      	ldr	r3, [pc, #8]	; (b4f88 <hal_spi_set_bit_order+0xc>)
   b4f80:	681b      	ldr	r3, [r3, #0]
   b4f82:	689b      	ldr	r3, [r3, #8]
   b4f84:	9301      	str	r3, [sp, #4]
   b4f86:	bd08      	pop	{r3, pc}
   b4f88:	00030230 	.word	0x00030230

000b4f8c <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b4f8c:	b508      	push	{r3, lr}
   b4f8e:	4b02      	ldr	r3, [pc, #8]	; (b4f98 <hal_spi_set_data_mode+0xc>)
   b4f90:	681b      	ldr	r3, [r3, #0]
   b4f92:	68db      	ldr	r3, [r3, #12]
   b4f94:	9301      	str	r3, [sp, #4]
   b4f96:	bd08      	pop	{r3, pc}
   b4f98:	00030230 	.word	0x00030230

000b4f9c <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b4f9c:	b508      	push	{r3, lr}
   b4f9e:	4b02      	ldr	r3, [pc, #8]	; (b4fa8 <hal_spi_set_clock_divider+0xc>)
   b4fa0:	681b      	ldr	r3, [r3, #0]
   b4fa2:	691b      	ldr	r3, [r3, #16]
   b4fa4:	9301      	str	r3, [sp, #4]
   b4fa6:	bd08      	pop	{r3, pc}
   b4fa8:	00030230 	.word	0x00030230

000b4fac <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b4fac:	b508      	push	{r3, lr}
   b4fae:	4b02      	ldr	r3, [pc, #8]	; (b4fb8 <hal_spi_transfer+0xc>)
   b4fb0:	681b      	ldr	r3, [r3, #0]
   b4fb2:	695b      	ldr	r3, [r3, #20]
   b4fb4:	9301      	str	r3, [sp, #4]
   b4fb6:	bd08      	pop	{r3, pc}
   b4fb8:	00030230 	.word	0x00030230

000b4fbc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4fbc:	b508      	push	{r3, lr}
   b4fbe:	4b02      	ldr	r3, [pc, #8]	; (b4fc8 <hal_spi_init+0xc>)
   b4fc0:	681b      	ldr	r3, [r3, #0]
   b4fc2:	69db      	ldr	r3, [r3, #28]
   b4fc4:	9301      	str	r3, [sp, #4]
   b4fc6:	bd08      	pop	{r3, pc}
   b4fc8:	00030230 	.word	0x00030230

000b4fcc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4fcc:	b508      	push	{r3, lr}
   b4fce:	4b02      	ldr	r3, [pc, #8]	; (b4fd8 <hal_spi_is_enabled+0xc>)
   b4fd0:	681b      	ldr	r3, [r3, #0]
   b4fd2:	6a1b      	ldr	r3, [r3, #32]
   b4fd4:	9301      	str	r3, [sp, #4]
   b4fd6:	bd08      	pop	{r3, pc}
   b4fd8:	00030230 	.word	0x00030230

000b4fdc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b4fdc:	b508      	push	{r3, lr}
   b4fde:	4b02      	ldr	r3, [pc, #8]	; (b4fe8 <hal_spi_info+0xc>)
   b4fe0:	681b      	ldr	r3, [r3, #0]
   b4fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4fe4:	9301      	str	r3, [sp, #4]
   b4fe6:	bd08      	pop	{r3, pc}
   b4fe8:	00030230 	.word	0x00030230

000b4fec <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b4fec:	b508      	push	{r3, lr}
   b4fee:	4b02      	ldr	r3, [pc, #8]	; (b4ff8 <hal_spi_acquire+0xc>)
   b4ff0:	681b      	ldr	r3, [r3, #0]
   b4ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ff4:	9301      	str	r3, [sp, #4]
   b4ff6:	bd08      	pop	{r3, pc}
   b4ff8:	00030230 	.word	0x00030230

000b4ffc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b4ffc:	b508      	push	{r3, lr}
   b4ffe:	4b02      	ldr	r3, [pc, #8]	; (b5008 <hal_spi_release+0xc>)
   b5000:	681b      	ldr	r3, [r3, #0]
   b5002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5004:	9301      	str	r3, [sp, #4]
   b5006:	bd08      	pop	{r3, pc}
   b5008:	00030230 	.word	0x00030230

000b500c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b500c:	b508      	push	{r3, lr}
   b500e:	4b02      	ldr	r3, [pc, #8]	; (b5018 <HAL_USB_USART_Init+0xc>)
   b5010:	681b      	ldr	r3, [r3, #0]
   b5012:	681b      	ldr	r3, [r3, #0]
   b5014:	9301      	str	r3, [sp, #4]
   b5016:	bd08      	pop	{r3, pc}
   b5018:	0003024c 	.word	0x0003024c

000b501c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b501c:	b508      	push	{r3, lr}
   b501e:	4b02      	ldr	r3, [pc, #8]	; (b5028 <HAL_USB_USART_Available_Data+0xc>)
   b5020:	681b      	ldr	r3, [r3, #0]
   b5022:	691b      	ldr	r3, [r3, #16]
   b5024:	9301      	str	r3, [sp, #4]
   b5026:	bd08      	pop	{r3, pc}
   b5028:	0003024c 	.word	0x0003024c

000b502c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b502c:	b508      	push	{r3, lr}
   b502e:	4b02      	ldr	r3, [pc, #8]	; (b5038 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5030:	681b      	ldr	r3, [r3, #0]
   b5032:	695b      	ldr	r3, [r3, #20]
   b5034:	9301      	str	r3, [sp, #4]
   b5036:	bd08      	pop	{r3, pc}
   b5038:	0003024c 	.word	0x0003024c

000b503c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b503c:	b508      	push	{r3, lr}
   b503e:	4b02      	ldr	r3, [pc, #8]	; (b5048 <HAL_USB_USART_Receive_Data+0xc>)
   b5040:	681b      	ldr	r3, [r3, #0]
   b5042:	699b      	ldr	r3, [r3, #24]
   b5044:	9301      	str	r3, [sp, #4]
   b5046:	bd08      	pop	{r3, pc}
   b5048:	0003024c 	.word	0x0003024c

000b504c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b504c:	b508      	push	{r3, lr}
   b504e:	4b02      	ldr	r3, [pc, #8]	; (b5058 <HAL_USB_USART_Send_Data+0xc>)
   b5050:	681b      	ldr	r3, [r3, #0]
   b5052:	69db      	ldr	r3, [r3, #28]
   b5054:	9301      	str	r3, [sp, #4]
   b5056:	bd08      	pop	{r3, pc}
   b5058:	0003024c 	.word	0x0003024c

000b505c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b505c:	b508      	push	{r3, lr}
   b505e:	4b02      	ldr	r3, [pc, #8]	; (b5068 <HAL_USB_USART_Flush_Data+0xc>)
   b5060:	681b      	ldr	r3, [r3, #0]
   b5062:	6a1b      	ldr	r3, [r3, #32]
   b5064:	9301      	str	r3, [sp, #4]
   b5066:	bd08      	pop	{r3, pc}
   b5068:	0003024c 	.word	0x0003024c

000b506c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b506c:	b508      	push	{r3, lr}
   b506e:	4b02      	ldr	r3, [pc, #8]	; (b5078 <panic_+0xc>)
   b5070:	681b      	ldr	r3, [r3, #0]
   b5072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5074:	9301      	str	r3, [sp, #4]
   b5076:	bd08      	pop	{r3, pc}
   b5078:	00030260 	.word	0x00030260

000b507c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b507c:	b508      	push	{r3, lr}
   b507e:	4b02      	ldr	r3, [pc, #8]	; (b5088 <log_message+0xc>)
   b5080:	681b      	ldr	r3, [r3, #0]
   b5082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5084:	9301      	str	r3, [sp, #4]
   b5086:	bd08      	pop	{r3, pc}
   b5088:	00030260 	.word	0x00030260

000b508c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b508c:	b508      	push	{r3, lr}
   b508e:	4b02      	ldr	r3, [pc, #8]	; (b5098 <set_system_mode+0xc>)
   b5090:	681b      	ldr	r3, [r3, #0]
   b5092:	685b      	ldr	r3, [r3, #4]
   b5094:	9301      	str	r3, [sp, #4]
   b5096:	bd08      	pop	{r3, pc}
   b5098:	00030220 	.word	0x00030220

000b509c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b509c:	b508      	push	{r3, lr}
   b509e:	4b02      	ldr	r3, [pc, #8]	; (b50a8 <system_delay_ms+0xc>)
   b50a0:	681b      	ldr	r3, [r3, #0]
   b50a2:	695b      	ldr	r3, [r3, #20]
   b50a4:	9301      	str	r3, [sp, #4]
   b50a6:	bd08      	pop	{r3, pc}
   b50a8:	00030220 	.word	0x00030220

000b50ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b50ac:	b508      	push	{r3, lr}
   b50ae:	4b03      	ldr	r3, [pc, #12]	; (b50bc <system_ctrl_set_app_request_handler+0x10>)
   b50b0:	681b      	ldr	r3, [r3, #0]
   b50b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b50b6:	9301      	str	r3, [sp, #4]
   b50b8:	bd08      	pop	{r3, pc}
   b50ba:	0000      	.short	0x0000
   b50bc:	00030220 	.word	0x00030220

000b50c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b50c0:	b508      	push	{r3, lr}
   b50c2:	4b03      	ldr	r3, [pc, #12]	; (b50d0 <system_ctrl_set_result+0x10>)
   b50c4:	681b      	ldr	r3, [r3, #0]
   b50c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b50ca:	9301      	str	r3, [sp, #4]
   b50cc:	bd08      	pop	{r3, pc}
   b50ce:	0000      	.short	0x0000
   b50d0:	00030220 	.word	0x00030220

000b50d4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b50d4:	b508      	push	{r3, lr}
   b50d6:	4b02      	ldr	r3, [pc, #8]	; (b50e0 <network_connect+0xc>)
   b50d8:	681b      	ldr	r3, [r3, #0]
   b50da:	685b      	ldr	r3, [r3, #4]
   b50dc:	9301      	str	r3, [sp, #4]
   b50de:	bd08      	pop	{r3, pc}
   b50e0:	00030240 	.word	0x00030240

000b50e4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b50e4:	b508      	push	{r3, lr}
   b50e6:	4b02      	ldr	r3, [pc, #8]	; (b50f0 <network_connecting+0xc>)
   b50e8:	681b      	ldr	r3, [r3, #0]
   b50ea:	689b      	ldr	r3, [r3, #8]
   b50ec:	9301      	str	r3, [sp, #4]
   b50ee:	bd08      	pop	{r3, pc}
   b50f0:	00030240 	.word	0x00030240

000b50f4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b50f4:	b508      	push	{r3, lr}
   b50f6:	4b02      	ldr	r3, [pc, #8]	; (b5100 <network_disconnect+0xc>)
   b50f8:	681b      	ldr	r3, [r3, #0]
   b50fa:	68db      	ldr	r3, [r3, #12]
   b50fc:	9301      	str	r3, [sp, #4]
   b50fe:	bd08      	pop	{r3, pc}
   b5100:	00030240 	.word	0x00030240

000b5104 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5104:	b508      	push	{r3, lr}
   b5106:	4b02      	ldr	r3, [pc, #8]	; (b5110 <network_ready+0xc>)
   b5108:	681b      	ldr	r3, [r3, #0]
   b510a:	691b      	ldr	r3, [r3, #16]
   b510c:	9301      	str	r3, [sp, #4]
   b510e:	bd08      	pop	{r3, pc}
   b5110:	00030240 	.word	0x00030240

000b5114 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5114:	b508      	push	{r3, lr}
   b5116:	4b02      	ldr	r3, [pc, #8]	; (b5120 <network_on+0xc>)
   b5118:	681b      	ldr	r3, [r3, #0]
   b511a:	695b      	ldr	r3, [r3, #20]
   b511c:	9301      	str	r3, [sp, #4]
   b511e:	bd08      	pop	{r3, pc}
   b5120:	00030240 	.word	0x00030240

000b5124 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5124:	b508      	push	{r3, lr}
   b5126:	4b02      	ldr	r3, [pc, #8]	; (b5130 <network_off+0xc>)
   b5128:	681b      	ldr	r3, [r3, #0]
   b512a:	699b      	ldr	r3, [r3, #24]
   b512c:	9301      	str	r3, [sp, #4]
   b512e:	bd08      	pop	{r3, pc}
   b5130:	00030240 	.word	0x00030240

000b5134 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5134:	b508      	push	{r3, lr}
   b5136:	4b02      	ldr	r3, [pc, #8]	; (b5140 <network_listen+0xc>)
   b5138:	681b      	ldr	r3, [r3, #0]
   b513a:	69db      	ldr	r3, [r3, #28]
   b513c:	9301      	str	r3, [sp, #4]
   b513e:	bd08      	pop	{r3, pc}
   b5140:	00030240 	.word	0x00030240

000b5144 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5144:	b508      	push	{r3, lr}
   b5146:	4b02      	ldr	r3, [pc, #8]	; (b5150 <network_listening+0xc>)
   b5148:	681b      	ldr	r3, [r3, #0]
   b514a:	6a1b      	ldr	r3, [r3, #32]
   b514c:	9301      	str	r3, [sp, #4]
   b514e:	bd08      	pop	{r3, pc}
   b5150:	00030240 	.word	0x00030240

000b5154 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5154:	b508      	push	{r3, lr}
   b5156:	4b02      	ldr	r3, [pc, #8]	; (b5160 <network_set_listen_timeout+0xc>)
   b5158:	681b      	ldr	r3, [r3, #0]
   b515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b515c:	9301      	str	r3, [sp, #4]
   b515e:	bd08      	pop	{r3, pc}
   b5160:	00030240 	.word	0x00030240

000b5164 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5164:	b508      	push	{r3, lr}
   b5166:	4b02      	ldr	r3, [pc, #8]	; (b5170 <network_get_listen_timeout+0xc>)
   b5168:	681b      	ldr	r3, [r3, #0]
   b516a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b516c:	9301      	str	r3, [sp, #4]
   b516e:	bd08      	pop	{r3, pc}
   b5170:	00030240 	.word	0x00030240

000b5174 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5174:	b508      	push	{r3, lr}
   b5176:	4b02      	ldr	r3, [pc, #8]	; (b5180 <network_is_on+0xc>)
   b5178:	681b      	ldr	r3, [r3, #0]
   b517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b517c:	9301      	str	r3, [sp, #4]
   b517e:	bd08      	pop	{r3, pc}
   b5180:	00030240 	.word	0x00030240

000b5184 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5184:	b508      	push	{r3, lr}
   b5186:	4b02      	ldr	r3, [pc, #8]	; (b5190 <network_is_off+0xc>)
   b5188:	681b      	ldr	r3, [r3, #0]
   b518a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b518c:	9301      	str	r3, [sp, #4]
   b518e:	bd08      	pop	{r3, pc}
   b5190:	00030240 	.word	0x00030240

000b5194 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5194:	b508      	push	{r3, lr}
   b5196:	4b02      	ldr	r3, [pc, #8]	; (b51a0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5198:	681b      	ldr	r3, [r3, #0]
   b519a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b519c:	9301      	str	r3, [sp, #4]
   b519e:	bd08      	pop	{r3, pc}
   b51a0:	00030244 	.word	0x00030244

000b51a4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b51a4:	b508      	push	{r3, lr}
   b51a6:	4b02      	ldr	r3, [pc, #8]	; (b51b0 <malloc+0xc>)
   b51a8:	681b      	ldr	r3, [r3, #0]
   b51aa:	681b      	ldr	r3, [r3, #0]
   b51ac:	9301      	str	r3, [sp, #4]
   b51ae:	bd08      	pop	{r3, pc}
   b51b0:	0003021c 	.word	0x0003021c

000b51b4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b51b4:	b508      	push	{r3, lr}
   b51b6:	4b02      	ldr	r3, [pc, #8]	; (b51c0 <free+0xc>)
   b51b8:	681b      	ldr	r3, [r3, #0]
   b51ba:	685b      	ldr	r3, [r3, #4]
   b51bc:	9301      	str	r3, [sp, #4]
   b51be:	bd08      	pop	{r3, pc}
   b51c0:	0003021c 	.word	0x0003021c

000b51c4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b51c4:	b508      	push	{r3, lr}
   b51c6:	4b02      	ldr	r3, [pc, #8]	; (b51d0 <vsnprintf+0xc>)
   b51c8:	681b      	ldr	r3, [r3, #0]
   b51ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b51cc:	9301      	str	r3, [sp, #4]
   b51ce:	bd08      	pop	{r3, pc}
   b51d0:	0003021c 	.word	0x0003021c

000b51d4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b51d4:	b508      	push	{r3, lr}
   b51d6:	4b02      	ldr	r3, [pc, #8]	; (b51e0 <__errno+0xc>)
   b51d8:	681b      	ldr	r3, [r3, #0]
   b51da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b51dc:	9301      	str	r3, [sp, #4]
   b51de:	bd08      	pop	{r3, pc}
   b51e0:	0003021c 	.word	0x0003021c

000b51e4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b51e4:	b508      	push	{r3, lr}
   b51e6:	4b02      	ldr	r3, [pc, #8]	; (b51f0 <__assert_func+0xc>)
   b51e8:	681b      	ldr	r3, [r3, #0]
   b51ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b51ec:	9301      	str	r3, [sp, #4]
   b51ee:	bd08      	pop	{r3, pc}
   b51f0:	0003021c 	.word	0x0003021c

000b51f4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b51f4:	b508      	push	{r3, lr}
   b51f6:	4b02      	ldr	r3, [pc, #8]	; (b5200 <newlib_impure_ptr_callback+0xc>)
   b51f8:	681b      	ldr	r3, [r3, #0]
   b51fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b51fc:	9301      	str	r3, [sp, #4]
   b51fe:	bd08      	pop	{r3, pc}
   b5200:	0003021c 	.word	0x0003021c

000b5204 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5204:	2200      	movs	r2, #0
   b5206:	6840      	ldr	r0, [r0, #4]
   b5208:	4611      	mov	r1, r2
   b520a:	f7ff bf9b 	b.w	b5144 <network_listening>

000b520e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b520e:	2200      	movs	r2, #0
   b5210:	6840      	ldr	r0, [r0, #4]
   b5212:	4611      	mov	r1, r2
   b5214:	f7ff bfa6 	b.w	b5164 <network_get_listen_timeout>

000b5218 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5218:	6840      	ldr	r0, [r0, #4]
   b521a:	2200      	movs	r2, #0
   b521c:	f7ff bf9a 	b.w	b5154 <network_set_listen_timeout>

000b5220 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5220:	6840      	ldr	r0, [r0, #4]
   b5222:	2200      	movs	r2, #0
   b5224:	f081 0101 	eor.w	r1, r1, #1
   b5228:	f7ff bf84 	b.w	b5134 <network_listen>

000b522c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b522c:	2300      	movs	r3, #0
   b522e:	6840      	ldr	r0, [r0, #4]
   b5230:	461a      	mov	r2, r3
   b5232:	4619      	mov	r1, r3
   b5234:	f7ff bf76 	b.w	b5124 <network_off>

000b5238 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5238:	2300      	movs	r3, #0
   b523a:	6840      	ldr	r0, [r0, #4]
   b523c:	461a      	mov	r2, r3
   b523e:	4619      	mov	r1, r3
   b5240:	f7ff bf68 	b.w	b5114 <network_on>

000b5244 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5244:	2200      	movs	r2, #0
   b5246:	6840      	ldr	r0, [r0, #4]
   b5248:	4611      	mov	r1, r2
   b524a:	f7ff bf5b 	b.w	b5104 <network_ready>

000b524e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b524e:	2200      	movs	r2, #0
   b5250:	6840      	ldr	r0, [r0, #4]
   b5252:	4611      	mov	r1, r2
   b5254:	f7ff bf46 	b.w	b50e4 <network_connecting>

000b5258 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5258:	6840      	ldr	r0, [r0, #4]
   b525a:	2200      	movs	r2, #0
   b525c:	2102      	movs	r1, #2
   b525e:	f7ff bf49 	b.w	b50f4 <network_disconnect>

000b5262 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5262:	2300      	movs	r3, #0
   b5264:	6840      	ldr	r0, [r0, #4]
   b5266:	461a      	mov	r2, r3
   b5268:	f7ff bf34 	b.w	b50d4 <network_connect>

000b526c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b526c:	4b02      	ldr	r3, [pc, #8]	; (b5278 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b526e:	2203      	movs	r2, #3
   b5270:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5272:	4a02      	ldr	r2, [pc, #8]	; (b527c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5274:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5276:	4770      	bx	lr
   b5278:	2003e6c4 	.word	0x2003e6c4
   b527c:	000b6d94 	.word	0x000b6d94

000b5280 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5280:	2100      	movs	r1, #0
   b5282:	f7ff bebb 	b.w	b4ffc <hal_spi_release>

000b5286 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5286:	2100      	movs	r1, #0
   b5288:	f7ff beb0 	b.w	b4fec <hal_spi_acquire>

000b528c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b528c:	b510      	push	{r4, lr}
   b528e:	4604      	mov	r4, r0
   b5290:	4608      	mov	r0, r1
{
    _spi = spi;
   b5292:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5294:	f7ff fe92 	bl	b4fbc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5298:	2300      	movs	r3, #0
   b529a:	6063      	str	r3, [r4, #4]
}
   b529c:	4620      	mov	r0, r4
   b529e:	bd10      	pop	{r4, pc}

000b52a0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b52a0:	b513      	push	{r0, r1, r4, lr}
   b52a2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b52a4:	7800      	ldrb	r0, [r0, #0]
   b52a6:	f7ff ffee 	bl	b5286 <_ZN8SPIClass4lockEv.isra.0>
   b52aa:	b958      	cbnz	r0, b52c4 <_ZN8SPIClass5beginEv+0x24>
   b52ac:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b52ae:	9001      	str	r0, [sp, #4]
   b52b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b52b4:	f7ff fe5a 	bl	b4f6c <hal_spi_begin>
        unlock();
   b52b8:	9801      	ldr	r0, [sp, #4]
    }
}
   b52ba:	b002      	add	sp, #8
   b52bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b52c0:	f7ff bfde 	b.w	b5280 <_ZN8SPIClass6unlockEv.isra.0>
   b52c4:	b002      	add	sp, #8
   b52c6:	bd10      	pop	{r4, pc}

000b52c8 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b52c8:	b513      	push	{r0, r1, r4, lr}
   b52ca:	4604      	mov	r4, r0
    if (!lock())
   b52cc:	7800      	ldrb	r0, [r0, #0]
{
   b52ce:	9101      	str	r1, [sp, #4]
    if (!lock())
   b52d0:	f7ff ffd9 	bl	b5286 <_ZN8SPIClass4lockEv.isra.0>
   b52d4:	9901      	ldr	r1, [sp, #4]
   b52d6:	b948      	cbnz	r0, b52ec <_ZN8SPIClass11setBitOrderEh+0x24>
   b52d8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b52da:	9001      	str	r0, [sp, #4]
   b52dc:	f7ff fe4e 	bl	b4f7c <hal_spi_set_bit_order>
        unlock();
   b52e0:	9801      	ldr	r0, [sp, #4]
    }
}
   b52e2:	b002      	add	sp, #8
   b52e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b52e8:	f7ff bfca 	b.w	b5280 <_ZN8SPIClass6unlockEv.isra.0>
   b52ec:	b002      	add	sp, #8
   b52ee:	bd10      	pop	{r4, pc}

000b52f0 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b52f0:	b513      	push	{r0, r1, r4, lr}
   b52f2:	4604      	mov	r4, r0
    if (!lock())
   b52f4:	7800      	ldrb	r0, [r0, #0]
{
   b52f6:	9101      	str	r1, [sp, #4]
    if (!lock())
   b52f8:	f7ff ffc5 	bl	b5286 <_ZN8SPIClass4lockEv.isra.0>
   b52fc:	9901      	ldr	r1, [sp, #4]
   b52fe:	b948      	cbnz	r0, b5314 <_ZN8SPIClass11setDataModeEh+0x24>
   b5300:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b5302:	9001      	str	r0, [sp, #4]
   b5304:	f7ff fe42 	bl	b4f8c <hal_spi_set_data_mode>
        unlock();
   b5308:	9801      	ldr	r0, [sp, #4]
    }
}
   b530a:	b002      	add	sp, #8
   b530c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5310:	f7ff bfb6 	b.w	b5280 <_ZN8SPIClass6unlockEv.isra.0>
   b5314:	b002      	add	sp, #8
   b5316:	bd10      	pop	{r4, pc}

000b5318 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5318:	0840      	lsrs	r0, r0, #1
{
   b531a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b531c:	6018      	str	r0, [r3, #0]
   b531e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5320:	6818      	ldr	r0, [r3, #0]
   b5322:	4288      	cmp	r0, r1
   b5324:	b2e5      	uxtb	r5, r4
   b5326:	d906      	bls.n	b5336 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5328:	3401      	adds	r4, #1
   b532a:	2c08      	cmp	r4, #8
   b532c:	d002      	beq.n	b5334 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b532e:	0840      	lsrs	r0, r0, #1
   b5330:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5332:	e7f5      	b.n	b5320 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5334:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5336:	4b02      	ldr	r3, [pc, #8]	; (b5340 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5338:	5d5b      	ldrb	r3, [r3, r5]
   b533a:	7013      	strb	r3, [r2, #0]
}
   b533c:	bd30      	pop	{r4, r5, pc}
   b533e:	bf00      	nop
   b5340:	000b6dc8 	.word	0x000b6dc8

000b5344 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b5344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5348:	b088      	sub	sp, #32
    unsigned clock = 0;
   b534a:	2300      	movs	r3, #0
{
   b534c:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b534e:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b5350:	9302      	str	r3, [sp, #8]
{
   b5352:	460e      	mov	r6, r1
   b5354:	4617      	mov	r7, r2
    if (!lock())
   b5356:	f7ff ff96 	bl	b5286 <_ZN8SPIClass4lockEv.isra.0>
   b535a:	4605      	mov	r5, r0
   b535c:	bb00      	cbnz	r0, b53a0 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b535e:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5362:	4601      	mov	r1, r0
   b5364:	2214      	movs	r2, #20
   b5366:	a803      	add	r0, sp, #12
   b5368:	f001 f98a 	bl	b6680 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b536c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b536e:	462a      	mov	r2, r5
   b5370:	a903      	add	r1, sp, #12
   b5372:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b5374:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b5378:	f7ff fe30 	bl	b4fdc <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b537c:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b537e:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b5382:	ab02      	add	r3, sp, #8
   b5384:	f10d 0207 	add.w	r2, sp, #7
   b5388:	fb07 f106 	mul.w	r1, r7, r6
   b538c:	f7ff ffc4 	bl	b5318 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b5390:	7820      	ldrb	r0, [r4, #0]
   b5392:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b5396:	f7ff fe01 	bl	b4f9c <hal_spi_set_clock_divider>
        unlock();
   b539a:	7820      	ldrb	r0, [r4, #0]
   b539c:	f7ff ff70 	bl	b5280 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b53a0:	9802      	ldr	r0, [sp, #8]
   b53a2:	b008      	add	sp, #32
   b53a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b53a8 <_ZN8SPIClass15setClockDividerEh>:
{
   b53a8:	b538      	push	{r3, r4, r5, lr}
   b53aa:	4604      	mov	r4, r0
    if (!lock())
   b53ac:	7800      	ldrb	r0, [r0, #0]
{
   b53ae:	460d      	mov	r5, r1
    if (!lock())
   b53b0:	f7ff ff69 	bl	b5286 <_ZN8SPIClass4lockEv.isra.0>
   b53b4:	4603      	mov	r3, r0
   b53b6:	b9d0      	cbnz	r0, b53ee <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b53b8:	6861      	ldr	r1, [r4, #4]
   b53ba:	b199      	cbz	r1, b53e4 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b53bc:	4a0c      	ldr	r2, [pc, #48]	; (b53f0 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b53be:	f812 0b01 	ldrb.w	r0, [r2], #1
   b53c2:	4285      	cmp	r5, r0
   b53c4:	d002      	beq.n	b53cc <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b53c6:	3301      	adds	r3, #1
   b53c8:	2b08      	cmp	r3, #8
   b53ca:	d1f8      	bne.n	b53be <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b53cc:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b53ce:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b53d0:	2201      	movs	r2, #1
   b53d2:	40d9      	lsrs	r1, r3
   b53d4:	4620      	mov	r0, r4
   b53d6:	f7ff ffb5 	bl	b5344 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b53da:	7820      	ldrb	r0, [r4, #0]
}
   b53dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b53e0:	f7ff bf4e 	b.w	b5280 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b53e4:	7820      	ldrb	r0, [r4, #0]
   b53e6:	4629      	mov	r1, r5
   b53e8:	f7ff fdd8 	bl	b4f9c <hal_spi_set_clock_divider>
   b53ec:	e7f5      	b.n	b53da <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b53ee:	bd38      	pop	{r3, r4, r5, pc}
   b53f0:	000b6dc8 	.word	0x000b6dc8

000b53f4 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b53f4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b53f6:	7800      	ldrb	r0, [r0, #0]
   b53f8:	f7ff fdd8 	bl	b4fac <hal_spi_transfer>
}
   b53fc:	b2c0      	uxtb	r0, r0
   b53fe:	bd08      	pop	{r3, pc}

000b5400 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5400:	4b05      	ldr	r3, [pc, #20]	; (b5418 <_GLOBAL__sub_I_System+0x18>)
   b5402:	2202      	movs	r2, #2
   b5404:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5406:	4b05      	ldr	r3, [pc, #20]	; (b541c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5408:	4a05      	ldr	r2, [pc, #20]	; (b5420 <_GLOBAL__sub_I_System+0x20>)
   b540a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b540c:	2000      	movs	r0, #0
   b540e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5412:	f7ff be3b 	b.w	b508c <set_system_mode>
   b5416:	bf00      	nop
   b5418:	2003e6d8 	.word	0x2003e6d8
   b541c:	2003e6cc 	.word	0x2003e6cc
   b5420:	ffff0000 	.word	0xffff0000

000b5424 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b5424:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5426:	6843      	ldr	r3, [r0, #4]
   b5428:	3b01      	subs	r3, #1
    {
   b542a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b542c:	6043      	str	r3, [r0, #4]
   b542e:	b963      	cbnz	r3, b544a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b5430:	6803      	ldr	r3, [r0, #0]
   b5432:	689b      	ldr	r3, [r3, #8]
   b5434:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5436:	68a3      	ldr	r3, [r4, #8]
   b5438:	3b01      	subs	r3, #1
   b543a:	60a3      	str	r3, [r4, #8]
   b543c:	b92b      	cbnz	r3, b544a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b543e:	6823      	ldr	r3, [r4, #0]
   b5440:	4620      	mov	r0, r4
   b5442:	68db      	ldr	r3, [r3, #12]
        }
    }
   b5444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5448:	4718      	bx	r3
    }
   b544a:	bd10      	pop	{r4, pc}

000b544c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b544c:	4802      	ldr	r0, [pc, #8]	; (b5458 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b544e:	2300      	movs	r3, #0
   b5450:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5452:	f7ff bcab 	b.w	b4dac <os_mutex_recursive_create>
   b5456:	bf00      	nop
   b5458:	2003e6dc 	.word	0x2003e6dc

000b545c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b545e:	4606      	mov	r6, r0
   b5460:	460d      	mov	r5, r1
  size_t n = 0;
   b5462:	188f      	adds	r7, r1, r2
   b5464:	2400      	movs	r4, #0
  while (size--) {
   b5466:	42bd      	cmp	r5, r7
   b5468:	d00c      	beq.n	b5484 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b546a:	6833      	ldr	r3, [r6, #0]
   b546c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5470:	689b      	ldr	r3, [r3, #8]
   b5472:	4630      	mov	r0, r6
   b5474:	4798      	blx	r3
     if (chunk>=0)
   b5476:	1e03      	subs	r3, r0, #0
   b5478:	db01      	blt.n	b547e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b547a:	441c      	add	r4, r3
  while (size--) {
   b547c:	e7f3      	b.n	b5466 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b547e:	2c00      	cmp	r4, #0
   b5480:	bf08      	it	eq
   b5482:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5484:	4620      	mov	r0, r4
   b5486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5488 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5488:	b513      	push	{r0, r1, r4, lr}
   b548a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b548c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b548e:	b159      	cbz	r1, b54a8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5490:	9101      	str	r1, [sp, #4]
   b5492:	f001 f935 	bl	b6700 <strlen>
   b5496:	6823      	ldr	r3, [r4, #0]
   b5498:	9901      	ldr	r1, [sp, #4]
   b549a:	68db      	ldr	r3, [r3, #12]
   b549c:	4602      	mov	r2, r0
   b549e:	4620      	mov	r0, r4
    }
   b54a0:	b002      	add	sp, #8
   b54a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b54a6:	4718      	bx	r3
    }
   b54a8:	b002      	add	sp, #8
   b54aa:	bd10      	pop	{r4, pc}

000b54ac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b54ac:	6803      	ldr	r3, [r0, #0]
   b54ae:	689b      	ldr	r3, [r3, #8]
   b54b0:	4718      	bx	r3

000b54b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b54b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b54b4:	210d      	movs	r1, #13
{
   b54b6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b54b8:	f7ff fff8 	bl	b54ac <_ZN5Print5printEc>
  n += print('\n');
   b54bc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b54be:	4604      	mov	r4, r0
  n += print('\n');
   b54c0:	4628      	mov	r0, r5
   b54c2:	f7ff fff3 	bl	b54ac <_ZN5Print5printEc>
  return n;
}
   b54c6:	4420      	add	r0, r4
   b54c8:	bd38      	pop	{r3, r4, r5, pc}

000b54ca <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b54ca:	b530      	push	{r4, r5, lr}
   b54cc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b54ce:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b54d0:	2a01      	cmp	r2, #1
  *str = '\0';
   b54d2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b54d6:	bf98      	it	ls
   b54d8:	220a      	movls	r2, #10
   b54da:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b54dc:	460d      	mov	r5, r1
   b54de:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b54e2:	fb01 5312 	mls	r3, r1, r2, r5
   b54e6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b54ea:	2b09      	cmp	r3, #9
   b54ec:	bf94      	ite	ls
   b54ee:	3330      	addls	r3, #48	; 0x30
   b54f0:	3337      	addhi	r3, #55	; 0x37
   b54f2:	b2db      	uxtb	r3, r3
  } while(n);
   b54f4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b54f6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b54fa:	d9ef      	bls.n	b54dc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b54fc:	4621      	mov	r1, r4
   b54fe:	f7ff ffc3 	bl	b5488 <_ZN5Print5writeEPKc>
}
   b5502:	b00b      	add	sp, #44	; 0x2c
   b5504:	bd30      	pop	{r4, r5, pc}

000b5506 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b550a:	b086      	sub	sp, #24
   b550c:	af00      	add	r7, sp, #0
   b550e:	4605      	mov	r5, r0
   b5510:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5512:	1d38      	adds	r0, r7, #4
   b5514:	2114      	movs	r1, #20
{
   b5516:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5518:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b551a:	f7ff fe53 	bl	b51c4 <vsnprintf>

    if (n<bufsize)
   b551e:	2813      	cmp	r0, #19
   b5520:	d80e      	bhi.n	b5540 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5522:	1d39      	adds	r1, r7, #4
   b5524:	4628      	mov	r0, r5
   b5526:	f7ff ffaf 	bl	b5488 <_ZN5Print5writeEPKc>
   b552a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b552c:	b11e      	cbz	r6, b5536 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b552e:	4628      	mov	r0, r5
   b5530:	f7ff ffbf 	bl	b54b2 <_ZN5Print7printlnEv>
   b5534:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5536:	4620      	mov	r0, r4
   b5538:	3718      	adds	r7, #24
   b553a:	46bd      	mov	sp, r7
   b553c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5540:	f100 0308 	add.w	r3, r0, #8
   b5544:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5548:	46e8      	mov	r8, sp
        char bigger[n+1];
   b554a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b554e:	4622      	mov	r2, r4
   b5550:	1c41      	adds	r1, r0, #1
   b5552:	683b      	ldr	r3, [r7, #0]
   b5554:	4668      	mov	r0, sp
   b5556:	f7ff fe35 	bl	b51c4 <vsnprintf>
  return write(str);
   b555a:	4669      	mov	r1, sp
   b555c:	4628      	mov	r0, r5
   b555e:	f7ff ff93 	bl	b5488 <_ZN5Print5writeEPKc>
   b5562:	4604      	mov	r4, r0
   b5564:	46c5      	mov	sp, r8
   b5566:	e7e1      	b.n	b552c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5568 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5568:	4b01      	ldr	r3, [pc, #4]	; (b5570 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b556a:	4a02      	ldr	r2, [pc, #8]	; (b5574 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b556c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b556e:	4770      	bx	lr
   b5570:	2003e6e0 	.word	0x2003e6e0
   b5574:	000b6dd8 	.word	0x000b6dd8

000b5578 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5578:	4b02      	ldr	r3, [pc, #8]	; (b5584 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b557a:	681a      	ldr	r2, [r3, #0]
   b557c:	4b02      	ldr	r3, [pc, #8]	; (b5588 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b557e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5580:	4770      	bx	lr
   b5582:	bf00      	nop
   b5584:	2003e5e8 	.word	0x2003e5e8
   b5588:	2003e6e4 	.word	0x2003e6e4

000b558c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b558c:	2100      	movs	r1, #0
   b558e:	f7ff bd85 	b.w	b509c <system_delay_ms>
	...

000b5594 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5594:	b510      	push	{r4, lr}
   b5596:	4b04      	ldr	r3, [pc, #16]	; (b55a8 <_ZN9TCPClientD1Ev+0x14>)
   b5598:	6003      	str	r3, [r0, #0]
   b559a:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b559c:	6980      	ldr	r0, [r0, #24]
   b559e:	b108      	cbz	r0, b55a4 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b55a0:	f7ff ff40 	bl	b5424 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b55a4:	4620      	mov	r0, r4
   b55a6:	bd10      	pop	{r4, pc}
   b55a8:	000b6ed0 	.word	0x000b6ed0

000b55ac <_ZN9TCPClientD0Ev>:
   b55ac:	b510      	push	{r4, lr}
   b55ae:	4604      	mov	r4, r0
   b55b0:	f7ff fff0 	bl	b5594 <_ZN9TCPClientD1Ev>
   b55b4:	4620      	mov	r0, r4
   b55b6:	211c      	movs	r1, #28
   b55b8:	f7fe fd6f 	bl	b409a <_ZdlPvj>
   b55bc:	4620      	mov	r0, r4
   b55be:	bd10      	pop	{r4, pc}

000b55c0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b55c0:	4b01      	ldr	r3, [pc, #4]	; (b55c8 <_GLOBAL__sub_I_RGB+0x8>)
   b55c2:	2200      	movs	r2, #0
   b55c4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b55c6:	4770      	bx	lr
   b55c8:	2003e6e8 	.word	0x2003e6e8

000b55cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b55cc:	4b01      	ldr	r3, [pc, #4]	; (b55d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b55ce:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b55d0:	4770      	bx	lr
   b55d2:	bf00      	nop
   b55d4:	2003e5ec 	.word	0x2003e5ec

000b55d8 <serialEventRun>:
{
   b55d8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b55da:	4b0b      	ldr	r3, [pc, #44]	; (b5608 <serialEventRun+0x30>)
   b55dc:	b143      	cbz	r3, b55f0 <serialEventRun+0x18>
   b55de:	f000 f979 	bl	b58d4 <_Z16_fetch_usbserialv>
   b55e2:	6803      	ldr	r3, [r0, #0]
   b55e4:	691b      	ldr	r3, [r3, #16]
   b55e6:	4798      	blx	r3
   b55e8:	2800      	cmp	r0, #0
   b55ea:	dd01      	ble.n	b55f0 <serialEventRun+0x18>
        serialEvent();
   b55ec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b55f0:	4b06      	ldr	r3, [pc, #24]	; (b560c <serialEventRun+0x34>)
   b55f2:	b143      	cbz	r3, b5606 <serialEventRun+0x2e>
   b55f4:	f000 feb8 	bl	b6368 <_Z22__fetch_global_Serial1v>
   b55f8:	6803      	ldr	r3, [r0, #0]
   b55fa:	691b      	ldr	r3, [r3, #16]
   b55fc:	4798      	blx	r3
   b55fe:	2800      	cmp	r0, #0
   b5600:	dd01      	ble.n	b5606 <serialEventRun+0x2e>
        serialEvent1();
   b5602:	f3af 8000 	nop.w
}
   b5606:	bd08      	pop	{r3, pc}
	...

000b5610 <_post_loop>:
{
   b5610:	b508      	push	{r3, lr}
	serialEventRun();
   b5612:	f7ff ffe1 	bl	b55d8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5616:	f7ff fbc1 	bl	b4d9c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b561a:	4b01      	ldr	r3, [pc, #4]	; (b5620 <_post_loop+0x10>)
   b561c:	6018      	str	r0, [r3, #0]
}
   b561e:	bd08      	pop	{r3, pc}
   b5620:	2003e740 	.word	0x2003e740

000b5624 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5624:	4805      	ldr	r0, [pc, #20]	; (b563c <_Z33system_initialize_user_backup_ramv+0x18>)
   b5626:	4a06      	ldr	r2, [pc, #24]	; (b5640 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5628:	4906      	ldr	r1, [pc, #24]	; (b5644 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b562a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b562c:	1a12      	subs	r2, r2, r0
   b562e:	f001 f819 	bl	b6664 <memcpy>
    __backup_sram_signature = signature;
   b5632:	4b05      	ldr	r3, [pc, #20]	; (b5648 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5634:	4a05      	ldr	r2, [pc, #20]	; (b564c <_Z33system_initialize_user_backup_ramv+0x28>)
   b5636:	601a      	str	r2, [r3, #0]
}
   b5638:	bd08      	pop	{r3, pc}
   b563a:	bf00      	nop
   b563c:	2003f400 	.word	0x2003f400
   b5640:	2003f404 	.word	0x2003f404
   b5644:	000b7164 	.word	0x000b7164
   b5648:	2003f400 	.word	0x2003f400
   b564c:	9a271c1e 	.word	0x9a271c1e

000b5650 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5650:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5652:	2300      	movs	r3, #0
   b5654:	9300      	str	r3, [sp, #0]
   b5656:	461a      	mov	r2, r3
   b5658:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b565c:	f7ff fd30 	bl	b50c0 <system_ctrl_set_result>
}
   b5660:	b003      	add	sp, #12
   b5662:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5668 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5668:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b566a:	8843      	ldrh	r3, [r0, #2]
   b566c:	2b0a      	cmp	r3, #10
   b566e:	d008      	beq.n	b5682 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5670:	2b50      	cmp	r3, #80	; 0x50
   b5672:	d10b      	bne.n	b568c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5674:	4b09      	ldr	r3, [pc, #36]	; (b569c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5676:	681b      	ldr	r3, [r3, #0]
   b5678:	b14b      	cbz	r3, b568e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b567a:	b003      	add	sp, #12
   b567c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5680:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5682:	f7ff ffe5 	bl	b5650 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5686:	b003      	add	sp, #12
   b5688:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b568c:	2300      	movs	r3, #0
   b568e:	9300      	str	r3, [sp, #0]
   b5690:	461a      	mov	r2, r3
   b5692:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5696:	f7ff fd13 	bl	b50c0 <system_ctrl_set_result>
}
   b569a:	e7f4      	b.n	b5686 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b569c:	2003e6fc 	.word	0x2003e6fc

000b56a0 <module_user_init_hook>:
{
   b56a0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b56a2:	4812      	ldr	r0, [pc, #72]	; (b56ec <module_user_init_hook+0x4c>)
   b56a4:	2100      	movs	r1, #0
   b56a6:	f7ff fda5 	bl	b51f4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b56aa:	4b11      	ldr	r3, [pc, #68]	; (b56f0 <module_user_init_hook+0x50>)
   b56ac:	681a      	ldr	r2, [r3, #0]
   b56ae:	4b11      	ldr	r3, [pc, #68]	; (b56f4 <module_user_init_hook+0x54>)
   b56b0:	429a      	cmp	r2, r3
   b56b2:	4b11      	ldr	r3, [pc, #68]	; (b56f8 <module_user_init_hook+0x58>)
   b56b4:	bf0c      	ite	eq
   b56b6:	2201      	moveq	r2, #1
   b56b8:	2200      	movne	r2, #0
   b56ba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b56bc:	d001      	beq.n	b56c2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b56be:	f7ff ffb1 	bl	b5624 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b56c2:	f7ff fb5b 	bl	b4d7c <HAL_RNG_GetRandomNumber>
   b56c6:	4604      	mov	r4, r0
    srand(seed);
   b56c8:	f000 ffe2 	bl	b6690 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b56cc:	4b0b      	ldr	r3, [pc, #44]	; (b56fc <module_user_init_hook+0x5c>)
   b56ce:	b113      	cbz	r3, b56d6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b56d0:	4620      	mov	r0, r4
   b56d2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b56d6:	2100      	movs	r1, #0
   b56d8:	4808      	ldr	r0, [pc, #32]	; (b56fc <module_user_init_hook+0x5c>)
   b56da:	f7ff fd5b 	bl	b5194 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b56de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b56e2:	4807      	ldr	r0, [pc, #28]	; (b5700 <module_user_init_hook+0x60>)
   b56e4:	2100      	movs	r1, #0
   b56e6:	f7ff bce1 	b.w	b50ac <system_ctrl_set_app_request_handler>
   b56ea:	bf00      	nop
   b56ec:	000b55cd 	.word	0x000b55cd
   b56f0:	2003f400 	.word	0x2003f400
   b56f4:	9a271c1e 	.word	0x9a271c1e
   b56f8:	2003e6f8 	.word	0x2003e6f8
   b56fc:	00000000 	.word	0x00000000
   b5700:	000b5669 	.word	0x000b5669

000b5704 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5704:	4770      	bx	lr

000b5706 <_ZN9IPAddressD0Ev>:
   b5706:	b510      	push	{r4, lr}
   b5708:	2118      	movs	r1, #24
   b570a:	4604      	mov	r4, r0
   b570c:	f7fe fcc5 	bl	b409a <_ZdlPvj>
   b5710:	4620      	mov	r0, r4
   b5712:	bd10      	pop	{r4, pc}

000b5714 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5714:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5716:	7d03      	ldrb	r3, [r0, #20]
   b5718:	2b06      	cmp	r3, #6
{
   b571a:	b08d      	sub	sp, #52	; 0x34
   b571c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b571e:	f100 0704 	add.w	r7, r0, #4
   b5722:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5726:	d012      	beq.n	b574e <_ZNK9IPAddress7printToER5Print+0x3a>
   b5728:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b572c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5730:	220a      	movs	r2, #10
   b5732:	4630      	mov	r0, r6
   b5734:	f7ff fec9 	bl	b54ca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5738:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b573a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b573c:	d019      	beq.n	b5772 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b573e:	2c00      	cmp	r4, #0
   b5740:	d0f4      	beq.n	b572c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5742:	212e      	movs	r1, #46	; 0x2e
   b5744:	4630      	mov	r0, r6
   b5746:	f7ff feb1 	bl	b54ac <_ZN5Print5printEc>
   b574a:	4404      	add	r4, r0
   b574c:	e7ee      	b.n	b572c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b574e:	232f      	movs	r3, #47	; 0x2f
   b5750:	466a      	mov	r2, sp
   b5752:	4639      	mov	r1, r7
   b5754:	200a      	movs	r0, #10
		buf[0] = 0;
   b5756:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b575a:	f7ff fb2f 	bl	b4dbc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b575e:	4668      	mov	r0, sp
   b5760:	f000 ffce 	bl	b6700 <strlen>
   b5764:	6833      	ldr	r3, [r6, #0]
   b5766:	4602      	mov	r2, r0
   b5768:	68db      	ldr	r3, [r3, #12]
   b576a:	4669      	mov	r1, sp
   b576c:	4630      	mov	r0, r6
   b576e:	4798      	blx	r3
   b5770:	4604      	mov	r4, r0
    }
    return n;
}
   b5772:	4620      	mov	r0, r4
   b5774:	b00d      	add	sp, #52	; 0x34
   b5776:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5778 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5778:	b510      	push	{r4, lr}
   b577a:	4b05      	ldr	r3, [pc, #20]	; (b5790 <_ZN9IPAddressC1Ev+0x18>)
   b577c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b577e:	2211      	movs	r2, #17
   b5780:	f840 3b04 	str.w	r3, [r0], #4
   b5784:	2100      	movs	r1, #0
   b5786:	f000 ff7b 	bl	b6680 <memset>
}
   b578a:	4620      	mov	r0, r4
   b578c:	bd10      	pop	{r4, pc}
   b578e:	bf00      	nop
   b5790:	000b6e00 	.word	0x000b6e00

000b5794 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5794:	4603      	mov	r3, r0
   b5796:	4a07      	ldr	r2, [pc, #28]	; (b57b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5798:	b510      	push	{r4, lr}
   b579a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b579e:	f101 0210 	add.w	r2, r1, #16
   b57a2:	f851 4b04 	ldr.w	r4, [r1], #4
   b57a6:	f843 4b04 	str.w	r4, [r3], #4
   b57aa:	4291      	cmp	r1, r2
   b57ac:	d1f9      	bne.n	b57a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b57ae:	780a      	ldrb	r2, [r1, #0]
   b57b0:	701a      	strb	r2, [r3, #0]
}
   b57b2:	bd10      	pop	{r4, pc}
   b57b4:	000b6e00 	.word	0x000b6e00

000b57b8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b57b8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b57ba:	2b04      	cmp	r3, #4
   b57bc:	d104      	bne.n	b57c8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b57be:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b57c0:	3800      	subs	r0, #0
   b57c2:	bf18      	it	ne
   b57c4:	2001      	movne	r0, #1
   b57c6:	4770      	bx	lr
    } else if (version() == 6) {
   b57c8:	2b06      	cmp	r3, #6
   b57ca:	d107      	bne.n	b57dc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b57cc:	6843      	ldr	r3, [r0, #4]
   b57ce:	b93b      	cbnz	r3, b57e0 <_ZNK9IPAddresscvbEv+0x28>
   b57d0:	6883      	ldr	r3, [r0, #8]
   b57d2:	b92b      	cbnz	r3, b57e0 <_ZNK9IPAddresscvbEv+0x28>
   b57d4:	68c3      	ldr	r3, [r0, #12]
   b57d6:	b91b      	cbnz	r3, b57e0 <_ZNK9IPAddresscvbEv+0x28>
   b57d8:	6900      	ldr	r0, [r0, #16]
   b57da:	e7f1      	b.n	b57c0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b57dc:	2000      	movs	r0, #0
   b57de:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b57e0:	2001      	movs	r0, #1
}
   b57e2:	4770      	bx	lr

000b57e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b57e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b57e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b57ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b57ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b57f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b57f6:	2304      	movs	r3, #4
   b57f8:	6041      	str	r1, [r0, #4]
   b57fa:	7503      	strb	r3, [r0, #20]
}
   b57fc:	bd10      	pop	{r4, pc}
	...

000b5800 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5800:	b507      	push	{r0, r1, r2, lr}
   b5802:	4b06      	ldr	r3, [pc, #24]	; (b581c <_ZN9IPAddressC1EPKh+0x1c>)
   b5804:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5806:	78cb      	ldrb	r3, [r1, #3]
   b5808:	9300      	str	r3, [sp, #0]
   b580a:	788b      	ldrb	r3, [r1, #2]
   b580c:	784a      	ldrb	r2, [r1, #1]
   b580e:	7809      	ldrb	r1, [r1, #0]
   b5810:	f7ff ffe8 	bl	b57e4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5814:	b003      	add	sp, #12
   b5816:	f85d fb04 	ldr.w	pc, [sp], #4
   b581a:	bf00      	nop
   b581c:	000b6e00 	.word	0x000b6e00

000b5820 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5820:	7441      	strb	r1, [r0, #17]
}
   b5822:	4770      	bx	lr

000b5824 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5824:	4770      	bx	lr

000b5826 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5826:	4770      	bx	lr

000b5828 <_ZN9USBSerial4readEv>:
{
   b5828:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b582a:	2100      	movs	r1, #0
   b582c:	7c00      	ldrb	r0, [r0, #16]
   b582e:	f7ff fc05 	bl	b503c <HAL_USB_USART_Receive_Data>
}
   b5832:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5836:	bd08      	pop	{r3, pc}

000b5838 <_ZN9USBSerial4peekEv>:
{
   b5838:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b583a:	2101      	movs	r1, #1
   b583c:	7c00      	ldrb	r0, [r0, #16]
   b583e:	f7ff fbfd 	bl	b503c <HAL_USB_USART_Receive_Data>
}
   b5842:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5846:	bd08      	pop	{r3, pc}

000b5848 <_ZN9USBSerial17availableForWriteEv>:
{
   b5848:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b584a:	7c00      	ldrb	r0, [r0, #16]
   b584c:	f7ff fbee 	bl	b502c <HAL_USB_USART_Available_Data_For_Write>
}
   b5850:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5854:	bd08      	pop	{r3, pc}

000b5856 <_ZN9USBSerial9availableEv>:
{
   b5856:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5858:	7c00      	ldrb	r0, [r0, #16]
   b585a:	f7ff fbdf 	bl	b501c <HAL_USB_USART_Available_Data>
}
   b585e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5862:	bd08      	pop	{r3, pc}

000b5864 <_ZN9USBSerial5writeEh>:
{
   b5864:	b513      	push	{r0, r1, r4, lr}
   b5866:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5868:	7c00      	ldrb	r0, [r0, #16]
{
   b586a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b586c:	f7ff fbde 	bl	b502c <HAL_USB_USART_Available_Data_For_Write>
   b5870:	2800      	cmp	r0, #0
   b5872:	9901      	ldr	r1, [sp, #4]
   b5874:	dc01      	bgt.n	b587a <_ZN9USBSerial5writeEh+0x16>
   b5876:	7c60      	ldrb	r0, [r4, #17]
   b5878:	b120      	cbz	r0, b5884 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b587a:	7c20      	ldrb	r0, [r4, #16]
   b587c:	f7ff fbe6 	bl	b504c <HAL_USB_USART_Send_Data>
   b5880:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5884:	b002      	add	sp, #8
   b5886:	bd10      	pop	{r4, pc}

000b5888 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5888:	7c00      	ldrb	r0, [r0, #16]
   b588a:	f7ff bbe7 	b.w	b505c <HAL_USB_USART_Flush_Data>

000b588e <_ZN9USBSerialD0Ev>:
   b588e:	b510      	push	{r4, lr}
   b5890:	2114      	movs	r1, #20
   b5892:	4604      	mov	r4, r0
   b5894:	f7fe fc01 	bl	b409a <_ZdlPvj>
   b5898:	4620      	mov	r0, r4
   b589a:	bd10      	pop	{r4, pc}

000b589c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b589c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b589e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b58a2:	4604      	mov	r4, r0
   b58a4:	4608      	mov	r0, r1
   b58a6:	2100      	movs	r1, #0
   b58a8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b58ac:	4b04      	ldr	r3, [pc, #16]	; (b58c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b58ae:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b58b0:	2301      	movs	r3, #1
  _serial = serial;
   b58b2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b58b4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b58b6:	4611      	mov	r1, r2
   b58b8:	f7ff fba8 	bl	b500c <HAL_USB_USART_Init>
}
   b58bc:	4620      	mov	r0, r4
   b58be:	bd10      	pop	{r4, pc}
   b58c0:	000b6e14 	.word	0x000b6e14

000b58c4 <_Z19acquireSerialBufferv>:
{
   b58c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b58c6:	2214      	movs	r2, #20
{
   b58c8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b58ca:	2100      	movs	r1, #0
   b58cc:	f000 fed8 	bl	b6680 <memset>
}
   b58d0:	4620      	mov	r0, r4
   b58d2:	bd10      	pop	{r4, pc}

000b58d4 <_Z16_fetch_usbserialv>:
{
   b58d4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b58d6:	4c0f      	ldr	r4, [pc, #60]	; (b5914 <_Z16_fetch_usbserialv+0x40>)
{
   b58d8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b58da:	a803      	add	r0, sp, #12
   b58dc:	f7ff fff2 	bl	b58c4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b58e0:	7821      	ldrb	r1, [r4, #0]
   b58e2:	f3bf 8f5b 	dmb	ish
   b58e6:	f011 0101 	ands.w	r1, r1, #1
   b58ea:	d10f      	bne.n	b590c <_Z16_fetch_usbserialv+0x38>
   b58ec:	4620      	mov	r0, r4
   b58ee:	9101      	str	r1, [sp, #4]
   b58f0:	f7fe fbe2 	bl	b40b8 <__cxa_guard_acquire>
   b58f4:	9901      	ldr	r1, [sp, #4]
   b58f6:	b148      	cbz	r0, b590c <_Z16_fetch_usbserialv+0x38>
   b58f8:	aa03      	add	r2, sp, #12
   b58fa:	4807      	ldr	r0, [pc, #28]	; (b5918 <_Z16_fetch_usbserialv+0x44>)
   b58fc:	f7ff ffce 	bl	b589c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5900:	4620      	mov	r0, r4
   b5902:	f7fe fbde 	bl	b40c2 <__cxa_guard_release>
   b5906:	4805      	ldr	r0, [pc, #20]	; (b591c <_Z16_fetch_usbserialv+0x48>)
   b5908:	f000 fea6 	bl	b6658 <atexit>
	return _usbserial;
}
   b590c:	4802      	ldr	r0, [pc, #8]	; (b5918 <_Z16_fetch_usbserialv+0x44>)
   b590e:	b008      	add	sp, #32
   b5910:	bd10      	pop	{r4, pc}
   b5912:	bf00      	nop
   b5914:	2003e700 	.word	0x2003e700
   b5918:	2003e704 	.word	0x2003e704
   b591c:	000b5825 	.word	0x000b5825

000b5920 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5920:	4770      	bx	lr

000b5922 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5922:	7441      	strb	r1, [r0, #17]
}
   b5924:	4770      	bx	lr

000b5926 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5926:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5928:	7c00      	ldrb	r0, [r0, #16]
   b592a:	f7ff fa8f 	bl	b4e4c <hal_usart_available_data_for_write>
}
   b592e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5932:	bd08      	pop	{r3, pc}

000b5934 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5934:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5936:	7c00      	ldrb	r0, [r0, #16]
   b5938:	f7ff fa60 	bl	b4dfc <hal_usart_available>
}
   b593c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5940:	bd08      	pop	{r3, pc}

000b5942 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5942:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5944:	7c00      	ldrb	r0, [r0, #16]
   b5946:	f7ff fa69 	bl	b4e1c <hal_usart_peek>
}
   b594a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b594e:	bd08      	pop	{r3, pc}

000b5950 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5950:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5952:	7c00      	ldrb	r0, [r0, #16]
   b5954:	f7ff fa5a 	bl	b4e0c <hal_usart_read>
}
   b5958:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b595c:	bd08      	pop	{r3, pc}

000b595e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b595e:	7c00      	ldrb	r0, [r0, #16]
   b5960:	f7ff ba64 	b.w	b4e2c <hal_usart_flush>

000b5964 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5964:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5966:	7c45      	ldrb	r5, [r0, #17]
{
   b5968:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b596a:	b12d      	cbz	r5, b5978 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b596c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b596e:	b003      	add	sp, #12
   b5970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5974:	f7ff ba3a 	b.w	b4dec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5978:	7c00      	ldrb	r0, [r0, #16]
   b597a:	9101      	str	r1, [sp, #4]
   b597c:	f7ff fa66 	bl	b4e4c <hal_usart_available_data_for_write>
   b5980:	2800      	cmp	r0, #0
   b5982:	9901      	ldr	r1, [sp, #4]
   b5984:	dcf2      	bgt.n	b596c <_ZN11USARTSerial5writeEh+0x8>
}
   b5986:	4628      	mov	r0, r5
   b5988:	b003      	add	sp, #12
   b598a:	bd30      	pop	{r4, r5, pc}

000b598c <_ZN11USARTSerialD0Ev>:
   b598c:	b510      	push	{r4, lr}
   b598e:	2114      	movs	r1, #20
   b5990:	4604      	mov	r4, r0
   b5992:	f7fe fb82 	bl	b409a <_ZdlPvj>
   b5996:	4620      	mov	r0, r4
   b5998:	bd10      	pop	{r4, pc}
	...

000b599c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b599c:	b510      	push	{r4, lr}
   b599e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b59a2:	4604      	mov	r4, r0
   b59a4:	4608      	mov	r0, r1
   b59a6:	4611      	mov	r1, r2
   b59a8:	2200      	movs	r2, #0
   b59aa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b59ae:	4b04      	ldr	r3, [pc, #16]	; (b59c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b59b0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b59b2:	2301      	movs	r3, #1
  _serial = serial;
   b59b4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b59b6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b59b8:	f7ff fa50 	bl	b4e5c <hal_usart_init_ex>
}
   b59bc:	4620      	mov	r0, r4
   b59be:	bd10      	pop	{r4, pc}
   b59c0:	000b6e44 	.word	0x000b6e44

000b59c4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b59c4:	4770      	bx	lr

000b59c6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b59c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59c8:	4606      	mov	r6, r0
   b59ca:	4615      	mov	r5, r2
   b59cc:	460c      	mov	r4, r1
   b59ce:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b59d0:	42bc      	cmp	r4, r7
   b59d2:	d006      	beq.n	b59e2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b59d4:	6833      	ldr	r3, [r6, #0]
   b59d6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b59da:	689b      	ldr	r3, [r3, #8]
   b59dc:	4630      	mov	r0, r6
   b59de:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b59e0:	e7f6      	b.n	b59d0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b59e2:	4628      	mov	r0, r5
   b59e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b59e6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b59e6:	7c00      	ldrb	r0, [r0, #16]
   b59e8:	2200      	movs	r2, #0
   b59ea:	f7ff ba57 	b.w	b4e9c <hal_i2c_write>

000b59ee <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b59ee:	7c00      	ldrb	r0, [r0, #16]
   b59f0:	2100      	movs	r1, #0
   b59f2:	f7ff ba5b 	b.w	b4eac <hal_i2c_available>

000b59f6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b59f6:	7c00      	ldrb	r0, [r0, #16]
   b59f8:	2100      	movs	r1, #0
   b59fa:	f7ff ba5f 	b.w	b4ebc <hal_i2c_read>

000b59fe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b59fe:	7c00      	ldrb	r0, [r0, #16]
   b5a00:	2100      	movs	r1, #0
   b5a02:	f7ff ba63 	b.w	b4ecc <hal_i2c_peek>

000b5a06 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5a06:	7c00      	ldrb	r0, [r0, #16]
   b5a08:	2100      	movs	r1, #0
   b5a0a:	f7ff ba67 	b.w	b4edc <hal_i2c_flush>

000b5a0e <_ZN7TwoWireD0Ev>:
   b5a0e:	b510      	push	{r4, lr}
   b5a10:	2114      	movs	r1, #20
   b5a12:	4604      	mov	r4, r0
   b5a14:	f7fe fb41 	bl	b409a <_ZdlPvj>
   b5a18:	4620      	mov	r0, r4
   b5a1a:	bd10      	pop	{r4, pc}

000b5a1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5a1c:	b538      	push	{r3, r4, r5, lr}
   b5a1e:	4604      	mov	r4, r0
   b5a20:	4615      	mov	r5, r2
   b5a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5a26:	2200      	movs	r2, #0
   b5a28:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5a2c:	4b09      	ldr	r3, [pc, #36]	; (b5a54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5a2e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5a30:	4608      	mov	r0, r1
   b5a32:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5a34:	4629      	mov	r1, r5
   b5a36:	f7ff fa61 	bl	b4efc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5a3a:	30bf      	adds	r0, #191	; 0xbf
   b5a3c:	d108      	bne.n	b5a50 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5a3e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5a40:	07db      	lsls	r3, r3, #31
   b5a42:	d505      	bpl.n	b5a50 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5a44:	6868      	ldr	r0, [r5, #4]
   b5a46:	f7ff fbb5 	bl	b51b4 <free>
    free(conf.tx_buffer);
   b5a4a:	68e8      	ldr	r0, [r5, #12]
   b5a4c:	f7ff fbb2 	bl	b51b4 <free>
}
   b5a50:	4620      	mov	r0, r4
   b5a52:	bd38      	pop	{r3, r4, r5, pc}
   b5a54:	000b6e74 	.word	0x000b6e74

000b5a58 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5a58:	2300      	movs	r3, #0
   b5a5a:	7c00      	ldrb	r0, [r0, #16]
   b5a5c:	461a      	mov	r2, r3
   b5a5e:	4619      	mov	r1, r3
   b5a60:	f7ff ba04 	b.w	b4e6c <hal_i2c_begin>

000b5a64 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5a64:	7c00      	ldrb	r0, [r0, #16]
   b5a66:	2200      	movs	r2, #0
   b5a68:	f7ff ba08 	b.w	b4e7c <hal_i2c_begin_transmission>

000b5a6c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b5a6c:	b2c9      	uxtb	r1, r1
   b5a6e:	f7ff bff9 	b.w	b5a64 <_ZN7TwoWire17beginTransmissionEh>

000b5a72 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5a72:	7c00      	ldrb	r0, [r0, #16]
   b5a74:	2200      	movs	r2, #0
   b5a76:	f7ff ba09 	b.w	b4e8c <hal_i2c_end_transmission>

000b5a7a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5a7a:	2101      	movs	r1, #1
   b5a7c:	f7ff bff9 	b.w	b5a72 <_ZN7TwoWire15endTransmissionEh>

000b5a80 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b5a80:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5a82:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b5a84:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5a88:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5a8a:	2201      	movs	r2, #1
   b5a8c:	f04f 33ff 	mov.w	r3, #4294967295
   b5a90:	f10d 0107 	add.w	r1, sp, #7
   b5a94:	47a0      	blx	r4
}
   b5a96:	b002      	add	sp, #8
   b5a98:	bd10      	pop	{r4, pc}

000b5a9a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b5a9a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5a9c:	6803      	ldr	r3, [r0, #0]
   b5a9e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5aa0:	f04f 33ff 	mov.w	r3, #4294967295
   b5aa4:	46a4      	mov	ip, r4
}
   b5aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5aaa:	4760      	bx	ip

000b5aac <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5aac:	b513      	push	{r0, r1, r4, lr}
   b5aae:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b5ab0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5ab2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b5ab6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5ab8:	f10d 0107 	add.w	r1, sp, #7
   b5abc:	2201      	movs	r2, #1
   b5abe:	47a0      	blx	r4
}
   b5ac0:	b002      	add	sp, #8
   b5ac2:	bd10      	pop	{r4, pc}

000b5ac4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b5ac4:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5ac6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5ac8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5acc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5ad0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b5ad2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5ad4:	d008      	beq.n	b5ae8 <_ZN9TCPClient4readEv+0x24>
   b5ad6:	6963      	ldr	r3, [r4, #20]
   b5ad8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5adc:	1c51      	adds	r1, r2, #1
   b5ade:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b5ae2:	4413      	add	r3, r2
   b5ae4:	7918      	ldrb	r0, [r3, #4]
}
   b5ae6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5ae8:	6803      	ldr	r3, [r0, #0]
   b5aea:	691b      	ldr	r3, [r3, #16]
   b5aec:	4798      	blx	r3
   b5aee:	2800      	cmp	r0, #0
   b5af0:	d1f1      	bne.n	b5ad6 <_ZN9TCPClient4readEv+0x12>
   b5af2:	f04f 30ff 	mov.w	r0, #4294967295
   b5af6:	e7f6      	b.n	b5ae6 <_ZN9TCPClient4readEv+0x22>

000b5af8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b5af8:	4770      	bx	lr

000b5afa <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b5afa:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b5afc:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b5afe:	43c0      	mvns	r0, r0
   b5b00:	0fc0      	lsrs	r0, r0, #31
   b5b02:	4770      	bx	lr

000b5b04 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5b04:	4770      	bx	lr
	...

000b5b08 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5b08:	4b06      	ldr	r3, [pc, #24]	; (b5b24 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5b0a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5b0c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5b0e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5b12:	d005      	beq.n	b5b20 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5b14:	4608      	mov	r0, r1
   b5b16:	f000 fc8d 	bl	b6434 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5b1a:	2800      	cmp	r0, #0
   b5b1c:	bf08      	it	eq
   b5b1e:	2400      	moveq	r4, #0
      }
   b5b20:	4620      	mov	r0, r4
   b5b22:	bd10      	pop	{r4, pc}
   b5b24:	000b6dd0 	.word	0x000b6dd0

000b5b28 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5b28:	b510      	push	{r4, lr}
   b5b2a:	21ac      	movs	r1, #172	; 0xac
   b5b2c:	4604      	mov	r4, r0
   b5b2e:	f7fe fab4 	bl	b409a <_ZdlPvj>
   b5b32:	4620      	mov	r0, r4
   b5b34:	bd10      	pop	{r4, pc}

000b5b36 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5b36:	21ac      	movs	r1, #172	; 0xac
   b5b38:	f7fe baaf 	b.w	b409a <_ZdlPvj>

000b5b3c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b5b40:	f04f 0800 	mov.w	r8, #0
   b5b44:	b086      	sub	sp, #24
   b5b46:	461c      	mov	r4, r3
   b5b48:	f8c0 8004 	str.w	r8, [r0, #4]
   b5b4c:	4605      	mov	r5, r0
   b5b4e:	460e      	mov	r6, r1
   b5b50:	4617      	mov	r7, r2
    struct timeval tv = {};
   b5b52:	4641      	mov	r1, r8
   b5b54:	2210      	movs	r2, #16
   b5b56:	a802      	add	r0, sp, #8
   b5b58:	f000 fd92 	bl	b6680 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b5b5c:	1c63      	adds	r3, r4, #1
   b5b5e:	d009      	beq.n	b5b74 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b5b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5b64:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b5b68:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5b6c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b5b70:	435c      	muls	r4, r3
   b5b72:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b5b74:	6968      	ldr	r0, [r5, #20]
   b5b76:	2310      	movs	r3, #16
   b5b78:	9300      	str	r3, [sp, #0]
   b5b7a:	6800      	ldr	r0, [r0, #0]
   b5b7c:	ab02      	add	r3, sp, #8
   b5b7e:	f241 0205 	movw	r2, #4101	; 0x1005
   b5b82:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5b86:	f7ff f9c1 	bl	b4f0c <sock_setsockopt>
    if (ret < 0) {
   b5b8a:	2800      	cmp	r0, #0
   b5b8c:	da07      	bge.n	b5b9e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b5b8e:	f7ff fb21 	bl	b51d4 <__errno>
   b5b92:	6803      	ldr	r3, [r0, #0]
   b5b94:	606b      	str	r3, [r5, #4]
        return 0;
   b5b96:	2000      	movs	r0, #0
}
   b5b98:	b006      	add	sp, #24
   b5b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b5b9e:	6968      	ldr	r0, [r5, #20]
   b5ba0:	2300      	movs	r3, #0
   b5ba2:	6800      	ldr	r0, [r0, #0]
   b5ba4:	463a      	mov	r2, r7
   b5ba6:	4631      	mov	r1, r6
   b5ba8:	f7ff f9d0 	bl	b4f4c <sock_send>
    if (ret < 0) {
   b5bac:	1e03      	subs	r3, r0, #0
   b5bae:	dbee      	blt.n	b5b8e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b5bb0:	4618      	mov	r0, r3
   b5bb2:	e7f1      	b.n	b5b98 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b5bb4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5bb4:	b530      	push	{r4, r5, lr}
   b5bb6:	b087      	sub	sp, #28
   b5bb8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5bba:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5bbc:	4668      	mov	r0, sp
   b5bbe:	f7ff fe1f 	bl	b5800 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5bc4:	3404      	adds	r4, #4
   b5bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5bc8:	682b      	ldr	r3, [r5, #0]
   b5bca:	7023      	strb	r3, [r4, #0]
    }
   b5bcc:	b007      	add	sp, #28
   b5bce:	bd30      	pop	{r4, r5, pc}

000b5bd0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b5bd0:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b5bd2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b5bd4:	4b05      	ldr	r3, [pc, #20]	; (b5bec <_ZN9TCPClient8remoteIPEv+0x1c>)
   b5bd6:	4604      	mov	r4, r0
   b5bd8:	358c      	adds	r5, #140	; 0x8c
   b5bda:	f844 3b04 	str.w	r3, [r4], #4
   b5bde:	4606      	mov	r6, r0
   b5be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5be4:	682b      	ldr	r3, [r5, #0]
   b5be6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5be8:	4630      	mov	r0, r6
   b5bea:	bd70      	pop	{r4, r5, r6, pc}
   b5bec:	000b6e00 	.word	0x000b6e00

000b5bf0 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5bf4:	4698      	mov	r8, r3
    stop();
   b5bf6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5bf8:	b093      	sub	sp, #76	; 0x4c
   b5bfa:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b5bfc:	2400      	movs	r4, #0
    stop();
   b5bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5c00:	4606      	mov	r6, r0
   b5c02:	4617      	mov	r7, r2
    stop();
   b5c04:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5c06:	4628      	mov	r0, r5
   b5c08:	466b      	mov	r3, sp
   b5c0a:	4622      	mov	r2, r4
   b5c0c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b5c0e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5c10:	f7ff f884 	bl	b4d1c <netdb_getaddrinfo>
   b5c14:	4605      	mov	r5, r0
   b5c16:	2800      	cmp	r0, #0
   b5c18:	d163      	bne.n	b5ce2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b5c1a:	9b00      	ldr	r3, [sp, #0]
   b5c1c:	2b00      	cmp	r3, #0
   b5c1e:	d04b      	beq.n	b5cb8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5c20:	695b      	ldr	r3, [r3, #20]
   b5c22:	2b00      	cmp	r3, #0
   b5c24:	d048      	beq.n	b5cb8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b5c26:	a806      	add	r0, sp, #24
   b5c28:	f7ff fda6 	bl	b5778 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b5c2c:	9b00      	ldr	r3, [sp, #0]
   b5c2e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b5c30:	7863      	ldrb	r3, [r4, #1]
   b5c32:	2b02      	cmp	r3, #2
   b5c34:	d104      	bne.n	b5c40 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b5c36:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b5c38:	a806      	add	r0, sp, #24
   b5c3a:	f7ff ffbb 	bl	b5bb4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b5c3e:	e026      	b.n	b5c8e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b5c40:	2b0a      	cmp	r3, #10
   b5c42:	d124      	bne.n	b5c8e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b5c44:	2211      	movs	r2, #17
   b5c46:	4629      	mov	r1, r5
   b5c48:	a801      	add	r0, sp, #4
   b5c4a:	f000 fd19 	bl	b6680 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5c4e:	68a3      	ldr	r3, [r4, #8]
   b5c50:	2b00      	cmp	r3, #0
   b5c52:	d038      	beq.n	b5cc6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5c54:	f104 0308 	add.w	r3, r4, #8
   b5c58:	f10d 0c04 	add.w	ip, sp, #4
   b5c5c:	3418      	adds	r4, #24
   b5c5e:	6818      	ldr	r0, [r3, #0]
   b5c60:	6859      	ldr	r1, [r3, #4]
   b5c62:	4662      	mov	r2, ip
   b5c64:	c203      	stmia	r2!, {r0, r1}
   b5c66:	3308      	adds	r3, #8
   b5c68:	42a3      	cmp	r3, r4
   b5c6a:	4694      	mov	ip, r2
   b5c6c:	d1f7      	bne.n	b5c5e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b5c6e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5c70:	a901      	add	r1, sp, #4
   b5c72:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b5c74:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5c78:	f7ff fd8c 	bl	b5794 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5c7c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b5c80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5c84:	ac07      	add	r4, sp, #28
   b5c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5c88:	f8dc 3000 	ldr.w	r3, [ip]
   b5c8c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b5c8e:	a806      	add	r0, sp, #24
   b5c90:	f7ff fd92 	bl	b57b8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5c94:	b180      	cbz	r0, b5cb8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b5c96:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b5c98:	ad07      	add	r5, sp, #28
   b5c9a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b5c9e:	4b12      	ldr	r3, [pc, #72]	; (b5ce8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b5ca0:	930c      	str	r3, [sp, #48]	; 0x30
   b5ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ca4:	ac0d      	add	r4, sp, #52	; 0x34
   b5ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ca8:	682b      	ldr	r3, [r5, #0]
   b5caa:	7023      	strb	r3, [r4, #0]
   b5cac:	463a      	mov	r2, r7
   b5cae:	4643      	mov	r3, r8
   b5cb0:	a90c      	add	r1, sp, #48	; 0x30
   b5cb2:	4630      	mov	r0, r6
   b5cb4:	47c8      	blx	r9
   b5cb6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b5cb8:	9800      	ldr	r0, [sp, #0]
   b5cba:	f7ff f827 	bl	b4d0c <netdb_freeaddrinfo>
}
   b5cbe:	4628      	mov	r0, r5
   b5cc0:	b013      	add	sp, #76	; 0x4c
   b5cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5cc6:	68e3      	ldr	r3, [r4, #12]
   b5cc8:	2b00      	cmp	r3, #0
   b5cca:	d1c3      	bne.n	b5c54 <_ZN9TCPClient7connectEPKctm+0x64>
   b5ccc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5cd0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b5cd4:	f7ff f87a 	bl	b4dcc <inet_htonl>
   b5cd8:	4581      	cmp	r9, r0
   b5cda:	d1bb      	bne.n	b5c54 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b5cdc:	f104 0114 	add.w	r1, r4, #20
   b5ce0:	e7aa      	b.n	b5c38 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5ce2:	4625      	mov	r5, r4
   b5ce4:	e7e8      	b.n	b5cb8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5ce6:	bf00      	nop
   b5ce8:	000b6e00 	.word	0x000b6e00

000b5cec <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b5cec:	b538      	push	{r3, r4, r5, lr}
   b5cee:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b5cf0:	681a      	ldr	r2, [r3, #0]
   b5cf2:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b5cf4:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b5cf6:	da10      	bge.n	b5d1a <_ZN9TCPClient9connectedEv+0x2e>
   b5cf8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5cfc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5d00:	429a      	cmp	r2, r3
   b5d02:	d10a      	bne.n	b5d1a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b5d04:	6803      	ldr	r3, [r0, #0]
   b5d06:	691b      	ldr	r3, [r3, #16]
   b5d08:	4798      	blx	r3
        if (!rv) {
   b5d0a:	4604      	mov	r4, r0
   b5d0c:	b928      	cbnz	r0, b5d1a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b5d0e:	682b      	ldr	r3, [r5, #0]
   b5d10:	4628      	mov	r0, r5
   b5d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5d14:	4798      	blx	r3
        rv = available();
   b5d16:	4620      	mov	r0, r4
}
   b5d18:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b5d1a:	2001      	movs	r0, #1
   b5d1c:	e7fc      	b.n	b5d18 <_ZN9TCPClient9connectedEv+0x2c>

000b5d1e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b5d1e:	b510      	push	{r4, lr}
   b5d20:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5d22:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5d26:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5d2a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b5d2c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5d2e:	d005      	beq.n	b5d3c <_ZN9TCPClient4peekEv+0x1e>
   b5d30:	6963      	ldr	r3, [r4, #20]
   b5d32:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5d36:	4413      	add	r3, r2
   b5d38:	7918      	ldrb	r0, [r3, #4]
}
   b5d3a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5d3c:	6803      	ldr	r3, [r0, #0]
   b5d3e:	691b      	ldr	r3, [r3, #16]
   b5d40:	4798      	blx	r3
   b5d42:	2800      	cmp	r0, #0
   b5d44:	d1f4      	bne.n	b5d30 <_ZN9TCPClient4peekEv+0x12>
   b5d46:	f04f 30ff 	mov.w	r0, #4294967295
   b5d4a:	e7f6      	b.n	b5d3a <_ZN9TCPClient4peekEv+0x1c>

000b5d4c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d4e:	6943      	ldr	r3, [r0, #20]
   b5d50:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b5d52:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5d56:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5d5a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5d5c:	4605      	mov	r5, r0
   b5d5e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5d60:	d016      	beq.n	b5d90 <_ZN9TCPClient4readEPhj+0x44>
   b5d62:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b5d64:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b5d68:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5d6c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5d6e:	42bc      	cmp	r4, r7
   b5d70:	bf28      	it	cs
   b5d72:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5d74:	3304      	adds	r3, #4
   b5d76:	4622      	mov	r2, r4
   b5d78:	4419      	add	r1, r3
   b5d7a:	4630      	mov	r0, r6
   b5d7c:	f000 fc72 	bl	b6664 <memcpy>
   b5d80:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b5d82:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b5d86:	4423      	add	r3, r4
   b5d88:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5d8c:	4620      	mov	r0, r4
   b5d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5d90:	6803      	ldr	r3, [r0, #0]
   b5d92:	691b      	ldr	r3, [r3, #16]
   b5d94:	4798      	blx	r3
   b5d96:	2800      	cmp	r0, #0
   b5d98:	d1e3      	bne.n	b5d62 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b5d9a:	f04f 34ff 	mov.w	r4, #4294967295
   b5d9e:	e7f5      	b.n	b5d8c <_ZN9TCPClient4readEPhj+0x40>

000b5da0 <_ZN9TCPClient12flush_bufferEv>:
   b5da0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b5da2:	2300      	movs	r3, #0
   b5da4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b5da8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b5daa:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b5dae:	4770      	bx	lr

000b5db0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5db4:	461f      	mov	r7, r3
    stop();
   b5db6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5db8:	460c      	mov	r4, r1
    stop();
   b5dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5dbc:	b08a      	sub	sp, #40	; 0x28
   b5dbe:	4605      	mov	r5, r0
   b5dc0:	4616      	mov	r6, r2
    stop();
   b5dc2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b5dc4:	7d23      	ldrb	r3, [r4, #20]
   b5dc6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b5dca:	2b04      	cmp	r3, #4
   b5dcc:	bf0c      	ite	eq
   b5dce:	2002      	moveq	r0, #2
   b5dd0:	200a      	movne	r0, #10
   b5dd2:	2206      	movs	r2, #6
   b5dd4:	2101      	movs	r1, #1
   b5dd6:	f7ff f8c1 	bl	b4f5c <sock_socket>
   b5dda:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b5dde:	696b      	ldr	r3, [r5, #20]
   b5de0:	681b      	ldr	r3, [r3, #0]
   b5de2:	2b00      	cmp	r3, #0
   b5de4:	da08      	bge.n	b5df8 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b5de6:	682b      	ldr	r3, [r5, #0]
   b5de8:	4628      	mov	r0, r5
   b5dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5dec:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b5dee:	4798      	blx	r3
}
   b5df0:	4620      	mov	r0, r4
   b5df2:	b00a      	add	sp, #40	; 0x28
   b5df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5df8:	4628      	mov	r0, r5
   b5dfa:	f7ff ffd1 	bl	b5da0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b5dfe:	b1b7      	cbz	r7, b5e2e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5e00:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5e02:	a903      	add	r1, sp, #12
   b5e04:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b5e06:	9303      	str	r3, [sp, #12]
   b5e08:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5e0c:	f7fe ffae 	bl	b4d6c <if_index_to_name>
   b5e10:	2800      	cmp	r0, #0
   b5e12:	d1e8      	bne.n	b5de6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5e14:	6968      	ldr	r0, [r5, #20]
   b5e16:	2306      	movs	r3, #6
   b5e18:	9300      	str	r3, [sp, #0]
   b5e1a:	6800      	ldr	r0, [r0, #0]
   b5e1c:	ab03      	add	r3, sp, #12
   b5e1e:	f241 020b 	movw	r2, #4107	; 0x100b
   b5e22:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5e26:	f7ff f871 	bl	b4f0c <sock_setsockopt>
   b5e2a:	2800      	cmp	r0, #0
   b5e2c:	d1db      	bne.n	b5de6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b5e2e:	221c      	movs	r2, #28
   b5e30:	2100      	movs	r1, #0
   b5e32:	a803      	add	r0, sp, #12
   b5e34:	f000 fc24 	bl	b6680 <memset>
    if (ip.version() == 4) {
   b5e38:	7d23      	ldrb	r3, [r4, #20]
   b5e3a:	2b04      	cmp	r3, #4
   b5e3c:	d11d      	bne.n	b5e7a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b5e3e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5e42:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5e44:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5e48:	f7fe ffc8 	bl	b4ddc <inet_htons>
   b5e4c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5e50:	6860      	ldr	r0, [r4, #4]
   b5e52:	f7fe ffbb 	bl	b4dcc <inet_htonl>
   b5e56:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5e58:	696b      	ldr	r3, [r5, #20]
   b5e5a:	221c      	movs	r2, #28
   b5e5c:	6818      	ldr	r0, [r3, #0]
   b5e5e:	a903      	add	r1, sp, #12
   b5e60:	f7ff f864 	bl	b4f2c <sock_connect>
   b5e64:	2800      	cmp	r0, #0
   b5e66:	d1be      	bne.n	b5de6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b5e68:	3404      	adds	r4, #4
   b5e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5e6c:	696d      	ldr	r5, [r5, #20]
   b5e6e:	358c      	adds	r5, #140	; 0x8c
   b5e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5e72:	6823      	ldr	r3, [r4, #0]
   b5e74:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b5e76:	2401      	movs	r4, #1
   b5e78:	e7ba      	b.n	b5df0 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b5e7a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5e7e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5e80:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b5e84:	f7fe ffaa 	bl	b4ddc <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5e88:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b5e8a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5e8e:	1d23      	adds	r3, r4, #4
   b5e90:	f104 0714 	add.w	r7, r4, #20
   b5e94:	6818      	ldr	r0, [r3, #0]
   b5e96:	6859      	ldr	r1, [r3, #4]
   b5e98:	4632      	mov	r2, r6
   b5e9a:	c203      	stmia	r2!, {r0, r1}
   b5e9c:	3308      	adds	r3, #8
   b5e9e:	42bb      	cmp	r3, r7
   b5ea0:	4616      	mov	r6, r2
   b5ea2:	d1f7      	bne.n	b5e94 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b5ea4:	e7d8      	b.n	b5e58 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b5ea8 <_ZN9TCPClient9availableEv>:
{
   b5ea8:	b530      	push	{r4, r5, lr}
   b5eaa:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b5eac:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b5eb0:	b08b      	sub	sp, #44	; 0x2c
   b5eb2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b5eb4:	b12b      	cbz	r3, b5ec2 <_ZN9TCPClient9availableEv+0x1a>
   b5eb6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b5eba:	429a      	cmp	r2, r3
   b5ebc:	d101      	bne.n	b5ec2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b5ebe:	f7ff ff6f 	bl	b5da0 <_ZN9TCPClient12flush_bufferEv>
   b5ec2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b5ec4:	6808      	ldr	r0, [r1, #0]
   b5ec6:	2800      	cmp	r0, #0
   b5ec8:	db18      	blt.n	b5efc <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b5eca:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b5ece:	2d7f      	cmp	r5, #127	; 0x7f
   b5ed0:	d814      	bhi.n	b5efc <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b5ed2:	3104      	adds	r1, #4
   b5ed4:	2308      	movs	r3, #8
   b5ed6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b5eda:	4429      	add	r1, r5
   b5edc:	f7ff f82e 	bl	b4f3c <sock_recv>
            if (ret > 0) {
   b5ee0:	2800      	cmp	r0, #0
   b5ee2:	dd13      	ble.n	b5f0c <_ZN9TCPClient9availableEv+0x64>
   b5ee4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b5ee6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5eea:	b90a      	cbnz	r2, b5ef0 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b5eec:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b5ef0:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b5ef2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5ef6:	4410      	add	r0, r2
   b5ef8:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b5efc:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b5efe:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b5f02:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b5f06:	1ac0      	subs	r0, r0, r3
   b5f08:	b00b      	add	sp, #44	; 0x2c
   b5f0a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b5f0c:	f7ff f962 	bl	b51d4 <__errno>
   b5f10:	6803      	ldr	r3, [r0, #0]
   b5f12:	2b0b      	cmp	r3, #11
   b5f14:	d0f2      	beq.n	b5efc <_ZN9TCPClient9availableEv+0x54>
   b5f16:	f7ff f95d 	bl	b51d4 <__errno>
   b5f1a:	6803      	ldr	r3, [r0, #0]
   b5f1c:	2b0b      	cmp	r3, #11
   b5f1e:	d0ed      	beq.n	b5efc <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5f20:	2320      	movs	r3, #32
   b5f22:	2500      	movs	r5, #0
   b5f24:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b5f28:	f7ff f954 	bl	b51d4 <__errno>
   b5f2c:	6803      	ldr	r3, [r0, #0]
   b5f2e:	9301      	str	r3, [sp, #4]
   b5f30:	4b08      	ldr	r3, [pc, #32]	; (b5f54 <_ZN9TCPClient9availableEv+0xac>)
   b5f32:	4909      	ldr	r1, [pc, #36]	; (b5f58 <_ZN9TCPClient9availableEv+0xb0>)
   b5f34:	9300      	str	r3, [sp, #0]
   b5f36:	aa02      	add	r2, sp, #8
   b5f38:	462b      	mov	r3, r5
   b5f3a:	2032      	movs	r0, #50	; 0x32
   b5f3c:	f7ff f89e 	bl	b507c <log_message>
                    sock_close(d_->sock);
   b5f40:	6963      	ldr	r3, [r4, #20]
   b5f42:	6818      	ldr	r0, [r3, #0]
   b5f44:	f7fe ffea 	bl	b4f1c <sock_close>
   b5f48:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b5f4a:	f04f 32ff 	mov.w	r2, #4294967295
   b5f4e:	601a      	str	r2, [r3, #0]
   b5f50:	e7d4      	b.n	b5efc <_ZN9TCPClient9availableEv+0x54>
   b5f52:	bf00      	nop
   b5f54:	000b6e9b 	.word	0x000b6e9b
   b5f58:	000b6e94 	.word	0x000b6e94

000b5f5c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5f5c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b5f5e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5f60:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b5f62:	6818      	ldr	r0, [r3, #0]
   b5f64:	2800      	cmp	r0, #0
   b5f66:	db01      	blt.n	b5f6c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b5f68:	f7fe ffd8 	bl	b4f1c <sock_close>
   b5f6c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5f6e:	f04f 32ff 	mov.w	r2, #4294967295
   b5f72:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5f74:	6960      	ldr	r0, [r4, #20]
   b5f76:	2211      	movs	r2, #17
   b5f78:	2100      	movs	r1, #0
   b5f7a:	308c      	adds	r0, #140	; 0x8c
   b5f7c:	f000 fb80 	bl	b6680 <memset>
    flush_buffer();
   b5f80:	4620      	mov	r0, r4
}
   b5f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b5f86:	f7ff bf0b 	b.w	b5da0 <_ZN9TCPClient12flush_bufferEv>

000b5f8a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b5f8a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5f8c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5f8e:	4604      	mov	r4, r0
          total(0) {
   b5f90:	6001      	str	r1, [r0, #0]
   b5f92:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b5f96:	3088      	adds	r0, #136	; 0x88
   b5f98:	f7ff fbee 	bl	b5778 <_ZN9IPAddressC1Ev>
}
   b5f9c:	4620      	mov	r0, r4
   b5f9e:	bd10      	pop	{r4, pc}

000b5fa0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b5fa0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5fa2:	2300      	movs	r3, #0
   b5fa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5fa8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b5fac:	4a0e      	ldr	r2, [pc, #56]	; (b5fe8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b5fae:	6103      	str	r3, [r0, #16]
   b5fb0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5fb2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b5fb4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5fb6:	20ac      	movs	r0, #172	; 0xac
   b5fb8:	9101      	str	r1, [sp, #4]
   b5fba:	f7fe f86a 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5fbe:	1e05      	subs	r5, r0, #0
   b5fc0:	f105 060c 	add.w	r6, r5, #12
   b5fc4:	d008      	beq.n	b5fd8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b5fc6:	2301      	movs	r3, #1
   b5fc8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5fcc:	4b07      	ldr	r3, [pc, #28]	; (b5fec <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5fce:	9901      	ldr	r1, [sp, #4]
   b5fd0:	602b      	str	r3, [r5, #0]
   b5fd2:	4630      	mov	r0, r6
   b5fd4:	f7ff ffd9 	bl	b5f8a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b5fd8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b5fda:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b5fde:	f7ff fedf 	bl	b5da0 <_ZN9TCPClient12flush_bufferEv>
}
   b5fe2:	b002      	add	sp, #8
   b5fe4:	bd70      	pop	{r4, r5, r6, pc}
   b5fe6:	bf00      	nop
   b5fe8:	000b6ed0 	.word	0x000b6ed0
   b5fec:	000b6eb4 	.word	0x000b6eb4

000b5ff0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b5ff0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b5ff2:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b5ff6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b5ff8:	f7ff ffd2 	bl	b5fa0 <_ZN9TCPClientC1Ei>
}
   b5ffc:	4620      	mov	r0, r4
   b5ffe:	bd10      	pop	{r4, pc}

000b6000 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b6000:	b510      	push	{r4, lr}
   b6002:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6004:	6800      	ldr	r0, [r0, #0]
   b6006:	2800      	cmp	r0, #0
   b6008:	db01      	blt.n	b600e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b600a:	f7fe ff87 	bl	b4f1c <sock_close>
    }
}
   b600e:	4620      	mov	r0, r4
   b6010:	bd10      	pop	{r4, pc}

000b6012 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6012:	300c      	adds	r0, #12
   b6014:	f7ff bff4 	b.w	b6000 <_ZN9TCPClient4DataD1Ev>

000b6018 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6018:	2200      	movs	r2, #0
   b601a:	6840      	ldr	r0, [r0, #4]
   b601c:	4611      	mov	r1, r2
   b601e:	f7ff b871 	b.w	b5104 <network_ready>

000b6022 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6022:	2200      	movs	r2, #0
   b6024:	6840      	ldr	r0, [r0, #4]
   b6026:	4611      	mov	r1, r2
   b6028:	f7ff b88c 	b.w	b5144 <network_listening>

000b602c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b602c:	2200      	movs	r2, #0
   b602e:	6840      	ldr	r0, [r0, #4]
   b6030:	4611      	mov	r1, r2
   b6032:	f7ff b897 	b.w	b5164 <network_get_listen_timeout>

000b6036 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6036:	6840      	ldr	r0, [r0, #4]
   b6038:	2200      	movs	r2, #0
   b603a:	f7ff b88b 	b.w	b5154 <network_set_listen_timeout>

000b603e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b603e:	6840      	ldr	r0, [r0, #4]
   b6040:	2200      	movs	r2, #0
   b6042:	f081 0101 	eor.w	r1, r1, #1
   b6046:	f7ff b875 	b.w	b5134 <network_listen>

000b604a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b604a:	2300      	movs	r3, #0
   b604c:	6840      	ldr	r0, [r0, #4]
   b604e:	461a      	mov	r2, r3
   b6050:	4619      	mov	r1, r3
   b6052:	f7ff b867 	b.w	b5124 <network_off>

000b6056 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6056:	2300      	movs	r3, #0
   b6058:	6840      	ldr	r0, [r0, #4]
   b605a:	461a      	mov	r2, r3
   b605c:	4619      	mov	r1, r3
   b605e:	f7ff b859 	b.w	b5114 <network_on>

000b6062 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6062:	2200      	movs	r2, #0
   b6064:	6840      	ldr	r0, [r0, #4]
   b6066:	4611      	mov	r1, r2
   b6068:	f7ff b83c 	b.w	b50e4 <network_connecting>

000b606c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b606c:	6840      	ldr	r0, [r0, #4]
   b606e:	2200      	movs	r2, #0
   b6070:	2102      	movs	r1, #2
   b6072:	f7ff b83f 	b.w	b50f4 <network_disconnect>

000b6076 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6076:	2300      	movs	r3, #0
   b6078:	6840      	ldr	r0, [r0, #4]
   b607a:	461a      	mov	r2, r3
   b607c:	f7ff b82a 	b.w	b50d4 <network_connect>

000b6080 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6080:	4b02      	ldr	r3, [pc, #8]	; (b608c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6082:	2204      	movs	r2, #4
   b6084:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6086:	4a02      	ldr	r2, [pc, #8]	; (b6090 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6088:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b608a:	4770      	bx	lr
   b608c:	2003e718 	.word	0x2003e718
   b6090:	000b6f1c 	.word	0x000b6f1c

000b6094 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6094:	2300      	movs	r3, #0
   b6096:	6840      	ldr	r0, [r0, #4]
   b6098:	461a      	mov	r2, r3
   b609a:	f7ff b81b 	b.w	b50d4 <network_connect>

000b609e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b609e:	6840      	ldr	r0, [r0, #4]
   b60a0:	2200      	movs	r2, #0
   b60a2:	2102      	movs	r1, #2
   b60a4:	f7ff b826 	b.w	b50f4 <network_disconnect>

000b60a8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b60a8:	2200      	movs	r2, #0
   b60aa:	6840      	ldr	r0, [r0, #4]
   b60ac:	4611      	mov	r1, r2
   b60ae:	f7ff b819 	b.w	b50e4 <network_connecting>

000b60b2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b60b2:	2200      	movs	r2, #0
   b60b4:	6840      	ldr	r0, [r0, #4]
   b60b6:	4611      	mov	r1, r2
   b60b8:	f7ff b824 	b.w	b5104 <network_ready>

000b60bc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b60bc:	2300      	movs	r3, #0
   b60be:	6840      	ldr	r0, [r0, #4]
   b60c0:	461a      	mov	r2, r3
   b60c2:	4619      	mov	r1, r3
   b60c4:	f7ff b826 	b.w	b5114 <network_on>

000b60c8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b60c8:	2300      	movs	r3, #0
   b60ca:	6840      	ldr	r0, [r0, #4]
   b60cc:	461a      	mov	r2, r3
   b60ce:	4619      	mov	r1, r3
   b60d0:	f7ff b828 	b.w	b5124 <network_off>

000b60d4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b60d4:	6840      	ldr	r0, [r0, #4]
   b60d6:	2100      	movs	r1, #0
   b60d8:	f7ff b84c 	b.w	b5174 <network_is_on>

000b60dc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b60dc:	6840      	ldr	r0, [r0, #4]
   b60de:	2100      	movs	r1, #0
   b60e0:	f7ff b850 	b.w	b5184 <network_is_off>

000b60e4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b60e4:	6840      	ldr	r0, [r0, #4]
   b60e6:	2200      	movs	r2, #0
   b60e8:	f081 0101 	eor.w	r1, r1, #1
   b60ec:	f7ff b822 	b.w	b5134 <network_listen>

000b60f0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b60f0:	6840      	ldr	r0, [r0, #4]
   b60f2:	2200      	movs	r2, #0
   b60f4:	f7ff b82e 	b.w	b5154 <network_set_listen_timeout>

000b60f8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b60f8:	2200      	movs	r2, #0
   b60fa:	6840      	ldr	r0, [r0, #4]
   b60fc:	4611      	mov	r1, r2
   b60fe:	f7ff b831 	b.w	b5164 <network_get_listen_timeout>

000b6102 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6102:	2200      	movs	r2, #0
   b6104:	6840      	ldr	r0, [r0, #4]
   b6106:	4611      	mov	r1, r2
   b6108:	f7ff b81c 	b.w	b5144 <network_listening>

000b610c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b610c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6110:	b095      	sub	sp, #84	; 0x54
   b6112:	4614      	mov	r4, r2
   b6114:	460d      	mov	r5, r1
   b6116:	4607      	mov	r7, r0
    IPAddress addr;
   b6118:	f7ff fb2e 	bl	b5778 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b611c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b611e:	221c      	movs	r2, #28
   b6120:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6122:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6124:	f000 faac 	bl	b6680 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6128:	2340      	movs	r3, #64	; 0x40
   b612a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b612c:	4620      	mov	r0, r4
   b612e:	466b      	mov	r3, sp
   b6130:	aa0c      	add	r2, sp, #48	; 0x30
   b6132:	2100      	movs	r1, #0
   b6134:	f7fe fdf2 	bl	b4d1c <netdb_getaddrinfo>
    if (!r) {
   b6138:	4604      	mov	r4, r0
   b613a:	2800      	cmp	r0, #0
   b613c:	d14b      	bne.n	b61d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b613e:	4602      	mov	r2, r0
   b6140:	2101      	movs	r1, #1
   b6142:	6868      	ldr	r0, [r5, #4]
   b6144:	f7fe ffde 	bl	b5104 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6148:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b614a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b614c:	4622      	mov	r2, r4
   b614e:	6868      	ldr	r0, [r5, #4]
   b6150:	f7fe ffd8 	bl	b5104 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6154:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6156:	4681      	mov	r9, r0
        bool ok = false;
   b6158:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b615a:	2e00      	cmp	r6, #0
   b615c:	d03b      	beq.n	b61d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b615e:	2900      	cmp	r1, #0
   b6160:	d139      	bne.n	b61d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6162:	6873      	ldr	r3, [r6, #4]
   b6164:	2b02      	cmp	r3, #2
   b6166:	d003      	beq.n	b6170 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6168:	2b0a      	cmp	r3, #10
   b616a:	d011      	beq.n	b6190 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b616c:	69f6      	ldr	r6, [r6, #28]
   b616e:	e7f4      	b.n	b615a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6170:	f1b8 0f00 	cmp.w	r8, #0
   b6174:	d0fa      	beq.n	b616c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6176:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6178:	a806      	add	r0, sp, #24
   b617a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b617c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b617e:	f7ff fb3f 	bl	b5800 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6184:	1d3c      	adds	r4, r7, #4
   b6186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6188:	682b      	ldr	r3, [r5, #0]
   b618a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b618c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b618e:	e7ed      	b.n	b616c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6190:	f1b9 0f00 	cmp.w	r9, #0
   b6194:	d0ea      	beq.n	b616c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6196:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6198:	2210      	movs	r2, #16
   b619a:	a801      	add	r0, sp, #4
   b619c:	f000 fa70 	bl	b6680 <memset>
                    a.v = 6;
   b61a0:	2306      	movs	r3, #6
   b61a2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b61a6:	ad01      	add	r5, sp, #4
   b61a8:	f104 0308 	add.w	r3, r4, #8
   b61ac:	3418      	adds	r4, #24
   b61ae:	6818      	ldr	r0, [r3, #0]
   b61b0:	6859      	ldr	r1, [r3, #4]
   b61b2:	462a      	mov	r2, r5
   b61b4:	c203      	stmia	r2!, {r0, r1}
   b61b6:	3308      	adds	r3, #8
   b61b8:	42a3      	cmp	r3, r4
   b61ba:	4615      	mov	r5, r2
   b61bc:	d1f7      	bne.n	b61ae <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b61be:	a901      	add	r1, sp, #4
   b61c0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b61c2:	ad07      	add	r5, sp, #28
   b61c4:	f7ff fae6 	bl	b5794 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b61c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b61ca:	1d3c      	adds	r4, r7, #4
   b61cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b61ce:	682b      	ldr	r3, [r5, #0]
   b61d0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b61d2:	4649      	mov	r1, r9
   b61d4:	e7ca      	b.n	b616c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b61d6:	9800      	ldr	r0, [sp, #0]
   b61d8:	f7fe fd98 	bl	b4d0c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b61dc:	4638      	mov	r0, r7
   b61de:	b015      	add	sp, #84	; 0x54
   b61e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b61e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b61e4:	4b02      	ldr	r3, [pc, #8]	; (b61f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b61e6:	4a03      	ldr	r2, [pc, #12]	; (b61f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b61e8:	601a      	str	r2, [r3, #0]
   b61ea:	2200      	movs	r2, #0
   b61ec:	605a      	str	r2, [r3, #4]

} // spark
   b61ee:	4770      	bx	lr
   b61f0:	2003e720 	.word	0x2003e720
   b61f4:	000b6f58 	.word	0x000b6f58

000b61f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b61f8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b61fa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b61fc:	d902      	bls.n	b6204 <pinAvailable+0xc>
    return false;
   b61fe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6200:	b002      	add	sp, #8
   b6202:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6204:	f1a0 030b 	sub.w	r3, r0, #11
   b6208:	2b02      	cmp	r3, #2
   b620a:	d81a      	bhi.n	b6242 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b620c:	4c17      	ldr	r4, [pc, #92]	; (b626c <pinAvailable+0x74>)
   b620e:	7821      	ldrb	r1, [r4, #0]
   b6210:	f3bf 8f5b 	dmb	ish
   b6214:	f011 0101 	ands.w	r1, r1, #1
   b6218:	d10b      	bne.n	b6232 <pinAvailable+0x3a>
   b621a:	4620      	mov	r0, r4
   b621c:	9101      	str	r1, [sp, #4]
   b621e:	f7fd ff4b 	bl	b40b8 <__cxa_guard_acquire>
   b6222:	9901      	ldr	r1, [sp, #4]
   b6224:	b128      	cbz	r0, b6232 <pinAvailable+0x3a>
   b6226:	4812      	ldr	r0, [pc, #72]	; (b6270 <pinAvailable+0x78>)
   b6228:	f7ff f830 	bl	b528c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b622c:	4620      	mov	r0, r4
   b622e:	f7fd ff48 	bl	b40c2 <__cxa_guard_release>
   b6232:	4b0f      	ldr	r3, [pc, #60]	; (b6270 <pinAvailable+0x78>)
   b6234:	7818      	ldrb	r0, [r3, #0]
   b6236:	f7fe fec9 	bl	b4fcc <hal_spi_is_enabled>
   b623a:	2800      	cmp	r0, #0
   b623c:	d1df      	bne.n	b61fe <pinAvailable+0x6>
  return true; // 'pin' is available
   b623e:	2001      	movs	r0, #1
   b6240:	e7de      	b.n	b6200 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6242:	2801      	cmp	r0, #1
   b6244:	d809      	bhi.n	b625a <pinAvailable+0x62>
   b6246:	f000 f8cf 	bl	b63e8 <_Z19__fetch_global_Wirev>
   b624a:	2100      	movs	r1, #0
   b624c:	7c00      	ldrb	r0, [r0, #16]
   b624e:	f7fe fe4d 	bl	b4eec <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6252:	f080 0001 	eor.w	r0, r0, #1
   b6256:	b2c0      	uxtb	r0, r0
   b6258:	e7d2      	b.n	b6200 <pinAvailable+0x8>
   b625a:	3809      	subs	r0, #9
   b625c:	2801      	cmp	r0, #1
   b625e:	d8ee      	bhi.n	b623e <pinAvailable+0x46>
   b6260:	f000 f882 	bl	b6368 <_Z22__fetch_global_Serial1v>
   b6264:	7c00      	ldrb	r0, [r0, #16]
   b6266:	f7fe fde9 	bl	b4e3c <hal_usart_is_enabled>
   b626a:	e7f2      	b.n	b6252 <pinAvailable+0x5a>
   b626c:	2003e6b8 	.word	0x2003e6b8
   b6270:	2003e6bc 	.word	0x2003e6bc

000b6274 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6274:	2823      	cmp	r0, #35	; 0x23
{
   b6276:	b538      	push	{r3, r4, r5, lr}
   b6278:	4604      	mov	r4, r0
   b627a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b627c:	d80a      	bhi.n	b6294 <pinMode+0x20>
   b627e:	29ff      	cmp	r1, #255	; 0xff
   b6280:	d008      	beq.n	b6294 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6282:	f7ff ffb9 	bl	b61f8 <pinAvailable>
   b6286:	b128      	cbz	r0, b6294 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6288:	4629      	mov	r1, r5
   b628a:	4620      	mov	r0, r4
}
   b628c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6290:	f7fe bd4c 	b.w	b4d2c <HAL_Pin_Mode>
}
   b6294:	bd38      	pop	{r3, r4, r5, pc}

000b6296 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6296:	b538      	push	{r3, r4, r5, lr}
   b6298:	4604      	mov	r4, r0
   b629a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b629c:	f7fe fd4e 	bl	b4d3c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b62a0:	28ff      	cmp	r0, #255	; 0xff
   b62a2:	d010      	beq.n	b62c6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b62a4:	2806      	cmp	r0, #6
   b62a6:	d804      	bhi.n	b62b2 <digitalWrite+0x1c>
   b62a8:	234d      	movs	r3, #77	; 0x4d
   b62aa:	fa23 f000 	lsr.w	r0, r3, r0
   b62ae:	07c3      	lsls	r3, r0, #31
   b62b0:	d409      	bmi.n	b62c6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b62b2:	4620      	mov	r0, r4
   b62b4:	f7ff ffa0 	bl	b61f8 <pinAvailable>
   b62b8:	b128      	cbz	r0, b62c6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b62ba:	4629      	mov	r1, r5
   b62bc:	4620      	mov	r0, r4
}
   b62be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b62c2:	f7fe bd43 	b.w	b4d4c <HAL_GPIO_Write>
}
   b62c6:	bd38      	pop	{r3, r4, r5, pc}

000b62c8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b62c8:	b510      	push	{r4, lr}
   b62ca:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b62cc:	f7fe fd36 	bl	b4d3c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b62d0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b62d2:	b2db      	uxtb	r3, r3
   b62d4:	2b01      	cmp	r3, #1
   b62d6:	d908      	bls.n	b62ea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b62d8:	4620      	mov	r0, r4
   b62da:	f7ff ff8d 	bl	b61f8 <pinAvailable>
   b62de:	b120      	cbz	r0, b62ea <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b62e0:	4620      	mov	r0, r4
}
   b62e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b62e6:	f7fe bd39 	b.w	b4d5c <HAL_GPIO_Read>
}
   b62ea:	2000      	movs	r0, #0
   b62ec:	bd10      	pop	{r4, pc}

000b62ee <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b62ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b62f2:	4690      	mov	r8, r2
   b62f4:	461f      	mov	r7, r3
   b62f6:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b62f8:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b62fa:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b62fc:	f1c4 0107 	rsb	r1, r4, #7
   b6300:	f1b8 0f00 	cmp.w	r8, #0
   b6304:	d112      	bne.n	b632c <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b6306:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b630a:	f001 0101 	and.w	r1, r1, #1
   b630e:	4630      	mov	r0, r6
   b6310:	f7ff ffc1 	bl	b6296 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b6314:	2101      	movs	r1, #1
   b6316:	4628      	mov	r0, r5
   b6318:	f7ff ffbd 	bl	b6296 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b631c:	2100      	movs	r1, #0
   b631e:	4628      	mov	r0, r5
   b6320:	f7ff ffb9 	bl	b6296 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b6324:	3c01      	subs	r4, #1
   b6326:	d2e9      	bcs.n	b62fc <shiftOut+0xe>
  }
}
   b6328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b632c:	fa47 f104 	asr.w	r1, r7, r4
   b6330:	e7eb      	b.n	b630a <shiftOut+0x1c>

000b6332 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6332:	4770      	bx	lr

000b6334 <_Z20acquireSerial1Bufferv>:
{
   b6334:	b538      	push	{r3, r4, r5, lr}
   b6336:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6338:	2514      	movs	r5, #20
   b633a:	462a      	mov	r2, r5
   b633c:	2100      	movs	r1, #0
   b633e:	f000 f99f 	bl	b6680 <memset>
   b6342:	8025      	strh	r5, [r4, #0]
   b6344:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6346:	4907      	ldr	r1, [pc, #28]	; (b6364 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6348:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b634a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b634c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b634e:	f000 f86f 	bl	b6430 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6352:	4904      	ldr	r1, [pc, #16]	; (b6364 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6354:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6356:	4628      	mov	r0, r5
   b6358:	f000 f86a 	bl	b6430 <_ZnajRKSt9nothrow_t>
    };
   b635c:	60e0      	str	r0, [r4, #12]
}
   b635e:	4620      	mov	r0, r4
   b6360:	bd38      	pop	{r3, r4, r5, pc}
   b6362:	bf00      	nop
   b6364:	000b6f8c 	.word	0x000b6f8c

000b6368 <_Z22__fetch_global_Serial1v>:
{
   b6368:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b636a:	4d0e      	ldr	r5, [pc, #56]	; (b63a4 <_Z22__fetch_global_Serial1v+0x3c>)
   b636c:	7829      	ldrb	r1, [r5, #0]
   b636e:	f3bf 8f5b 	dmb	ish
   b6372:	f011 0401 	ands.w	r4, r1, #1
{
   b6376:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6378:	d111      	bne.n	b639e <_Z22__fetch_global_Serial1v+0x36>
   b637a:	4628      	mov	r0, r5
   b637c:	f7fd fe9c 	bl	b40b8 <__cxa_guard_acquire>
   b6380:	b168      	cbz	r0, b639e <_Z22__fetch_global_Serial1v+0x36>
   b6382:	a801      	add	r0, sp, #4
   b6384:	f7ff ffd6 	bl	b6334 <_Z20acquireSerial1Bufferv>
   b6388:	aa01      	add	r2, sp, #4
   b638a:	4621      	mov	r1, r4
   b638c:	4806      	ldr	r0, [pc, #24]	; (b63a8 <_Z22__fetch_global_Serial1v+0x40>)
   b638e:	f7ff fb05 	bl	b599c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6392:	4628      	mov	r0, r5
   b6394:	f7fd fe95 	bl	b40c2 <__cxa_guard_release>
   b6398:	4804      	ldr	r0, [pc, #16]	; (b63ac <_Z22__fetch_global_Serial1v+0x44>)
   b639a:	f000 f95d 	bl	b6658 <atexit>
    return serial1;
}
   b639e:	4802      	ldr	r0, [pc, #8]	; (b63a8 <_Z22__fetch_global_Serial1v+0x40>)
   b63a0:	b007      	add	sp, #28
   b63a2:	bd30      	pop	{r4, r5, pc}
   b63a4:	2003e728 	.word	0x2003e728
   b63a8:	2003e72c 	.word	0x2003e72c
   b63ac:	000b6333 	.word	0x000b6333

000b63b0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b63b0:	4770      	bx	lr
	...

000b63b4 <_Z17acquireWireBufferv>:
{
   b63b4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b63b6:	4b0a      	ldr	r3, [pc, #40]	; (b63e0 <_Z17acquireWireBufferv+0x2c>)
   b63b8:	6003      	str	r3, [r0, #0]
   b63ba:	2301      	movs	r3, #1
{
   b63bc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b63be:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b63c0:	4908      	ldr	r1, [pc, #32]	; (b63e4 <_Z17acquireWireBufferv+0x30>)
   b63c2:	2020      	movs	r0, #32
   b63c4:	f000 f834 	bl	b6430 <_ZnajRKSt9nothrow_t>
	};
   b63c8:	2520      	movs	r5, #32
   b63ca:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b63cc:	4905      	ldr	r1, [pc, #20]	; (b63e4 <_Z17acquireWireBufferv+0x30>)
	};
   b63ce:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b63d0:	4628      	mov	r0, r5
   b63d2:	f000 f82d 	bl	b6430 <_ZnajRKSt9nothrow_t>
	};
   b63d6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b63da:	4620      	mov	r0, r4
   b63dc:	bd38      	pop	{r3, r4, r5, pc}
   b63de:	bf00      	nop
   b63e0:	00010018 	.word	0x00010018
   b63e4:	000b6f8c 	.word	0x000b6f8c

000b63e8 <_Z19__fetch_global_Wirev>:
{
   b63e8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b63ea:	4d0e      	ldr	r5, [pc, #56]	; (b6424 <_Z19__fetch_global_Wirev+0x3c>)
   b63ec:	7829      	ldrb	r1, [r5, #0]
   b63ee:	f3bf 8f5b 	dmb	ish
   b63f2:	f011 0401 	ands.w	r4, r1, #1
{
   b63f6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b63f8:	d111      	bne.n	b641e <_Z19__fetch_global_Wirev+0x36>
   b63fa:	4628      	mov	r0, r5
   b63fc:	f7fd fe5c 	bl	b40b8 <__cxa_guard_acquire>
   b6400:	b168      	cbz	r0, b641e <_Z19__fetch_global_Wirev+0x36>
   b6402:	4668      	mov	r0, sp
   b6404:	f7ff ffd6 	bl	b63b4 <_Z17acquireWireBufferv>
   b6408:	466a      	mov	r2, sp
   b640a:	4621      	mov	r1, r4
   b640c:	4806      	ldr	r0, [pc, #24]	; (b6428 <_Z19__fetch_global_Wirev+0x40>)
   b640e:	f7ff fb05 	bl	b5a1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6412:	4628      	mov	r0, r5
   b6414:	f7fd fe55 	bl	b40c2 <__cxa_guard_release>
   b6418:	4804      	ldr	r0, [pc, #16]	; (b642c <_Z19__fetch_global_Wirev+0x44>)
   b641a:	f000 f91d 	bl	b6658 <atexit>
	return wire;
}
   b641e:	4802      	ldr	r0, [pc, #8]	; (b6428 <_Z19__fetch_global_Wirev+0x40>)
   b6420:	b007      	add	sp, #28
   b6422:	bd30      	pop	{r4, r5, pc}
   b6424:	2003e744 	.word	0x2003e744
   b6428:	2003e748 	.word	0x2003e748
   b642c:	000b63b1 	.word	0x000b63b1

000b6430 <_ZnajRKSt9nothrow_t>:
   b6430:	f7fd be31 	b.w	b4096 <_Znaj>

000b6434 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6434:	4901      	ldr	r1, [pc, #4]	; (b643c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6436:	f000 b8f9 	b.w	b662c <_ZNKSt9type_infoeqERKS_>
   b643a:	bf00      	nop
   b643c:	000b6fa8 	.word	0x000b6fa8

000b6440 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6440:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6442:	2400      	movs	r4, #0
   b6444:	2310      	movs	r3, #16
   b6446:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b644a:	6803      	ldr	r3, [r0, #0]
   b644c:	4615      	mov	r5, r2
   b644e:	699e      	ldr	r6, [r3, #24]
   b6450:	6812      	ldr	r2, [r2, #0]
   b6452:	466b      	mov	r3, sp
   b6454:	e9cd 4400 	strd	r4, r4, [sp]
   b6458:	47b0      	blx	r6
   b645a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b645e:	f003 0306 	and.w	r3, r3, #6
   b6462:	2b06      	cmp	r3, #6
   b6464:	bf03      	ittte	eq
   b6466:	9b00      	ldreq	r3, [sp, #0]
   b6468:	602b      	streq	r3, [r5, #0]
   b646a:	2001      	moveq	r0, #1
   b646c:	4620      	movne	r0, r4
   b646e:	b004      	add	sp, #16
   b6470:	bd70      	pop	{r4, r5, r6, pc}

000b6472 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6472:	9800      	ldr	r0, [sp, #0]
   b6474:	4290      	cmp	r0, r2
   b6476:	bf14      	ite	ne
   b6478:	2001      	movne	r0, #1
   b647a:	2006      	moveq	r0, #6
   b647c:	4770      	bx	lr
	...

000b6480 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6480:	b510      	push	{r4, lr}
   b6482:	4b03      	ldr	r3, [pc, #12]	; (b6490 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6484:	6003      	str	r3, [r0, #0]
   b6486:	4604      	mov	r4, r0
   b6488:	f000 f8cd 	bl	b6626 <_ZNSt9type_infoD1Ev>
   b648c:	4620      	mov	r0, r4
   b648e:	bd10      	pop	{r4, pc}
   b6490:	000b6fe8 	.word	0x000b6fe8

000b6494 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6494:	b510      	push	{r4, lr}
   b6496:	4604      	mov	r4, r0
   b6498:	f7ff fff2 	bl	b6480 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b649c:	4620      	mov	r0, r4
   b649e:	2108      	movs	r1, #8
   b64a0:	f7fd fdfb 	bl	b409a <_ZdlPvj>
   b64a4:	4620      	mov	r0, r4
   b64a6:	bd10      	pop	{r4, pc}

000b64a8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b64a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b64ac:	461f      	mov	r7, r3
   b64ae:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b64b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b64b6:	4598      	cmp	r8, r3
   b64b8:	4606      	mov	r6, r0
   b64ba:	4615      	mov	r5, r2
   b64bc:	d107      	bne.n	b64ce <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b64be:	9907      	ldr	r1, [sp, #28]
   b64c0:	f000 f8b4 	bl	b662c <_ZNKSt9type_infoeqERKS_>
   b64c4:	b118      	cbz	r0, b64ce <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b64c6:	7165      	strb	r5, [r4, #5]
   b64c8:	2000      	movs	r0, #0
   b64ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b64ce:	4639      	mov	r1, r7
   b64d0:	4630      	mov	r0, r6
   b64d2:	f000 f8ab 	bl	b662c <_ZNKSt9type_infoeqERKS_>
   b64d6:	2800      	cmp	r0, #0
   b64d8:	d0f6      	beq.n	b64c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b64da:	2301      	movs	r3, #1
   b64dc:	f8c4 8000 	str.w	r8, [r4]
   b64e0:	7125      	strb	r5, [r4, #4]
   b64e2:	71a3      	strb	r3, [r4, #6]
   b64e4:	e7f0      	b.n	b64c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b64e6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b64e6:	b538      	push	{r3, r4, r5, lr}
   b64e8:	4615      	mov	r5, r2
   b64ea:	461c      	mov	r4, r3
   b64ec:	f000 f89e 	bl	b662c <_ZNKSt9type_infoeqERKS_>
   b64f0:	b120      	cbz	r0, b64fc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b64f2:	2308      	movs	r3, #8
   b64f4:	60e3      	str	r3, [r4, #12]
   b64f6:	2306      	movs	r3, #6
   b64f8:	6025      	str	r5, [r4, #0]
   b64fa:	7123      	strb	r3, [r4, #4]
   b64fc:	bd38      	pop	{r3, r4, r5, pc}

000b64fe <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b64fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6500:	4605      	mov	r5, r0
   b6502:	460c      	mov	r4, r1
   b6504:	9201      	str	r2, [sp, #4]
   b6506:	461e      	mov	r6, r3
   b6508:	f000 f890 	bl	b662c <_ZNKSt9type_infoeqERKS_>
   b650c:	b950      	cbnz	r0, b6524 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b650e:	2e03      	cmp	r6, #3
   b6510:	d808      	bhi.n	b6524 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6512:	6823      	ldr	r3, [r4, #0]
   b6514:	9a01      	ldr	r2, [sp, #4]
   b6516:	695b      	ldr	r3, [r3, #20]
   b6518:	4629      	mov	r1, r5
   b651a:	4620      	mov	r0, r4
   b651c:	b002      	add	sp, #8
   b651e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6522:	4718      	bx	r3
   b6524:	b002      	add	sp, #8
   b6526:	bd70      	pop	{r4, r5, r6, pc}

000b6528 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6528:	b510      	push	{r4, lr}
   b652a:	4b03      	ldr	r3, [pc, #12]	; (b6538 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b652c:	6003      	str	r3, [r0, #0]
   b652e:	4604      	mov	r4, r0
   b6530:	f7ff ffa6 	bl	b6480 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6534:	4620      	mov	r0, r4
   b6536:	bd10      	pop	{r4, pc}
   b6538:	000b7048 	.word	0x000b7048

000b653c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b653c:	b510      	push	{r4, lr}
   b653e:	4604      	mov	r4, r0
   b6540:	f7ff fff2 	bl	b6528 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6544:	4620      	mov	r0, r4
   b6546:	210c      	movs	r1, #12
   b6548:	f7fd fda7 	bl	b409a <_ZdlPvj>
   b654c:	4620      	mov	r0, r4
   b654e:	bd10      	pop	{r4, pc}

000b6550 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6552:	9f08      	ldr	r7, [sp, #32]
   b6554:	4297      	cmp	r7, r2
   b6556:	4605      	mov	r5, r0
   b6558:	460e      	mov	r6, r1
   b655a:	4614      	mov	r4, r2
   b655c:	d00a      	beq.n	b6574 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b655e:	68a8      	ldr	r0, [r5, #8]
   b6560:	6802      	ldr	r2, [r0, #0]
   b6562:	9708      	str	r7, [sp, #32]
   b6564:	6a15      	ldr	r5, [r2, #32]
   b6566:	4631      	mov	r1, r6
   b6568:	4622      	mov	r2, r4
   b656a:	46ac      	mov	ip, r5
   b656c:	b003      	add	sp, #12
   b656e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6572:	4760      	bx	ip
   b6574:	4619      	mov	r1, r3
   b6576:	9301      	str	r3, [sp, #4]
   b6578:	f000 f858 	bl	b662c <_ZNKSt9type_infoeqERKS_>
   b657c:	9b01      	ldr	r3, [sp, #4]
   b657e:	2800      	cmp	r0, #0
   b6580:	d0ed      	beq.n	b655e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6582:	2006      	movs	r0, #6
   b6584:	b003      	add	sp, #12
   b6586:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6588 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6588:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b658c:	460d      	mov	r5, r1
   b658e:	4619      	mov	r1, r3
   b6590:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6594:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6598:	4681      	mov	r9, r0
   b659a:	4617      	mov	r7, r2
   b659c:	4698      	mov	r8, r3
   b659e:	f000 f845 	bl	b662c <_ZNKSt9type_infoeqERKS_>
   b65a2:	b190      	cbz	r0, b65ca <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b65a4:	2d00      	cmp	r5, #0
   b65a6:	6034      	str	r4, [r6, #0]
   b65a8:	7137      	strb	r7, [r6, #4]
   b65aa:	db09      	blt.n	b65c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b65ac:	1961      	adds	r1, r4, r5
   b65ae:	458a      	cmp	sl, r1
   b65b0:	bf0c      	ite	eq
   b65b2:	2106      	moveq	r1, #6
   b65b4:	2101      	movne	r1, #1
   b65b6:	71b1      	strb	r1, [r6, #6]
   b65b8:	2000      	movs	r0, #0
   b65ba:	b001      	add	sp, #4
   b65bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b65c0:	3502      	adds	r5, #2
   b65c2:	d1f9      	bne.n	b65b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b65c4:	2301      	movs	r3, #1
   b65c6:	71b3      	strb	r3, [r6, #6]
   b65c8:	e7f6      	b.n	b65b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b65ca:	4554      	cmp	r4, sl
   b65cc:	d106      	bne.n	b65dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b65ce:	4659      	mov	r1, fp
   b65d0:	4648      	mov	r0, r9
   b65d2:	f000 f82b 	bl	b662c <_ZNKSt9type_infoeqERKS_>
   b65d6:	b108      	cbz	r0, b65dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b65d8:	7177      	strb	r7, [r6, #5]
   b65da:	e7ed      	b.n	b65b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b65dc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b65e0:	6803      	ldr	r3, [r0, #0]
   b65e2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b65e6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b65ea:	69dc      	ldr	r4, [r3, #28]
   b65ec:	463a      	mov	r2, r7
   b65ee:	4643      	mov	r3, r8
   b65f0:	4629      	mov	r1, r5
   b65f2:	46a4      	mov	ip, r4
   b65f4:	b001      	add	sp, #4
   b65f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b65fa:	4760      	bx	ip

000b65fc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b65fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6600:	4607      	mov	r7, r0
   b6602:	460c      	mov	r4, r1
   b6604:	4615      	mov	r5, r2
   b6606:	461e      	mov	r6, r3
   b6608:	f7ff ff6d 	bl	b64e6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b660c:	b948      	cbnz	r0, b6622 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b660e:	68b8      	ldr	r0, [r7, #8]
   b6610:	6803      	ldr	r3, [r0, #0]
   b6612:	699f      	ldr	r7, [r3, #24]
   b6614:	462a      	mov	r2, r5
   b6616:	4633      	mov	r3, r6
   b6618:	4621      	mov	r1, r4
   b661a:	46bc      	mov	ip, r7
   b661c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6620:	4760      	bx	ip
   b6622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6626 <_ZNSt9type_infoD1Ev>:
   b6626:	4770      	bx	lr

000b6628 <_ZNKSt9type_info14__is_pointer_pEv>:
   b6628:	2000      	movs	r0, #0
   b662a:	4770      	bx	lr

000b662c <_ZNKSt9type_infoeqERKS_>:
   b662c:	4281      	cmp	r1, r0
   b662e:	b508      	push	{r3, lr}
   b6630:	d00e      	beq.n	b6650 <_ZNKSt9type_infoeqERKS_+0x24>
   b6632:	6840      	ldr	r0, [r0, #4]
   b6634:	7803      	ldrb	r3, [r0, #0]
   b6636:	2b2a      	cmp	r3, #42	; 0x2a
   b6638:	d00c      	beq.n	b6654 <_ZNKSt9type_infoeqERKS_+0x28>
   b663a:	6849      	ldr	r1, [r1, #4]
   b663c:	780b      	ldrb	r3, [r1, #0]
   b663e:	2b2a      	cmp	r3, #42	; 0x2a
   b6640:	bf08      	it	eq
   b6642:	3101      	addeq	r1, #1
   b6644:	f000 f852 	bl	b66ec <strcmp>
   b6648:	fab0 f080 	clz	r0, r0
   b664c:	0940      	lsrs	r0, r0, #5
   b664e:	bd08      	pop	{r3, pc}
   b6650:	2001      	movs	r0, #1
   b6652:	e7fc      	b.n	b664e <_ZNKSt9type_infoeqERKS_+0x22>
   b6654:	2000      	movs	r0, #0
   b6656:	e7fa      	b.n	b664e <_ZNKSt9type_infoeqERKS_+0x22>

000b6658 <atexit>:
   b6658:	2300      	movs	r3, #0
   b665a:	4601      	mov	r1, r0
   b665c:	461a      	mov	r2, r3
   b665e:	4618      	mov	r0, r3
   b6660:	f000 b856 	b.w	b6710 <__register_exitproc>

000b6664 <memcpy>:
   b6664:	440a      	add	r2, r1
   b6666:	4291      	cmp	r1, r2
   b6668:	f100 33ff 	add.w	r3, r0, #4294967295
   b666c:	d100      	bne.n	b6670 <memcpy+0xc>
   b666e:	4770      	bx	lr
   b6670:	b510      	push	{r4, lr}
   b6672:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6676:	f803 4f01 	strb.w	r4, [r3, #1]!
   b667a:	4291      	cmp	r1, r2
   b667c:	d1f9      	bne.n	b6672 <memcpy+0xe>
   b667e:	bd10      	pop	{r4, pc}

000b6680 <memset>:
   b6680:	4402      	add	r2, r0
   b6682:	4603      	mov	r3, r0
   b6684:	4293      	cmp	r3, r2
   b6686:	d100      	bne.n	b668a <memset+0xa>
   b6688:	4770      	bx	lr
   b668a:	f803 1b01 	strb.w	r1, [r3], #1
   b668e:	e7f9      	b.n	b6684 <memset+0x4>

000b6690 <srand>:
   b6690:	b538      	push	{r3, r4, r5, lr}
   b6692:	4b10      	ldr	r3, [pc, #64]	; (b66d4 <srand+0x44>)
   b6694:	681d      	ldr	r5, [r3, #0]
   b6696:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6698:	4604      	mov	r4, r0
   b669a:	b9b3      	cbnz	r3, b66ca <srand+0x3a>
   b669c:	2018      	movs	r0, #24
   b669e:	f7fe fd81 	bl	b51a4 <malloc>
   b66a2:	4602      	mov	r2, r0
   b66a4:	63a8      	str	r0, [r5, #56]	; 0x38
   b66a6:	b920      	cbnz	r0, b66b2 <srand+0x22>
   b66a8:	4b0b      	ldr	r3, [pc, #44]	; (b66d8 <srand+0x48>)
   b66aa:	480c      	ldr	r0, [pc, #48]	; (b66dc <srand+0x4c>)
   b66ac:	2142      	movs	r1, #66	; 0x42
   b66ae:	f7fe fd99 	bl	b51e4 <__assert_func>
   b66b2:	490b      	ldr	r1, [pc, #44]	; (b66e0 <srand+0x50>)
   b66b4:	4b0b      	ldr	r3, [pc, #44]	; (b66e4 <srand+0x54>)
   b66b6:	e9c0 1300 	strd	r1, r3, [r0]
   b66ba:	4b0b      	ldr	r3, [pc, #44]	; (b66e8 <srand+0x58>)
   b66bc:	6083      	str	r3, [r0, #8]
   b66be:	230b      	movs	r3, #11
   b66c0:	8183      	strh	r3, [r0, #12]
   b66c2:	2100      	movs	r1, #0
   b66c4:	2001      	movs	r0, #1
   b66c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b66ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b66cc:	2200      	movs	r2, #0
   b66ce:	611c      	str	r4, [r3, #16]
   b66d0:	615a      	str	r2, [r3, #20]
   b66d2:	bd38      	pop	{r3, r4, r5, pc}
   b66d4:	2003e5ec 	.word	0x2003e5ec
   b66d8:	000b7081 	.word	0x000b7081
   b66dc:	000b7098 	.word	0x000b7098
   b66e0:	abcd330e 	.word	0xabcd330e
   b66e4:	e66d1234 	.word	0xe66d1234
   b66e8:	0005deec 	.word	0x0005deec

000b66ec <strcmp>:
   b66ec:	f810 2b01 	ldrb.w	r2, [r0], #1
   b66f0:	f811 3b01 	ldrb.w	r3, [r1], #1
   b66f4:	2a01      	cmp	r2, #1
   b66f6:	bf28      	it	cs
   b66f8:	429a      	cmpcs	r2, r3
   b66fa:	d0f7      	beq.n	b66ec <strcmp>
   b66fc:	1ad0      	subs	r0, r2, r3
   b66fe:	4770      	bx	lr

000b6700 <strlen>:
   b6700:	4603      	mov	r3, r0
   b6702:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6706:	2a00      	cmp	r2, #0
   b6708:	d1fb      	bne.n	b6702 <strlen+0x2>
   b670a:	1a18      	subs	r0, r3, r0
   b670c:	3801      	subs	r0, #1
   b670e:	4770      	bx	lr

000b6710 <__register_exitproc>:
   b6710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6714:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b67d0 <__register_exitproc+0xc0>
   b6718:	4606      	mov	r6, r0
   b671a:	f8d8 0000 	ldr.w	r0, [r8]
   b671e:	461f      	mov	r7, r3
   b6720:	460d      	mov	r5, r1
   b6722:	4691      	mov	r9, r2
   b6724:	f000 f856 	bl	b67d4 <__retarget_lock_acquire_recursive>
   b6728:	4b25      	ldr	r3, [pc, #148]	; (b67c0 <__register_exitproc+0xb0>)
   b672a:	681c      	ldr	r4, [r3, #0]
   b672c:	b934      	cbnz	r4, b673c <__register_exitproc+0x2c>
   b672e:	4c25      	ldr	r4, [pc, #148]	; (b67c4 <__register_exitproc+0xb4>)
   b6730:	601c      	str	r4, [r3, #0]
   b6732:	4b25      	ldr	r3, [pc, #148]	; (b67c8 <__register_exitproc+0xb8>)
   b6734:	b113      	cbz	r3, b673c <__register_exitproc+0x2c>
   b6736:	681b      	ldr	r3, [r3, #0]
   b6738:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b673c:	6863      	ldr	r3, [r4, #4]
   b673e:	2b1f      	cmp	r3, #31
   b6740:	dd07      	ble.n	b6752 <__register_exitproc+0x42>
   b6742:	f8d8 0000 	ldr.w	r0, [r8]
   b6746:	f000 f847 	bl	b67d8 <__retarget_lock_release_recursive>
   b674a:	f04f 30ff 	mov.w	r0, #4294967295
   b674e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6752:	b34e      	cbz	r6, b67a8 <__register_exitproc+0x98>
   b6754:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6758:	b988      	cbnz	r0, b677e <__register_exitproc+0x6e>
   b675a:	4b1c      	ldr	r3, [pc, #112]	; (b67cc <__register_exitproc+0xbc>)
   b675c:	b923      	cbnz	r3, b6768 <__register_exitproc+0x58>
   b675e:	f8d8 0000 	ldr.w	r0, [r8]
   b6762:	f000 f838 	bl	b67d6 <__retarget_lock_release>
   b6766:	e7f0      	b.n	b674a <__register_exitproc+0x3a>
   b6768:	f44f 7084 	mov.w	r0, #264	; 0x108
   b676c:	f7fe fd1a 	bl	b51a4 <malloc>
   b6770:	2800      	cmp	r0, #0
   b6772:	d0f4      	beq.n	b675e <__register_exitproc+0x4e>
   b6774:	2300      	movs	r3, #0
   b6776:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b677a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b677e:	6863      	ldr	r3, [r4, #4]
   b6780:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6784:	2201      	movs	r2, #1
   b6786:	409a      	lsls	r2, r3
   b6788:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b678c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6790:	4313      	orrs	r3, r2
   b6792:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6796:	2e02      	cmp	r6, #2
   b6798:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b679c:	bf02      	ittt	eq
   b679e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b67a2:	4313      	orreq	r3, r2
   b67a4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b67a8:	6863      	ldr	r3, [r4, #4]
   b67aa:	f8d8 0000 	ldr.w	r0, [r8]
   b67ae:	1c5a      	adds	r2, r3, #1
   b67b0:	3302      	adds	r3, #2
   b67b2:	6062      	str	r2, [r4, #4]
   b67b4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b67b8:	f000 f80e 	bl	b67d8 <__retarget_lock_release_recursive>
   b67bc:	2000      	movs	r0, #0
   b67be:	e7c6      	b.n	b674e <__register_exitproc+0x3e>
   b67c0:	2003e7e8 	.word	0x2003e7e8
   b67c4:	2003e75c 	.word	0x2003e75c
   b67c8:	00000000 	.word	0x00000000
   b67cc:	000b51a5 	.word	0x000b51a5
   b67d0:	2003e650 	.word	0x2003e650

000b67d4 <__retarget_lock_acquire_recursive>:
   b67d4:	4770      	bx	lr

000b67d6 <__retarget_lock_release>:
   b67d6:	4770      	bx	lr

000b67d8 <__retarget_lock_release_recursive>:
   b67d8:	4770      	bx	lr

000b67da <link_code_end>:
	...

000b67dc <dynalib_user>:
   b67dc:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b67ec:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b67fc:	7620 7269 7574 6c61 5700 6c65 6f63 656d      virtual.Welcome
   b680c:	5520 6120 6572 000a 6976 7473 726f 253d      U are..vistor=%
   b681c:	0a69 0000                                   i...

000b6820 <_ZTV16Adafruit_SSD1306>:
	...
   b6828:	454d 000b 45dd 000b 4c81 000b 545d 000b     ME...E...L..]T..
   b6838:	4551 000b 4999 000b 43d9 000b 4269 000b     QE...I...C..iB..
   b6848:	4a57 000b 4af5 000b 4b2b 000b 4b47 000b     WJ...J..+K..GK..

000b6858 <_ZL4font>:
   b6858:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b6868:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b6878:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b6888:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b6898:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b68a8:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b68b8:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b68c8:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b68d8:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b68e8:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b68f8:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b6908:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b6918:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b6928:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b6938:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b6948:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b6958:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b6968:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b6978:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b6988:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b6998:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b69a8:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b69b8:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b69c8:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b69d8:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b69e8:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b69f8:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b6a08:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b6a18:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b6a28:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b6a38:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b6a48:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b6a58:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b6a68:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b6a78:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b6a88:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b6a98:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b6aa8:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b6ab8:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b6ac8:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b6ad8:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b6ae8:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b6af8:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b6b08:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b6b18:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b6b28:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b6b38:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b6b48:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b6b58:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b6b68:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b6b78:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b6b88:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b6b98:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b6ba8:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b6bb8:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b6bc8:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b6bd8:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b6be8:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b6bf8:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b6c08:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b6c18:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b6c28:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b6c38:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b6c48:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b6c58:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b6c68:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b6c78:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b6c88:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b6c98:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b6ca8:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b6cb8:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b6cc8:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b6cd8:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b6ce8:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b6cf8:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b6d08:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b6d18:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b6d28:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b6d38:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b6d48:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b6d54 <_ZTV12Adafruit_GFX>:
	...
   b6d64:	4c81 000b 545d 000b 40a1 000b 4999 000b     .L..]T...@...I..
   b6d74:	4abf 000b 4adb 000b 4a57 000b 4af5 000b     .J...J..WJ...J..
   b6d84:	4b2b 000b 4b47 000b                         +K..GK..

000b6d8c <_ZTVN5spark13EthernetClassE>:
	...
   b6d94:	5263 000b 5259 000b 524f 000b 5245 000b     cR..YR..OR..ER..
   b6da4:	5239 000b 522d 000b 60d5 000b 60dd 000b     9R..-R...`...`..
   b6db4:	5221 000b 5219 000b 520f 000b 5205 000b     !R...R...R...R..
   b6dc4:	610d 000b                                   .a..

000b6dc8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b6dc8:	0800 1810 2820 3830                         .... (08

000b6dd0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b6dd8:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b6de8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b6df8 <_ZTV9IPAddress>:
	...
   b6e00:	5715 000b 5705 000b 5707 000b               .W...W...W..

000b6e0c <_ZTV9USBSerial>:
	...
   b6e14:	5827 000b 588f 000b 5865 000b 545d 000b     'X...X..eX..]T..
   b6e24:	5857 000b 5829 000b 5839 000b 5889 000b     WX..)X..9X...X..
   b6e34:	5849 000b 5821 000b                         IX..!X..

000b6e3c <_ZTV11USARTSerial>:
	...
   b6e44:	5921 000b 598d 000b 5965 000b 545d 000b     !Y...Y..eY..]T..
   b6e54:	5935 000b 5951 000b 5943 000b 595f 000b     5Y..QY..CY.._Y..
   b6e64:	5923 000b 5927 000b                         #Y..'Y..

000b6e6c <_ZTV7TwoWire>:
	...
   b6e74:	59c5 000b 5a0f 000b 59e7 000b 59c7 000b     .Y...Z...Y...Y..
   b6e84:	59ef 000b 59f7 000b 59ff 000b 5a07 000b     .Y...Y...Y...Z..
   b6e94:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b6ea4:	2072 203d 6425 0000                         r = %d..

000b6eac <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6eb4:	5b05 000b 5b29 000b 6013 000b 5b37 000b     .[..)[...`..7[..
   b6ec4:	5b09 000b                                   .[..

000b6ec8 <_ZTV9TCPClient>:
	...
   b6ed0:	5595 000b 55ad 000b 5a81 000b 5a9b 000b     .U...U...Z...Z..
   b6ee0:	5ea9 000b 5ac5 000b 5d1f 000b 5af9 000b     .^...Z...]...Z..
   b6ef0:	5db1 000b 5bf1 000b 5d4d 000b 5f5d 000b     .]...[..M]..]_..
   b6f00:	5ced 000b 5afb 000b 5aad 000b 5b3d 000b     .\...Z...Z..=[..
   b6f10:	5bd1 000b                                   .[..

000b6f14 <_ZTVN5spark9WiFiClassE>:
	...
   b6f1c:	6077 000b 606d 000b 6063 000b 6019 000b     w`..m`..c`...`..
   b6f2c:	6057 000b 604b 000b 60d5 000b 60dd 000b     W`..K`...`...`..
   b6f3c:	603f 000b 6037 000b 602d 000b 6023 000b     ?`..7`..-`..#`..
   b6f4c:	610d 000b                                   .a..

000b6f50 <_ZTVN5spark12NetworkClassE>:
	...
   b6f58:	6095 000b 609f 000b 60a9 000b 60b3 000b     .`...`...`...`..
   b6f68:	60bd 000b 60c9 000b 60d5 000b 60dd 000b     .`...`...`...`..
   b6f78:	60e5 000b 60f1 000b 60f9 000b 6103 000b     .`...`...`...a..
   b6f88:	610d 000b                                   .a..

000b6f8c <_ZSt7nothrow>:
	...

000b6f8d <_ZTSSt19_Sp_make_shared_tag>:
   b6f8d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b6f9d:	6572 5f64 6174 0067 0000                     red_tag....

000b6fa8 <_ZTISt19_Sp_make_shared_tag>:
   b6fa8:	6fe8 000b 6f8d 000b                         .o...o..

000b6fb0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b6fb0:	7048 000b 6fbc 000b 706c 000b               Hp...o..lp..

000b6fbc <_ZTSN10__cxxabiv117__class_type_infoE>:
   b6fbc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b6fcc:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b6fdc:	0045 0000                                   E...

000b6fe0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b6fe0:	0000 0000 6fb0 000b 6481 000b 6495 000b     .....o...d...d..
   b6ff0:	6629 000b 6629 000b 64ff 000b 6441 000b     )f..)f...d..Ad..
   b7000:	64e7 000b 64a9 000b 6473 000b               .d...d..sd..

000b700c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b700c:	7048 000b 7018 000b 6fb0 000b               Hp...p...o..

000b7018 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b7018:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b7028:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b7038:	666e 456f 0000 0000                         nfoE....

000b7040 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b7040:	0000 0000 700c 000b 6529 000b 653d 000b     .....p..)e..=e..
   b7050:	6629 000b 6629 000b 64ff 000b 6441 000b     )f..)f...d..Ad..
   b7060:	65fd 000b 6589 000b 6551 000b               .e...e..Qe..

000b706c <_ZTISt9type_info>:
   b706c:	6fe8 000b 7074 000b                         .o..tp..

000b7074 <_ZTSSt9type_info>:
   b7074:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b7084:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b7094:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b70a4:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b70b4:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b70c4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b70d4:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b70e4:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b70f4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7104:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7115 <link_const_variable_data_end>:
   b7115:	00          	.byte	0x00
	...

000b7118 <link_constructors_location>:
   b7118:	000b4235 	.word	0x000b4235
   b711c:	000b526d 	.word	0x000b526d
   b7120:	000b5401 	.word	0x000b5401
   b7124:	000b544d 	.word	0x000b544d
   b7128:	000b5569 	.word	0x000b5569
   b712c:	000b5579 	.word	0x000b5579
   b7130:	000b55c1 	.word	0x000b55c1
   b7134:	000b6081 	.word	0x000b6081
   b7138:	000b61e5 	.word	0x000b61e5

000b713c <link_constructors_end>:
   b713c:	00000000 	.word	0x00000000
