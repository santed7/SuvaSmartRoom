
c:/Users/vcox/Documents/IoT/SuvaSmartRoom/Midterm1v2/target/4.0.2/argon/Midterm1v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003f34  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7f50  000b7f50  00007f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7f74  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000004bc  2003e12c  000b7f78  0001e12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000208  2003e5e8  2003e5e8  0002e5e8  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b8434  000b8434  00028434  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b845c  000b845c  0002845c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0011d022  00000000  00000000  00028460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00013c2c  00000000  00000000  00145482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003bb57  00000000  00000000  001590ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002fd0  00000000  00000000  00194c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a630  00000000  00000000  00197bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a97b  00000000  00000000  001a2205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00042639  00000000  00000000  001dcb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00133dbf  00000000  00000000  0021f1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000086f4  00000000  00000000  00352f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 ffc1 	bl	b6fb4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 ffc9 	bl	b6fd0 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e12c 	.word	0x2003e12c
   b4048:	000b7f78 	.word	0x000b7f78
   b404c:	2003e5e8 	.word	0x2003e5e8
   b4050:	2003e5e8 	.word	0x2003e5e8
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 ffbf 	bl	b5fe0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7f28 	.word	0x000b7f28
   b407c:	000b7f4c 	.word	0x000b7f4c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 ba52 	b.w	b4528 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 faef 	bl	b4668 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bf5f 	b.w	b5f50 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 bbd1 	b.w	b5838 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 bbcf 	b.w	b5838 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 bbd5 	b.w	b5848 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f001 fb1a 	bl	b56e0 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b53d1 	.word	0x000b53d1
   b40b4:	000b7150 	.word	0x000b7150

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40c8:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40ca:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40cc:	4606      	mov	r6, r0
   b40ce:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40d0:	da0b      	bge.n	b40ea <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40d2:	2a0a      	cmp	r2, #10
   b40d4:	d109      	bne.n	b40ea <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40d6:	212d      	movs	r1, #45	; 0x2d
   b40d8:	f001 fe6a 	bl	b5db0 <_ZN5Print5printEc>
            val = -n;
   b40dc:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40de:	b2ea      	uxtb	r2, r5
   b40e0:	4630      	mov	r0, r6
    }
}
   b40e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b40e6:	f001 be7c 	b.w	b5de2 <_ZN5Print11printNumberEmh>
            val = n;
   b40ea:	4621      	mov	r1, r4
   b40ec:	e7f7      	b.n	b40de <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b40ee <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ee:	b40e      	push	{r1, r2, r3}
   b40f0:	b503      	push	{r0, r1, lr}
   b40f2:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b40f4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40f6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40fa:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40fc:	f001 fe8f 	bl	b5e1e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4100:	b002      	add	sp, #8
   b4102:	f85d eb04 	ldr.w	lr, [sp], #4
   b4106:	b003      	add	sp, #12
   b4108:	4770      	bx	lr
	...

000b410c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b410c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b410e:	6984      	ldr	r4, [r0, #24]
   b4110:	4b0a      	ldr	r3, [pc, #40]	; (b413c <_ZN9TCPClientD1Ev+0x30>)
   b4112:	6003      	str	r3, [r0, #0]
   b4114:	4605      	mov	r5, r0
   b4116:	b17c      	cbz	r4, b4138 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b4118:	6863      	ldr	r3, [r4, #4]
   b411a:	3b01      	subs	r3, #1
   b411c:	6063      	str	r3, [r4, #4]
   b411e:	b95b      	cbnz	r3, b4138 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b4120:	6823      	ldr	r3, [r4, #0]
   b4122:	4620      	mov	r0, r4
   b4124:	689b      	ldr	r3, [r3, #8]
   b4126:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4128:	68a3      	ldr	r3, [r4, #8]
   b412a:	3b01      	subs	r3, #1
   b412c:	60a3      	str	r3, [r4, #8]
   b412e:	b91b      	cbnz	r3, b4138 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4130:	6823      	ldr	r3, [r4, #0]
   b4132:	4620      	mov	r0, r4
   b4134:	68db      	ldr	r3, [r3, #12]
   b4136:	4798      	blx	r3
   b4138:	4628      	mov	r0, r5
   b413a:	bd38      	pop	{r3, r4, r5, pc}
   b413c:	000b7ce0 	.word	0x000b7ce0

000b4140 <_ZN9TCPClientD0Ev>:
   b4140:	b510      	push	{r4, lr}
   b4142:	4604      	mov	r4, r0
   b4144:	f7ff ffe2 	bl	b410c <_ZN9TCPClientD1Ev>
   b4148:	4620      	mov	r0, r4
   b414a:	211c      	movs	r1, #28
   b414c:	f7ff ffa5 	bl	b409a <_ZdlPvj>
   b4150:	4620      	mov	r0, r4
   b4152:	bd10      	pop	{r4, pc}

000b4154 <_Z6setHueibiii>:
TCPClient HueClient;

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat);
bool getHue(int lightNum);

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4158:	b08c      	sub	sp, #48	; 0x30
   b415a:	4605      	mov	r5, r0
   b415c:	460f      	mov	r7, r1

  static int PrevLightNum,PrevOn, PrevColor, PrevBright, PrevSat;

  String command = "";  
   b415e:	4668      	mov	r0, sp
   b4160:	4977      	ldr	r1, [pc, #476]	; (b4340 <_Z6setHueibiii+0x1ec>)
bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4162:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   b4166:	4614      	mov	r4, r2
   b4168:	461e      	mov	r6, r3
  String command = "";  
   b416a:	f001 fd44 	bl	b5bf6 <_ZN6StringC1EPK19__FlashStringHelper>

  if((lightNum==PrevLightNum)&&(HueOn==PrevOn)&&(HueColor==PrevColor)&&(HueBright==PrevBright)&&(HueSat==PrevSat)) {
   b416e:	f8df e228 	ldr.w	lr, [pc, #552]	; b4398 <_Z6setHueibiii+0x244>
   b4172:	4974      	ldr	r1, [pc, #464]	; (b4344 <_Z6setHueibiii+0x1f0>)
   b4174:	f8de 3000 	ldr.w	r3, [lr]
   b4178:	4873      	ldr	r0, [pc, #460]	; (b4348 <_Z6setHueibiii+0x1f4>)
   b417a:	4a74      	ldr	r2, [pc, #464]	; (b434c <_Z6setHueibiii+0x1f8>)
   b417c:	f8df c21c 	ldr.w	ip, [pc, #540]	; b439c <_Z6setHueibiii+0x248>
   b4180:	42ab      	cmp	r3, r5
   b4182:	d119      	bne.n	b41b8 <_Z6setHueibiii+0x64>
   b4184:	680b      	ldr	r3, [r1, #0]
   b4186:	42bb      	cmp	r3, r7
   b4188:	d116      	bne.n	b41b8 <_Z6setHueibiii+0x64>
   b418a:	6803      	ldr	r3, [r0, #0]
   b418c:	42a3      	cmp	r3, r4
   b418e:	d113      	bne.n	b41b8 <_Z6setHueibiii+0x64>
   b4190:	6813      	ldr	r3, [r2, #0]
   b4192:	42b3      	cmp	r3, r6
   b4194:	d110      	bne.n	b41b8 <_Z6setHueibiii+0x64>
   b4196:	f8dc 3000 	ldr.w	r3, [ip]
   b419a:	4543      	cmp	r3, r8
   b419c:	d10c      	bne.n	b41b8 <_Z6setHueibiii+0x64>
    Serial.printf("No Change - Cancelling CMD\n");
   b419e:	f002 f841 	bl	b6224 <_Z16_fetch_usbserialv>
   b41a2:	496b      	ldr	r1, [pc, #428]	; (b4350 <_Z6setHueibiii+0x1fc>)
   b41a4:	f7ff ffa3 	bl	b40ee <_ZN5Print6printfEPKcz>
    return false;
   b41a8:	2400      	movs	r4, #0
  String command = "";  
   b41aa:	4668      	mov	r0, sp
   b41ac:	f001 fcd8 	bl	b5b60 <_ZN6StringD1Ev>
    HueClient.stop();
    return true;  // command executed
  }
  else
    return false;  // command failed
}
   b41b0:	4620      	mov	r0, r4
   b41b2:	b00c      	add	sp, #48	; 0x30
   b41b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PrevLightNum = lightNum;
   b41b8:	f8ce 5000 	str.w	r5, [lr]
  PrevOn = HueOn;
   b41bc:	600f      	str	r7, [r1, #0]
  PrevColor=HueColor;
   b41be:	6004      	str	r4, [r0, #0]
  PrevBright=HueBright;
   b41c0:	6016      	str	r6, [r2, #0]
  PrevSat=HueSat;
   b41c2:	f8cc 8000 	str.w	r8, [ip]
  if(HueOn == true) {
   b41c6:	2f00      	cmp	r7, #0
   b41c8:	f000 80b5 	beq.w	b4336 <_Z6setHueibiii+0x1e2>
    command = "{\"on\":true,\"sat\":";
   b41cc:	4961      	ldr	r1, [pc, #388]	; (b4354 <_Z6setHueibiii+0x200>)
   b41ce:	4668      	mov	r0, sp
   b41d0:	f001 fd3f 	bl	b5c52 <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b41d4:	4669      	mov	r1, sp
   b41d6:	a808      	add	r0, sp, #32
   b41d8:	f001 fd30 	bl	b5c3c <_ZN6StringC1ERKS_>
    command = command + String(HueSat) + ",\"bri\":";
   b41dc:	220a      	movs	r2, #10
   b41de:	4641      	mov	r1, r8
   b41e0:	a804      	add	r0, sp, #16
   b41e2:	f001 fd48 	bl	b5c76 <_ZN6StringC1Eih>
   b41e6:	a904      	add	r1, sp, #16
   b41e8:	a808      	add	r0, sp, #32
   b41ea:	f001 fd8c 	bl	b5d06 <_ZplRK15StringSumHelperRK6String>
   b41ee:	495a      	ldr	r1, [pc, #360]	; (b4358 <_Z6setHueibiii+0x204>)
   b41f0:	f001 fd95 	bl	b5d1e <_ZplRK15StringSumHelperPKc>
   b41f4:	4601      	mov	r1, r0
   b41f6:	4668      	mov	r0, sp
   b41f8:	f001 fd11 	bl	b5c1e <_ZN6StringaSERKS_>
   b41fc:	a804      	add	r0, sp, #16
   b41fe:	f001 fcaf 	bl	b5b60 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4202:	a808      	add	r0, sp, #32
   b4204:	f001 fcac 	bl	b5b60 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b4208:	4669      	mov	r1, sp
   b420a:	a808      	add	r0, sp, #32
   b420c:	f001 fd16 	bl	b5c3c <_ZN6StringC1ERKS_>
    command = command + String(HueBright) + ",\"hue\":";
   b4210:	220a      	movs	r2, #10
   b4212:	4631      	mov	r1, r6
   b4214:	a804      	add	r0, sp, #16
   b4216:	f001 fd2e 	bl	b5c76 <_ZN6StringC1Eih>
   b421a:	a904      	add	r1, sp, #16
   b421c:	a808      	add	r0, sp, #32
   b421e:	f001 fd72 	bl	b5d06 <_ZplRK15StringSumHelperRK6String>
   b4222:	494e      	ldr	r1, [pc, #312]	; (b435c <_Z6setHueibiii+0x208>)
   b4224:	f001 fd7b 	bl	b5d1e <_ZplRK15StringSumHelperPKc>
   b4228:	4601      	mov	r1, r0
   b422a:	4668      	mov	r0, sp
   b422c:	f001 fcf7 	bl	b5c1e <_ZN6StringaSERKS_>
   b4230:	a804      	add	r0, sp, #16
   b4232:	f001 fc95 	bl	b5b60 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4236:	a808      	add	r0, sp, #32
   b4238:	f001 fc92 	bl	b5b60 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b423c:	4669      	mov	r1, sp
   b423e:	a808      	add	r0, sp, #32
   b4240:	f001 fcfc 	bl	b5c3c <_ZN6StringC1ERKS_>
    command = command + String(HueColor) + "}";
   b4244:	220a      	movs	r2, #10
   b4246:	4621      	mov	r1, r4
   b4248:	a804      	add	r0, sp, #16
   b424a:	f001 fd14 	bl	b5c76 <_ZN6StringC1Eih>
   b424e:	a904      	add	r1, sp, #16
   b4250:	a808      	add	r0, sp, #32
   b4252:	f001 fd58 	bl	b5d06 <_ZplRK15StringSumHelperRK6String>
   b4256:	4942      	ldr	r1, [pc, #264]	; (b4360 <_Z6setHueibiii+0x20c>)
   b4258:	f001 fd61 	bl	b5d1e <_ZplRK15StringSumHelperPKc>
   b425c:	4601      	mov	r1, r0
   b425e:	4668      	mov	r0, sp
   b4260:	f001 fcdd 	bl	b5c1e <_ZN6StringaSERKS_>
   b4264:	a804      	add	r0, sp, #16
   b4266:	f001 fc7b 	bl	b5b60 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b426a:	a808      	add	r0, sp, #32
   b426c:	f001 fc78 	bl	b5b60 <_ZN6StringD1Ev>
  if (HueClient.connect(hueHubIP, hueHubPort)) {
   b4270:	493c      	ldr	r1, [pc, #240]	; (b4364 <_Z6setHueibiii+0x210>)
   b4272:	483d      	ldr	r0, [pc, #244]	; (b4368 <_Z6setHueibiii+0x214>)
   b4274:	2300      	movs	r3, #0
   b4276:	2250      	movs	r2, #80	; 0x50
   b4278:	f002 f962 	bl	b6540 <_ZN9TCPClient7connectEPKctm>
   b427c:	4604      	mov	r4, r0
   b427e:	2800      	cmp	r0, #0
   b4280:	d093      	beq.n	b41aa <_Z6setHueibiii+0x56>
      Serial.println("Sending Command to Hue");
   b4282:	f001 ffcf 	bl	b6224 <_Z16_fetch_usbserialv>
   b4286:	4939      	ldr	r1, [pc, #228]	; (b436c <_Z6setHueibiii+0x218>)
   b4288:	f001 fda1 	bl	b5dce <_ZN5Print7printlnEPKc>
      Serial.println(command);
   b428c:	f001 ffca 	bl	b6224 <_Z16_fetch_usbserialv>
   b4290:	9900      	ldr	r1, [sp, #0]
   b4292:	f001 fd9c 	bl	b5dce <_ZN5Print7printlnEPKc>
      HueClient.print("PUT /api/");
   b4296:	4936      	ldr	r1, [pc, #216]	; (b4370 <_Z6setHueibiii+0x21c>)
   b4298:	4833      	ldr	r0, [pc, #204]	; (b4368 <_Z6setHueibiii+0x214>)
   b429a:	f001 fd85 	bl	b5da8 <_ZN5Print5printEPKc>
      HueClient.print(hueUsername);
   b429e:	4935      	ldr	r1, [pc, #212]	; (b4374 <_Z6setHueibiii+0x220>)
   b42a0:	4831      	ldr	r0, [pc, #196]	; (b4368 <_Z6setHueibiii+0x214>)
   b42a2:	f001 fd81 	bl	b5da8 <_ZN5Print5printEPKc>
      HueClient.print("/lights/");
   b42a6:	4934      	ldr	r1, [pc, #208]	; (b4378 <_Z6setHueibiii+0x224>)
   b42a8:	482f      	ldr	r0, [pc, #188]	; (b4368 <_Z6setHueibiii+0x214>)
   b42aa:	f001 fd7d 	bl	b5da8 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b42ae:	220a      	movs	r2, #10
   b42b0:	482d      	ldr	r0, [pc, #180]	; (b4368 <_Z6setHueibiii+0x214>)
   b42b2:	4629      	mov	r1, r5
   b42b4:	f7ff ff08 	bl	b40c8 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      HueClient.println("/state HTTP/1.1");
   b42b8:	4930      	ldr	r1, [pc, #192]	; (b437c <_Z6setHueibiii+0x228>)
   b42ba:	482b      	ldr	r0, [pc, #172]	; (b4368 <_Z6setHueibiii+0x214>)
   b42bc:	f001 fd87 	bl	b5dce <_ZN5Print7printlnEPKc>
      HueClient.println("keep-alive");
   b42c0:	492f      	ldr	r1, [pc, #188]	; (b4380 <_Z6setHueibiii+0x22c>)
   b42c2:	4829      	ldr	r0, [pc, #164]	; (b4368 <_Z6setHueibiii+0x214>)
   b42c4:	f001 fd83 	bl	b5dce <_ZN5Print7printlnEPKc>
      HueClient.print("Host: ");
   b42c8:	492e      	ldr	r1, [pc, #184]	; (b4384 <_Z6setHueibiii+0x230>)
   b42ca:	4827      	ldr	r0, [pc, #156]	; (b4368 <_Z6setHueibiii+0x214>)
   b42cc:	f001 fd6c 	bl	b5da8 <_ZN5Print5printEPKc>
      HueClient.println(hueHubIP);
   b42d0:	4924      	ldr	r1, [pc, #144]	; (b4364 <_Z6setHueibiii+0x210>)
   b42d2:	4825      	ldr	r0, [pc, #148]	; (b4368 <_Z6setHueibiii+0x214>)
   b42d4:	f001 fd7b 	bl	b5dce <_ZN5Print7printlnEPKc>
      HueClient.print("Content-Length: ");
   b42d8:	492b      	ldr	r1, [pc, #172]	; (b4388 <_Z6setHueibiii+0x234>)
   b42da:	4823      	ldr	r0, [pc, #140]	; (b4368 <_Z6setHueibiii+0x214>)
   b42dc:	f001 fd64 	bl	b5da8 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b42e0:	220a      	movs	r2, #10
   b42e2:	9902      	ldr	r1, [sp, #8]
   b42e4:	4820      	ldr	r0, [pc, #128]	; (b4368 <_Z6setHueibiii+0x214>)
   b42e6:	f001 fd7c 	bl	b5de2 <_ZN5Print11printNumberEmh>
        n += println();
   b42ea:	481f      	ldr	r0, [pc, #124]	; (b4368 <_Z6setHueibiii+0x214>)
   b42ec:	f001 fd63 	bl	b5db6 <_ZN5Print7printlnEv>
      HueClient.println("Content-Type: text/plain;charset=UTF-8");
   b42f0:	4926      	ldr	r1, [pc, #152]	; (b438c <_Z6setHueibiii+0x238>)
   b42f2:	481d      	ldr	r0, [pc, #116]	; (b4368 <_Z6setHueibiii+0x214>)
   b42f4:	f001 fd6b 	bl	b5dce <_ZN5Print7printlnEPKc>
      HueClient.println();  // blank line before body
   b42f8:	481b      	ldr	r0, [pc, #108]	; (b4368 <_Z6setHueibiii+0x214>)
   b42fa:	f001 fd5c 	bl	b5db6 <_ZN5Print7printlnEv>
      HueClient.println(command);  // Hue command
   b42fe:	9900      	ldr	r1, [sp, #0]
   b4300:	4819      	ldr	r0, [pc, #100]	; (b4368 <_Z6setHueibiii+0x214>)
   b4302:	f001 fd64 	bl	b5dce <_ZN5Print7printlnEPKc>
      Serial.println("From Hue");
   b4306:	f001 ff8d 	bl	b6224 <_Z16_fetch_usbserialv>
   b430a:	4921      	ldr	r1, [pc, #132]	; (b4390 <_Z6setHueibiii+0x23c>)
   b430c:	f001 fd5f 	bl	b5dce <_ZN5Print7printlnEPKc>
      Serial.println(HueClient.readString()); // To close connection
   b4310:	f001 ff88 	bl	b6224 <_Z16_fetch_usbserialv>
   b4314:	4914      	ldr	r1, [pc, #80]	; (b4368 <_Z6setHueibiii+0x214>)
   b4316:	4604      	mov	r4, r0
   b4318:	a808      	add	r0, sp, #32
   b431a:	f001 fdc7 	bl	b5eac <_ZN6Stream10readStringEv>
   b431e:	9908      	ldr	r1, [sp, #32]
   b4320:	4620      	mov	r0, r4
   b4322:	f001 fd54 	bl	b5dce <_ZN5Print7printlnEPKc>
   b4326:	a808      	add	r0, sp, #32
   b4328:	f001 fc1a 	bl	b5b60 <_ZN6StringD1Ev>
    HueClient.stop();
   b432c:	480e      	ldr	r0, [pc, #56]	; (b4368 <_Z6setHueibiii+0x214>)
   b432e:	f002 fabd 	bl	b68ac <_ZN9TCPClient4stopEv>
    return true;  // command executed
   b4332:	2401      	movs	r4, #1
   b4334:	e739      	b.n	b41aa <_Z6setHueibiii+0x56>
    command = "{\"on\":false}";
   b4336:	4917      	ldr	r1, [pc, #92]	; (b4394 <_Z6setHueibiii+0x240>)
   b4338:	4668      	mov	r0, sp
   b433a:	f001 fc8a 	bl	b5c52 <_ZN6StringaSEPKc>
   b433e:	e797      	b.n	b4270 <_Z6setHueibiii+0x11c>
   b4340:	000b7565 	.word	0x000b7565
   b4344:	2003e654 	.word	0x2003e654
   b4348:	2003e65c 	.word	0x2003e65c
   b434c:	2003e64c 	.word	0x2003e64c
   b4350:	000b7165 	.word	0x000b7165
   b4354:	000b7181 	.word	0x000b7181
   b4358:	000b7193 	.word	0x000b7193
   b435c:	000b719b 	.word	0x000b719b
   b4360:	000b71ae 	.word	0x000b71ae
   b4364:	000b7624 	.word	0x000b7624
   b4368:	2003e5e8 	.word	0x2003e5e8
   b436c:	000b71b0 	.word	0x000b71b0
   b4370:	000b71c7 	.word	0x000b71c7
   b4374:	000b75fb 	.word	0x000b75fb
   b4378:	000b71d1 	.word	0x000b71d1
   b437c:	000b71da 	.word	0x000b71da
   b4380:	000b7403 	.word	0x000b7403
   b4384:	000b71ea 	.word	0x000b71ea
   b4388:	000b71f1 	.word	0x000b71f1
   b438c:	000b7202 	.word	0x000b7202
   b4390:	000b7229 	.word	0x000b7229
   b4394:	000b71a3 	.word	0x000b71a3
   b4398:	2003e650 	.word	0x2003e650
   b439c:	2003e658 	.word	0x2003e658

000b43a0 <_Z8switchONi>:
TCPClient WemoClient;

int wemoPort = 49153;
const char *wemoIP[5] = {"192.168.1.30","192.168.1.31","192.168.1.32","192.168.1.33","192.168.1.34"};

void switchON(int wemo) {
   b43a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  
  String data1;
   b43a2:	4925      	ldr	r1, [pc, #148]	; (b4438 <_Z8switchONi+0x98>)
void switchON(int wemo) {
   b43a4:	4604      	mov	r4, r0
  String data1;
   b43a6:	4668      	mov	r0, sp
   b43a8:	f001 fc25 	bl	b5bf6 <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("SwitchON %i \n",wemo);
   b43ac:	f001 ff3a 	bl	b6224 <_Z16_fetch_usbserialv>
   b43b0:	4622      	mov	r2, r4
   b43b2:	4922      	ldr	r1, [pc, #136]	; (b443c <_Z8switchONi+0x9c>)
   b43b4:	f7ff fe9b 	bl	b40ee <_ZN5Print6printfEPKcz>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b43b8:	4921      	ldr	r1, [pc, #132]	; (b4440 <_Z8switchONi+0xa0>)
   b43ba:	4668      	mov	r0, sp
   b43bc:	f001 fc85 	bl	b5cca <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>1</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b43c0:	4a20      	ldr	r2, [pc, #128]	; (b4444 <_Z8switchONi+0xa4>)
   b43c2:	4921      	ldr	r1, [pc, #132]	; (b4448 <_Z8switchONi+0xa8>)
   b43c4:	8812      	ldrh	r2, [r2, #0]
   b43c6:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b43ca:	4820      	ldr	r0, [pc, #128]	; (b444c <_Z8switchONi+0xac>)
   b43cc:	2300      	movs	r3, #0
   b43ce:	f002 f8b7 	bl	b6540 <_ZN9TCPClient7connectEPKctm>
   b43d2:	b328      	cbz	r0, b4420 <_Z8switchONi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b43d4:	491e      	ldr	r1, [pc, #120]	; (b4450 <_Z8switchONi+0xb0>)
   b43d6:	481d      	ldr	r0, [pc, #116]	; (b444c <_Z8switchONi+0xac>)
   b43d8:	f001 fcf9 	bl	b5dce <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b43dc:	491d      	ldr	r1, [pc, #116]	; (b4454 <_Z8switchONi+0xb4>)
   b43de:	481b      	ldr	r0, [pc, #108]	; (b444c <_Z8switchONi+0xac>)
   b43e0:	f001 fcf5 	bl	b5dce <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b43e4:	491c      	ldr	r1, [pc, #112]	; (b4458 <_Z8switchONi+0xb8>)
   b43e6:	4819      	ldr	r0, [pc, #100]	; (b444c <_Z8switchONi+0xac>)
   b43e8:	f001 fcf1 	bl	b5dce <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b43ec:	491b      	ldr	r1, [pc, #108]	; (b445c <_Z8switchONi+0xbc>)
   b43ee:	4817      	ldr	r0, [pc, #92]	; (b444c <_Z8switchONi+0xac>)
   b43f0:	f001 fced 	bl	b5dce <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b43f4:	491a      	ldr	r1, [pc, #104]	; (b4460 <_Z8switchONi+0xc0>)
   b43f6:	4815      	ldr	r0, [pc, #84]	; (b444c <_Z8switchONi+0xac>)
   b43f8:	f001 fcd6 	bl	b5da8 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b43fc:	9902      	ldr	r1, [sp, #8]
   b43fe:	4813      	ldr	r0, [pc, #76]	; (b444c <_Z8switchONi+0xac>)
   b4400:	220a      	movs	r2, #10
   b4402:	f001 fcee 	bl	b5de2 <_ZN5Print11printNumberEmh>
        n += println();
   b4406:	4811      	ldr	r0, [pc, #68]	; (b444c <_Z8switchONi+0xac>)
   b4408:	f001 fcd5 	bl	b5db6 <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b440c:	480f      	ldr	r0, [pc, #60]	; (b444c <_Z8switchONi+0xac>)
   b440e:	f001 fcd2 	bl	b5db6 <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b4412:	9900      	ldr	r1, [sp, #0]
   b4414:	480d      	ldr	r0, [pc, #52]	; (b444c <_Z8switchONi+0xac>)
   b4416:	f001 fcc7 	bl	b5da8 <_ZN5Print5printEPKc>
        WemoClient.println();
   b441a:	480c      	ldr	r0, [pc, #48]	; (b444c <_Z8switchONi+0xac>)
   b441c:	f001 fccb 	bl	b5db6 <_ZN5Print7printlnEv>
    }

  if (WemoClient.connected()) {
   b4420:	480a      	ldr	r0, [pc, #40]	; (b444c <_Z8switchONi+0xac>)
   b4422:	f002 f90b 	bl	b663c <_ZN9TCPClient9connectedEv>
   b4426:	b110      	cbz	r0, b442e <_Z8switchONi+0x8e>
     WemoClient.stop();
   b4428:	4808      	ldr	r0, [pc, #32]	; (b444c <_Z8switchONi+0xac>)
   b442a:	f002 fa3f 	bl	b68ac <_ZN9TCPClient4stopEv>
  String data1;
   b442e:	4668      	mov	r0, sp
   b4430:	f001 fb96 	bl	b5b60 <_ZN6StringD1Ev>
  }
}
   b4434:	b004      	add	sp, #16
   b4436:	bd10      	pop	{r4, pc}
   b4438:	000b7565 	.word	0x000b7565
   b443c:	000b7232 	.word	0x000b7232
   b4440:	000b7240 	.word	0x000b7240
   b4444:	2003e168 	.word	0x2003e168
   b4448:	2003e154 	.word	0x2003e154
   b444c:	2003e630 	.word	0x2003e630
   b4450:	000b736c 	.word	0x000b736c
   b4454:	000b7394 	.word	0x000b7394
   b4458:	000b73ba 	.word	0x000b73ba
   b445c:	000b73f7 	.word	0x000b73f7
   b4460:	000b71f1 	.word	0x000b71f1

000b4464 <_Z9switchOFFi>:

void switchOFF(int wemo){
   b4464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String data1;
   b4466:	4925      	ldr	r1, [pc, #148]	; (b44fc <_Z9switchOFFi+0x98>)
void switchOFF(int wemo){
   b4468:	4604      	mov	r4, r0
  String data1;
   b446a:	4668      	mov	r0, sp
   b446c:	f001 fbc3 	bl	b5bf6 <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("switchOFF %i \n",wemo);
   b4470:	f001 fed8 	bl	b6224 <_Z16_fetch_usbserialv>
   b4474:	4622      	mov	r2, r4
   b4476:	4922      	ldr	r1, [pc, #136]	; (b4500 <_Z9switchOFFi+0x9c>)
   b4478:	f7ff fe39 	bl	b40ee <_ZN5Print6printfEPKcz>
   b447c:	4921      	ldr	r1, [pc, #132]	; (b4504 <_Z9switchOFFi+0xa0>)
   b447e:	4668      	mov	r0, sp
   b4480:	f001 fc23 	bl	b5cca <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>0</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b4484:	4a20      	ldr	r2, [pc, #128]	; (b4508 <_Z9switchOFFi+0xa4>)
   b4486:	4921      	ldr	r1, [pc, #132]	; (b450c <_Z9switchOFFi+0xa8>)
   b4488:	8812      	ldrh	r2, [r2, #0]
   b448a:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b448e:	4820      	ldr	r0, [pc, #128]	; (b4510 <_Z9switchOFFi+0xac>)
   b4490:	2300      	movs	r3, #0
   b4492:	f002 f855 	bl	b6540 <_ZN9TCPClient7connectEPKctm>
   b4496:	b328      	cbz	r0, b44e4 <_Z9switchOFFi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b4498:	491e      	ldr	r1, [pc, #120]	; (b4514 <_Z9switchOFFi+0xb0>)
   b449a:	481d      	ldr	r0, [pc, #116]	; (b4510 <_Z9switchOFFi+0xac>)
   b449c:	f001 fc97 	bl	b5dce <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b44a0:	491d      	ldr	r1, [pc, #116]	; (b4518 <_Z9switchOFFi+0xb4>)
   b44a2:	481b      	ldr	r0, [pc, #108]	; (b4510 <_Z9switchOFFi+0xac>)
   b44a4:	f001 fc93 	bl	b5dce <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b44a8:	491c      	ldr	r1, [pc, #112]	; (b451c <_Z9switchOFFi+0xb8>)
   b44aa:	4819      	ldr	r0, [pc, #100]	; (b4510 <_Z9switchOFFi+0xac>)
   b44ac:	f001 fc8f 	bl	b5dce <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b44b0:	491b      	ldr	r1, [pc, #108]	; (b4520 <_Z9switchOFFi+0xbc>)
   b44b2:	4817      	ldr	r0, [pc, #92]	; (b4510 <_Z9switchOFFi+0xac>)
   b44b4:	f001 fc8b 	bl	b5dce <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b44b8:	491a      	ldr	r1, [pc, #104]	; (b4524 <_Z9switchOFFi+0xc0>)
   b44ba:	4815      	ldr	r0, [pc, #84]	; (b4510 <_Z9switchOFFi+0xac>)
   b44bc:	f001 fc74 	bl	b5da8 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b44c0:	9902      	ldr	r1, [sp, #8]
   b44c2:	4813      	ldr	r0, [pc, #76]	; (b4510 <_Z9switchOFFi+0xac>)
   b44c4:	220a      	movs	r2, #10
   b44c6:	f001 fc8c 	bl	b5de2 <_ZN5Print11printNumberEmh>
        n += println();
   b44ca:	4811      	ldr	r0, [pc, #68]	; (b4510 <_Z9switchOFFi+0xac>)
   b44cc:	f001 fc73 	bl	b5db6 <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b44d0:	480f      	ldr	r0, [pc, #60]	; (b4510 <_Z9switchOFFi+0xac>)
   b44d2:	f001 fc70 	bl	b5db6 <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b44d6:	9900      	ldr	r1, [sp, #0]
   b44d8:	480d      	ldr	r0, [pc, #52]	; (b4510 <_Z9switchOFFi+0xac>)
   b44da:	f001 fc65 	bl	b5da8 <_ZN5Print5printEPKc>
        WemoClient.println();
   b44de:	480c      	ldr	r0, [pc, #48]	; (b4510 <_Z9switchOFFi+0xac>)
   b44e0:	f001 fc69 	bl	b5db6 <_ZN5Print7printlnEv>
    }
   
  if (WemoClient.connected()) {
   b44e4:	480a      	ldr	r0, [pc, #40]	; (b4510 <_Z9switchOFFi+0xac>)
   b44e6:	f002 f8a9 	bl	b663c <_ZN9TCPClient9connectedEv>
   b44ea:	b110      	cbz	r0, b44f2 <_Z9switchOFFi+0x8e>
     WemoClient.stop();
   b44ec:	4808      	ldr	r0, [pc, #32]	; (b4510 <_Z9switchOFFi+0xac>)
   b44ee:	f002 f9dd 	bl	b68ac <_ZN9TCPClient4stopEv>
  String data1;
   b44f2:	4668      	mov	r0, sp
   b44f4:	f001 fb34 	bl	b5b60 <_ZN6StringD1Ev>
  }
}
   b44f8:	b004      	add	sp, #16
   b44fa:	bd10      	pop	{r4, pc}
   b44fc:	000b7565 	.word	0x000b7565
   b4500:	000b740e 	.word	0x000b740e
   b4504:	000b741d 	.word	0x000b741d
   b4508:	2003e168 	.word	0x2003e168
   b450c:	2003e154 	.word	0x2003e154
   b4510:	2003e630 	.word	0x2003e630
   b4514:	000b736c 	.word	0x000b736c
   b4518:	000b7394 	.word	0x000b7394
   b451c:	000b73ba 	.word	0x000b73ba
   b4520:	000b73f7 	.word	0x000b73f7
   b4524:	000b71f1 	.word	0x000b71f1

000b4528 <setup>:
//SYSTEM_MODE(MANUAL); //when internet connection is needed.

SYSTEM_MODE(SEMI_AUTOMATIC); //when no internet connection is needed.


void setup() {
   b4528:	b570      	push	{r4, r5, r6, lr}

    //below this line is WEMO and room lite stuff
    pinMode(D13,INPUT);
   b452a:	2100      	movs	r1, #0
void setup() {
   b452c:	b094      	sub	sp, #80	; 0x50
    pinMode(D13,INPUT);
   b452e:	200d      	movs	r0, #13
   b4530:	f002 fb48 	bl	b6bc4 <pinMode>
    pinMode(D2,INPUT);
   b4534:	2100      	movs	r1, #0
   b4536:	2002      	movs	r0, #2
   b4538:	f002 fb44 	bl	b6bc4 <pinMode>
    Serial.begin(9600);
   b453c:	f001 fe72 	bl	b6224 <_Z16_fetch_usbserialv>
   b4540:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4544:	f001 fe5e 	bl	b6204 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b4548:	2000      	movs	r0, #0
   b454a:	f000 ff51 	bl	b53f0 <hal_timer_millis>
        while (_while() && !_condition()) {
   b454e:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4552:	4604      	mov	r4, r0
   b4554:	2000      	movs	r0, #0
   b4556:	f000 ff4b 	bl	b53f0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b455a:	1b00      	subs	r0, r0, r4
   b455c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4560:	42a8      	cmp	r0, r5
   b4562:	f171 0300 	sbcs.w	r3, r1, #0
   b4566:	d207      	bcs.n	b4578 <setup+0x50>
    waitFor(Serial.isConnected,10000);
   b4568:	f001 fe5c 	bl	b6224 <_Z16_fetch_usbserialv>
   b456c:	f001 fe4e 	bl	b620c <_ZN9USBSerial11isConnectedEv>
   b4570:	b910      	cbnz	r0, b4578 <setup+0x50>
            spark_process();
   b4572:	f001 f951 	bl	b5818 <spark_process>
        while (_while() && !_condition()) {
   b4576:	e7ed      	b.n	b4554 <setup+0x2c>
   b4578:	f001 fe54 	bl	b6224 <_Z16_fetch_usbserialv>
   b457c:	f001 fe46 	bl	b620c <_ZN9USBSerial11isConnectedEv>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4580:	4d30      	ldr	r5, [pc, #192]	; (b4644 <setup+0x11c>)

    WiFi.on();
    WiFi.setCredentials("IoTNetwork");
    WiFi.connect();
    while(WiFi.connecting()) {
    Serial.printf(".");
   b4582:	4e31      	ldr	r6, [pc, #196]	; (b4648 <setup+0x120>)
    Serial.print("Ready to Go\n");
   b4584:	f001 fe4e 	bl	b6224 <_Z16_fetch_usbserialv>
   b4588:	4930      	ldr	r1, [pc, #192]	; (b464c <setup+0x124>)
   b458a:	f001 fc0d 	bl	b5da8 <_ZN5Print5printEPKc>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b458e:	2300      	movs	r3, #0
   b4590:	461a      	mov	r2, r3
   b4592:	4619      	mov	r1, r3
   b4594:	6868      	ldr	r0, [r5, #4]
   b4596:	f001 f8f7 	bl	b5788 <network_on>

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b459a:	2238      	movs	r2, #56	; 0x38
   b459c:	2100      	movs	r1, #0
   b459e:	a806      	add	r0, sp, #24
   b45a0:	f002 fd16 	bl	b6fd0 <memset>
        creds.size = sizeof(creds);
   b45a4:	234c      	movs	r3, #76	; 0x4c
   b45a6:	9301      	str	r3, [sp, #4]
        creds.ssid = ssid;
   b45a8:	4b29      	ldr	r3, [pc, #164]	; (b4650 <setup+0x128>)
   b45aa:	9302      	str	r3, [sp, #8]
        creds.ssid_len = ssidLen;
        creds.password = password;
   b45ac:	220a      	movs	r2, #10
   b45ae:	2300      	movs	r3, #0
   b45b0:	e9cd 2303 	strd	r2, r3, [sp, #12]
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b45b4:	4619      	mov	r1, r3
   b45b6:	aa01      	add	r2, sp, #4
   b45b8:	6868      	ldr	r0, [r5, #4]
        creds.password_len = passwordLen;
   b45ba:	9305      	str	r3, [sp, #20]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b45bc:	f001 f904 	bl	b57c8 <network_set_credentials>
        network_connect(*this, flags, 0, NULL);
   b45c0:	2300      	movs	r3, #0
   b45c2:	6868      	ldr	r0, [r5, #4]
   b45c4:	461a      	mov	r2, r3
   b45c6:	4619      	mov	r1, r3
   b45c8:	f001 f8be 	bl	b5748 <network_connect>
        return network_connecting(*this, 0, NULL);
   b45cc:	2200      	movs	r2, #0
   b45ce:	6868      	ldr	r0, [r5, #4]
   b45d0:	4611      	mov	r1, r2
   b45d2:	f001 f8c1 	bl	b5758 <network_connecting>
    while(WiFi.connecting()) {
   b45d6:	4604      	mov	r4, r0
   b45d8:	b128      	cbz	r0, b45e6 <setup+0xbe>
    Serial.printf(".");
   b45da:	f001 fe23 	bl	b6224 <_Z16_fetch_usbserialv>
   b45de:	4631      	mov	r1, r6
   b45e0:	f7ff fd85 	bl	b40ee <_ZN5Print6printfEPKcz>
    while(WiFi.connecting()) {
   b45e4:	e7f2      	b.n	b45cc <setup+0xa4>
    }
    Serial.printf("\n\n");
   b45e6:	f001 fe1d 	bl	b6224 <_Z16_fetch_usbserialv>
   b45ea:	491a      	ldr	r1, [pc, #104]	; (b4654 <setup+0x12c>)
    display.clearDisplay();


    // below this line is PIN stuff

    pinMode(led, OUTPUT);         // initalize LED as an output
   b45ec:	4d1a      	ldr	r5, [pc, #104]	; (b4658 <setup+0x130>)
    Serial.printf("\n\n");
   b45ee:	f7ff fd7e 	bl	b40ee <_ZN5Print6printfEPKcz>
    display.begin(SSD1306_SWITCHCAPVCC, 0x3C); // initialize with the I2C addr 0x3C (for the 128x64)
   b45f2:	481a      	ldr	r0, [pc, #104]	; (b465c <setup+0x134>)
   b45f4:	223c      	movs	r2, #60	; 0x3c
   b45f6:	2102      	movs	r1, #2
   b45f8:	f000 fc18 	bl	b4e2c <_ZN16Adafruit_SSD13065beginEhh>
    display.setCursor(0,0);
   b45fc:	4622      	mov	r2, r4
   b45fe:	4621      	mov	r1, r4
   b4600:	4816      	ldr	r0, [pc, #88]	; (b465c <setup+0x134>)
   b4602:	f000 fe91 	bl	b5328 <_ZN12Adafruit_GFX9setCursorEss>
    display.display(); //this will show the Adafruit logo (splashscreen)
   b4606:	4815      	ldr	r0, [pc, #84]	; (b465c <setup+0x134>)
   b4608:	f000 fba0 	bl	b4d4c <_ZN16Adafruit_SSD13067displayEv>
    delay(1500); //this will delay the splashscreen to increase the marketing effect
   b460c:	f240 50dc 	movw	r0, #1500	; 0x5dc
   b4610:	f001 fc72 	bl	b5ef8 <delay>
    display.clearDisplay();
   b4614:	4811      	ldr	r0, [pc, #68]	; (b465c <setup+0x134>)
   b4616:	f000 fb21 	bl	b4c5c <_ZN16Adafruit_SSD130612clearDisplayEv>
    pinMode(led, OUTPUT);         // initalize LED as an output
   b461a:	8828      	ldrh	r0, [r5, #0]
   b461c:	2101      	movs	r1, #1
   b461e:	f002 fad1 	bl	b6bc4 <pinMode>
    pinMode(ms_sensor, INPUT);    // initialize motion sensor as an input
   b4622:	4b0f      	ldr	r3, [pc, #60]	; (b4660 <setup+0x138>)
   b4624:	4621      	mov	r1, r4
   b4626:	8818      	ldrh	r0, [r3, #0]
   b4628:	f002 facc 	bl	b6bc4 <pinMode>
    pinMode(button, INPUT);       // initialize button as an input
   b462c:	4b0d      	ldr	r3, [pc, #52]	; (b4664 <setup+0x13c>)
   b462e:	4621      	mov	r1, r4
   b4630:	8818      	ldrh	r0, [r3, #0]
   b4632:	f002 fac7 	bl	b6bc4 <pinMode>
    digitalWrite(led, LOW);       // set the LED as off
   b4636:	8828      	ldrh	r0, [r5, #0]
   b4638:	4621      	mov	r1, r4
}
   b463a:	b014      	add	sp, #80	; 0x50
   b463c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(led, LOW);       // set the LED as off
   b4640:	f002 bad1 	b.w	b6be6 <digitalWrite>
   b4644:	2003e718 	.word	0x2003e718
   b4648:	000b7561 	.word	0x000b7561
   b464c:	000b7549 	.word	0x000b7549
   b4650:	000b7556 	.word	0x000b7556
   b4654:	000b7563 	.word	0x000b7563
   b4658:	2003e14c 	.word	0x2003e14c
   b465c:	2003e674 	.word	0x2003e674
   b4660:	2003e150 	.word	0x2003e150
   b4664:	2003e148 	.word	0x2003e148

000b4668 <loop>:

void loop() {
   b4668:	b573      	push	{r0, r1, r4, r5, r6, lr}

        //below this line is PIN stuff
    ms_val = digitalRead(ms_sensor);      // read motion sensor value
   b466a:	4b57      	ldr	r3, [pc, #348]	; (b47c8 <loop+0x160>)
   b466c:	4c57      	ldr	r4, [pc, #348]	; (b47cc <loop+0x164>)
   b466e:	8818      	ldrh	r0, [r3, #0]
   b4670:	f002 fad2 	bl	b6c18 <digitalRead>
    button_val = digitalRead(button);     // read button value
   b4674:	4b56      	ldr	r3, [pc, #344]	; (b47d0 <loop+0x168>)
    ms_val = digitalRead(ms_sensor);      // read motion sensor value
   b4676:	6020      	str	r0, [r4, #0]
    button_val = digitalRead(button);     // read button value
   b4678:	8818      	ldrh	r0, [r3, #0]
   b467a:	f002 facd 	bl	b6c18 <digitalRead>
   b467e:	4b55      	ldr	r3, [pc, #340]	; (b47d4 <loop+0x16c>)
  
    if (ms_val == HIGH) {
   b4680:	6824      	ldr	r4, [r4, #0]
    button_val = digitalRead(button);     // read button value
   b4682:	6018      	str	r0, [r3, #0]
    if (ms_val == HIGH) {
   b4684:	4b54      	ldr	r3, [pc, #336]	; (b47d8 <loop+0x170>)
   b4686:	2c01      	cmp	r4, #1
      if (ms_state == LOW) {
   b4688:	681a      	ldr	r2, [r3, #0]
    if (ms_val == HIGH) {
   b468a:	f040 808d 	bne.w	b47a8 <loop+0x140>
      if (ms_state == LOW) {
   b468e:	b902      	cbnz	r2, b4692 <loop+0x2a>
          ms_state = HIGH;
   b4690:	601c      	str	r4, [r3, #0]
      if (ms_state == HIGH) {
          ms_state = LOW;
      }
    }

    if (button_val == HIGH) {
   b4692:	2801      	cmp	r0, #1
   b4694:	4d51      	ldr	r5, [pc, #324]	; (b47dc <loop+0x174>)
   b4696:	d117      	bne.n	b46c8 <loop+0x60>
        button_presses = button_presses + 1;                            // running total of total button presses
   b4698:	4a51      	ldr	r2, [pc, #324]	; (b47e0 <loop+0x178>)
   b469a:	6813      	ldr	r3, [r2, #0]


        if (ms_val == HIGH) {            // motion sensor is activated
   b469c:	2c01      	cmp	r4, #1
        button_presses = button_presses + 1;                            // running total of total button presses
   b469e:	f103 0301 	add.w	r3, r3, #1
   b46a2:	6013      	str	r3, [r2, #0]
        if (ms_val == HIGH) {            // motion sensor is activated
   b46a4:	d10c      	bne.n	b46c0 <loop+0x58>
            count = count + 1;
   b46a6:	682b      	ldr	r3, [r5, #0]
            digitalWrite(led, HIGH);                                    // turn LED on
   b46a8:	4e4e      	ldr	r6, [pc, #312]	; (b47e4 <loop+0x17c>)
            count = count + 1;
   b46aa:	3301      	adds	r3, #1
            digitalWrite(led, HIGH);                                    // turn LED on
   b46ac:	8830      	ldrh	r0, [r6, #0]
            count = count + 1;
   b46ae:	602b      	str	r3, [r5, #0]
            digitalWrite(led, HIGH);                                    // turn LED on
   b46b0:	4621      	mov	r1, r4
   b46b2:	f002 fa98 	bl	b6be6 <digitalWrite>
        
            if (state == LOW) {                                         // check if state is LOW
   b46b6:	4b4c      	ldr	r3, [pc, #304]	; (b47e8 <loop+0x180>)
   b46b8:	681a      	ldr	r2, [r3, #0]
   b46ba:	2a00      	cmp	r2, #0
   b46bc:	d179      	bne.n	b47b2 <loop+0x14a>
                state = HIGH;                                           // check if state is HIGH
   b46be:	601c      	str	r4, [r3, #0]
            else {
                digitalWrite(led, LOW);                       // turn LED OFF
            }
      
        }
        delay(1500);                                   // delay 1500 milliseconds 
   b46c0:	f240 50dc 	movw	r0, #1500	; 0x5dc
   b46c4:	f001 fc18 	bl	b5ef8 <delay>
      if (state == HIGH){                           // check if state is high
       // state = LOW;                                // update variable state to LOW
         }
    
    //below are the line for the DISPLAY
    display.setTextSize(2);
   b46c8:	4848      	ldr	r0, [pc, #288]	; (b47ec <loop+0x184>)
   b46ca:	2102      	movs	r1, #2
   b46cc:	f000 fe2f 	bl	b532e <_ZN12Adafruit_GFX11setTextSizeEh>
    display.setTextColor(WHITE);
   b46d0:	4846      	ldr	r0, [pc, #280]	; (b47ec <loop+0x184>)
   b46d2:	2101      	movs	r1, #1
   b46d4:	f000 fe30 	bl	b5338 <_ZN12Adafruit_GFX12setTextColorEt>
    display.setCursor(1,15);
   b46d8:	220f      	movs	r2, #15
   b46da:	4844      	ldr	r0, [pc, #272]	; (b47ec <loop+0x184>)
   b46dc:	2101      	movs	r1, #1
   b46de:	f000 fe23 	bl	b5328 <_ZN12Adafruit_GFX9setCursorEss>
    display.printf("Welcome U are\n");
   b46e2:	4943      	ldr	r1, [pc, #268]	; (b47f0 <loop+0x188>)
   b46e4:	4841      	ldr	r0, [pc, #260]	; (b47ec <loop+0x184>)
   b46e6:	f7ff fd02 	bl	b40ee <_ZN5Print6printfEPKcz>
    display.printf("vistor=%i\n",count);
   b46ea:	682a      	ldr	r2, [r5, #0]
   b46ec:	4941      	ldr	r1, [pc, #260]	; (b47f4 <loop+0x18c>)
   b46ee:	483f      	ldr	r0, [pc, #252]	; (b47ec <loop+0x184>)
   b46f0:	f7ff fcfd 	bl	b40ee <_ZN5Print6printfEPKcz>
    display.display();
   b46f4:	483d      	ldr	r0, [pc, #244]	; (b47ec <loop+0x184>)
   b46f6:	f000 fb29 	bl	b4d4c <_ZN16Adafruit_SSD13067displayEv>
    delay(1500); 
   b46fa:	f240 50dc 	movw	r0, #1500	; 0x5dc
   b46fe:	f001 fbfb 	bl	b5ef8 <delay>
    display.clearDisplay();
   b4702:	483a      	ldr	r0, [pc, #232]	; (b47ec <loop+0x184>)
   b4704:	f000 faaa 	bl	b4c5c <_ZN16Adafruit_SSD130612clearDisplayEv>

    //below this line is WEMO stuff
    buttonState=digitalRead(PINPIN);
   b4708:	2002      	movs	r0, #2
   b470a:	f002 fa85 	bl	b6c18 <digitalRead>
   b470e:	4b3a      	ldr	r3, [pc, #232]	; (b47f8 <loop+0x190>)
   b4710:	2800      	cmp	r0, #0
   b4712:	bf14      	ite	ne
   b4714:	2201      	movne	r2, #1
   b4716:	2200      	moveq	r2, #0
   b4718:	701a      	strb	r2, [r3, #0]
        if(buttonState){
   b471a:	4b38      	ldr	r3, [pc, #224]	; (b47fc <loop+0x194>)
            toggleState=!toggleState;
   b471c:	bf1e      	ittt	ne
   b471e:	781a      	ldrbne	r2, [r3, #0]
   b4720:	f082 0201 	eorne.w	r2, r2, #1
   b4724:	701a      	strbne	r2, [r3, #0]
         }
        if(toggleState){
   b4726:	7818      	ldrb	r0, [r3, #0]
   b4728:	2800      	cmp	r0, #0
   b472a:	d047      	beq.n	b47bc <loop+0x154>
            switchON(0);
   b472c:	2000      	movs	r0, #0
   b472e:	f7ff fe37 	bl	b43a0 <_Z8switchONi>
            Serial.printf("Button is pressed \n");
   b4732:	f001 fd77 	bl	b6224 <_Z16_fetch_usbserialv>
   b4736:	4932      	ldr	r1, [pc, #200]	; (b4800 <loop+0x198>)
   b4738:	f7ff fcd9 	bl	b40ee <_ZN5Print6printfEPKcz>
            switchOFF(0);
        }
    delay(1000);

    //below are the lines for the room lite stuff
    Serial.printf("Setting color of bulb %i to color %i\n",BULB,45000);
   b473c:	4c31      	ldr	r4, [pc, #196]	; (b4804 <loop+0x19c>)
    delay(1000);
   b473e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4742:	f001 fbd9 	bl	b5ef8 <delay>
    setHue(BULB,true,45000,155,255);
   b4746:	25ff      	movs	r5, #255	; 0xff
    Serial.printf("Setting color of bulb %i to color %i\n",BULB,45000);
   b4748:	f001 fd6c 	bl	b6224 <_Z16_fetch_usbserialv>
   b474c:	6822      	ldr	r2, [r4, #0]
   b474e:	492e      	ldr	r1, [pc, #184]	; (b4808 <loop+0x1a0>)
   b4750:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   b4754:	f7ff fccb 	bl	b40ee <_ZN5Print6printfEPKcz>
    setHue(BULB,true,45000,155,255);
   b4758:	9500      	str	r5, [sp, #0]
   b475a:	239b      	movs	r3, #155	; 0x9b
   b475c:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b4760:	2101      	movs	r1, #1
   b4762:	6820      	ldr	r0, [r4, #0]
   b4764:	f7ff fcf6 	bl	b4154 <_Z6setHueibiii>
    delay(30000);
   b4768:	f247 5030 	movw	r0, #30000	; 0x7530
   b476c:	f001 fbc4 	bl	b5ef8 <delay>
    setHue(BULB,false,45000,155,255); 
   b4770:	9500      	str	r5, [sp, #0]
   b4772:	239b      	movs	r3, #155	; 0x9b
   b4774:	6820      	ldr	r0, [r4, #0]
    delay(2000);
    for (bulbCount=1; bulbCount<=NUMBULBS;bulbCount++){
   b4776:	4c25      	ldr	r4, [pc, #148]	; (b480c <loop+0x1a4>)
    setHue(BULB,false,45000,155,255); 
   b4778:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b477c:	2100      	movs	r1, #0
   b477e:	f7ff fce9 	bl	b4154 <_Z6setHueibiii>
    delay(2000);
   b4782:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4786:	f001 fbb7 	bl	b5ef8 <delay>
    for (bulbCount=1; bulbCount<=NUMBULBS;bulbCount++){
   b478a:	2301      	movs	r3, #1
   b478c:	6023      	str	r3, [r4, #0]
   b478e:	6820      	ldr	r0, [r4, #0]
   b4790:	2807      	cmp	r0, #7
   b4792:	dc16      	bgt.n	b47c2 <loop+0x15a>
        setHue(bulbCount,true,45000,155,255);
   b4794:	239b      	movs	r3, #155	; 0x9b
   b4796:	9500      	str	r5, [sp, #0]
   b4798:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b479c:	2101      	movs	r1, #1
   b479e:	f7ff fcd9 	bl	b4154 <_Z6setHueibiii>
    for (bulbCount=1; bulbCount<=NUMBULBS;bulbCount++){
   b47a2:	6823      	ldr	r3, [r4, #0]
   b47a4:	3301      	adds	r3, #1
   b47a6:	e7f1      	b.n	b478c <loop+0x124>
      if (ms_state == HIGH) {
   b47a8:	2a01      	cmp	r2, #1
          ms_state = LOW;
   b47aa:	bf04      	itt	eq
   b47ac:	2200      	moveq	r2, #0
   b47ae:	601a      	streq	r2, [r3, #0]
   b47b0:	e76f      	b.n	b4692 <loop+0x2a>
                digitalWrite(led, LOW);                       // turn LED OFF
   b47b2:	8830      	ldrh	r0, [r6, #0]
   b47b4:	2100      	movs	r1, #0
   b47b6:	f002 fa16 	bl	b6be6 <digitalWrite>
   b47ba:	e781      	b.n	b46c0 <loop+0x58>
            switchOFF(0);
   b47bc:	f7ff fe52 	bl	b4464 <_Z9switchOFFi>
   b47c0:	e7bc      	b.n	b473c <loop+0xd4>
    }
   b47c2:	b002      	add	sp, #8
   b47c4:	bd70      	pop	{r4, r5, r6, pc}
   b47c6:	bf00      	nop
   b47c8:	2003e150 	.word	0x2003e150
   b47cc:	2003e6ac 	.word	0x2003e6ac
   b47d0:	2003e148 	.word	0x2003e148
   b47d4:	2003e66c 	.word	0x2003e66c
   b47d8:	2003e6a8 	.word	0x2003e6a8
   b47dc:	2003e670 	.word	0x2003e670
   b47e0:	2003e668 	.word	0x2003e668
   b47e4:	2003e14c 	.word	0x2003e14c
   b47e8:	2003e6b0 	.word	0x2003e6b0
   b47ec:	2003e674 	.word	0x2003e674
   b47f0:	000b7566 	.word	0x000b7566
   b47f4:	000b7575 	.word	0x000b7575
   b47f8:	2003e664 	.word	0x2003e664
   b47fc:	2003e6b4 	.word	0x2003e6b4
   b4800:	000b7580 	.word	0x000b7580
   b4804:	2003e12c 	.word	0x2003e12c
   b4808:	000b7594 	.word	0x000b7594
   b480c:	2003e660 	.word	0x2003e660

000b4810 <_GLOBAL__sub_I_hueOn>:
   b4810:	b508      	push	{r3, lr}
String hueCmd;  // Hue command
   b4812:	4918      	ldr	r1, [pc, #96]	; (b4874 <_GLOBAL__sub_I_hueOn+0x64>)
   b4814:	4818      	ldr	r0, [pc, #96]	; (b4878 <_GLOBAL__sub_I_hueOn+0x68>)
   b4816:	f001 f9ee 	bl	b5bf6 <_ZN6StringC1EPK19__FlashStringHelper>
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b481a:	4a18      	ldr	r2, [pc, #96]	; (b487c <_GLOBAL__sub_I_hueOn+0x6c>)
   b481c:	4b18      	ldr	r3, [pc, #96]	; (b4880 <_GLOBAL__sub_I_hueOn+0x70>)
   b481e:	6812      	ldr	r2, [r2, #0]
   b4820:	601a      	str	r2, [r3, #0]
   b4822:	4a18      	ldr	r2, [pc, #96]	; (b4884 <_GLOBAL__sub_I_hueOn+0x74>)
TCPClient HueClient;
   b4824:	4818      	ldr	r0, [pc, #96]	; (b4888 <_GLOBAL__sub_I_hueOn+0x78>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b4826:	6812      	ldr	r2, [r2, #0]
   b4828:	605a      	str	r2, [r3, #4]
   b482a:	4a18      	ldr	r2, [pc, #96]	; (b488c <_GLOBAL__sub_I_hueOn+0x7c>)
   b482c:	6812      	ldr	r2, [r2, #0]
   b482e:	609a      	str	r2, [r3, #8]
   b4830:	4a17      	ldr	r2, [pc, #92]	; (b4890 <_GLOBAL__sub_I_hueOn+0x80>)
   b4832:	6812      	ldr	r2, [r2, #0]
   b4834:	60da      	str	r2, [r3, #12]
   b4836:	4a17      	ldr	r2, [pc, #92]	; (b4894 <_GLOBAL__sub_I_hueOn+0x84>)
   b4838:	6812      	ldr	r2, [r2, #0]
   b483a:	611a      	str	r2, [r3, #16]
   b483c:	4a16      	ldr	r2, [pc, #88]	; (b4898 <_GLOBAL__sub_I_hueOn+0x88>)
   b483e:	6812      	ldr	r2, [r2, #0]
   b4840:	615a      	str	r2, [r3, #20]
   b4842:	4a16      	ldr	r2, [pc, #88]	; (b489c <_GLOBAL__sub_I_hueOn+0x8c>)
   b4844:	6812      	ldr	r2, [r2, #0]
   b4846:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b4848:	f002 f87a 	bl	b6940 <_ZN9TCPClientC1Ev>
TCPClient WemoClient;
   b484c:	4814      	ldr	r0, [pc, #80]	; (b48a0 <_GLOBAL__sub_I_hueOn+0x90>)
   b484e:	f002 f877 	bl	b6940 <_ZN9TCPClientC1Ev>
Adafruit_SSD1306 display(OLED_RESET);
   b4852:	4814      	ldr	r0, [pc, #80]	; (b48a4 <_GLOBAL__sub_I_hueOn+0x94>)
   b4854:	2104      	movs	r1, #4
   b4856:	f000 f9eb 	bl	b4c30 <_ZN16Adafruit_SSD1306C1Ea>
              error_(SYSTEM_ERROR_NONE) {
   b485a:	4b13      	ldr	r3, [pc, #76]	; (b48a8 <_GLOBAL__sub_I_hueOn+0x98>)
   b485c:	2200      	movs	r2, #0
   b485e:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4862:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4866:	609a      	str	r2, [r3, #8]
   b4868:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_system_mode(mode);
   b486c:	2002      	movs	r0, #2
   b486e:	f000 bf47 	b.w	b5700 <set_system_mode>
   b4872:	bf00      	nop
   b4874:	000b7565 	.word	0x000b7565
   b4878:	2003e698 	.word	0x2003e698
   b487c:	2003e620 	.word	0x2003e620
   b4880:	2003e604 	.word	0x2003e604
   b4884:	2003e13c 	.word	0x2003e13c
   b4888:	2003e5e8 	.word	0x2003e5e8
   b488c:	2003e144 	.word	0x2003e144
   b4890:	2003e134 	.word	0x2003e134
   b4894:	2003e130 	.word	0x2003e130
   b4898:	2003e138 	.word	0x2003e138
   b489c:	2003e140 	.word	0x2003e140
   b48a0:	2003e630 	.word	0x2003e630
   b48a4:	2003e674 	.word	0x2003e674
   b48a8:	2003e624 	.word	0x2003e624

000b48ac <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b48ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b48ae:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b48b0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b48b4:	2d02      	cmp	r5, #2
   b48b6:	d069      	beq.n	b498c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b48b8:	2d03      	cmp	r5, #3
   b48ba:	f000 8099 	beq.w	b49f0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b48be:	2d01      	cmp	r5, #1
   b48c0:	d16c      	bne.n	b499c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b48c2:	8905      	ldrh	r5, [r0, #8]
   b48c4:	43d2      	mvns	r2, r2
   b48c6:	442a      	add	r2, r5
   b48c8:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b48ca:	2a00      	cmp	r2, #0
   b48cc:	db5d      	blt.n	b498a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b48ce:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b48d2:	4295      	cmp	r5, r2
   b48d4:	dd59      	ble.n	b498a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b48d6:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b48d8:	bfbe      	ittt	lt
   b48da:	185b      	addlt	r3, r3, r1
   b48dc:	b21b      	sxthlt	r3, r3
    __y = 0;
   b48de:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b48e0:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b48e4:	18cd      	adds	r5, r1, r3
   b48e6:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b48e8:	bfc4      	itt	gt
   b48ea:	1a43      	subgt	r3, r0, r1
   b48ec:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b48ee:	2b00      	cmp	r3, #0
   b48f0:	dd4b      	ble.n	b498a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b48f2:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b48f6:	f8df c120 	ldr.w	ip, [pc, #288]	; b4a18 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b48fa:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b48fe:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b4902:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4904:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b4908:	d01a      	beq.n	b4940 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b490a:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b490e:	4e40      	ldr	r6, [pc, #256]	; (b4a10 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b4910:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b4912:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4914:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4916:	bf3f      	itttt	cc
   b4918:	eba5 0e03 	subcc.w	lr, r5, r3
   b491c:	26ff      	movcc	r6, #255	; 0xff
   b491e:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4922:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b4924:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b4928:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b492a:	bf0c      	ite	eq
   b492c:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b492e:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b4930:	42ab      	cmp	r3, r5
   b4932:	f80c 6002 	strb.w	r6, [ip, r2]
   b4936:	d328      	bcc.n	b498a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b4938:	3908      	subs	r1, #8
   b493a:	440b      	add	r3, r1
   b493c:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b493e:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b4940:	2b07      	cmp	r3, #7
   b4942:	d919      	bls.n	b4978 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4944:	2c01      	cmp	r4, #1
   b4946:	f04f 35ff 	mov.w	r5, #4294967295
   b494a:	bf18      	it	ne
   b494c:	2500      	movne	r5, #0
   b494e:	b2ed      	uxtb	r5, r5
   b4950:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4954:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b4956:	3a08      	subs	r2, #8
   b4958:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b495a:	2a07      	cmp	r2, #7
      *pBuf = val;
   b495c:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4960:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4964:	d8f7      	bhi.n	b4956 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b4966:	f1a3 0208 	sub.w	r2, r3, #8
   b496a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b496e:	3201      	adds	r2, #1
   b4970:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4974:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b4978:	b13b      	cbz	r3, b498a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b497a:	4a26      	ldr	r2, [pc, #152]	; (b4a14 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b497c:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b497e:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4980:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4982:	bf0c      	ite	eq
   b4984:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b4986:	4393      	bicne	r3, r2
   b4988:	7003      	strb	r3, [r0, #0]
}
   b498a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b498c:	8945      	ldrh	r5, [r0, #10]
   b498e:	43d2      	mvns	r2, r2
   b4990:	442a      	add	r2, r5
      x -= (w-1);
   b4992:	18cd      	adds	r5, r1, r3
   b4994:	8901      	ldrh	r1, [r0, #8]
   b4996:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b4998:	b212      	sxth	r2, r2
      x -= (w-1);
   b499a:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b499c:	2a00      	cmp	r2, #0
   b499e:	dbf4      	blt.n	b498a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b49a0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b49a4:	4295      	cmp	r5, r2
   b49a6:	ddf0      	ble.n	b498a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b49a8:	2900      	cmp	r1, #0
    w += x;
   b49aa:	bfbe      	ittt	lt
   b49ac:	185b      	addlt	r3, r3, r1
   b49ae:	b21b      	sxthlt	r3, r3
    x = 0;
   b49b0:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b49b2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b49b6:	18ce      	adds	r6, r1, r3
   b49b8:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b49ba:	bfc4      	itt	gt
   b49bc:	1a6b      	subgt	r3, r5, r1
   b49be:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b49c0:	2b00      	cmp	r3, #0
   b49c2:	dde2      	ble.n	b498a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b49c4:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b49c6:	2580      	movs	r5, #128	; 0x80
   b49c8:	fb10 1105 	smlabb	r1, r0, r5, r1
   b49cc:	4812      	ldr	r0, [pc, #72]	; (b4a18 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b49ce:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b49d0:	f002 0007 	and.w	r0, r2, #7
   b49d4:	2201      	movs	r2, #1
   b49d6:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b49d8:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b49da:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b49dc:	440b      	add	r3, r1
   b49de:	d10c      	bne.n	b49fa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b49e0:	428b      	cmp	r3, r1
   b49e2:	d0d2      	beq.n	b498a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b49e4:	f811 0b01 	ldrb.w	r0, [r1], #1
   b49e8:	4310      	orrs	r0, r2
   b49ea:	f801 0c01 	strb.w	r0, [r1, #-1]
   b49ee:	e7f7      	b.n	b49e0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b49f0:	18cd      	adds	r5, r1, r3
   b49f2:	8941      	ldrh	r1, [r0, #10]
   b49f4:	1b49      	subs	r1, r1, r5
   b49f6:	b209      	sxth	r1, r1
      break;
   b49f8:	e767      	b.n	b48ca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b49fa:	43d2      	mvns	r2, r2
   b49fc:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b49fe:	428b      	cmp	r3, r1
   b4a00:	d0c3      	beq.n	b498a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4a02:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4a06:	4010      	ands	r0, r2
   b4a08:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4a0c:	e7f7      	b.n	b49fe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b4a0e:	bf00      	nop
   b4a10:	2003e174 	.word	0x2003e174
   b4a14:	2003e16c 	.word	0x2003e16c
   b4a18:	2003e17c 	.word	0x2003e17c

000b4a1c <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b4a1e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4a20:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4a24:	2d02      	cmp	r5, #2
   b4a26:	d034      	beq.n	b4a92 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b4a28:	2d03      	cmp	r5, #3
   b4a2a:	f000 809b 	beq.w	b4b64 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b4a2e:	2d01      	cmp	r5, #1
   b4a30:	d137      	bne.n	b4aa2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b4a32:	18d5      	adds	r5, r2, r3
   b4a34:	8902      	ldrh	r2, [r0, #8]
   b4a36:	1b52      	subs	r2, r2, r5
   b4a38:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b4a3a:	2900      	cmp	r1, #0
   b4a3c:	f2c0 8091 	blt.w	b4b62 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4a40:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4a44:	428d      	cmp	r5, r1
   b4a46:	f340 808c 	ble.w	b4b62 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b4a4a:	2a00      	cmp	r2, #0
    w += x;
   b4a4c:	bfbe      	ittt	lt
   b4a4e:	189b      	addlt	r3, r3, r2
   b4a50:	b21b      	sxthlt	r3, r3
    x = 0;
   b4a52:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b4a54:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4a58:	18d6      	adds	r6, r2, r3
   b4a5a:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4a5c:	bfc4      	itt	gt
   b4a5e:	1aab      	subgt	r3, r5, r2
   b4a60:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4a62:	2b00      	cmp	r3, #0
   b4a64:	dd7d      	ble.n	b4b62 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4a66:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b4a68:	2580      	movs	r5, #128	; 0x80
   b4a6a:	fb10 2205 	smlabb	r2, r0, r5, r2
   b4a6e:	4845      	ldr	r0, [pc, #276]	; (b4b84 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b4a70:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b4a72:	f001 0007 	and.w	r0, r1, #7
   b4a76:	2101      	movs	r1, #1
   b4a78:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b4a7a:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4a7c:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b4a7e:	4413      	add	r3, r2
   b4a80:	d175      	bne.n	b4b6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b4a82:	429a      	cmp	r2, r3
   b4a84:	d06d      	beq.n	b4b62 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4a86:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4a8a:	4308      	orrs	r0, r1
   b4a8c:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4a90:	e7f7      	b.n	b4a82 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b4a92:	8905      	ldrh	r5, [r0, #8]
   b4a94:	43c9      	mvns	r1, r1
   b4a96:	4429      	add	r1, r5
      y -= (h-1);
   b4a98:	18d5      	adds	r5, r2, r3
   b4a9a:	8942      	ldrh	r2, [r0, #10]
   b4a9c:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b4a9e:	b209      	sxth	r1, r1
      y -= (h-1);
   b4aa0:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b4aa2:	2900      	cmp	r1, #0
   b4aa4:	db5d      	blt.n	b4b62 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4aa6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4aaa:	428d      	cmp	r5, r1
   b4aac:	dd59      	ble.n	b4b62 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b4aae:	2a00      	cmp	r2, #0
    __h += __y;
   b4ab0:	bfbe      	ittt	lt
   b4ab2:	189b      	addlt	r3, r3, r2
   b4ab4:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4ab6:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b4ab8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4abc:	18d5      	adds	r5, r2, r3
   b4abe:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4ac0:	bfc4      	itt	gt
   b4ac2:	1a83      	subgt	r3, r0, r2
   b4ac4:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b4ac6:	2b00      	cmp	r3, #0
   b4ac8:	dd4b      	ble.n	b4b62 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b4aca:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b4ace:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b4b84 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b4ad2:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b4ad6:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b4ada:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4adc:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b4ae0:	d01a      	beq.n	b4b18 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b4ae2:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b4ae6:	4e28      	ldr	r6, [pc, #160]	; (b4b88 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b4ae8:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b4aea:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4aec:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4aee:	bf3f      	itttt	cc
   b4af0:	eba5 0e03 	subcc.w	lr, r5, r3
   b4af4:	26ff      	movcc	r6, #255	; 0xff
   b4af6:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4afa:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b4afc:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b4b00:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4b02:	bf0c      	ite	eq
   b4b04:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b4b06:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b4b08:	42ab      	cmp	r3, r5
   b4b0a:	f80c 6001 	strb.w	r6, [ip, r1]
   b4b0e:	d328      	bcc.n	b4b62 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b4b10:	3a08      	subs	r2, #8
   b4b12:	4413      	add	r3, r2
   b4b14:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b4b16:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b4b18:	2b07      	cmp	r3, #7
   b4b1a:	d919      	bls.n	b4b50 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4b1c:	2c01      	cmp	r4, #1
   b4b1e:	f04f 35ff 	mov.w	r5, #4294967295
   b4b22:	bf18      	it	ne
   b4b24:	2500      	movne	r5, #0
   b4b26:	b2ed      	uxtb	r5, r5
   b4b28:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4b2c:	461a      	mov	r2, r3
      h -= 8;
   b4b2e:	3a08      	subs	r2, #8
   b4b30:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4b32:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4b34:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4b38:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4b3c:	d8f7      	bhi.n	b4b2e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b4b3e:	f1a3 0208 	sub.w	r2, r3, #8
   b4b42:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4b46:	3201      	adds	r2, #1
   b4b48:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4b4c:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b4b50:	b13b      	cbz	r3, b4b62 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b4b52:	4a0e      	ldr	r2, [pc, #56]	; (b4b8c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b4b54:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b4b56:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4b58:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4b5a:	bf0c      	ite	eq
   b4b5c:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b4b5e:	4393      	bicne	r3, r2
   b4b60:	7003      	strb	r3, [r0, #0]
}
   b4b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4b64:	8945      	ldrh	r5, [r0, #10]
   b4b66:	43c9      	mvns	r1, r1
   b4b68:	4429      	add	r1, r5
   b4b6a:	b209      	sxth	r1, r1
      break;
   b4b6c:	e765      	b.n	b4a3a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b4b6e:	43c9      	mvns	r1, r1
   b4b70:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b4b72:	429a      	cmp	r2, r3
   b4b74:	d0f5      	beq.n	b4b62 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4b76:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4b7a:	4008      	ands	r0, r1
   b4b7c:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4b80:	e7f7      	b.n	b4b72 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b4b82:	bf00      	nop
   b4b84:	2003e17c 	.word	0x2003e17c
   b4b88:	2003e174 	.word	0x2003e174
   b4b8c:	2003e16c 	.word	0x2003e16c

000b4b90 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b4b90:	4770      	bx	lr
	...

000b4b94 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4b96:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4b98:	4606      	mov	r6, r0
   b4b9a:	4614      	mov	r4, r2
   b4b9c:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4b9e:	db2d      	blt.n	b4bfc <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4ba0:	f000 fbcf 	bl	b5342 <_ZN12Adafruit_GFX5widthEv>
   b4ba4:	42a8      	cmp	r0, r5
   b4ba6:	dd29      	ble.n	b4bfc <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4ba8:	2c00      	cmp	r4, #0
   b4baa:	db27      	blt.n	b4bfc <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4bac:	4630      	mov	r0, r6
   b4bae:	f000 fbcb 	bl	b5348 <_ZN12Adafruit_GFX6heightEv>
   b4bb2:	42a0      	cmp	r0, r4
   b4bb4:	dd22      	ble.n	b4bfc <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b4bb6:	4630      	mov	r0, r6
   b4bb8:	f000 fbc1 	bl	b533e <_ZN12Adafruit_GFX11getRotationEv>
   b4bbc:	2802      	cmp	r0, #2
   b4bbe:	d01e      	beq.n	b4bfe <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b4bc0:	2803      	cmp	r0, #3
   b4bc2:	d025      	beq.n	b4c10 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b4bc4:	2801      	cmp	r0, #1
   b4bc6:	d104      	bne.n	b4bd2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b4bc8:	8933      	ldrh	r3, [r6, #8]
   b4bca:	43e2      	mvns	r2, r4
   b4bcc:	441a      	add	r2, r3
    break;
   b4bce:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b4bd0:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4bd2:	2c00      	cmp	r4, #0
   b4bd4:	4622      	mov	r2, r4
   b4bd6:	bfb8      	it	lt
   b4bd8:	1de2      	addlt	r2, r4, #7
   b4bda:	10d2      	asrs	r2, r2, #3
   b4bdc:	2180      	movs	r1, #128	; 0x80
   b4bde:	fb12 5501 	smlabb	r5, r2, r1, r5
   b4be2:	490e      	ldr	r1, [pc, #56]	; (b4c1c <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b4be4:	2201      	movs	r2, #1
   b4be6:	f004 0407 	and.w	r4, r4, #7
   b4bea:	574b      	ldrsb	r3, [r1, r5]
   b4bec:	fa02 f404 	lsl.w	r4, r2, r4
   b4bf0:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b4bf2:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4bf4:	bf0c      	ite	eq
   b4bf6:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b4bf8:	43a3      	bicne	r3, r4
   b4bfa:	554b      	strb	r3, [r1, r5]
}
   b4bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b4bfe:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b4c00:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b4c02:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b4c04:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b4c06:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b4c08:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b4c0a:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b4c0c:	b224      	sxth	r4, r4
    break;
   b4c0e:	e7e0      	b.n	b4bd2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b4c10:	8973      	ldrh	r3, [r6, #10]
   b4c12:	3b01      	subs	r3, #1
   b4c14:	1b5b      	subs	r3, r3, r5
    break;
   b4c16:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b4c18:	b21c      	sxth	r4, r3
    break;
   b4c1a:	e7da      	b.n	b4bd2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b4c1c:	2003e17c 	.word	0x2003e17c

000b4c20 <_ZN16Adafruit_SSD1306D0Ev>:
   b4c20:	b510      	push	{r4, lr}
   b4c22:	2124      	movs	r1, #36	; 0x24
   b4c24:	4604      	mov	r4, r0
   b4c26:	f7ff fa38 	bl	b409a <_ZdlPvj>
   b4c2a:	4620      	mov	r0, r4
   b4c2c:	bd10      	pop	{r4, pc}
	...

000b4c30 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4c30:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4c32:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4c34:	4604      	mov	r4, r0
   b4c36:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4c38:	2180      	movs	r1, #128	; 0x80
   b4c3a:	f000 faa7 	bl	b518c <_ZN12Adafruit_GFXC1Ess>
   b4c3e:	4b06      	ldr	r3, [pc, #24]	; (b4c58 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b4c40:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b4c42:	23ff      	movs	r3, #255	; 0xff
   b4c44:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b4c48:	7763      	strb	r3, [r4, #29]
   b4c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4c4e:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b4c50:	f884 5020 	strb.w	r5, [r4, #32]
}
   b4c54:	4620      	mov	r0, r4
   b4c56:	bd38      	pop	{r3, r4, r5, pc}
   b4c58:	000b7638 	.word	0x000b7638

000b4c5c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b4c5c:	4802      	ldr	r0, [pc, #8]	; (b4c68 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b4c5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4c62:	2100      	movs	r1, #0
   b4c64:	f002 b9b4 	b.w	b6fd0 <memset>
   b4c68:	2003e17c 	.word	0x2003e17c

000b4c6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4c6c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4c6e:	4c0b      	ldr	r4, [pc, #44]	; (b4c9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4c70:	7821      	ldrb	r1, [r4, #0]
   b4c72:	f3bf 8f5b 	dmb	ish
   b4c76:	f011 0101 	ands.w	r1, r1, #1
   b4c7a:	d10b      	bne.n	b4c94 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4c7c:	4620      	mov	r0, r4
   b4c7e:	9101      	str	r1, [sp, #4]
   b4c80:	f7ff fa1a 	bl	b40b8 <__cxa_guard_acquire>
   b4c84:	9901      	ldr	r1, [sp, #4]
   b4c86:	b128      	cbz	r0, b4c94 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4c88:	4805      	ldr	r0, [pc, #20]	; (b4ca0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4c8a:	f000 fe51 	bl	b5930 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4c8e:	4620      	mov	r0, r4
   b4c90:	f7ff fa17 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b4c94:	4802      	ldr	r0, [pc, #8]	; (b4ca0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4c96:	b002      	add	sp, #8
   b4c98:	bd10      	pop	{r4, pc}
   b4c9a:	bf00      	nop
   b4c9c:	2003e6b8 	.word	0x2003e6b8
   b4ca0:	2003e6bc 	.word	0x2003e6bc

000b4ca4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b4ca4:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b4ca6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b4caa:	b143      	cbz	r3, b4cbe <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b4cac:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4cae:	f7ff ffdd 	bl	b4c6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4cb2:	9901      	ldr	r1, [sp, #4]
}
   b4cb4:	b003      	add	sp, #12
   b4cb6:	f85d eb04 	ldr.w	lr, [sp], #4
   b4cba:	f000 beed 	b.w	b5a98 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4cbe:	460b      	mov	r3, r1
   b4cc0:	7f81      	ldrb	r1, [r0, #30]
   b4cc2:	7f40      	ldrb	r0, [r0, #29]
   b4cc4:	2201      	movs	r2, #1
}
   b4cc6:	b003      	add	sp, #12
   b4cc8:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4ccc:	f001 bfb7 	b.w	b6c3e <shiftOut>

000b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4cd0:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b4cd2:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b4cd6:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4cd8:	4604      	mov	r4, r0
   b4cda:	460d      	mov	r5, r1
  if (sid != -1)
   b4cdc:	d01d      	beq.n	b4d1a <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b4cde:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b4ce2:	2101      	movs	r1, #1
   b4ce4:	b280      	uxth	r0, r0
   b4ce6:	f001 ff7e 	bl	b6be6 <digitalWrite>
    digitalWrite(dc, LOW);
   b4cea:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b4cee:	2100      	movs	r1, #0
   b4cf0:	b280      	uxth	r0, r0
   b4cf2:	f001 ff78 	bl	b6be6 <digitalWrite>
    digitalWrite(cs, LOW);
   b4cf6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4cfa:	2100      	movs	r1, #0
   b4cfc:	b280      	uxth	r0, r0
   b4cfe:	f001 ff72 	bl	b6be6 <digitalWrite>
    fastSPIwrite(c);
   b4d02:	4629      	mov	r1, r5
   b4d04:	4620      	mov	r0, r4
   b4d06:	f7ff ffcd 	bl	b4ca4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b4d0a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4d0e:	2101      	movs	r1, #1
}
   b4d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b4d14:	b280      	uxth	r0, r0
   b4d16:	f001 bf66 	b.w	b6be6 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b4d1a:	f002 f80d 	bl	b6d38 <_Z19__fetch_global_Wirev>
   b4d1e:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b4d22:	f001 fb4b 	bl	b63bc <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b4d26:	f002 f807 	bl	b6d38 <_Z19__fetch_global_Wirev>
   b4d2a:	6803      	ldr	r3, [r0, #0]
   b4d2c:	2100      	movs	r1, #0
   b4d2e:	689b      	ldr	r3, [r3, #8]
   b4d30:	4798      	blx	r3
    Wire.write(c);
   b4d32:	f002 f801 	bl	b6d38 <_Z19__fetch_global_Wirev>
   b4d36:	6803      	ldr	r3, [r0, #0]
   b4d38:	4629      	mov	r1, r5
   b4d3a:	689b      	ldr	r3, [r3, #8]
   b4d3c:	4798      	blx	r3
    Wire.endTransmission();
   b4d3e:	f001 fffb 	bl	b6d38 <_Z19__fetch_global_Wirev>
}
   b4d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b4d46:	f001 bb40 	b.w	b63ca <_ZN7TwoWire15endTransmissionEv>
	...

000b4d4c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b4d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b4d4e:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b4d50:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b4d52:	f7ff ffbd 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b4d56:	2100      	movs	r1, #0
   b4d58:	4620      	mov	r0, r4
   b4d5a:	f7ff ffb9 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b4d5e:	217f      	movs	r1, #127	; 0x7f
   b4d60:	4620      	mov	r0, r4
   b4d62:	f7ff ffb5 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b4d66:	2122      	movs	r1, #34	; 0x22
   b4d68:	4620      	mov	r0, r4
   b4d6a:	f7ff ffb1 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b4d6e:	2100      	movs	r1, #0
   b4d70:	4620      	mov	r0, r4
   b4d72:	f7ff ffad 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b4d76:	2107      	movs	r1, #7
   b4d78:	4620      	mov	r0, r4
   b4d7a:	f7ff ffa9 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b4d7e:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b4d82:	4f29      	ldr	r7, [pc, #164]	; (b4e28 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b4d84:	3301      	adds	r3, #1
   b4d86:	d02a      	beq.n	b4dde <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b4d88:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4d8c:	2101      	movs	r1, #1
   b4d8e:	b280      	uxth	r0, r0
   b4d90:	f001 ff29 	bl	b6be6 <digitalWrite>
    digitalWrite(dc, HIGH);
   b4d94:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b4d98:	2101      	movs	r1, #1
   b4d9a:	b280      	uxth	r0, r0
   b4d9c:	f001 ff23 	bl	b6be6 <digitalWrite>
    digitalWrite(cs, LOW);
   b4da0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4da4:	2100      	movs	r1, #0
   b4da6:	b280      	uxth	r0, r0
   b4da8:	f001 ff1d 	bl	b6be6 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4dac:	2001      	movs	r0, #1
   b4dae:	f000 fb0f 	bl	b53d0 <HAL_Delay_Microseconds>
   b4db2:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4db6:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b4db8:	f817 1b01 	ldrb.w	r1, [r7], #1
   b4dbc:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4dbe:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b4dc0:	f7ff ff70 	bl	b4ca4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4dc4:	2d00      	cmp	r5, #0
   b4dc6:	d1f6      	bne.n	b4db6 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b4dc8:	2001      	movs	r0, #1
   b4dca:	f000 fb01 	bl	b53d0 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b4dce:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4dd2:	2101      	movs	r1, #1
}
   b4dd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b4dd8:	b280      	uxth	r0, r0
   b4dda:	f001 bf04 	b.w	b6be6 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4dde:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b4de0:	f001 ffaa 	bl	b6d38 <_Z19__fetch_global_Wirev>
   b4de4:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b4de8:	f001 fae8 	bl	b63bc <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b4dec:	f001 ffa4 	bl	b6d38 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4df0:	6803      	ldr	r3, [r0, #0]
   b4df2:	2140      	movs	r1, #64	; 0x40
   b4df4:	689b      	ldr	r3, [r3, #8]
   b4df6:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b4df8:	f105 0610 	add.w	r6, r5, #16
   b4dfc:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b4dfe:	f001 ff9b 	bl	b6d38 <_Z19__fetch_global_Wirev>
   b4e02:	6803      	ldr	r3, [r0, #0]
   b4e04:	5d79      	ldrb	r1, [r7, r5]
   b4e06:	689b      	ldr	r3, [r3, #8]
   b4e08:	4798      	blx	r3
		i++;
   b4e0a:	1c6b      	adds	r3, r5, #1
   b4e0c:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b4e0e:	42ae      	cmp	r6, r5
   b4e10:	d1f5      	bne.n	b4dfe <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b4e12:	f001 ff91 	bl	b6d38 <_Z19__fetch_global_Wirev>
   b4e16:	f001 fad8 	bl	b63ca <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4e1a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b4e1e:	d100      	bne.n	b4e22 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b4e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4e22:	4635      	mov	r5, r6
   b4e24:	e7dc      	b.n	b4de0 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b4e26:	bf00      	nop
   b4e28:	2003e17c 	.word	0x2003e17c

000b4e2c <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b4e2c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b4e2e:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b4e32:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b4e34:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b4e36:	4604      	mov	r4, r0
   b4e38:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b4e3a:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b4e3c:	f000 80c9 	beq.w	b4fd2 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b4e40:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b4e44:	2101      	movs	r1, #1
   b4e46:	b280      	uxth	r0, r0
   b4e48:	f001 febc 	bl	b6bc4 <pinMode>
    pinMode(cs, OUTPUT);
   b4e4c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4e50:	2101      	movs	r1, #1
   b4e52:	b280      	uxth	r0, r0
   b4e54:	f001 feb6 	bl	b6bc4 <pinMode>
    if (!hwSPI){
   b4e58:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4e5c:	2b00      	cmp	r3, #0
   b4e5e:	f000 80a6 	beq.w	b4fae <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b4e62:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4e66:	2101      	movs	r1, #1
   b4e68:	b280      	uxth	r0, r0
   b4e6a:	f001 febc 	bl	b6be6 <digitalWrite>
        instance().setBitOrder(order);
   b4e6e:	f7ff fefd 	bl	b4c6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4e72:	2101      	movs	r1, #1
   b4e74:	f000 fd7a 	bl	b596c <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b4e78:	f7ff fef8 	bl	b4c6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4e7c:	2110      	movs	r1, #16
   b4e7e:	f000 fde5 	bl	b5a4c <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b4e82:	f7ff fef3 	bl	b4c6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4e86:	2100      	movs	r1, #0
   b4e88:	f000 fd84 	bl	b5994 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b4e8c:	f7ff feee 	bl	b4c6c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4e90:	f000 fd58 	bl	b5944 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b4e94:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4e98:	2101      	movs	r1, #1
   b4e9a:	b280      	uxth	r0, r0
   b4e9c:	f001 fe92 	bl	b6bc4 <pinMode>
  digitalWrite(rst, HIGH);
   b4ea0:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4ea4:	2101      	movs	r1, #1
   b4ea6:	b280      	uxth	r0, r0
   b4ea8:	f001 fe9d 	bl	b6be6 <digitalWrite>
  delay(1);
   b4eac:	2001      	movs	r0, #1
   b4eae:	f001 f823 	bl	b5ef8 <delay>
  digitalWrite(rst, LOW);
   b4eb2:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4eb6:	2100      	movs	r1, #0
   b4eb8:	b280      	uxth	r0, r0
   b4eba:	f001 fe94 	bl	b6be6 <digitalWrite>
  delay(10);
   b4ebe:	200a      	movs	r0, #10
   b4ec0:	f001 f81a 	bl	b5ef8 <delay>
  digitalWrite(rst, HIGH);
   b4ec4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4ec8:	2101      	movs	r1, #1
   b4eca:	b280      	uxth	r0, r0
   b4ecc:	f001 fe8b 	bl	b6be6 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b4ed0:	4620      	mov	r0, r4
   b4ed2:	21ae      	movs	r1, #174	; 0xae
   b4ed4:	f7ff fefc 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b4ed8:	4620      	mov	r0, r4
   b4eda:	21d5      	movs	r1, #213	; 0xd5
   b4edc:	f7ff fef8 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b4ee0:	4620      	mov	r0, r4
   b4ee2:	2180      	movs	r1, #128	; 0x80
   b4ee4:	f7ff fef4 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b4ee8:	4620      	mov	r0, r4
   b4eea:	21a8      	movs	r1, #168	; 0xa8
   b4eec:	f7ff fef0 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b4ef0:	4620      	mov	r0, r4
   b4ef2:	213f      	movs	r1, #63	; 0x3f
   b4ef4:	f7ff feec 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b4ef8:	4620      	mov	r0, r4
   b4efa:	21d3      	movs	r1, #211	; 0xd3
   b4efc:	f7ff fee8 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b4f00:	4620      	mov	r0, r4
   b4f02:	2100      	movs	r1, #0
   b4f04:	f7ff fee4 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b4f08:	4620      	mov	r0, r4
   b4f0a:	2140      	movs	r1, #64	; 0x40
   b4f0c:	f7ff fee0 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b4f10:	218d      	movs	r1, #141	; 0x8d
   b4f12:	4620      	mov	r0, r4
   b4f14:	f7ff fedc 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4f18:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b4f1a:	bf0c      	ite	eq
   b4f1c:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b4f1e:	2114      	movne	r1, #20
   b4f20:	4620      	mov	r0, r4
   b4f22:	f7ff fed5 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b4f26:	4620      	mov	r0, r4
   b4f28:	2120      	movs	r1, #32
   b4f2a:	f7ff fed1 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b4f2e:	4620      	mov	r0, r4
   b4f30:	2100      	movs	r1, #0
   b4f32:	f7ff fecd 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b4f36:	4620      	mov	r0, r4
   b4f38:	21a1      	movs	r1, #161	; 0xa1
   b4f3a:	f7ff fec9 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b4f3e:	4620      	mov	r0, r4
   b4f40:	21c8      	movs	r1, #200	; 0xc8
   b4f42:	f7ff fec5 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b4f46:	4620      	mov	r0, r4
   b4f48:	21da      	movs	r1, #218	; 0xda
   b4f4a:	f7ff fec1 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b4f4e:	4620      	mov	r0, r4
   b4f50:	2112      	movs	r1, #18
   b4f52:	f7ff febd 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b4f56:	2181      	movs	r1, #129	; 0x81
   b4f58:	4620      	mov	r0, r4
   b4f5a:	f7ff feb9 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4f5e:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b4f60:	bf0c      	ite	eq
   b4f62:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b4f64:	21cf      	movne	r1, #207	; 0xcf
   b4f66:	4620      	mov	r0, r4
   b4f68:	f7ff feb2 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b4f6c:	21d9      	movs	r1, #217	; 0xd9
   b4f6e:	4620      	mov	r0, r4
   b4f70:	f7ff feae 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4f74:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b4f76:	bf0c      	ite	eq
   b4f78:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b4f7a:	21f1      	movne	r1, #241	; 0xf1
   b4f7c:	4620      	mov	r0, r4
   b4f7e:	f7ff fea7 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b4f82:	4620      	mov	r0, r4
   b4f84:	21db      	movs	r1, #219	; 0xdb
   b4f86:	f7ff fea3 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b4f8a:	4620      	mov	r0, r4
   b4f8c:	2140      	movs	r1, #64	; 0x40
   b4f8e:	f7ff fe9f 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b4f92:	4620      	mov	r0, r4
   b4f94:	21a4      	movs	r1, #164	; 0xa4
   b4f96:	f7ff fe9b 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b4f9a:	4620      	mov	r0, r4
   b4f9c:	21a6      	movs	r1, #166	; 0xa6
   b4f9e:	f7ff fe97 	bl	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b4fa2:	4620      	mov	r0, r4
   b4fa4:	21af      	movs	r1, #175	; 0xaf
}
   b4fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b4faa:	f7ff be91 	b.w	b4cd0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b4fae:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b4fb2:	2101      	movs	r1, #1
   b4fb4:	b280      	uxth	r0, r0
   b4fb6:	f001 fe05 	bl	b6bc4 <pinMode>
    	pinMode(sclk, OUTPUT);
   b4fba:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b4fbe:	2101      	movs	r1, #1
   b4fc0:	b280      	uxth	r0, r0
   b4fc2:	f001 fdff 	bl	b6bc4 <pinMode>
    if (hwSPI){
   b4fc6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4fca:	2b00      	cmp	r3, #0
   b4fcc:	f43f af62 	beq.w	b4e94 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b4fd0:	e747      	b.n	b4e62 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b4fd2:	f001 feb1 	bl	b6d38 <_Z19__fetch_global_Wirev>
   b4fd6:	f001 f9e7 	bl	b63a8 <_ZN7TwoWire5beginEv>
   b4fda:	e75b      	b.n	b4e94 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b4fdc <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b4fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4fe0:	b085      	sub	sp, #20
   b4fe2:	461f      	mov	r7, r3
   b4fe4:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4fe8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4fec:	eba8 0902 	sub.w	r9, r8, r2
   b4ff0:	eba7 0a01 	sub.w	sl, r7, r1
   b4ff4:	f1b9 0f00 	cmp.w	r9, #0
   b4ff8:	bfb8      	it	lt
   b4ffa:	f1c9 0900 	rsblt	r9, r9, #0
   b4ffe:	f1ba 0f00 	cmp.w	sl, #0
   b5002:	bfb8      	it	lt
   b5004:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b5008:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b500a:	4683      	mov	fp, r0
   b500c:	460c      	mov	r4, r1
   b500e:	4615      	mov	r5, r2
  if (steep) {
   b5010:	dd04      	ble.n	b501c <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b5012:	463a      	mov	r2, r7
    swap(x0, y0);
   b5014:	462c      	mov	r4, r5
    swap(x1, y1);
   b5016:	4647      	mov	r7, r8
    swap(x0, y0);
   b5018:	460d      	mov	r5, r1
    swap(x1, y1);
   b501a:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b501c:	42bc      	cmp	r4, r7
   b501e:	dd05      	ble.n	b502c <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b5020:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b5022:	4645      	mov	r5, r8
   b5024:	4690      	mov	r8, r2
  if (x0 > x1) {
   b5026:	4622      	mov	r2, r4
   b5028:	463c      	mov	r4, r7
   b502a:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b502c:	1b3e      	subs	r6, r7, r4
   b502e:	b2b2      	uxth	r2, r6
   b5030:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b5032:	eba8 0205 	sub.w	r2, r8, r5
   b5036:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b503a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b503e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5042:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b5046:	4545      	cmp	r5, r8
   b5048:	bfb4      	ite	lt
   b504a:	2201      	movlt	r2, #1
   b504c:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b5050:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b5052:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b5054:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b5056:	42bc      	cmp	r4, r7
   b5058:	dc1c      	bgt.n	b5094 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b505a:	f8db 2000 	ldr.w	r2, [fp]
   b505e:	9303      	str	r3, [sp, #12]
    if (steep) {
   b5060:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b5062:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b5066:	bfc7      	ittee	gt
   b5068:	4629      	movgt	r1, r5
   b506a:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b506c:	462a      	movle	r2, r5
   b506e:	4621      	movle	r1, r4
   b5070:	4658      	mov	r0, fp
   b5072:	47c0      	blx	r8
    }
    err -= dy;
   b5074:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b5076:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b5078:	1ab6      	subs	r6, r6, r2
   b507a:	b2b1      	uxth	r1, r6
   b507c:	b236      	sxth	r6, r6
    if (err < 0) {
   b507e:	2e00      	cmp	r6, #0
   b5080:	da05      	bge.n	b508e <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b5082:	9a02      	ldr	r2, [sp, #8]
   b5084:	4415      	add	r5, r2
      err += dx;
   b5086:	9a00      	ldr	r2, [sp, #0]
   b5088:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b508a:	b22d      	sxth	r5, r5
      err += dx;
   b508c:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b508e:	3401      	adds	r4, #1
   b5090:	b224      	sxth	r4, r4
   b5092:	e7e0      	b.n	b5056 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b5094:	b005      	add	sp, #20
   b5096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b509a <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b509a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b509e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b50a2:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b50a4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b50a8:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b50ac:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b50ae:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b50b0:	4616      	mov	r6, r2
   b50b2:	468a      	mov	sl, r1
   b50b4:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b50b6:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b50b8:	6823      	ldr	r3, [r4, #0]
   b50ba:	f8cd 8000 	str.w	r8, [sp]
   b50be:	f109 32ff 	add.w	r2, r9, #4294967295
   b50c2:	4432      	add	r2, r6
   b50c4:	69df      	ldr	r7, [r3, #28]
   b50c6:	4651      	mov	r1, sl
   b50c8:	462b      	mov	r3, r5
   b50ca:	4620      	mov	r0, r4
   b50cc:	b212      	sxth	r2, r2
   b50ce:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b50d0:	6823      	ldr	r3, [r4, #0]
   b50d2:	f8cd 8000 	str.w	r8, [sp]
   b50d6:	699f      	ldr	r7, [r3, #24]
   b50d8:	4632      	mov	r2, r6
   b50da:	464b      	mov	r3, r9
   b50dc:	4651      	mov	r1, sl
   b50de:	4620      	mov	r0, r4
   b50e0:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b50e2:	1e6b      	subs	r3, r5, #1
   b50e4:	eb03 010a 	add.w	r1, r3, sl
   b50e8:	6823      	ldr	r3, [r4, #0]
   b50ea:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b50ee:	699d      	ldr	r5, [r3, #24]
   b50f0:	4632      	mov	r2, r6
   b50f2:	464b      	mov	r3, r9
   b50f4:	b209      	sxth	r1, r1
   b50f6:	4620      	mov	r0, r4
   b50f8:	46ac      	mov	ip, r5
}
   b50fa:	b002      	add	sp, #8
   b50fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b5100:	4760      	bx	ip

000b5102 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b5102:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b5104:	3b01      	subs	r3, #1
   b5106:	4413      	add	r3, r2
   b5108:	6804      	ldr	r4, [r0, #0]
   b510a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b510e:	9501      	str	r5, [sp, #4]
   b5110:	b21b      	sxth	r3, r3
   b5112:	9300      	str	r3, [sp, #0]
   b5114:	6964      	ldr	r4, [r4, #20]
   b5116:	460b      	mov	r3, r1
   b5118:	47a0      	blx	r4
}
   b511a:	b003      	add	sp, #12
   b511c:	bd30      	pop	{r4, r5, pc}

000b511e <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b511e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b5120:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5124:	6804      	ldr	r4, [r0, #0]
   b5126:	e9cd 2500 	strd	r2, r5, [sp]
   b512a:	3b01      	subs	r3, #1
   b512c:	440b      	add	r3, r1
   b512e:	6964      	ldr	r4, [r4, #20]
   b5130:	b21b      	sxth	r3, r3
   b5132:	47a0      	blx	r4
}
   b5134:	b003      	add	sp, #12
   b5136:	bd30      	pop	{r4, r5, pc}

000b5138 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b5138:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b513c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5140:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5144:	4605      	mov	r5, r0
   b5146:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b5148:	460c      	mov	r4, r1
   b514a:	18ce      	adds	r6, r1, r3
   b514c:	42b4      	cmp	r4, r6
   b514e:	da0b      	bge.n	b5168 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b5150:	682b      	ldr	r3, [r5, #0]
   b5152:	f8cd 8000 	str.w	r8, [sp]
   b5156:	699f      	ldr	r7, [r3, #24]
   b5158:	4621      	mov	r1, r4
   b515a:	464b      	mov	r3, r9
   b515c:	4652      	mov	r2, sl
   b515e:	4628      	mov	r0, r5
   b5160:	3401      	adds	r4, #1
   b5162:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b5164:	b224      	sxth	r4, r4
   b5166:	e7f1      	b.n	b514c <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b5168:	b002      	add	sp, #8
   b516a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b516e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b516e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b5170:	6802      	ldr	r2, [r0, #0]
   b5172:	9101      	str	r1, [sp, #4]
   b5174:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5178:	9100      	str	r1, [sp, #0]
   b517a:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b517c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5180:	2200      	movs	r2, #0
   b5182:	4611      	mov	r1, r2
   b5184:	47a0      	blx	r4
}
   b5186:	b002      	add	sp, #8
   b5188:	bd10      	pop	{r4, pc}

000b518a <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b518a:	4770      	bx	lr

000b518c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b518c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b518e:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b5190:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b5192:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   b5196:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b5198:	4d05      	ldr	r5, [pc, #20]	; (b51b0 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b519a:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b519c:	2201      	movs	r2, #1
   b519e:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b51a0:	6005      	str	r5, [r0, #0]
   b51a2:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b51a4:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b51a6:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b51a8:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b51aa:	7682      	strb	r2, [r0, #26]
}
   b51ac:	bd30      	pop	{r4, r5, pc}
   b51ae:	bf00      	nop
   b51b0:	000b7b6c 	.word	0x000b7b6c

000b51b4 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b51b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b51b8:	ed2d 8b02 	vpush	{d8}
   b51bc:	b08d      	sub	sp, #52	; 0x34
   b51be:	4607      	mov	r7, r0
   b51c0:	9104      	str	r1, [sp, #16]
   b51c2:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b51c6:	9105      	str	r1, [sp, #20]
   b51c8:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b51cc:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b51ce:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b51d2:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b51d4:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b51d8:	4281      	cmp	r1, r0
   b51da:	dd52      	ble.n	b5282 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b51dc:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b51e0:	4291      	cmp	r1, r2
   b51e2:	dd4e      	ble.n	b5282 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b51e4:	2106      	movs	r1, #6
   b51e6:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b51ea:	2c00      	cmp	r4, #0
   b51ec:	dd49      	ble.n	b5282 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b51ee:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b51f2:	2c00      	cmp	r4, #0
   b51f4:	dd45      	ble.n	b5282 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b51f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b51fa:	930b      	str	r3, [sp, #44]	; 0x2c
   b51fc:	b293      	uxth	r3, r2
   b51fe:	9307      	str	r3, [sp, #28]
   b5200:	3308      	adds	r3, #8
   b5202:	b29b      	uxth	r3, r3
   b5204:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b5206:	2400      	movs	r4, #0
   b5208:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b520a:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b520c:	bf1c      	itt	ne
   b520e:	4b2c      	ldrne	r3, [pc, #176]	; (b52c0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b5210:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b5212:	9e07      	ldr	r6, [sp, #28]
   b5214:	bf16      	itet	ne
   b5216:	191b      	addne	r3, r3, r4
      line = 0x0;
   b5218:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b521a:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b521c:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b521e:	9a04      	ldr	r2, [sp, #16]
   b5220:	b2ab      	uxth	r3, r5
   b5222:	930a      	str	r3, [sp, #40]	; 0x28
   b5224:	fb04 f305 	mul.w	r3, r4, r5
   b5228:	fa13 f382 	uxtah	r3, r3, r2
   b522c:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b522e:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5232:	ee08 3a10 	vmov	s16, r3
   b5236:	46b0      	mov	r8, r6
   b5238:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b523c:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b5240:	9b03      	ldr	r3, [sp, #12]
   b5242:	07db      	lsls	r3, r3, #31
   b5244:	d52f      	bpl.n	b52a6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b5246:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5248:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b524a:	d11f      	bne.n	b528c <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b524c:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5250:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b5252:	b232      	sxth	r2, r6
   b5254:	4651      	mov	r1, sl
   b5256:	4638      	mov	r0, r7
   b5258:	47d8      	blx	fp
      line >>= 1;
   b525a:	9b03      	ldr	r3, [sp, #12]
   b525c:	085b      	lsrs	r3, r3, #1
   b525e:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b5260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5262:	3601      	adds	r6, #1
   b5264:	4498      	add	r8, r3
   b5266:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5268:	b2b6      	uxth	r6, r6
   b526a:	42b3      	cmp	r3, r6
   b526c:	fa1f f888 	uxth.w	r8, r8
   b5270:	d1e6      	bne.n	b5240 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b5272:	9b08      	ldr	r3, [sp, #32]
   b5274:	3b01      	subs	r3, #1
   b5276:	3401      	adds	r4, #1
   b5278:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b527c:	b264      	sxtb	r4, r4
   b527e:	9308      	str	r3, [sp, #32]
   b5280:	d1c3      	bne.n	b520a <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b5282:	b00d      	add	sp, #52	; 0x34
   b5284:	ecbd 8b02 	vpop	{d8}
   b5288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b528c:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b528e:	e9cd 9200 	strd	r9, r2, [sp]
   b5292:	ee18 1a10 	vmov	r1, s16
   b5296:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b529a:	fa0f f288 	sxth.w	r2, r8
   b529e:	464b      	mov	r3, r9
   b52a0:	4638      	mov	r0, r7
   b52a2:	47d8      	blx	fp
   b52a4:	e7d9      	b.n	b525a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b52a6:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b52aa:	4293      	cmp	r3, r2
   b52ac:	d0d5      	beq.n	b525a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b52ae:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b52b0:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b52b2:	d103      	bne.n	b52bc <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b52b4:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b52b8:	9b06      	ldr	r3, [sp, #24]
   b52ba:	e7ca      	b.n	b5252 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b52bc:	9a06      	ldr	r2, [sp, #24]
   b52be:	e7e6      	b.n	b528e <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b52c0:	000b7668 	.word	0x000b7668

000b52c4 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b52c4:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b52c6:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b52c8:	b085      	sub	sp, #20
   b52ca:	4604      	mov	r4, r0
  if (c == '\n') {
   b52cc:	d107      	bne.n	b52de <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b52ce:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b52d0:	8a63      	ldrh	r3, [r4, #18]
   b52d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b52d6:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b52d8:	2300      	movs	r3, #0
   b52da:	8223      	strh	r3, [r4, #16]
   b52dc:	e021      	b.n	b5322 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b52de:	290d      	cmp	r1, #13
   b52e0:	d01f      	beq.n	b5322 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b52e2:	7e03      	ldrb	r3, [r0, #24]
   b52e4:	9302      	str	r3, [sp, #8]
   b52e6:	8ac3      	ldrh	r3, [r0, #22]
   b52e8:	9301      	str	r3, [sp, #4]
   b52ea:	8a83      	ldrh	r3, [r0, #20]
   b52ec:	9300      	str	r3, [sp, #0]
   b52ee:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b52f2:	460b      	mov	r3, r1
   b52f4:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b52f8:	f7ff ff5c 	bl	b51b4 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b52fc:	7e20      	ldrb	r0, [r4, #24]
   b52fe:	8a23      	ldrh	r3, [r4, #16]
   b5300:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b5304:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5308:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b530a:	b21b      	sxth	r3, r3
   b530c:	4602      	mov	r2, r0
   b530e:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5310:	b139      	cbz	r1, b5322 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b5312:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b5316:	f06f 0505 	mvn.w	r5, #5
   b531a:	fb05 1100 	mla	r1, r5, r0, r1
   b531e:	428b      	cmp	r3, r1
   b5320:	dcd6      	bgt.n	b52d0 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b5322:	2001      	movs	r0, #1
   b5324:	b005      	add	sp, #20
   b5326:	bd30      	pop	{r4, r5, pc}

000b5328 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b5328:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b532a:	8242      	strh	r2, [r0, #18]
}
   b532c:	4770      	bx	lr

000b532e <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b532e:	2901      	cmp	r1, #1
   b5330:	bf38      	it	cc
   b5332:	2101      	movcc	r1, #1
   b5334:	7601      	strb	r1, [r0, #24]
}
   b5336:	4770      	bx	lr

000b5338 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b5338:	82c1      	strh	r1, [r0, #22]
   b533a:	8281      	strh	r1, [r0, #20]
}
   b533c:	4770      	bx	lr

000b533e <_ZN12Adafruit_GFX11getRotationEv>:
}
   b533e:	7e40      	ldrb	r0, [r0, #25]
   b5340:	4770      	bx	lr

000b5342 <_ZN12Adafruit_GFX5widthEv>:
}
   b5342:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b5346:	4770      	bx	lr

000b5348 <_ZN12Adafruit_GFX6heightEv>:
}
   b5348:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b534c:	4770      	bx	lr
	...

000b5350 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5350:	b508      	push	{r3, lr}
   b5352:	4b02      	ldr	r3, [pc, #8]	; (b535c <netdb_freeaddrinfo+0xc>)
   b5354:	681b      	ldr	r3, [r3, #0]
   b5356:	689b      	ldr	r3, [r3, #8]
   b5358:	9301      	str	r3, [sp, #4]
   b535a:	bd08      	pop	{r3, pc}
   b535c:	00030268 	.word	0x00030268

000b5360 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5360:	b508      	push	{r3, lr}
   b5362:	4b02      	ldr	r3, [pc, #8]	; (b536c <netdb_getaddrinfo+0xc>)
   b5364:	681b      	ldr	r3, [r3, #0]
   b5366:	68db      	ldr	r3, [r3, #12]
   b5368:	9301      	str	r3, [sp, #4]
   b536a:	bd08      	pop	{r3, pc}
   b536c:	00030268 	.word	0x00030268

000b5370 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5370:	b508      	push	{r3, lr}
   b5372:	4b02      	ldr	r3, [pc, #8]	; (b537c <HAL_Pin_Mode+0xc>)
   b5374:	681b      	ldr	r3, [r3, #0]
   b5376:	689b      	ldr	r3, [r3, #8]
   b5378:	9301      	str	r3, [sp, #4]
   b537a:	bd08      	pop	{r3, pc}
   b537c:	0003022c 	.word	0x0003022c

000b5380 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5380:	b508      	push	{r3, lr}
   b5382:	4b02      	ldr	r3, [pc, #8]	; (b538c <HAL_Get_Pin_Mode+0xc>)
   b5384:	681b      	ldr	r3, [r3, #0]
   b5386:	68db      	ldr	r3, [r3, #12]
   b5388:	9301      	str	r3, [sp, #4]
   b538a:	bd08      	pop	{r3, pc}
   b538c:	0003022c 	.word	0x0003022c

000b5390 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5390:	b508      	push	{r3, lr}
   b5392:	4b02      	ldr	r3, [pc, #8]	; (b539c <HAL_GPIO_Write+0xc>)
   b5394:	681b      	ldr	r3, [r3, #0]
   b5396:	691b      	ldr	r3, [r3, #16]
   b5398:	9301      	str	r3, [sp, #4]
   b539a:	bd08      	pop	{r3, pc}
   b539c:	0003022c 	.word	0x0003022c

000b53a0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b53a0:	b508      	push	{r3, lr}
   b53a2:	4b02      	ldr	r3, [pc, #8]	; (b53ac <HAL_GPIO_Read+0xc>)
   b53a4:	681b      	ldr	r3, [r3, #0]
   b53a6:	695b      	ldr	r3, [r3, #20]
   b53a8:	9301      	str	r3, [sp, #4]
   b53aa:	bd08      	pop	{r3, pc}
   b53ac:	0003022c 	.word	0x0003022c

000b53b0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b53b0:	b508      	push	{r3, lr}
   b53b2:	4b02      	ldr	r3, [pc, #8]	; (b53bc <if_index_to_name+0xc>)
   b53b4:	681b      	ldr	r3, [r3, #0]
   b53b6:	695b      	ldr	r3, [r3, #20]
   b53b8:	9301      	str	r3, [sp, #4]
   b53ba:	bd08      	pop	{r3, pc}
   b53bc:	0003026c 	.word	0x0003026c

000b53c0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b53c0:	b508      	push	{r3, lr}
   b53c2:	4b02      	ldr	r3, [pc, #8]	; (b53cc <HAL_RNG_GetRandomNumber+0xc>)
   b53c4:	681b      	ldr	r3, [r3, #0]
   b53c6:	685b      	ldr	r3, [r3, #4]
   b53c8:	9301      	str	r3, [sp, #4]
   b53ca:	bd08      	pop	{r3, pc}
   b53cc:	00030218 	.word	0x00030218

000b53d0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b53d0:	b508      	push	{r3, lr}
   b53d2:	4b02      	ldr	r3, [pc, #8]	; (b53dc <HAL_Delay_Microseconds+0xc>)
   b53d4:	681b      	ldr	r3, [r3, #0]
   b53d6:	68db      	ldr	r3, [r3, #12]
   b53d8:	9301      	str	r3, [sp, #4]
   b53da:	bd08      	pop	{r3, pc}
   b53dc:	00030218 	.word	0x00030218

000b53e0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b53e0:	b508      	push	{r3, lr}
   b53e2:	4b02      	ldr	r3, [pc, #8]	; (b53ec <HAL_Timer_Get_Milli_Seconds+0xc>)
   b53e4:	681b      	ldr	r3, [r3, #0]
   b53e6:	695b      	ldr	r3, [r3, #20]
   b53e8:	9301      	str	r3, [sp, #4]
   b53ea:	bd08      	pop	{r3, pc}
   b53ec:	00030218 	.word	0x00030218

000b53f0 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b53f0:	b508      	push	{r3, lr}
   b53f2:	4b02      	ldr	r3, [pc, #8]	; (b53fc <hal_timer_millis+0xc>)
   b53f4:	681b      	ldr	r3, [r3, #0]
   b53f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b53f8:	9301      	str	r3, [sp, #4]
   b53fa:	bd08      	pop	{r3, pc}
   b53fc:	00030218 	.word	0x00030218

000b5400 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5400:	b508      	push	{r3, lr}
   b5402:	4b02      	ldr	r3, [pc, #8]	; (b540c <os_mutex_recursive_create+0xc>)
   b5404:	681b      	ldr	r3, [r3, #0]
   b5406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5408:	9301      	str	r3, [sp, #4]
   b540a:	bd08      	pop	{r3, pc}
   b540c:	00030248 	.word	0x00030248

000b5410 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5410:	b508      	push	{r3, lr}
   b5412:	4b02      	ldr	r3, [pc, #8]	; (b541c <inet_inet_ntop+0xc>)
   b5414:	681b      	ldr	r3, [r3, #0]
   b5416:	695b      	ldr	r3, [r3, #20]
   b5418:	9301      	str	r3, [sp, #4]
   b541a:	bd08      	pop	{r3, pc}
   b541c:	00030264 	.word	0x00030264

000b5420 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5420:	b508      	push	{r3, lr}
   b5422:	4b02      	ldr	r3, [pc, #8]	; (b542c <inet_htonl+0xc>)
   b5424:	681b      	ldr	r3, [r3, #0]
   b5426:	6a1b      	ldr	r3, [r3, #32]
   b5428:	9301      	str	r3, [sp, #4]
   b542a:	bd08      	pop	{r3, pc}
   b542c:	00030264 	.word	0x00030264

000b5430 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5430:	b508      	push	{r3, lr}
   b5432:	4b02      	ldr	r3, [pc, #8]	; (b543c <inet_htons+0xc>)
   b5434:	681b      	ldr	r3, [r3, #0]
   b5436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5438:	9301      	str	r3, [sp, #4]
   b543a:	bd08      	pop	{r3, pc}
   b543c:	00030264 	.word	0x00030264

000b5440 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5440:	b508      	push	{r3, lr}
   b5442:	4b02      	ldr	r3, [pc, #8]	; (b544c <hal_usart_write+0xc>)
   b5444:	681b      	ldr	r3, [r3, #0]
   b5446:	68db      	ldr	r3, [r3, #12]
   b5448:	9301      	str	r3, [sp, #4]
   b544a:	bd08      	pop	{r3, pc}
   b544c:	0003023c 	.word	0x0003023c

000b5450 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5450:	b508      	push	{r3, lr}
   b5452:	4b02      	ldr	r3, [pc, #8]	; (b545c <hal_usart_available+0xc>)
   b5454:	681b      	ldr	r3, [r3, #0]
   b5456:	691b      	ldr	r3, [r3, #16]
   b5458:	9301      	str	r3, [sp, #4]
   b545a:	bd08      	pop	{r3, pc}
   b545c:	0003023c 	.word	0x0003023c

000b5460 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5460:	b508      	push	{r3, lr}
   b5462:	4b02      	ldr	r3, [pc, #8]	; (b546c <hal_usart_read+0xc>)
   b5464:	681b      	ldr	r3, [r3, #0]
   b5466:	695b      	ldr	r3, [r3, #20]
   b5468:	9301      	str	r3, [sp, #4]
   b546a:	bd08      	pop	{r3, pc}
   b546c:	0003023c 	.word	0x0003023c

000b5470 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5470:	b508      	push	{r3, lr}
   b5472:	4b02      	ldr	r3, [pc, #8]	; (b547c <hal_usart_peek+0xc>)
   b5474:	681b      	ldr	r3, [r3, #0]
   b5476:	699b      	ldr	r3, [r3, #24]
   b5478:	9301      	str	r3, [sp, #4]
   b547a:	bd08      	pop	{r3, pc}
   b547c:	0003023c 	.word	0x0003023c

000b5480 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5480:	b508      	push	{r3, lr}
   b5482:	4b02      	ldr	r3, [pc, #8]	; (b548c <hal_usart_flush+0xc>)
   b5484:	681b      	ldr	r3, [r3, #0]
   b5486:	69db      	ldr	r3, [r3, #28]
   b5488:	9301      	str	r3, [sp, #4]
   b548a:	bd08      	pop	{r3, pc}
   b548c:	0003023c 	.word	0x0003023c

000b5490 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5490:	b508      	push	{r3, lr}
   b5492:	4b02      	ldr	r3, [pc, #8]	; (b549c <hal_usart_is_enabled+0xc>)
   b5494:	681b      	ldr	r3, [r3, #0]
   b5496:	6a1b      	ldr	r3, [r3, #32]
   b5498:	9301      	str	r3, [sp, #4]
   b549a:	bd08      	pop	{r3, pc}
   b549c:	0003023c 	.word	0x0003023c

000b54a0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b54a0:	b508      	push	{r3, lr}
   b54a2:	4b02      	ldr	r3, [pc, #8]	; (b54ac <hal_usart_available_data_for_write+0xc>)
   b54a4:	681b      	ldr	r3, [r3, #0]
   b54a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b54a8:	9301      	str	r3, [sp, #4]
   b54aa:	bd08      	pop	{r3, pc}
   b54ac:	0003023c 	.word	0x0003023c

000b54b0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b54b0:	b508      	push	{r3, lr}
   b54b2:	4b02      	ldr	r3, [pc, #8]	; (b54bc <hal_usart_init_ex+0xc>)
   b54b4:	681b      	ldr	r3, [r3, #0]
   b54b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b54b8:	9301      	str	r3, [sp, #4]
   b54ba:	bd08      	pop	{r3, pc}
   b54bc:	0003023c 	.word	0x0003023c

000b54c0 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b54c0:	b508      	push	{r3, lr}
   b54c2:	4b02      	ldr	r3, [pc, #8]	; (b54cc <hal_i2c_begin+0xc>)
   b54c4:	681b      	ldr	r3, [r3, #0]
   b54c6:	68db      	ldr	r3, [r3, #12]
   b54c8:	9301      	str	r3, [sp, #4]
   b54ca:	bd08      	pop	{r3, pc}
   b54cc:	00030228 	.word	0x00030228

000b54d0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b54d0:	b508      	push	{r3, lr}
   b54d2:	4b02      	ldr	r3, [pc, #8]	; (b54dc <hal_i2c_begin_transmission+0xc>)
   b54d4:	681b      	ldr	r3, [r3, #0]
   b54d6:	699b      	ldr	r3, [r3, #24]
   b54d8:	9301      	str	r3, [sp, #4]
   b54da:	bd08      	pop	{r3, pc}
   b54dc:	00030228 	.word	0x00030228

000b54e0 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b54e0:	b508      	push	{r3, lr}
   b54e2:	4b02      	ldr	r3, [pc, #8]	; (b54ec <hal_i2c_end_transmission+0xc>)
   b54e4:	681b      	ldr	r3, [r3, #0]
   b54e6:	69db      	ldr	r3, [r3, #28]
   b54e8:	9301      	str	r3, [sp, #4]
   b54ea:	bd08      	pop	{r3, pc}
   b54ec:	00030228 	.word	0x00030228

000b54f0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b54f0:	b508      	push	{r3, lr}
   b54f2:	4b02      	ldr	r3, [pc, #8]	; (b54fc <hal_i2c_write+0xc>)
   b54f4:	681b      	ldr	r3, [r3, #0]
   b54f6:	6a1b      	ldr	r3, [r3, #32]
   b54f8:	9301      	str	r3, [sp, #4]
   b54fa:	bd08      	pop	{r3, pc}
   b54fc:	00030228 	.word	0x00030228

000b5500 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5500:	b508      	push	{r3, lr}
   b5502:	4b02      	ldr	r3, [pc, #8]	; (b550c <hal_i2c_available+0xc>)
   b5504:	681b      	ldr	r3, [r3, #0]
   b5506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5508:	9301      	str	r3, [sp, #4]
   b550a:	bd08      	pop	{r3, pc}
   b550c:	00030228 	.word	0x00030228

000b5510 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5510:	b508      	push	{r3, lr}
   b5512:	4b02      	ldr	r3, [pc, #8]	; (b551c <hal_i2c_read+0xc>)
   b5514:	681b      	ldr	r3, [r3, #0]
   b5516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5518:	9301      	str	r3, [sp, #4]
   b551a:	bd08      	pop	{r3, pc}
   b551c:	00030228 	.word	0x00030228

000b5520 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5520:	b508      	push	{r3, lr}
   b5522:	4b02      	ldr	r3, [pc, #8]	; (b552c <hal_i2c_peek+0xc>)
   b5524:	681b      	ldr	r3, [r3, #0]
   b5526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5528:	9301      	str	r3, [sp, #4]
   b552a:	bd08      	pop	{r3, pc}
   b552c:	00030228 	.word	0x00030228

000b5530 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5530:	b508      	push	{r3, lr}
   b5532:	4b02      	ldr	r3, [pc, #8]	; (b553c <hal_i2c_flush+0xc>)
   b5534:	681b      	ldr	r3, [r3, #0]
   b5536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5538:	9301      	str	r3, [sp, #4]
   b553a:	bd08      	pop	{r3, pc}
   b553c:	00030228 	.word	0x00030228

000b5540 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5540:	b508      	push	{r3, lr}
   b5542:	4b02      	ldr	r3, [pc, #8]	; (b554c <hal_i2c_is_enabled+0xc>)
   b5544:	681b      	ldr	r3, [r3, #0]
   b5546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5548:	9301      	str	r3, [sp, #4]
   b554a:	bd08      	pop	{r3, pc}
   b554c:	00030228 	.word	0x00030228

000b5550 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5550:	b508      	push	{r3, lr}
   b5552:	4b02      	ldr	r3, [pc, #8]	; (b555c <hal_i2c_init+0xc>)
   b5554:	681b      	ldr	r3, [r3, #0]
   b5556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5558:	9301      	str	r3, [sp, #4]
   b555a:	bd08      	pop	{r3, pc}
   b555c:	00030228 	.word	0x00030228

000b5560 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5560:	b508      	push	{r3, lr}
   b5562:	4b02      	ldr	r3, [pc, #8]	; (b556c <sock_setsockopt+0xc>)
   b5564:	681b      	ldr	r3, [r3, #0]
   b5566:	699b      	ldr	r3, [r3, #24]
   b5568:	9301      	str	r3, [sp, #4]
   b556a:	bd08      	pop	{r3, pc}
   b556c:	00030238 	.word	0x00030238

000b5570 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5570:	b508      	push	{r3, lr}
   b5572:	4b02      	ldr	r3, [pc, #8]	; (b557c <sock_close+0xc>)
   b5574:	681b      	ldr	r3, [r3, #0]
   b5576:	69db      	ldr	r3, [r3, #28]
   b5578:	9301      	str	r3, [sp, #4]
   b557a:	bd08      	pop	{r3, pc}
   b557c:	00030238 	.word	0x00030238

000b5580 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5580:	b508      	push	{r3, lr}
   b5582:	4b02      	ldr	r3, [pc, #8]	; (b558c <sock_connect+0xc>)
   b5584:	681b      	ldr	r3, [r3, #0]
   b5586:	6a1b      	ldr	r3, [r3, #32]
   b5588:	9301      	str	r3, [sp, #4]
   b558a:	bd08      	pop	{r3, pc}
   b558c:	00030238 	.word	0x00030238

000b5590 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5590:	b508      	push	{r3, lr}
   b5592:	4b02      	ldr	r3, [pc, #8]	; (b559c <sock_recv+0xc>)
   b5594:	681b      	ldr	r3, [r3, #0]
   b5596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5598:	9301      	str	r3, [sp, #4]
   b559a:	bd08      	pop	{r3, pc}
   b559c:	00030238 	.word	0x00030238

000b55a0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b55a0:	b508      	push	{r3, lr}
   b55a2:	4b02      	ldr	r3, [pc, #8]	; (b55ac <sock_send+0xc>)
   b55a4:	681b      	ldr	r3, [r3, #0]
   b55a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b55a8:	9301      	str	r3, [sp, #4]
   b55aa:	bd08      	pop	{r3, pc}
   b55ac:	00030238 	.word	0x00030238

000b55b0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b55b0:	b508      	push	{r3, lr}
   b55b2:	4b02      	ldr	r3, [pc, #8]	; (b55bc <sock_socket+0xc>)
   b55b4:	681b      	ldr	r3, [r3, #0]
   b55b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b55b8:	9301      	str	r3, [sp, #4]
   b55ba:	bd08      	pop	{r3, pc}
   b55bc:	00030238 	.word	0x00030238

000b55c0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b55c0:	b508      	push	{r3, lr}
   b55c2:	4b02      	ldr	r3, [pc, #8]	; (b55cc <hal_spi_begin+0xc>)
   b55c4:	681b      	ldr	r3, [r3, #0]
   b55c6:	681b      	ldr	r3, [r3, #0]
   b55c8:	9301      	str	r3, [sp, #4]
   b55ca:	bd08      	pop	{r3, pc}
   b55cc:	00030230 	.word	0x00030230

000b55d0 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b55d0:	b508      	push	{r3, lr}
   b55d2:	4b02      	ldr	r3, [pc, #8]	; (b55dc <hal_spi_set_bit_order+0xc>)
   b55d4:	681b      	ldr	r3, [r3, #0]
   b55d6:	689b      	ldr	r3, [r3, #8]
   b55d8:	9301      	str	r3, [sp, #4]
   b55da:	bd08      	pop	{r3, pc}
   b55dc:	00030230 	.word	0x00030230

000b55e0 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b55e0:	b508      	push	{r3, lr}
   b55e2:	4b02      	ldr	r3, [pc, #8]	; (b55ec <hal_spi_set_data_mode+0xc>)
   b55e4:	681b      	ldr	r3, [r3, #0]
   b55e6:	68db      	ldr	r3, [r3, #12]
   b55e8:	9301      	str	r3, [sp, #4]
   b55ea:	bd08      	pop	{r3, pc}
   b55ec:	00030230 	.word	0x00030230

000b55f0 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b55f0:	b508      	push	{r3, lr}
   b55f2:	4b02      	ldr	r3, [pc, #8]	; (b55fc <hal_spi_set_clock_divider+0xc>)
   b55f4:	681b      	ldr	r3, [r3, #0]
   b55f6:	691b      	ldr	r3, [r3, #16]
   b55f8:	9301      	str	r3, [sp, #4]
   b55fa:	bd08      	pop	{r3, pc}
   b55fc:	00030230 	.word	0x00030230

000b5600 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5600:	b508      	push	{r3, lr}
   b5602:	4b02      	ldr	r3, [pc, #8]	; (b560c <hal_spi_transfer+0xc>)
   b5604:	681b      	ldr	r3, [r3, #0]
   b5606:	695b      	ldr	r3, [r3, #20]
   b5608:	9301      	str	r3, [sp, #4]
   b560a:	bd08      	pop	{r3, pc}
   b560c:	00030230 	.word	0x00030230

000b5610 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5610:	b508      	push	{r3, lr}
   b5612:	4b02      	ldr	r3, [pc, #8]	; (b561c <hal_spi_init+0xc>)
   b5614:	681b      	ldr	r3, [r3, #0]
   b5616:	69db      	ldr	r3, [r3, #28]
   b5618:	9301      	str	r3, [sp, #4]
   b561a:	bd08      	pop	{r3, pc}
   b561c:	00030230 	.word	0x00030230

000b5620 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5620:	b508      	push	{r3, lr}
   b5622:	4b02      	ldr	r3, [pc, #8]	; (b562c <hal_spi_is_enabled+0xc>)
   b5624:	681b      	ldr	r3, [r3, #0]
   b5626:	6a1b      	ldr	r3, [r3, #32]
   b5628:	9301      	str	r3, [sp, #4]
   b562a:	bd08      	pop	{r3, pc}
   b562c:	00030230 	.word	0x00030230

000b5630 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5630:	b508      	push	{r3, lr}
   b5632:	4b02      	ldr	r3, [pc, #8]	; (b563c <hal_spi_info+0xc>)
   b5634:	681b      	ldr	r3, [r3, #0]
   b5636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5638:	9301      	str	r3, [sp, #4]
   b563a:	bd08      	pop	{r3, pc}
   b563c:	00030230 	.word	0x00030230

000b5640 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5640:	b508      	push	{r3, lr}
   b5642:	4b02      	ldr	r3, [pc, #8]	; (b564c <hal_spi_acquire+0xc>)
   b5644:	681b      	ldr	r3, [r3, #0]
   b5646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5648:	9301      	str	r3, [sp, #4]
   b564a:	bd08      	pop	{r3, pc}
   b564c:	00030230 	.word	0x00030230

000b5650 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5650:	b508      	push	{r3, lr}
   b5652:	4b02      	ldr	r3, [pc, #8]	; (b565c <hal_spi_release+0xc>)
   b5654:	681b      	ldr	r3, [r3, #0]
   b5656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5658:	9301      	str	r3, [sp, #4]
   b565a:	bd08      	pop	{r3, pc}
   b565c:	00030230 	.word	0x00030230

000b5660 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5660:	b508      	push	{r3, lr}
   b5662:	4b02      	ldr	r3, [pc, #8]	; (b566c <HAL_USB_USART_Init+0xc>)
   b5664:	681b      	ldr	r3, [r3, #0]
   b5666:	681b      	ldr	r3, [r3, #0]
   b5668:	9301      	str	r3, [sp, #4]
   b566a:	bd08      	pop	{r3, pc}
   b566c:	0003024c 	.word	0x0003024c

000b5670 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5670:	b508      	push	{r3, lr}
   b5672:	4b02      	ldr	r3, [pc, #8]	; (b567c <HAL_USB_USART_Begin+0xc>)
   b5674:	681b      	ldr	r3, [r3, #0]
   b5676:	685b      	ldr	r3, [r3, #4]
   b5678:	9301      	str	r3, [sp, #4]
   b567a:	bd08      	pop	{r3, pc}
   b567c:	0003024c 	.word	0x0003024c

000b5680 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5680:	b508      	push	{r3, lr}
   b5682:	4b02      	ldr	r3, [pc, #8]	; (b568c <HAL_USB_USART_Available_Data+0xc>)
   b5684:	681b      	ldr	r3, [r3, #0]
   b5686:	691b      	ldr	r3, [r3, #16]
   b5688:	9301      	str	r3, [sp, #4]
   b568a:	bd08      	pop	{r3, pc}
   b568c:	0003024c 	.word	0x0003024c

000b5690 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5690:	b508      	push	{r3, lr}
   b5692:	4b02      	ldr	r3, [pc, #8]	; (b569c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5694:	681b      	ldr	r3, [r3, #0]
   b5696:	695b      	ldr	r3, [r3, #20]
   b5698:	9301      	str	r3, [sp, #4]
   b569a:	bd08      	pop	{r3, pc}
   b569c:	0003024c 	.word	0x0003024c

000b56a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b56a0:	b508      	push	{r3, lr}
   b56a2:	4b02      	ldr	r3, [pc, #8]	; (b56ac <HAL_USB_USART_Receive_Data+0xc>)
   b56a4:	681b      	ldr	r3, [r3, #0]
   b56a6:	699b      	ldr	r3, [r3, #24]
   b56a8:	9301      	str	r3, [sp, #4]
   b56aa:	bd08      	pop	{r3, pc}
   b56ac:	0003024c 	.word	0x0003024c

000b56b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b56b0:	b508      	push	{r3, lr}
   b56b2:	4b02      	ldr	r3, [pc, #8]	; (b56bc <HAL_USB_USART_Send_Data+0xc>)
   b56b4:	681b      	ldr	r3, [r3, #0]
   b56b6:	69db      	ldr	r3, [r3, #28]
   b56b8:	9301      	str	r3, [sp, #4]
   b56ba:	bd08      	pop	{r3, pc}
   b56bc:	0003024c 	.word	0x0003024c

000b56c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b56c0:	b508      	push	{r3, lr}
   b56c2:	4b02      	ldr	r3, [pc, #8]	; (b56cc <HAL_USB_USART_Flush_Data+0xc>)
   b56c4:	681b      	ldr	r3, [r3, #0]
   b56c6:	6a1b      	ldr	r3, [r3, #32]
   b56c8:	9301      	str	r3, [sp, #4]
   b56ca:	bd08      	pop	{r3, pc}
   b56cc:	0003024c 	.word	0x0003024c

000b56d0 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b56d0:	b508      	push	{r3, lr}
   b56d2:	4b02      	ldr	r3, [pc, #8]	; (b56dc <HAL_USB_USART_Is_Connected+0xc>)
   b56d4:	681b      	ldr	r3, [r3, #0]
   b56d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b56d8:	9301      	str	r3, [sp, #4]
   b56da:	bd08      	pop	{r3, pc}
   b56dc:	0003024c 	.word	0x0003024c

000b56e0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b56e0:	b508      	push	{r3, lr}
   b56e2:	4b02      	ldr	r3, [pc, #8]	; (b56ec <panic_+0xc>)
   b56e4:	681b      	ldr	r3, [r3, #0]
   b56e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b56e8:	9301      	str	r3, [sp, #4]
   b56ea:	bd08      	pop	{r3, pc}
   b56ec:	00030260 	.word	0x00030260

000b56f0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b56f0:	b508      	push	{r3, lr}
   b56f2:	4b02      	ldr	r3, [pc, #8]	; (b56fc <log_message+0xc>)
   b56f4:	681b      	ldr	r3, [r3, #0]
   b56f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b56f8:	9301      	str	r3, [sp, #4]
   b56fa:	bd08      	pop	{r3, pc}
   b56fc:	00030260 	.word	0x00030260

000b5700 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5700:	b508      	push	{r3, lr}
   b5702:	4b02      	ldr	r3, [pc, #8]	; (b570c <set_system_mode+0xc>)
   b5704:	681b      	ldr	r3, [r3, #0]
   b5706:	685b      	ldr	r3, [r3, #4]
   b5708:	9301      	str	r3, [sp, #4]
   b570a:	bd08      	pop	{r3, pc}
   b570c:	00030220 	.word	0x00030220

000b5710 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5710:	b508      	push	{r3, lr}
   b5712:	4b02      	ldr	r3, [pc, #8]	; (b571c <system_delay_ms+0xc>)
   b5714:	681b      	ldr	r3, [r3, #0]
   b5716:	695b      	ldr	r3, [r3, #20]
   b5718:	9301      	str	r3, [sp, #4]
   b571a:	bd08      	pop	{r3, pc}
   b571c:	00030220 	.word	0x00030220

000b5720 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5720:	b508      	push	{r3, lr}
   b5722:	4b03      	ldr	r3, [pc, #12]	; (b5730 <system_ctrl_set_app_request_handler+0x10>)
   b5724:	681b      	ldr	r3, [r3, #0]
   b5726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b572a:	9301      	str	r3, [sp, #4]
   b572c:	bd08      	pop	{r3, pc}
   b572e:	0000      	.short	0x0000
   b5730:	00030220 	.word	0x00030220

000b5734 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5734:	b508      	push	{r3, lr}
   b5736:	4b03      	ldr	r3, [pc, #12]	; (b5744 <system_ctrl_set_result+0x10>)
   b5738:	681b      	ldr	r3, [r3, #0]
   b573a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b573e:	9301      	str	r3, [sp, #4]
   b5740:	bd08      	pop	{r3, pc}
   b5742:	0000      	.short	0x0000
   b5744:	00030220 	.word	0x00030220

000b5748 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5748:	b508      	push	{r3, lr}
   b574a:	4b02      	ldr	r3, [pc, #8]	; (b5754 <network_connect+0xc>)
   b574c:	681b      	ldr	r3, [r3, #0]
   b574e:	685b      	ldr	r3, [r3, #4]
   b5750:	9301      	str	r3, [sp, #4]
   b5752:	bd08      	pop	{r3, pc}
   b5754:	00030240 	.word	0x00030240

000b5758 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5758:	b508      	push	{r3, lr}
   b575a:	4b02      	ldr	r3, [pc, #8]	; (b5764 <network_connecting+0xc>)
   b575c:	681b      	ldr	r3, [r3, #0]
   b575e:	689b      	ldr	r3, [r3, #8]
   b5760:	9301      	str	r3, [sp, #4]
   b5762:	bd08      	pop	{r3, pc}
   b5764:	00030240 	.word	0x00030240

000b5768 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5768:	b508      	push	{r3, lr}
   b576a:	4b02      	ldr	r3, [pc, #8]	; (b5774 <network_disconnect+0xc>)
   b576c:	681b      	ldr	r3, [r3, #0]
   b576e:	68db      	ldr	r3, [r3, #12]
   b5770:	9301      	str	r3, [sp, #4]
   b5772:	bd08      	pop	{r3, pc}
   b5774:	00030240 	.word	0x00030240

000b5778 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5778:	b508      	push	{r3, lr}
   b577a:	4b02      	ldr	r3, [pc, #8]	; (b5784 <network_ready+0xc>)
   b577c:	681b      	ldr	r3, [r3, #0]
   b577e:	691b      	ldr	r3, [r3, #16]
   b5780:	9301      	str	r3, [sp, #4]
   b5782:	bd08      	pop	{r3, pc}
   b5784:	00030240 	.word	0x00030240

000b5788 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5788:	b508      	push	{r3, lr}
   b578a:	4b02      	ldr	r3, [pc, #8]	; (b5794 <network_on+0xc>)
   b578c:	681b      	ldr	r3, [r3, #0]
   b578e:	695b      	ldr	r3, [r3, #20]
   b5790:	9301      	str	r3, [sp, #4]
   b5792:	bd08      	pop	{r3, pc}
   b5794:	00030240 	.word	0x00030240

000b5798 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5798:	b508      	push	{r3, lr}
   b579a:	4b02      	ldr	r3, [pc, #8]	; (b57a4 <network_off+0xc>)
   b579c:	681b      	ldr	r3, [r3, #0]
   b579e:	699b      	ldr	r3, [r3, #24]
   b57a0:	9301      	str	r3, [sp, #4]
   b57a2:	bd08      	pop	{r3, pc}
   b57a4:	00030240 	.word	0x00030240

000b57a8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b57a8:	b508      	push	{r3, lr}
   b57aa:	4b02      	ldr	r3, [pc, #8]	; (b57b4 <network_listen+0xc>)
   b57ac:	681b      	ldr	r3, [r3, #0]
   b57ae:	69db      	ldr	r3, [r3, #28]
   b57b0:	9301      	str	r3, [sp, #4]
   b57b2:	bd08      	pop	{r3, pc}
   b57b4:	00030240 	.word	0x00030240

000b57b8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b57b8:	b508      	push	{r3, lr}
   b57ba:	4b02      	ldr	r3, [pc, #8]	; (b57c4 <network_listening+0xc>)
   b57bc:	681b      	ldr	r3, [r3, #0]
   b57be:	6a1b      	ldr	r3, [r3, #32]
   b57c0:	9301      	str	r3, [sp, #4]
   b57c2:	bd08      	pop	{r3, pc}
   b57c4:	00030240 	.word	0x00030240

000b57c8 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b57c8:	b508      	push	{r3, lr}
   b57ca:	4b02      	ldr	r3, [pc, #8]	; (b57d4 <network_set_credentials+0xc>)
   b57cc:	681b      	ldr	r3, [r3, #0]
   b57ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b57d0:	9301      	str	r3, [sp, #4]
   b57d2:	bd08      	pop	{r3, pc}
   b57d4:	00030240 	.word	0x00030240

000b57d8 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b57d8:	b508      	push	{r3, lr}
   b57da:	4b02      	ldr	r3, [pc, #8]	; (b57e4 <network_set_listen_timeout+0xc>)
   b57dc:	681b      	ldr	r3, [r3, #0]
   b57de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b57e0:	9301      	str	r3, [sp, #4]
   b57e2:	bd08      	pop	{r3, pc}
   b57e4:	00030240 	.word	0x00030240

000b57e8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b57e8:	b508      	push	{r3, lr}
   b57ea:	4b02      	ldr	r3, [pc, #8]	; (b57f4 <network_get_listen_timeout+0xc>)
   b57ec:	681b      	ldr	r3, [r3, #0]
   b57ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b57f0:	9301      	str	r3, [sp, #4]
   b57f2:	bd08      	pop	{r3, pc}
   b57f4:	00030240 	.word	0x00030240

000b57f8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b57f8:	b508      	push	{r3, lr}
   b57fa:	4b02      	ldr	r3, [pc, #8]	; (b5804 <network_is_on+0xc>)
   b57fc:	681b      	ldr	r3, [r3, #0]
   b57fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5800:	9301      	str	r3, [sp, #4]
   b5802:	bd08      	pop	{r3, pc}
   b5804:	00030240 	.word	0x00030240

000b5808 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5808:	b508      	push	{r3, lr}
   b580a:	4b02      	ldr	r3, [pc, #8]	; (b5814 <network_is_off+0xc>)
   b580c:	681b      	ldr	r3, [r3, #0]
   b580e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5810:	9301      	str	r3, [sp, #4]
   b5812:	bd08      	pop	{r3, pc}
   b5814:	00030240 	.word	0x00030240

000b5818 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5818:	b508      	push	{r3, lr}
   b581a:	4b02      	ldr	r3, [pc, #8]	; (b5824 <spark_process+0xc>)
   b581c:	681b      	ldr	r3, [r3, #0]
   b581e:	689b      	ldr	r3, [r3, #8]
   b5820:	9301      	str	r3, [sp, #4]
   b5822:	bd08      	pop	{r3, pc}
   b5824:	00030244 	.word	0x00030244

000b5828 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5828:	b508      	push	{r3, lr}
   b582a:	4b02      	ldr	r3, [pc, #8]	; (b5834 <spark_set_random_seed_from_cloud_handler+0xc>)
   b582c:	681b      	ldr	r3, [r3, #0]
   b582e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5830:	9301      	str	r3, [sp, #4]
   b5832:	bd08      	pop	{r3, pc}
   b5834:	00030244 	.word	0x00030244

000b5838 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5838:	b508      	push	{r3, lr}
   b583a:	4b02      	ldr	r3, [pc, #8]	; (b5844 <malloc+0xc>)
   b583c:	681b      	ldr	r3, [r3, #0]
   b583e:	681b      	ldr	r3, [r3, #0]
   b5840:	9301      	str	r3, [sp, #4]
   b5842:	bd08      	pop	{r3, pc}
   b5844:	0003021c 	.word	0x0003021c

000b5848 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5848:	b508      	push	{r3, lr}
   b584a:	4b02      	ldr	r3, [pc, #8]	; (b5854 <free+0xc>)
   b584c:	681b      	ldr	r3, [r3, #0]
   b584e:	685b      	ldr	r3, [r3, #4]
   b5850:	9301      	str	r3, [sp, #4]
   b5852:	bd08      	pop	{r3, pc}
   b5854:	0003021c 	.word	0x0003021c

000b5858 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5858:	b508      	push	{r3, lr}
   b585a:	4b02      	ldr	r3, [pc, #8]	; (b5864 <realloc+0xc>)
   b585c:	681b      	ldr	r3, [r3, #0]
   b585e:	689b      	ldr	r3, [r3, #8]
   b5860:	9301      	str	r3, [sp, #4]
   b5862:	bd08      	pop	{r3, pc}
   b5864:	0003021c 	.word	0x0003021c

000b5868 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5868:	b508      	push	{r3, lr}
   b586a:	4b02      	ldr	r3, [pc, #8]	; (b5874 <vsnprintf+0xc>)
   b586c:	681b      	ldr	r3, [r3, #0]
   b586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5870:	9301      	str	r3, [sp, #4]
   b5872:	bd08      	pop	{r3, pc}
   b5874:	0003021c 	.word	0x0003021c

000b5878 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5878:	b508      	push	{r3, lr}
   b587a:	4b02      	ldr	r3, [pc, #8]	; (b5884 <__errno+0xc>)
   b587c:	681b      	ldr	r3, [r3, #0]
   b587e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5880:	9301      	str	r3, [sp, #4]
   b5882:	bd08      	pop	{r3, pc}
   b5884:	0003021c 	.word	0x0003021c

000b5888 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5888:	b508      	push	{r3, lr}
   b588a:	4b02      	ldr	r3, [pc, #8]	; (b5894 <__assert_func+0xc>)
   b588c:	681b      	ldr	r3, [r3, #0]
   b588e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5890:	9301      	str	r3, [sp, #4]
   b5892:	bd08      	pop	{r3, pc}
   b5894:	0003021c 	.word	0x0003021c

000b5898 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5898:	b508      	push	{r3, lr}
   b589a:	4b02      	ldr	r3, [pc, #8]	; (b58a4 <newlib_impure_ptr_callback+0xc>)
   b589c:	681b      	ldr	r3, [r3, #0]
   b589e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b58a0:	9301      	str	r3, [sp, #4]
   b58a2:	bd08      	pop	{r3, pc}
   b58a4:	0003021c 	.word	0x0003021c

000b58a8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b58a8:	2200      	movs	r2, #0
   b58aa:	6840      	ldr	r0, [r0, #4]
   b58ac:	4611      	mov	r1, r2
   b58ae:	f7ff bf83 	b.w	b57b8 <network_listening>

000b58b2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b58b2:	2200      	movs	r2, #0
   b58b4:	6840      	ldr	r0, [r0, #4]
   b58b6:	4611      	mov	r1, r2
   b58b8:	f7ff bf96 	b.w	b57e8 <network_get_listen_timeout>

000b58bc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b58bc:	6840      	ldr	r0, [r0, #4]
   b58be:	2200      	movs	r2, #0
   b58c0:	f7ff bf8a 	b.w	b57d8 <network_set_listen_timeout>

000b58c4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b58c4:	6840      	ldr	r0, [r0, #4]
   b58c6:	2200      	movs	r2, #0
   b58c8:	f081 0101 	eor.w	r1, r1, #1
   b58cc:	f7ff bf6c 	b.w	b57a8 <network_listen>

000b58d0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b58d0:	2300      	movs	r3, #0
   b58d2:	6840      	ldr	r0, [r0, #4]
   b58d4:	461a      	mov	r2, r3
   b58d6:	4619      	mov	r1, r3
   b58d8:	f7ff bf5e 	b.w	b5798 <network_off>

000b58dc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b58dc:	2300      	movs	r3, #0
   b58de:	6840      	ldr	r0, [r0, #4]
   b58e0:	461a      	mov	r2, r3
   b58e2:	4619      	mov	r1, r3
   b58e4:	f7ff bf50 	b.w	b5788 <network_on>

000b58e8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b58e8:	2200      	movs	r2, #0
   b58ea:	6840      	ldr	r0, [r0, #4]
   b58ec:	4611      	mov	r1, r2
   b58ee:	f7ff bf43 	b.w	b5778 <network_ready>

000b58f2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b58f2:	2200      	movs	r2, #0
   b58f4:	6840      	ldr	r0, [r0, #4]
   b58f6:	4611      	mov	r1, r2
   b58f8:	f7ff bf2e 	b.w	b5758 <network_connecting>

000b58fc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b58fc:	6840      	ldr	r0, [r0, #4]
   b58fe:	2200      	movs	r2, #0
   b5900:	2102      	movs	r1, #2
   b5902:	f7ff bf31 	b.w	b5768 <network_disconnect>

000b5906 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5906:	2300      	movs	r3, #0
   b5908:	6840      	ldr	r0, [r0, #4]
   b590a:	461a      	mov	r2, r3
   b590c:	f7ff bf1c 	b.w	b5748 <network_connect>

000b5910 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5910:	4b02      	ldr	r3, [pc, #8]	; (b591c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5912:	2203      	movs	r2, #3
   b5914:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5916:	4a02      	ldr	r2, [pc, #8]	; (b5920 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5918:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b591a:	4770      	bx	lr
   b591c:	2003e6c4 	.word	0x2003e6c4
   b5920:	000b7ba4 	.word	0x000b7ba4

000b5924 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5924:	2100      	movs	r1, #0
   b5926:	f7ff be93 	b.w	b5650 <hal_spi_release>

000b592a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b592a:	2100      	movs	r1, #0
   b592c:	f7ff be88 	b.w	b5640 <hal_spi_acquire>

000b5930 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5930:	b510      	push	{r4, lr}
   b5932:	4604      	mov	r4, r0
   b5934:	4608      	mov	r0, r1
{
    _spi = spi;
   b5936:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5938:	f7ff fe6a 	bl	b5610 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b593c:	2300      	movs	r3, #0
   b593e:	6063      	str	r3, [r4, #4]
}
   b5940:	4620      	mov	r0, r4
   b5942:	bd10      	pop	{r4, pc}

000b5944 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5944:	b513      	push	{r0, r1, r4, lr}
   b5946:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5948:	7800      	ldrb	r0, [r0, #0]
   b594a:	f7ff ffee 	bl	b592a <_ZN8SPIClass4lockEv.isra.0>
   b594e:	b958      	cbnz	r0, b5968 <_ZN8SPIClass5beginEv+0x24>
   b5950:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5952:	9001      	str	r0, [sp, #4]
   b5954:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5958:	f7ff fe32 	bl	b55c0 <hal_spi_begin>
        unlock();
   b595c:	9801      	ldr	r0, [sp, #4]
    }
}
   b595e:	b002      	add	sp, #8
   b5960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5964:	f7ff bfde 	b.w	b5924 <_ZN8SPIClass6unlockEv.isra.0>
   b5968:	b002      	add	sp, #8
   b596a:	bd10      	pop	{r4, pc}

000b596c <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b596c:	b513      	push	{r0, r1, r4, lr}
   b596e:	4604      	mov	r4, r0
    if (!lock())
   b5970:	7800      	ldrb	r0, [r0, #0]
{
   b5972:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5974:	f7ff ffd9 	bl	b592a <_ZN8SPIClass4lockEv.isra.0>
   b5978:	9901      	ldr	r1, [sp, #4]
   b597a:	b948      	cbnz	r0, b5990 <_ZN8SPIClass11setBitOrderEh+0x24>
   b597c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b597e:	9001      	str	r0, [sp, #4]
   b5980:	f7ff fe26 	bl	b55d0 <hal_spi_set_bit_order>
        unlock();
   b5984:	9801      	ldr	r0, [sp, #4]
    }
}
   b5986:	b002      	add	sp, #8
   b5988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b598c:	f7ff bfca 	b.w	b5924 <_ZN8SPIClass6unlockEv.isra.0>
   b5990:	b002      	add	sp, #8
   b5992:	bd10      	pop	{r4, pc}

000b5994 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b5994:	b513      	push	{r0, r1, r4, lr}
   b5996:	4604      	mov	r4, r0
    if (!lock())
   b5998:	7800      	ldrb	r0, [r0, #0]
{
   b599a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b599c:	f7ff ffc5 	bl	b592a <_ZN8SPIClass4lockEv.isra.0>
   b59a0:	9901      	ldr	r1, [sp, #4]
   b59a2:	b948      	cbnz	r0, b59b8 <_ZN8SPIClass11setDataModeEh+0x24>
   b59a4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b59a6:	9001      	str	r0, [sp, #4]
   b59a8:	f7ff fe1a 	bl	b55e0 <hal_spi_set_data_mode>
        unlock();
   b59ac:	9801      	ldr	r0, [sp, #4]
    }
}
   b59ae:	b002      	add	sp, #8
   b59b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b59b4:	f7ff bfb6 	b.w	b5924 <_ZN8SPIClass6unlockEv.isra.0>
   b59b8:	b002      	add	sp, #8
   b59ba:	bd10      	pop	{r4, pc}

000b59bc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b59bc:	0840      	lsrs	r0, r0, #1
{
   b59be:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b59c0:	6018      	str	r0, [r3, #0]
   b59c2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b59c4:	6818      	ldr	r0, [r3, #0]
   b59c6:	4288      	cmp	r0, r1
   b59c8:	b2e5      	uxtb	r5, r4
   b59ca:	d906      	bls.n	b59da <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b59cc:	3401      	adds	r4, #1
   b59ce:	2c08      	cmp	r4, #8
   b59d0:	d002      	beq.n	b59d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b59d2:	0840      	lsrs	r0, r0, #1
   b59d4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b59d6:	e7f5      	b.n	b59c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b59d8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b59da:	4b02      	ldr	r3, [pc, #8]	; (b59e4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b59dc:	5d5b      	ldrb	r3, [r3, r5]
   b59de:	7013      	strb	r3, [r2, #0]
}
   b59e0:	bd30      	pop	{r4, r5, pc}
   b59e2:	bf00      	nop
   b59e4:	000b7bd8 	.word	0x000b7bd8

000b59e8 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b59e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b59ec:	b088      	sub	sp, #32
    unsigned clock = 0;
   b59ee:	2300      	movs	r3, #0
{
   b59f0:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b59f2:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b59f4:	9302      	str	r3, [sp, #8]
{
   b59f6:	460e      	mov	r6, r1
   b59f8:	4617      	mov	r7, r2
    if (!lock())
   b59fa:	f7ff ff96 	bl	b592a <_ZN8SPIClass4lockEv.isra.0>
   b59fe:	4605      	mov	r5, r0
   b5a00:	bb00      	cbnz	r0, b5a44 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b5a02:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5a06:	4601      	mov	r1, r0
   b5a08:	2214      	movs	r2, #20
   b5a0a:	a803      	add	r0, sp, #12
   b5a0c:	f001 fae0 	bl	b6fd0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5a10:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5a12:	462a      	mov	r2, r5
   b5a14:	a903      	add	r1, sp, #12
   b5a16:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b5a18:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b5a1c:	f7ff fe08 	bl	b5630 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b5a20:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b5a22:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b5a26:	ab02      	add	r3, sp, #8
   b5a28:	f10d 0207 	add.w	r2, sp, #7
   b5a2c:	fb07 f106 	mul.w	r1, r7, r6
   b5a30:	f7ff ffc4 	bl	b59bc <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b5a34:	7820      	ldrb	r0, [r4, #0]
   b5a36:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b5a3a:	f7ff fdd9 	bl	b55f0 <hal_spi_set_clock_divider>
        unlock();
   b5a3e:	7820      	ldrb	r0, [r4, #0]
   b5a40:	f7ff ff70 	bl	b5924 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b5a44:	9802      	ldr	r0, [sp, #8]
   b5a46:	b008      	add	sp, #32
   b5a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5a4c <_ZN8SPIClass15setClockDividerEh>:
{
   b5a4c:	b538      	push	{r3, r4, r5, lr}
   b5a4e:	4604      	mov	r4, r0
    if (!lock())
   b5a50:	7800      	ldrb	r0, [r0, #0]
{
   b5a52:	460d      	mov	r5, r1
    if (!lock())
   b5a54:	f7ff ff69 	bl	b592a <_ZN8SPIClass4lockEv.isra.0>
   b5a58:	4603      	mov	r3, r0
   b5a5a:	b9d0      	cbnz	r0, b5a92 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b5a5c:	6861      	ldr	r1, [r4, #4]
   b5a5e:	b199      	cbz	r1, b5a88 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b5a60:	4a0c      	ldr	r2, [pc, #48]	; (b5a94 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b5a62:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5a66:	4285      	cmp	r5, r0
   b5a68:	d002      	beq.n	b5a70 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b5a6a:	3301      	adds	r3, #1
   b5a6c:	2b08      	cmp	r3, #8
   b5a6e:	d1f8      	bne.n	b5a62 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b5a70:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b5a72:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b5a74:	2201      	movs	r2, #1
   b5a76:	40d9      	lsrs	r1, r3
   b5a78:	4620      	mov	r0, r4
   b5a7a:	f7ff ffb5 	bl	b59e8 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b5a7e:	7820      	ldrb	r0, [r4, #0]
}
   b5a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b5a84:	f7ff bf4e 	b.w	b5924 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b5a88:	7820      	ldrb	r0, [r4, #0]
   b5a8a:	4629      	mov	r1, r5
   b5a8c:	f7ff fdb0 	bl	b55f0 <hal_spi_set_clock_divider>
   b5a90:	e7f5      	b.n	b5a7e <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b5a92:	bd38      	pop	{r3, r4, r5, pc}
   b5a94:	000b7bd8 	.word	0x000b7bd8

000b5a98 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b5a98:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5a9a:	7800      	ldrb	r0, [r0, #0]
   b5a9c:	f7ff fdb0 	bl	b5600 <hal_spi_transfer>
}
   b5aa0:	b2c0      	uxtb	r0, r0
   b5aa2:	bd08      	pop	{r3, pc}

000b5aa4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5aa4:	4b05      	ldr	r3, [pc, #20]	; (b5abc <_GLOBAL__sub_I_System+0x18>)
   b5aa6:	2202      	movs	r2, #2
   b5aa8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5aaa:	4b05      	ldr	r3, [pc, #20]	; (b5ac0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5aac:	4a05      	ldr	r2, [pc, #20]	; (b5ac4 <_GLOBAL__sub_I_System+0x20>)
   b5aae:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5ab0:	2000      	movs	r0, #0
   b5ab2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5ab6:	f7ff be23 	b.w	b5700 <set_system_mode>
   b5aba:	bf00      	nop
   b5abc:	2003e6d8 	.word	0x2003e6d8
   b5ac0:	2003e6cc 	.word	0x2003e6cc
   b5ac4:	ffff0000 	.word	0xffff0000

000b5ac8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b5ac8:	b510      	push	{r4, lr}
   b5aca:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5acc:	f001 fac8 	bl	b7060 <strlen>
   b5ad0:	3801      	subs	r0, #1
   b5ad2:	1823      	adds	r3, r4, r0
   b5ad4:	4620      	mov	r0, r4
	while(i<j){
   b5ad6:	4283      	cmp	r3, r0
   b5ad8:	d906      	bls.n	b5ae8 <_Z11str_reversePc+0x20>
		c = *i;
   b5ada:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5adc:	7819      	ldrb	r1, [r3, #0]
   b5ade:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b5ae2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b5ae6:	e7f6      	b.n	b5ad6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b5ae8:	bd10      	pop	{r4, pc}

000b5aea <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b5aea:	b570      	push	{r4, r5, r6, lr}
   b5aec:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b5aee:	1e91      	subs	r1, r2, #2
   b5af0:	2922      	cmp	r1, #34	; 0x22
   b5af2:	d81d      	bhi.n	b5b30 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b5af4:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b5af6:	b930      	cbnz	r0, b5b06 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b5af8:	4423      	add	r3, r4
            *ptr++ = '0';
   b5afa:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b5afc:	429d      	cmp	r5, r3
   b5afe:	d210      	bcs.n	b5b22 <ultoa+0x38>
            *ptr++ = '0';
   b5b00:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b5b04:	e7fa      	b.n	b5afc <ultoa+0x12>
            result.quot = a/radix;
   b5b06:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b5b0a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b5b0e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b5b10:	2809      	cmp	r0, #9
                *ptr += '0';
   b5b12:	bf94      	ite	ls
   b5b14:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b5b16:	3157      	addhi	r1, #87	; 0x57
   b5b18:	b2c9      	uxtb	r1, r1
   b5b1a:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b5b1e:	4630      	mov	r0, r6
	while(a){
   b5b20:	e7e9      	b.n	b5af6 <ultoa+0xc>

	*ptr = '\0';
   b5b22:	2300      	movs	r3, #0
	str_reverse(buffer);
   b5b24:	4620      	mov	r0, r4
	*ptr = '\0';
   b5b26:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b5b28:	f7ff ffce 	bl	b5ac8 <_Z11str_reversePc>
	return buffer;
   b5b2c:	4620      	mov	r0, r4
}
   b5b2e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b5b30:	2000      	movs	r0, #0
   b5b32:	e7fc      	b.n	b5b2e <ultoa+0x44>

000b5b34 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5b34:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b5b36:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5b38:	460c      	mov	r4, r1
   b5b3a:	4615      	mov	r5, r2
	if(a<0){
   b5b3c:	da0e      	bge.n	b5b5c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b5b42:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5b46:	bf14      	ite	ne
   b5b48:	4258      	negne	r0, r3
   b5b4a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b5b4c:	2301      	movs	r3, #1
		*buffer = '-';
   b5b4e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b5b50:	462a      	mov	r2, r5
   b5b52:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b5b54:	f7ff ffc9 	bl	b5aea <ultoa>
	}
	return buffer;
}
   b5b58:	4620      	mov	r0, r4
   b5b5a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b5b5c:	2301      	movs	r3, #1
   b5b5e:	e7f9      	b.n	b5b54 <itoa+0x20>

000b5b60 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5b60:	b510      	push	{r4, lr}
   b5b62:	4604      	mov	r4, r0
{
	free(buffer);
   b5b64:	6800      	ldr	r0, [r0, #0]
   b5b66:	f7ff fe6f 	bl	b5848 <free>
}
   b5b6a:	4620      	mov	r0, r4
   b5b6c:	bd10      	pop	{r4, pc}

000b5b6e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5b6e:	b510      	push	{r4, lr}
   b5b70:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5b72:	6800      	ldr	r0, [r0, #0]
   b5b74:	b108      	cbz	r0, b5b7a <_ZN6String10invalidateEv+0xc>
   b5b76:	f7ff fe67 	bl	b5848 <free>
	buffer = NULL;
   b5b7a:	2300      	movs	r3, #0
	capacity = len = 0;
   b5b7c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5b80:	6023      	str	r3, [r4, #0]
}
   b5b82:	bd10      	pop	{r4, pc}

000b5b84 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5b84:	b538      	push	{r3, r4, r5, lr}
   b5b86:	4604      	mov	r4, r0
   b5b88:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5b8a:	6800      	ldr	r0, [r0, #0]
   b5b8c:	3101      	adds	r1, #1
   b5b8e:	f7ff fe63 	bl	b5858 <realloc>
	if (newbuffer) {
   b5b92:	b110      	cbz	r0, b5b9a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5b94:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5b98:	2001      	movs	r0, #1
	}
	return 0;
}
   b5b9a:	bd38      	pop	{r3, r4, r5, pc}

000b5b9c <_ZN6String7reserveEj>:
{
   b5b9c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5b9e:	6803      	ldr	r3, [r0, #0]
{
   b5ba0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5ba2:	b123      	cbz	r3, b5bae <_ZN6String7reserveEj+0x12>
   b5ba4:	6843      	ldr	r3, [r0, #4]
   b5ba6:	428b      	cmp	r3, r1
   b5ba8:	d301      	bcc.n	b5bae <_ZN6String7reserveEj+0x12>
   b5baa:	2001      	movs	r0, #1
}
   b5bac:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5bae:	4620      	mov	r0, r4
   b5bb0:	f7ff ffe8 	bl	b5b84 <_ZN6String12changeBufferEj>
   b5bb4:	2800      	cmp	r0, #0
   b5bb6:	d0f9      	beq.n	b5bac <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5bb8:	68a3      	ldr	r3, [r4, #8]
   b5bba:	2b00      	cmp	r3, #0
   b5bbc:	d1f5      	bne.n	b5baa <_ZN6String7reserveEj+0xe>
   b5bbe:	6822      	ldr	r2, [r4, #0]
   b5bc0:	7013      	strb	r3, [r2, #0]
   b5bc2:	e7f2      	b.n	b5baa <_ZN6String7reserveEj+0xe>

000b5bc4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5bc6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5bc8:	4611      	mov	r1, r2
   b5bca:	9201      	str	r2, [sp, #4]
{
   b5bcc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5bce:	f7ff ffe5 	bl	b5b9c <_ZN6String7reserveEj>
   b5bd2:	9a01      	ldr	r2, [sp, #4]
   b5bd4:	b928      	cbnz	r0, b5be2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5bd6:	4620      	mov	r0, r4
   b5bd8:	f7ff ffc9 	bl	b5b6e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5bdc:	4620      	mov	r0, r4
   b5bde:	b003      	add	sp, #12
   b5be0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5be2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5be4:	4629      	mov	r1, r5
   b5be6:	6820      	ldr	r0, [r4, #0]
   b5be8:	f001 f9e4 	bl	b6fb4 <memcpy>
	buffer[len] = 0;
   b5bec:	6822      	ldr	r2, [r4, #0]
   b5bee:	68a3      	ldr	r3, [r4, #8]
   b5bf0:	2100      	movs	r1, #0
   b5bf2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5bf4:	e7f2      	b.n	b5bdc <_ZN6String4copyEPKcj+0x18>

000b5bf6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5bf6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5bf8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5bfa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5bfe:	4604      	mov	r4, r0
	len = 0;
   b5c00:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5c02:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5c04:	b141      	cbz	r1, b5c18 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5c06:	4608      	mov	r0, r1
   b5c08:	9101      	str	r1, [sp, #4]
   b5c0a:	f001 fa29 	bl	b7060 <strlen>
   b5c0e:	9901      	ldr	r1, [sp, #4]
   b5c10:	4602      	mov	r2, r0
   b5c12:	4620      	mov	r0, r4
   b5c14:	f7ff ffd6 	bl	b5bc4 <_ZN6String4copyEPKcj>
}
   b5c18:	4620      	mov	r0, r4
   b5c1a:	b002      	add	sp, #8
   b5c1c:	bd10      	pop	{r4, pc}

000b5c1e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b5c1e:	4288      	cmp	r0, r1
{
   b5c20:	b510      	push	{r4, lr}
   b5c22:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5c24:	d005      	beq.n	b5c32 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5c26:	680b      	ldr	r3, [r1, #0]
   b5c28:	b12b      	cbz	r3, b5c36 <_ZN6StringaSERKS_+0x18>
   b5c2a:	688a      	ldr	r2, [r1, #8]
   b5c2c:	4619      	mov	r1, r3
   b5c2e:	f7ff ffc9 	bl	b5bc4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5c32:	4620      	mov	r0, r4
   b5c34:	bd10      	pop	{r4, pc}
	else invalidate();
   b5c36:	f7ff ff9a 	bl	b5b6e <_ZN6String10invalidateEv>
   b5c3a:	e7fa      	b.n	b5c32 <_ZN6StringaSERKS_+0x14>

000b5c3c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b5c3c:	b510      	push	{r4, lr}
	buffer = NULL;
   b5c3e:	2300      	movs	r3, #0
String::String(const String &value)
   b5c40:	4604      	mov	r4, r0
	capacity = 0;
   b5c42:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b5c46:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5c48:	7303      	strb	r3, [r0, #12]
	*this = value;
   b5c4a:	f7ff ffe8 	bl	b5c1e <_ZN6StringaSERKS_>
}
   b5c4e:	4620      	mov	r0, r4
   b5c50:	bd10      	pop	{r4, pc}

000b5c52 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5c52:	b513      	push	{r0, r1, r4, lr}
   b5c54:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5c56:	b159      	cbz	r1, b5c70 <_ZN6StringaSEPKc+0x1e>
   b5c58:	4608      	mov	r0, r1
   b5c5a:	9101      	str	r1, [sp, #4]
   b5c5c:	f001 fa00 	bl	b7060 <strlen>
   b5c60:	9901      	ldr	r1, [sp, #4]
   b5c62:	4602      	mov	r2, r0
   b5c64:	4620      	mov	r0, r4
   b5c66:	f7ff ffad 	bl	b5bc4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5c6a:	4620      	mov	r0, r4
   b5c6c:	b002      	add	sp, #8
   b5c6e:	bd10      	pop	{r4, pc}
	else invalidate();
   b5c70:	f7ff ff7d 	bl	b5b6e <_ZN6String10invalidateEv>
   b5c74:	e7f9      	b.n	b5c6a <_ZN6StringaSEPKc+0x18>

000b5c76 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b5c76:	b510      	push	{r4, lr}
   b5c78:	4604      	mov	r4, r0
   b5c7a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5c7c:	2300      	movs	r3, #0
	capacity = 0;
   b5c7e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5c82:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5c84:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b5c86:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b5c88:	a901      	add	r1, sp, #4
   b5c8a:	f7ff ff53 	bl	b5b34 <itoa>
	*this = buf;
   b5c8e:	a901      	add	r1, sp, #4
   b5c90:	4620      	mov	r0, r4
   b5c92:	f7ff ffde 	bl	b5c52 <_ZN6StringaSEPKc>
}
   b5c96:	4620      	mov	r0, r4
   b5c98:	b00a      	add	sp, #40	; 0x28
   b5c9a:	bd10      	pop	{r4, pc}

000b5c9c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5c9c:	b570      	push	{r4, r5, r6, lr}
   b5c9e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5ca0:	460e      	mov	r6, r1
   b5ca2:	b909      	cbnz	r1, b5ca8 <_ZN6String6concatEPKcj+0xc>
   b5ca4:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b5ca6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b5ca8:	b16a      	cbz	r2, b5cc6 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b5caa:	6884      	ldr	r4, [r0, #8]
   b5cac:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5cae:	4621      	mov	r1, r4
   b5cb0:	f7ff ff74 	bl	b5b9c <_ZN6String7reserveEj>
   b5cb4:	2800      	cmp	r0, #0
   b5cb6:	d0f5      	beq.n	b5ca4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b5cb8:	6828      	ldr	r0, [r5, #0]
   b5cba:	68ab      	ldr	r3, [r5, #8]
   b5cbc:	4631      	mov	r1, r6
   b5cbe:	4418      	add	r0, r3
   b5cc0:	f001 f9c6 	bl	b7050 <strcpy>
	len = newlen;
   b5cc4:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b5cc6:	2001      	movs	r0, #1
   b5cc8:	e7ed      	b.n	b5ca6 <_ZN6String6concatEPKcj+0xa>

000b5cca <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b5cca:	b513      	push	{r0, r1, r4, lr}
   b5ccc:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b5cce:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b5cd0:	b151      	cbz	r1, b5ce8 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b5cd2:	9101      	str	r1, [sp, #4]
   b5cd4:	f001 f9c4 	bl	b7060 <strlen>
   b5cd8:	9901      	ldr	r1, [sp, #4]
   b5cda:	4602      	mov	r2, r0
   b5cdc:	4620      	mov	r0, r4
}
   b5cde:	b002      	add	sp, #8
   b5ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b5ce4:	f7ff bfda 	b.w	b5c9c <_ZN6String6concatEPKcj>
}
   b5ce8:	b002      	add	sp, #8
   b5cea:	bd10      	pop	{r4, pc}

000b5cec <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b5cec:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b5cee:	2300      	movs	r3, #0
	buf[0] = c;
   b5cf0:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b5cf4:	2201      	movs	r2, #1
   b5cf6:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b5cf8:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b5cfc:	f7ff ffce 	bl	b5c9c <_ZN6String6concatEPKcj>
}
   b5d00:	b003      	add	sp, #12
   b5d02:	f85d fb04 	ldr.w	pc, [sp], #4

000b5d06 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b5d06:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5d08:	688a      	ldr	r2, [r1, #8]
   b5d0a:	6809      	ldr	r1, [r1, #0]
{
   b5d0c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5d0e:	f7ff ffc5 	bl	b5c9c <_ZN6String6concatEPKcj>
   b5d12:	b910      	cbnz	r0, b5d1a <_ZplRK15StringSumHelperRK6String+0x14>
   b5d14:	4620      	mov	r0, r4
   b5d16:	f7ff ff2a 	bl	b5b6e <_ZN6String10invalidateEv>
	return a;
}
   b5d1a:	4620      	mov	r0, r4
   b5d1c:	bd10      	pop	{r4, pc}

000b5d1e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b5d1e:	b513      	push	{r0, r1, r4, lr}
   b5d20:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5d22:	b929      	cbnz	r1, b5d30 <_ZplRK15StringSumHelperPKc+0x12>
   b5d24:	4620      	mov	r0, r4
   b5d26:	f7ff ff22 	bl	b5b6e <_ZN6String10invalidateEv>
	return a;
}
   b5d2a:	4620      	mov	r0, r4
   b5d2c:	b002      	add	sp, #8
   b5d2e:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5d30:	4608      	mov	r0, r1
   b5d32:	9101      	str	r1, [sp, #4]
   b5d34:	f001 f994 	bl	b7060 <strlen>
   b5d38:	9901      	ldr	r1, [sp, #4]
   b5d3a:	4602      	mov	r2, r0
   b5d3c:	4620      	mov	r0, r4
   b5d3e:	f7ff ffad 	bl	b5c9c <_ZN6String6concatEPKcj>
   b5d42:	2800      	cmp	r0, #0
   b5d44:	d0ee      	beq.n	b5d24 <_ZplRK15StringSumHelperPKc+0x6>
   b5d46:	e7f0      	b.n	b5d2a <_ZplRK15StringSumHelperPKc+0xc>

000b5d48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5d48:	4802      	ldr	r0, [pc, #8]	; (b5d54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5d4a:	2300      	movs	r3, #0
   b5d4c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5d4e:	f7ff bb57 	b.w	b5400 <os_mutex_recursive_create>
   b5d52:	bf00      	nop
   b5d54:	2003e6dc 	.word	0x2003e6dc

000b5d58 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d5a:	4606      	mov	r6, r0
   b5d5c:	460d      	mov	r5, r1
  size_t n = 0;
   b5d5e:	188f      	adds	r7, r1, r2
   b5d60:	2400      	movs	r4, #0
  while (size--) {
   b5d62:	42bd      	cmp	r5, r7
   b5d64:	d00c      	beq.n	b5d80 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5d66:	6833      	ldr	r3, [r6, #0]
   b5d68:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5d6c:	689b      	ldr	r3, [r3, #8]
   b5d6e:	4630      	mov	r0, r6
   b5d70:	4798      	blx	r3
     if (chunk>=0)
   b5d72:	1e03      	subs	r3, r0, #0
   b5d74:	db01      	blt.n	b5d7a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5d76:	441c      	add	r4, r3
  while (size--) {
   b5d78:	e7f3      	b.n	b5d62 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5d7a:	2c00      	cmp	r4, #0
   b5d7c:	bf08      	it	eq
   b5d7e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5d80:	4620      	mov	r0, r4
   b5d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d84 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5d84:	b513      	push	{r0, r1, r4, lr}
   b5d86:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5d88:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5d8a:	b159      	cbz	r1, b5da4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5d8c:	9101      	str	r1, [sp, #4]
   b5d8e:	f001 f967 	bl	b7060 <strlen>
   b5d92:	6823      	ldr	r3, [r4, #0]
   b5d94:	9901      	ldr	r1, [sp, #4]
   b5d96:	68db      	ldr	r3, [r3, #12]
   b5d98:	4602      	mov	r2, r0
   b5d9a:	4620      	mov	r0, r4
    }
   b5d9c:	b002      	add	sp, #8
   b5d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5da2:	4718      	bx	r3
    }
   b5da4:	b002      	add	sp, #8
   b5da6:	bd10      	pop	{r4, pc}

000b5da8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5da8:	b508      	push	{r3, lr}
  return write(str);
   b5daa:	f7ff ffeb 	bl	b5d84 <_ZN5Print5writeEPKc>
}
   b5dae:	bd08      	pop	{r3, pc}

000b5db0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5db0:	6803      	ldr	r3, [r0, #0]
   b5db2:	689b      	ldr	r3, [r3, #8]
   b5db4:	4718      	bx	r3

000b5db6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5db6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5db8:	210d      	movs	r1, #13
{
   b5dba:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5dbc:	f7ff fff8 	bl	b5db0 <_ZN5Print5printEc>
  n += print('\n');
   b5dc0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5dc2:	4604      	mov	r4, r0
  n += print('\n');
   b5dc4:	4628      	mov	r0, r5
   b5dc6:	f7ff fff3 	bl	b5db0 <_ZN5Print5printEc>
  return n;
}
   b5dca:	4420      	add	r0, r4
   b5dcc:	bd38      	pop	{r3, r4, r5, pc}

000b5dce <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5dce:	b538      	push	{r3, r4, r5, lr}
   b5dd0:	4605      	mov	r5, r0
  return write(str);
   b5dd2:	f7ff ffd7 	bl	b5d84 <_ZN5Print5writeEPKc>
   b5dd6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5dd8:	4628      	mov	r0, r5
   b5dda:	f7ff ffec 	bl	b5db6 <_ZN5Print7printlnEv>
  return n;
}
   b5dde:	4420      	add	r0, r4
   b5de0:	bd38      	pop	{r3, r4, r5, pc}

000b5de2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5de2:	b530      	push	{r4, r5, lr}
   b5de4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5de6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5de8:	2a01      	cmp	r2, #1
  *str = '\0';
   b5dea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5dee:	bf98      	it	ls
   b5df0:	220a      	movls	r2, #10
   b5df2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5df4:	460d      	mov	r5, r1
   b5df6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5dfa:	fb01 5312 	mls	r3, r1, r2, r5
   b5dfe:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5e02:	2b09      	cmp	r3, #9
   b5e04:	bf94      	ite	ls
   b5e06:	3330      	addls	r3, #48	; 0x30
   b5e08:	3337      	addhi	r3, #55	; 0x37
   b5e0a:	b2db      	uxtb	r3, r3
  } while(n);
   b5e0c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5e0e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5e12:	d9ef      	bls.n	b5df4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5e14:	4621      	mov	r1, r4
   b5e16:	f7ff ffb5 	bl	b5d84 <_ZN5Print5writeEPKc>
}
   b5e1a:	b00b      	add	sp, #44	; 0x2c
   b5e1c:	bd30      	pop	{r4, r5, pc}

000b5e1e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5e22:	b086      	sub	sp, #24
   b5e24:	af00      	add	r7, sp, #0
   b5e26:	4605      	mov	r5, r0
   b5e28:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5e2a:	1d38      	adds	r0, r7, #4
   b5e2c:	2114      	movs	r1, #20
{
   b5e2e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5e30:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5e32:	f7ff fd19 	bl	b5868 <vsnprintf>

    if (n<bufsize)
   b5e36:	2813      	cmp	r0, #19
   b5e38:	d80e      	bhi.n	b5e58 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5e3a:	1d39      	adds	r1, r7, #4
   b5e3c:	4628      	mov	r0, r5
   b5e3e:	f7ff ffa1 	bl	b5d84 <_ZN5Print5writeEPKc>
   b5e42:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5e44:	b11e      	cbz	r6, b5e4e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5e46:	4628      	mov	r0, r5
   b5e48:	f7ff ffb5 	bl	b5db6 <_ZN5Print7printlnEv>
   b5e4c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5e4e:	4620      	mov	r0, r4
   b5e50:	3718      	adds	r7, #24
   b5e52:	46bd      	mov	sp, r7
   b5e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5e58:	f100 0308 	add.w	r3, r0, #8
   b5e5c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5e60:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5e62:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5e66:	4622      	mov	r2, r4
   b5e68:	1c41      	adds	r1, r0, #1
   b5e6a:	683b      	ldr	r3, [r7, #0]
   b5e6c:	4668      	mov	r0, sp
   b5e6e:	f7ff fcfb 	bl	b5868 <vsnprintf>
  return write(str);
   b5e72:	4669      	mov	r1, sp
   b5e74:	4628      	mov	r0, r5
   b5e76:	f7ff ff85 	bl	b5d84 <_ZN5Print5writeEPKc>
   b5e7a:	4604      	mov	r4, r0
   b5e7c:	46c5      	mov	sp, r8
   b5e7e:	e7e1      	b.n	b5e44 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5e80 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b5e80:	b510      	push	{r4, lr}
   b5e82:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5e84:	f7ff faac 	bl	b53e0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b5e88:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b5e8a:	6823      	ldr	r3, [r4, #0]
   b5e8c:	4620      	mov	r0, r4
   b5e8e:	695b      	ldr	r3, [r3, #20]
   b5e90:	4798      	blx	r3
    if (c >= 0) return c;
   b5e92:	2800      	cmp	r0, #0
   b5e94:	da08      	bge.n	b5ea8 <_ZN6Stream9timedReadEv+0x28>
   b5e96:	f7ff faa3 	bl	b53e0 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b5e9a:	68e3      	ldr	r3, [r4, #12]
   b5e9c:	1ac0      	subs	r0, r0, r3
   b5e9e:	68a3      	ldr	r3, [r4, #8]
   b5ea0:	4298      	cmp	r0, r3
   b5ea2:	d3f2      	bcc.n	b5e8a <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b5ea4:	f04f 30ff 	mov.w	r0, #4294967295
}
   b5ea8:	bd10      	pop	{r4, pc}
	...

000b5eac <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b5eac:	b538      	push	{r3, r4, r5, lr}
   b5eae:	460d      	mov	r5, r1
  String ret;
   b5eb0:	4907      	ldr	r1, [pc, #28]	; (b5ed0 <_ZN6Stream10readStringEv+0x24>)
{
   b5eb2:	4604      	mov	r4, r0
  String ret;
   b5eb4:	f7ff fe9f 	bl	b5bf6 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b5eb8:	4628      	mov	r0, r5
   b5eba:	f7ff ffe1 	bl	b5e80 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b5ebe:	2800      	cmp	r0, #0
   b5ec0:	db04      	blt.n	b5ecc <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b5ec2:	b2c1      	uxtb	r1, r0
   b5ec4:	4620      	mov	r0, r4
   b5ec6:	f7ff ff11 	bl	b5cec <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b5eca:	e7f5      	b.n	b5eb8 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b5ecc:	4620      	mov	r0, r4
   b5ece:	bd38      	pop	{r3, r4, r5, pc}
   b5ed0:	000b7565 	.word	0x000b7565

000b5ed4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5ed4:	4b01      	ldr	r3, [pc, #4]	; (b5edc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5ed6:	4a02      	ldr	r2, [pc, #8]	; (b5ee0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5ed8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5eda:	4770      	bx	lr
   b5edc:	2003e6e0 	.word	0x2003e6e0
   b5ee0:	000b7be8 	.word	0x000b7be8

000b5ee4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5ee4:	4b02      	ldr	r3, [pc, #8]	; (b5ef0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5ee6:	681a      	ldr	r2, [r3, #0]
   b5ee8:	4b02      	ldr	r3, [pc, #8]	; (b5ef4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5eea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5eec:	4770      	bx	lr
   b5eee:	bf00      	nop
   b5ef0:	2003e57c 	.word	0x2003e57c
   b5ef4:	2003e6e4 	.word	0x2003e6e4

000b5ef8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5ef8:	2100      	movs	r1, #0
   b5efa:	f7ff bc09 	b.w	b5710 <system_delay_ms>
	...

000b5f00 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5f00:	4b01      	ldr	r3, [pc, #4]	; (b5f08 <_GLOBAL__sub_I_RGB+0x8>)
   b5f02:	2200      	movs	r2, #0
   b5f04:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5f06:	4770      	bx	lr
   b5f08:	2003e6e8 	.word	0x2003e6e8

000b5f0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5f0c:	4b01      	ldr	r3, [pc, #4]	; (b5f14 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5f0e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5f10:	4770      	bx	lr
   b5f12:	bf00      	nop
   b5f14:	2003e580 	.word	0x2003e580

000b5f18 <serialEventRun>:
{
   b5f18:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5f1a:	4b0b      	ldr	r3, [pc, #44]	; (b5f48 <serialEventRun+0x30>)
   b5f1c:	b143      	cbz	r3, b5f30 <serialEventRun+0x18>
   b5f1e:	f000 f981 	bl	b6224 <_Z16_fetch_usbserialv>
   b5f22:	6803      	ldr	r3, [r0, #0]
   b5f24:	691b      	ldr	r3, [r3, #16]
   b5f26:	4798      	blx	r3
   b5f28:	2800      	cmp	r0, #0
   b5f2a:	dd01      	ble.n	b5f30 <serialEventRun+0x18>
        serialEvent();
   b5f2c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5f30:	4b06      	ldr	r3, [pc, #24]	; (b5f4c <serialEventRun+0x34>)
   b5f32:	b143      	cbz	r3, b5f46 <serialEventRun+0x2e>
   b5f34:	f000 fec0 	bl	b6cb8 <_Z22__fetch_global_Serial1v>
   b5f38:	6803      	ldr	r3, [r0, #0]
   b5f3a:	691b      	ldr	r3, [r3, #16]
   b5f3c:	4798      	blx	r3
   b5f3e:	2800      	cmp	r0, #0
   b5f40:	dd01      	ble.n	b5f46 <serialEventRun+0x2e>
        serialEvent1();
   b5f42:	f3af 8000 	nop.w
}
   b5f46:	bd08      	pop	{r3, pc}
	...

000b5f50 <_post_loop>:
{
   b5f50:	b508      	push	{r3, lr}
	serialEventRun();
   b5f52:	f7ff ffe1 	bl	b5f18 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5f56:	f7ff fa43 	bl	b53e0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5f5a:	4b01      	ldr	r3, [pc, #4]	; (b5f60 <_post_loop+0x10>)
   b5f5c:	6018      	str	r0, [r3, #0]
}
   b5f5e:	bd08      	pop	{r3, pc}
   b5f60:	2003e740 	.word	0x2003e740

000b5f64 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5f64:	4805      	ldr	r0, [pc, #20]	; (b5f7c <_Z33system_initialize_user_backup_ramv+0x18>)
   b5f66:	4a06      	ldr	r2, [pc, #24]	; (b5f80 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5f68:	4906      	ldr	r1, [pc, #24]	; (b5f84 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5f6a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5f6c:	1a12      	subs	r2, r2, r0
   b5f6e:	f001 f821 	bl	b6fb4 <memcpy>
    __backup_sram_signature = signature;
   b5f72:	4b05      	ldr	r3, [pc, #20]	; (b5f88 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5f74:	4a05      	ldr	r2, [pc, #20]	; (b5f8c <_Z33system_initialize_user_backup_ramv+0x28>)
   b5f76:	601a      	str	r2, [r3, #0]
}
   b5f78:	bd08      	pop	{r3, pc}
   b5f7a:	bf00      	nop
   b5f7c:	2003f400 	.word	0x2003f400
   b5f80:	2003f404 	.word	0x2003f404
   b5f84:	000b7f74 	.word	0x000b7f74
   b5f88:	2003f400 	.word	0x2003f400
   b5f8c:	9a271c1e 	.word	0x9a271c1e

000b5f90 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5f90:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5f92:	2300      	movs	r3, #0
   b5f94:	9300      	str	r3, [sp, #0]
   b5f96:	461a      	mov	r2, r3
   b5f98:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5f9c:	f7ff fbca 	bl	b5734 <system_ctrl_set_result>
}
   b5fa0:	b003      	add	sp, #12
   b5fa2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5fa8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5fa8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5faa:	8843      	ldrh	r3, [r0, #2]
   b5fac:	2b0a      	cmp	r3, #10
   b5fae:	d008      	beq.n	b5fc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5fb0:	2b50      	cmp	r3, #80	; 0x50
   b5fb2:	d10b      	bne.n	b5fcc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5fb4:	4b09      	ldr	r3, [pc, #36]	; (b5fdc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5fb6:	681b      	ldr	r3, [r3, #0]
   b5fb8:	b14b      	cbz	r3, b5fce <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5fba:	b003      	add	sp, #12
   b5fbc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5fc0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5fc2:	f7ff ffe5 	bl	b5f90 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5fc6:	b003      	add	sp, #12
   b5fc8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5fcc:	2300      	movs	r3, #0
   b5fce:	9300      	str	r3, [sp, #0]
   b5fd0:	461a      	mov	r2, r3
   b5fd2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5fd6:	f7ff fbad 	bl	b5734 <system_ctrl_set_result>
}
   b5fda:	e7f4      	b.n	b5fc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5fdc:	2003e6fc 	.word	0x2003e6fc

000b5fe0 <module_user_init_hook>:
{
   b5fe0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5fe2:	4812      	ldr	r0, [pc, #72]	; (b602c <module_user_init_hook+0x4c>)
   b5fe4:	2100      	movs	r1, #0
   b5fe6:	f7ff fc57 	bl	b5898 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5fea:	4b11      	ldr	r3, [pc, #68]	; (b6030 <module_user_init_hook+0x50>)
   b5fec:	681a      	ldr	r2, [r3, #0]
   b5fee:	4b11      	ldr	r3, [pc, #68]	; (b6034 <module_user_init_hook+0x54>)
   b5ff0:	429a      	cmp	r2, r3
   b5ff2:	4b11      	ldr	r3, [pc, #68]	; (b6038 <module_user_init_hook+0x58>)
   b5ff4:	bf0c      	ite	eq
   b5ff6:	2201      	moveq	r2, #1
   b5ff8:	2200      	movne	r2, #0
   b5ffa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5ffc:	d001      	beq.n	b6002 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5ffe:	f7ff ffb1 	bl	b5f64 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6002:	f7ff f9dd 	bl	b53c0 <HAL_RNG_GetRandomNumber>
   b6006:	4604      	mov	r4, r0
    srand(seed);
   b6008:	f000 ffea 	bl	b6fe0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b600c:	4b0b      	ldr	r3, [pc, #44]	; (b603c <module_user_init_hook+0x5c>)
   b600e:	b113      	cbz	r3, b6016 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6010:	4620      	mov	r0, r4
   b6012:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6016:	2100      	movs	r1, #0
   b6018:	4808      	ldr	r0, [pc, #32]	; (b603c <module_user_init_hook+0x5c>)
   b601a:	f7ff fc05 	bl	b5828 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b601e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6022:	4807      	ldr	r0, [pc, #28]	; (b6040 <module_user_init_hook+0x60>)
   b6024:	2100      	movs	r1, #0
   b6026:	f7ff bb7b 	b.w	b5720 <system_ctrl_set_app_request_handler>
   b602a:	bf00      	nop
   b602c:	000b5f0d 	.word	0x000b5f0d
   b6030:	2003f400 	.word	0x2003f400
   b6034:	9a271c1e 	.word	0x9a271c1e
   b6038:	2003e6f8 	.word	0x2003e6f8
   b603c:	00000000 	.word	0x00000000
   b6040:	000b5fa9 	.word	0x000b5fa9

000b6044 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6044:	4770      	bx	lr

000b6046 <_ZN9IPAddressD0Ev>:
   b6046:	b510      	push	{r4, lr}
   b6048:	2118      	movs	r1, #24
   b604a:	4604      	mov	r4, r0
   b604c:	f7fe f825 	bl	b409a <_ZdlPvj>
   b6050:	4620      	mov	r0, r4
   b6052:	bd10      	pop	{r4, pc}

000b6054 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6054:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6056:	7d03      	ldrb	r3, [r0, #20]
   b6058:	2b06      	cmp	r3, #6
{
   b605a:	b08d      	sub	sp, #52	; 0x34
   b605c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b605e:	f100 0704 	add.w	r7, r0, #4
   b6062:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6066:	d012      	beq.n	b608e <_ZNK9IPAddress7printToER5Print+0x3a>
   b6068:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b606c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6070:	220a      	movs	r2, #10
   b6072:	4630      	mov	r0, r6
   b6074:	f7ff feb5 	bl	b5de2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6078:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b607a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b607c:	d019      	beq.n	b60b2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b607e:	2c00      	cmp	r4, #0
   b6080:	d0f4      	beq.n	b606c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6082:	212e      	movs	r1, #46	; 0x2e
   b6084:	4630      	mov	r0, r6
   b6086:	f7ff fe93 	bl	b5db0 <_ZN5Print5printEc>
   b608a:	4404      	add	r4, r0
   b608c:	e7ee      	b.n	b606c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b608e:	232f      	movs	r3, #47	; 0x2f
   b6090:	466a      	mov	r2, sp
   b6092:	4639      	mov	r1, r7
   b6094:	200a      	movs	r0, #10
		buf[0] = 0;
   b6096:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b609a:	f7ff f9b9 	bl	b5410 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b609e:	4668      	mov	r0, sp
   b60a0:	f000 ffde 	bl	b7060 <strlen>
   b60a4:	6833      	ldr	r3, [r6, #0]
   b60a6:	4602      	mov	r2, r0
   b60a8:	68db      	ldr	r3, [r3, #12]
   b60aa:	4669      	mov	r1, sp
   b60ac:	4630      	mov	r0, r6
   b60ae:	4798      	blx	r3
   b60b0:	4604      	mov	r4, r0
    }
    return n;
}
   b60b2:	4620      	mov	r0, r4
   b60b4:	b00d      	add	sp, #52	; 0x34
   b60b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b60b8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b60b8:	b510      	push	{r4, lr}
   b60ba:	4b05      	ldr	r3, [pc, #20]	; (b60d0 <_ZN9IPAddressC1Ev+0x18>)
   b60bc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b60be:	2211      	movs	r2, #17
   b60c0:	f840 3b04 	str.w	r3, [r0], #4
   b60c4:	2100      	movs	r1, #0
   b60c6:	f000 ff83 	bl	b6fd0 <memset>
}
   b60ca:	4620      	mov	r0, r4
   b60cc:	bd10      	pop	{r4, pc}
   b60ce:	bf00      	nop
   b60d0:	000b7c10 	.word	0x000b7c10

000b60d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b60d4:	4603      	mov	r3, r0
   b60d6:	4a07      	ldr	r2, [pc, #28]	; (b60f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b60d8:	b510      	push	{r4, lr}
   b60da:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b60de:	f101 0210 	add.w	r2, r1, #16
   b60e2:	f851 4b04 	ldr.w	r4, [r1], #4
   b60e6:	f843 4b04 	str.w	r4, [r3], #4
   b60ea:	4291      	cmp	r1, r2
   b60ec:	d1f9      	bne.n	b60e2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b60ee:	780a      	ldrb	r2, [r1, #0]
   b60f0:	701a      	strb	r2, [r3, #0]
}
   b60f2:	bd10      	pop	{r4, pc}
   b60f4:	000b7c10 	.word	0x000b7c10

000b60f8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b60f8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b60fa:	2b04      	cmp	r3, #4
   b60fc:	d104      	bne.n	b6108 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b60fe:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6100:	3800      	subs	r0, #0
   b6102:	bf18      	it	ne
   b6104:	2001      	movne	r0, #1
   b6106:	4770      	bx	lr
    } else if (version() == 6) {
   b6108:	2b06      	cmp	r3, #6
   b610a:	d107      	bne.n	b611c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b610c:	6843      	ldr	r3, [r0, #4]
   b610e:	b93b      	cbnz	r3, b6120 <_ZNK9IPAddresscvbEv+0x28>
   b6110:	6883      	ldr	r3, [r0, #8]
   b6112:	b92b      	cbnz	r3, b6120 <_ZNK9IPAddresscvbEv+0x28>
   b6114:	68c3      	ldr	r3, [r0, #12]
   b6116:	b91b      	cbnz	r3, b6120 <_ZNK9IPAddresscvbEv+0x28>
   b6118:	6900      	ldr	r0, [r0, #16]
   b611a:	e7f1      	b.n	b6100 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b611c:	2000      	movs	r0, #0
   b611e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6120:	2001      	movs	r0, #1
}
   b6122:	4770      	bx	lr

000b6124 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6124:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6126:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b612a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b612e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6132:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6136:	2304      	movs	r3, #4
   b6138:	6041      	str	r1, [r0, #4]
   b613a:	7503      	strb	r3, [r0, #20]
}
   b613c:	bd10      	pop	{r4, pc}
	...

000b6140 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6140:	b507      	push	{r0, r1, r2, lr}
   b6142:	4b06      	ldr	r3, [pc, #24]	; (b615c <_ZN9IPAddressC1EPKh+0x1c>)
   b6144:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6146:	78cb      	ldrb	r3, [r1, #3]
   b6148:	9300      	str	r3, [sp, #0]
   b614a:	788b      	ldrb	r3, [r1, #2]
   b614c:	784a      	ldrb	r2, [r1, #1]
   b614e:	7809      	ldrb	r1, [r1, #0]
   b6150:	f7ff ffe8 	bl	b6124 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6154:	b003      	add	sp, #12
   b6156:	f85d fb04 	ldr.w	pc, [sp], #4
   b615a:	bf00      	nop
   b615c:	000b7c10 	.word	0x000b7c10

000b6160 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6160:	7441      	strb	r1, [r0, #17]
}
   b6162:	4770      	bx	lr

000b6164 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6164:	4770      	bx	lr

000b6166 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6166:	4770      	bx	lr

000b6168 <_ZN9USBSerial4readEv>:
{
   b6168:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b616a:	2100      	movs	r1, #0
   b616c:	7c00      	ldrb	r0, [r0, #16]
   b616e:	f7ff fa97 	bl	b56a0 <HAL_USB_USART_Receive_Data>
}
   b6172:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6176:	bd08      	pop	{r3, pc}

000b6178 <_ZN9USBSerial4peekEv>:
{
   b6178:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b617a:	2101      	movs	r1, #1
   b617c:	7c00      	ldrb	r0, [r0, #16]
   b617e:	f7ff fa8f 	bl	b56a0 <HAL_USB_USART_Receive_Data>
}
   b6182:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6186:	bd08      	pop	{r3, pc}

000b6188 <_ZN9USBSerial17availableForWriteEv>:
{
   b6188:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b618a:	7c00      	ldrb	r0, [r0, #16]
   b618c:	f7ff fa80 	bl	b5690 <HAL_USB_USART_Available_Data_For_Write>
}
   b6190:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6194:	bd08      	pop	{r3, pc}

000b6196 <_ZN9USBSerial9availableEv>:
{
   b6196:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6198:	7c00      	ldrb	r0, [r0, #16]
   b619a:	f7ff fa71 	bl	b5680 <HAL_USB_USART_Available_Data>
}
   b619e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b61a2:	bd08      	pop	{r3, pc}

000b61a4 <_ZN9USBSerial5writeEh>:
{
   b61a4:	b513      	push	{r0, r1, r4, lr}
   b61a6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b61a8:	7c00      	ldrb	r0, [r0, #16]
{
   b61aa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b61ac:	f7ff fa70 	bl	b5690 <HAL_USB_USART_Available_Data_For_Write>
   b61b0:	2800      	cmp	r0, #0
   b61b2:	9901      	ldr	r1, [sp, #4]
   b61b4:	dc01      	bgt.n	b61ba <_ZN9USBSerial5writeEh+0x16>
   b61b6:	7c60      	ldrb	r0, [r4, #17]
   b61b8:	b120      	cbz	r0, b61c4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b61ba:	7c20      	ldrb	r0, [r4, #16]
   b61bc:	f7ff fa78 	bl	b56b0 <HAL_USB_USART_Send_Data>
   b61c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b61c4:	b002      	add	sp, #8
   b61c6:	bd10      	pop	{r4, pc}

000b61c8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b61c8:	7c00      	ldrb	r0, [r0, #16]
   b61ca:	f7ff ba79 	b.w	b56c0 <HAL_USB_USART_Flush_Data>

000b61ce <_ZN9USBSerialD0Ev>:
   b61ce:	b510      	push	{r4, lr}
   b61d0:	2114      	movs	r1, #20
   b61d2:	4604      	mov	r4, r0
   b61d4:	f7fd ff61 	bl	b409a <_ZdlPvj>
   b61d8:	4620      	mov	r0, r4
   b61da:	bd10      	pop	{r4, pc}

000b61dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b61dc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b61de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b61e2:	4604      	mov	r4, r0
   b61e4:	4608      	mov	r0, r1
   b61e6:	2100      	movs	r1, #0
   b61e8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b61ec:	4b04      	ldr	r3, [pc, #16]	; (b6200 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b61ee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b61f0:	2301      	movs	r3, #1
  _serial = serial;
   b61f2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b61f4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b61f6:	4611      	mov	r1, r2
   b61f8:	f7ff fa32 	bl	b5660 <HAL_USB_USART_Init>
}
   b61fc:	4620      	mov	r0, r4
   b61fe:	bd10      	pop	{r4, pc}
   b6200:	000b7c24 	.word	0x000b7c24

000b6204 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6204:	7c00      	ldrb	r0, [r0, #16]
   b6206:	2200      	movs	r2, #0
   b6208:	f7ff ba32 	b.w	b5670 <HAL_USB_USART_Begin>

000b620c <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b620c:	7c00      	ldrb	r0, [r0, #16]
   b620e:	f7ff ba5f 	b.w	b56d0 <HAL_USB_USART_Is_Connected>

000b6212 <_Z19acquireSerialBufferv>:
{
   b6212:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6214:	2214      	movs	r2, #20
{
   b6216:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6218:	2100      	movs	r1, #0
   b621a:	f000 fed9 	bl	b6fd0 <memset>
}
   b621e:	4620      	mov	r0, r4
   b6220:	bd10      	pop	{r4, pc}
	...

000b6224 <_Z16_fetch_usbserialv>:
{
   b6224:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6226:	4c0f      	ldr	r4, [pc, #60]	; (b6264 <_Z16_fetch_usbserialv+0x40>)
{
   b6228:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b622a:	a803      	add	r0, sp, #12
   b622c:	f7ff fff1 	bl	b6212 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6230:	7821      	ldrb	r1, [r4, #0]
   b6232:	f3bf 8f5b 	dmb	ish
   b6236:	f011 0101 	ands.w	r1, r1, #1
   b623a:	d10f      	bne.n	b625c <_Z16_fetch_usbserialv+0x38>
   b623c:	4620      	mov	r0, r4
   b623e:	9101      	str	r1, [sp, #4]
   b6240:	f7fd ff3a 	bl	b40b8 <__cxa_guard_acquire>
   b6244:	9901      	ldr	r1, [sp, #4]
   b6246:	b148      	cbz	r0, b625c <_Z16_fetch_usbserialv+0x38>
   b6248:	aa03      	add	r2, sp, #12
   b624a:	4807      	ldr	r0, [pc, #28]	; (b6268 <_Z16_fetch_usbserialv+0x44>)
   b624c:	f7ff ffc6 	bl	b61dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6250:	4620      	mov	r0, r4
   b6252:	f7fd ff36 	bl	b40c2 <__cxa_guard_release>
   b6256:	4805      	ldr	r0, [pc, #20]	; (b626c <_Z16_fetch_usbserialv+0x48>)
   b6258:	f000 fea6 	bl	b6fa8 <atexit>
	return _usbserial;
}
   b625c:	4802      	ldr	r0, [pc, #8]	; (b6268 <_Z16_fetch_usbserialv+0x44>)
   b625e:	b008      	add	sp, #32
   b6260:	bd10      	pop	{r4, pc}
   b6262:	bf00      	nop
   b6264:	2003e700 	.word	0x2003e700
   b6268:	2003e704 	.word	0x2003e704
   b626c:	000b6165 	.word	0x000b6165

000b6270 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6270:	4770      	bx	lr

000b6272 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6272:	7441      	strb	r1, [r0, #17]
}
   b6274:	4770      	bx	lr

000b6276 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6276:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6278:	7c00      	ldrb	r0, [r0, #16]
   b627a:	f7ff f911 	bl	b54a0 <hal_usart_available_data_for_write>
}
   b627e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6282:	bd08      	pop	{r3, pc}

000b6284 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6284:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6286:	7c00      	ldrb	r0, [r0, #16]
   b6288:	f7ff f8e2 	bl	b5450 <hal_usart_available>
}
   b628c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6290:	bd08      	pop	{r3, pc}

000b6292 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6292:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6294:	7c00      	ldrb	r0, [r0, #16]
   b6296:	f7ff f8eb 	bl	b5470 <hal_usart_peek>
}
   b629a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b629e:	bd08      	pop	{r3, pc}

000b62a0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b62a0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b62a2:	7c00      	ldrb	r0, [r0, #16]
   b62a4:	f7ff f8dc 	bl	b5460 <hal_usart_read>
}
   b62a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b62ac:	bd08      	pop	{r3, pc}

000b62ae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b62ae:	7c00      	ldrb	r0, [r0, #16]
   b62b0:	f7ff b8e6 	b.w	b5480 <hal_usart_flush>

000b62b4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b62b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b62b6:	7c45      	ldrb	r5, [r0, #17]
{
   b62b8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b62ba:	b12d      	cbz	r5, b62c8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b62bc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b62be:	b003      	add	sp, #12
   b62c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b62c4:	f7ff b8bc 	b.w	b5440 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b62c8:	7c00      	ldrb	r0, [r0, #16]
   b62ca:	9101      	str	r1, [sp, #4]
   b62cc:	f7ff f8e8 	bl	b54a0 <hal_usart_available_data_for_write>
   b62d0:	2800      	cmp	r0, #0
   b62d2:	9901      	ldr	r1, [sp, #4]
   b62d4:	dcf2      	bgt.n	b62bc <_ZN11USARTSerial5writeEh+0x8>
}
   b62d6:	4628      	mov	r0, r5
   b62d8:	b003      	add	sp, #12
   b62da:	bd30      	pop	{r4, r5, pc}

000b62dc <_ZN11USARTSerialD0Ev>:
   b62dc:	b510      	push	{r4, lr}
   b62de:	2114      	movs	r1, #20
   b62e0:	4604      	mov	r4, r0
   b62e2:	f7fd feda 	bl	b409a <_ZdlPvj>
   b62e6:	4620      	mov	r0, r4
   b62e8:	bd10      	pop	{r4, pc}
	...

000b62ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b62ec:	b510      	push	{r4, lr}
   b62ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b62f2:	4604      	mov	r4, r0
   b62f4:	4608      	mov	r0, r1
   b62f6:	4611      	mov	r1, r2
   b62f8:	2200      	movs	r2, #0
   b62fa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b62fe:	4b04      	ldr	r3, [pc, #16]	; (b6310 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6300:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6302:	2301      	movs	r3, #1
  _serial = serial;
   b6304:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6306:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6308:	f7ff f8d2 	bl	b54b0 <hal_usart_init_ex>
}
   b630c:	4620      	mov	r0, r4
   b630e:	bd10      	pop	{r4, pc}
   b6310:	000b7c54 	.word	0x000b7c54

000b6314 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6314:	4770      	bx	lr

000b6316 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6318:	4606      	mov	r6, r0
   b631a:	4615      	mov	r5, r2
   b631c:	460c      	mov	r4, r1
   b631e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6320:	42bc      	cmp	r4, r7
   b6322:	d006      	beq.n	b6332 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6324:	6833      	ldr	r3, [r6, #0]
   b6326:	f814 1b01 	ldrb.w	r1, [r4], #1
   b632a:	689b      	ldr	r3, [r3, #8]
   b632c:	4630      	mov	r0, r6
   b632e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6330:	e7f6      	b.n	b6320 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6332:	4628      	mov	r0, r5
   b6334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6336 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6336:	7c00      	ldrb	r0, [r0, #16]
   b6338:	2200      	movs	r2, #0
   b633a:	f7ff b8d9 	b.w	b54f0 <hal_i2c_write>

000b633e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b633e:	7c00      	ldrb	r0, [r0, #16]
   b6340:	2100      	movs	r1, #0
   b6342:	f7ff b8dd 	b.w	b5500 <hal_i2c_available>

000b6346 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6346:	7c00      	ldrb	r0, [r0, #16]
   b6348:	2100      	movs	r1, #0
   b634a:	f7ff b8e1 	b.w	b5510 <hal_i2c_read>

000b634e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b634e:	7c00      	ldrb	r0, [r0, #16]
   b6350:	2100      	movs	r1, #0
   b6352:	f7ff b8e5 	b.w	b5520 <hal_i2c_peek>

000b6356 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6356:	7c00      	ldrb	r0, [r0, #16]
   b6358:	2100      	movs	r1, #0
   b635a:	f7ff b8e9 	b.w	b5530 <hal_i2c_flush>

000b635e <_ZN7TwoWireD0Ev>:
   b635e:	b510      	push	{r4, lr}
   b6360:	2114      	movs	r1, #20
   b6362:	4604      	mov	r4, r0
   b6364:	f7fd fe99 	bl	b409a <_ZdlPvj>
   b6368:	4620      	mov	r0, r4
   b636a:	bd10      	pop	{r4, pc}

000b636c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b636c:	b538      	push	{r3, r4, r5, lr}
   b636e:	4604      	mov	r4, r0
   b6370:	4615      	mov	r5, r2
   b6372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6376:	2200      	movs	r2, #0
   b6378:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b637c:	4b09      	ldr	r3, [pc, #36]	; (b63a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b637e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6380:	4608      	mov	r0, r1
   b6382:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6384:	4629      	mov	r1, r5
   b6386:	f7ff f8e3 	bl	b5550 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b638a:	30bf      	adds	r0, #191	; 0xbf
   b638c:	d108      	bne.n	b63a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b638e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6390:	07db      	lsls	r3, r3, #31
   b6392:	d505      	bpl.n	b63a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6394:	6868      	ldr	r0, [r5, #4]
   b6396:	f7ff fa57 	bl	b5848 <free>
    free(conf.tx_buffer);
   b639a:	68e8      	ldr	r0, [r5, #12]
   b639c:	f7ff fa54 	bl	b5848 <free>
}
   b63a0:	4620      	mov	r0, r4
   b63a2:	bd38      	pop	{r3, r4, r5, pc}
   b63a4:	000b7c84 	.word	0x000b7c84

000b63a8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b63a8:	2300      	movs	r3, #0
   b63aa:	7c00      	ldrb	r0, [r0, #16]
   b63ac:	461a      	mov	r2, r3
   b63ae:	4619      	mov	r1, r3
   b63b0:	f7ff b886 	b.w	b54c0 <hal_i2c_begin>

000b63b4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b63b4:	7c00      	ldrb	r0, [r0, #16]
   b63b6:	2200      	movs	r2, #0
   b63b8:	f7ff b88a 	b.w	b54d0 <hal_i2c_begin_transmission>

000b63bc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b63bc:	b2c9      	uxtb	r1, r1
   b63be:	f7ff bff9 	b.w	b63b4 <_ZN7TwoWire17beginTransmissionEh>

000b63c2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b63c2:	7c00      	ldrb	r0, [r0, #16]
   b63c4:	2200      	movs	r2, #0
   b63c6:	f7ff b88b 	b.w	b54e0 <hal_i2c_end_transmission>

000b63ca <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b63ca:	2101      	movs	r1, #1
   b63cc:	f7ff bff9 	b.w	b63c2 <_ZN7TwoWire15endTransmissionEh>

000b63d0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b63d0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b63d2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b63d4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b63d8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b63da:	2201      	movs	r2, #1
   b63dc:	f04f 33ff 	mov.w	r3, #4294967295
   b63e0:	f10d 0107 	add.w	r1, sp, #7
   b63e4:	47a0      	blx	r4
}
   b63e6:	b002      	add	sp, #8
   b63e8:	bd10      	pop	{r4, pc}

000b63ea <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b63ea:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b63ec:	6803      	ldr	r3, [r0, #0]
   b63ee:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b63f0:	f04f 33ff 	mov.w	r3, #4294967295
   b63f4:	46a4      	mov	ip, r4
}
   b63f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b63fa:	4760      	bx	ip

000b63fc <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b63fc:	b513      	push	{r0, r1, r4, lr}
   b63fe:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6400:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6402:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6406:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6408:	f10d 0107 	add.w	r1, sp, #7
   b640c:	2201      	movs	r2, #1
   b640e:	47a0      	blx	r4
}
   b6410:	b002      	add	sp, #8
   b6412:	bd10      	pop	{r4, pc}

000b6414 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6414:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6416:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6418:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b641c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6420:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6422:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6424:	d008      	beq.n	b6438 <_ZN9TCPClient4readEv+0x24>
   b6426:	6963      	ldr	r3, [r4, #20]
   b6428:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b642c:	1c51      	adds	r1, r2, #1
   b642e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6432:	4413      	add	r3, r2
   b6434:	7918      	ldrb	r0, [r3, #4]
}
   b6436:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6438:	6803      	ldr	r3, [r0, #0]
   b643a:	691b      	ldr	r3, [r3, #16]
   b643c:	4798      	blx	r3
   b643e:	2800      	cmp	r0, #0
   b6440:	d1f1      	bne.n	b6426 <_ZN9TCPClient4readEv+0x12>
   b6442:	f04f 30ff 	mov.w	r0, #4294967295
   b6446:	e7f6      	b.n	b6436 <_ZN9TCPClient4readEv+0x22>

000b6448 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6448:	4770      	bx	lr

000b644a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b644a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b644c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b644e:	43c0      	mvns	r0, r0
   b6450:	0fc0      	lsrs	r0, r0, #31
   b6452:	4770      	bx	lr

000b6454 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6454:	4770      	bx	lr
	...

000b6458 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6458:	4b06      	ldr	r3, [pc, #24]	; (b6474 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b645a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b645c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b645e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6462:	d005      	beq.n	b6470 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6464:	4608      	mov	r0, r1
   b6466:	f000 fc8d 	bl	b6d84 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b646a:	2800      	cmp	r0, #0
   b646c:	bf08      	it	eq
   b646e:	2400      	moveq	r4, #0
      }
   b6470:	4620      	mov	r0, r4
   b6472:	bd10      	pop	{r4, pc}
   b6474:	000b7be0 	.word	0x000b7be0

000b6478 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6478:	b510      	push	{r4, lr}
   b647a:	21ac      	movs	r1, #172	; 0xac
   b647c:	4604      	mov	r4, r0
   b647e:	f7fd fe0c 	bl	b409a <_ZdlPvj>
   b6482:	4620      	mov	r0, r4
   b6484:	bd10      	pop	{r4, pc}

000b6486 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6486:	21ac      	movs	r1, #172	; 0xac
   b6488:	f7fd be07 	b.w	b409a <_ZdlPvj>

000b648c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b648c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6490:	f04f 0800 	mov.w	r8, #0
   b6494:	b086      	sub	sp, #24
   b6496:	461c      	mov	r4, r3
   b6498:	f8c0 8004 	str.w	r8, [r0, #4]
   b649c:	4605      	mov	r5, r0
   b649e:	460e      	mov	r6, r1
   b64a0:	4617      	mov	r7, r2
    struct timeval tv = {};
   b64a2:	4641      	mov	r1, r8
   b64a4:	2210      	movs	r2, #16
   b64a6:	a802      	add	r0, sp, #8
   b64a8:	f000 fd92 	bl	b6fd0 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b64ac:	1c63      	adds	r3, r4, #1
   b64ae:	d009      	beq.n	b64c4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b64b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b64b4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b64b8:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b64bc:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b64c0:	435c      	muls	r4, r3
   b64c2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b64c4:	6968      	ldr	r0, [r5, #20]
   b64c6:	2310      	movs	r3, #16
   b64c8:	9300      	str	r3, [sp, #0]
   b64ca:	6800      	ldr	r0, [r0, #0]
   b64cc:	ab02      	add	r3, sp, #8
   b64ce:	f241 0205 	movw	r2, #4101	; 0x1005
   b64d2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b64d6:	f7ff f843 	bl	b5560 <sock_setsockopt>
    if (ret < 0) {
   b64da:	2800      	cmp	r0, #0
   b64dc:	da07      	bge.n	b64ee <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b64de:	f7ff f9cb 	bl	b5878 <__errno>
   b64e2:	6803      	ldr	r3, [r0, #0]
   b64e4:	606b      	str	r3, [r5, #4]
        return 0;
   b64e6:	2000      	movs	r0, #0
}
   b64e8:	b006      	add	sp, #24
   b64ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b64ee:	6968      	ldr	r0, [r5, #20]
   b64f0:	2300      	movs	r3, #0
   b64f2:	6800      	ldr	r0, [r0, #0]
   b64f4:	463a      	mov	r2, r7
   b64f6:	4631      	mov	r1, r6
   b64f8:	f7ff f852 	bl	b55a0 <sock_send>
    if (ret < 0) {
   b64fc:	1e03      	subs	r3, r0, #0
   b64fe:	dbee      	blt.n	b64de <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6500:	4618      	mov	r0, r3
   b6502:	e7f1      	b.n	b64e8 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6504 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6504:	b530      	push	{r4, r5, lr}
   b6506:	b087      	sub	sp, #28
   b6508:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b650a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b650c:	4668      	mov	r0, sp
   b650e:	f7ff fe17 	bl	b6140 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6514:	3404      	adds	r4, #4
   b6516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6518:	682b      	ldr	r3, [r5, #0]
   b651a:	7023      	strb	r3, [r4, #0]
    }
   b651c:	b007      	add	sp, #28
   b651e:	bd30      	pop	{r4, r5, pc}

000b6520 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6520:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b6522:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b6524:	4b05      	ldr	r3, [pc, #20]	; (b653c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b6526:	4604      	mov	r4, r0
   b6528:	358c      	adds	r5, #140	; 0x8c
   b652a:	f844 3b04 	str.w	r3, [r4], #4
   b652e:	4606      	mov	r6, r0
   b6530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6534:	682b      	ldr	r3, [r5, #0]
   b6536:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6538:	4630      	mov	r0, r6
   b653a:	bd70      	pop	{r4, r5, r6, pc}
   b653c:	000b7c10 	.word	0x000b7c10

000b6540 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6544:	4698      	mov	r8, r3
    stop();
   b6546:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6548:	b093      	sub	sp, #76	; 0x4c
   b654a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b654c:	2400      	movs	r4, #0
    stop();
   b654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6550:	4606      	mov	r6, r0
   b6552:	4617      	mov	r7, r2
    stop();
   b6554:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6556:	4628      	mov	r0, r5
   b6558:	466b      	mov	r3, sp
   b655a:	4622      	mov	r2, r4
   b655c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b655e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6560:	f7fe fefe 	bl	b5360 <netdb_getaddrinfo>
   b6564:	4605      	mov	r5, r0
   b6566:	2800      	cmp	r0, #0
   b6568:	d163      	bne.n	b6632 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b656a:	9b00      	ldr	r3, [sp, #0]
   b656c:	2b00      	cmp	r3, #0
   b656e:	d04b      	beq.n	b6608 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6570:	695b      	ldr	r3, [r3, #20]
   b6572:	2b00      	cmp	r3, #0
   b6574:	d048      	beq.n	b6608 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6576:	a806      	add	r0, sp, #24
   b6578:	f7ff fd9e 	bl	b60b8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b657c:	9b00      	ldr	r3, [sp, #0]
   b657e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6580:	7863      	ldrb	r3, [r4, #1]
   b6582:	2b02      	cmp	r3, #2
   b6584:	d104      	bne.n	b6590 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6586:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6588:	a806      	add	r0, sp, #24
   b658a:	f7ff ffbb 	bl	b6504 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b658e:	e026      	b.n	b65de <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6590:	2b0a      	cmp	r3, #10
   b6592:	d124      	bne.n	b65de <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6594:	2211      	movs	r2, #17
   b6596:	4629      	mov	r1, r5
   b6598:	a801      	add	r0, sp, #4
   b659a:	f000 fd19 	bl	b6fd0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b659e:	68a3      	ldr	r3, [r4, #8]
   b65a0:	2b00      	cmp	r3, #0
   b65a2:	d038      	beq.n	b6616 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b65a4:	f104 0308 	add.w	r3, r4, #8
   b65a8:	f10d 0c04 	add.w	ip, sp, #4
   b65ac:	3418      	adds	r4, #24
   b65ae:	6818      	ldr	r0, [r3, #0]
   b65b0:	6859      	ldr	r1, [r3, #4]
   b65b2:	4662      	mov	r2, ip
   b65b4:	c203      	stmia	r2!, {r0, r1}
   b65b6:	3308      	adds	r3, #8
   b65b8:	42a3      	cmp	r3, r4
   b65ba:	4694      	mov	ip, r2
   b65bc:	d1f7      	bne.n	b65ae <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b65be:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b65c0:	a901      	add	r1, sp, #4
   b65c2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b65c4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b65c8:	f7ff fd84 	bl	b60d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b65cc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b65d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b65d4:	ac07      	add	r4, sp, #28
   b65d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b65d8:	f8dc 3000 	ldr.w	r3, [ip]
   b65dc:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b65de:	a806      	add	r0, sp, #24
   b65e0:	f7ff fd8a 	bl	b60f8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b65e4:	b180      	cbz	r0, b6608 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b65e6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b65e8:	ad07      	add	r5, sp, #28
   b65ea:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b65ee:	4b12      	ldr	r3, [pc, #72]	; (b6638 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b65f0:	930c      	str	r3, [sp, #48]	; 0x30
   b65f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b65f4:	ac0d      	add	r4, sp, #52	; 0x34
   b65f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b65f8:	682b      	ldr	r3, [r5, #0]
   b65fa:	7023      	strb	r3, [r4, #0]
   b65fc:	463a      	mov	r2, r7
   b65fe:	4643      	mov	r3, r8
   b6600:	a90c      	add	r1, sp, #48	; 0x30
   b6602:	4630      	mov	r0, r6
   b6604:	47c8      	blx	r9
   b6606:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6608:	9800      	ldr	r0, [sp, #0]
   b660a:	f7fe fea1 	bl	b5350 <netdb_freeaddrinfo>
}
   b660e:	4628      	mov	r0, r5
   b6610:	b013      	add	sp, #76	; 0x4c
   b6612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6616:	68e3      	ldr	r3, [r4, #12]
   b6618:	2b00      	cmp	r3, #0
   b661a:	d1c3      	bne.n	b65a4 <_ZN9TCPClient7connectEPKctm+0x64>
   b661c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6620:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b6624:	f7fe fefc 	bl	b5420 <inet_htonl>
   b6628:	4581      	cmp	r9, r0
   b662a:	d1bb      	bne.n	b65a4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b662c:	f104 0114 	add.w	r1, r4, #20
   b6630:	e7aa      	b.n	b6588 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6632:	4625      	mov	r5, r4
   b6634:	e7e8      	b.n	b6608 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6636:	bf00      	nop
   b6638:	000b7c10 	.word	0x000b7c10

000b663c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b663c:	b538      	push	{r3, r4, r5, lr}
   b663e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6640:	681a      	ldr	r2, [r3, #0]
   b6642:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b6644:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b6646:	da10      	bge.n	b666a <_ZN9TCPClient9connectedEv+0x2e>
   b6648:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b664c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6650:	429a      	cmp	r2, r3
   b6652:	d10a      	bne.n	b666a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b6654:	6803      	ldr	r3, [r0, #0]
   b6656:	691b      	ldr	r3, [r3, #16]
   b6658:	4798      	blx	r3
        if (!rv) {
   b665a:	4604      	mov	r4, r0
   b665c:	b928      	cbnz	r0, b666a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b665e:	682b      	ldr	r3, [r5, #0]
   b6660:	4628      	mov	r0, r5
   b6662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6664:	4798      	blx	r3
        rv = available();
   b6666:	4620      	mov	r0, r4
}
   b6668:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b666a:	2001      	movs	r0, #1
   b666c:	e7fc      	b.n	b6668 <_ZN9TCPClient9connectedEv+0x2c>

000b666e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b666e:	b510      	push	{r4, lr}
   b6670:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6672:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6676:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b667a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b667c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b667e:	d005      	beq.n	b668c <_ZN9TCPClient4peekEv+0x1e>
   b6680:	6963      	ldr	r3, [r4, #20]
   b6682:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6686:	4413      	add	r3, r2
   b6688:	7918      	ldrb	r0, [r3, #4]
}
   b668a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b668c:	6803      	ldr	r3, [r0, #0]
   b668e:	691b      	ldr	r3, [r3, #16]
   b6690:	4798      	blx	r3
   b6692:	2800      	cmp	r0, #0
   b6694:	d1f4      	bne.n	b6680 <_ZN9TCPClient4peekEv+0x12>
   b6696:	f04f 30ff 	mov.w	r0, #4294967295
   b669a:	e7f6      	b.n	b668a <_ZN9TCPClient4peekEv+0x1c>

000b669c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b669e:	6943      	ldr	r3, [r0, #20]
   b66a0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b66a2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b66a6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b66aa:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b66ac:	4605      	mov	r5, r0
   b66ae:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b66b0:	d016      	beq.n	b66e0 <_ZN9TCPClient4readEPhj+0x44>
   b66b2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b66b4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b66b8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b66bc:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b66be:	42bc      	cmp	r4, r7
   b66c0:	bf28      	it	cs
   b66c2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b66c4:	3304      	adds	r3, #4
   b66c6:	4622      	mov	r2, r4
   b66c8:	4419      	add	r1, r3
   b66ca:	4630      	mov	r0, r6
   b66cc:	f000 fc72 	bl	b6fb4 <memcpy>
   b66d0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b66d2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b66d6:	4423      	add	r3, r4
   b66d8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b66dc:	4620      	mov	r0, r4
   b66de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b66e0:	6803      	ldr	r3, [r0, #0]
   b66e2:	691b      	ldr	r3, [r3, #16]
   b66e4:	4798      	blx	r3
   b66e6:	2800      	cmp	r0, #0
   b66e8:	d1e3      	bne.n	b66b2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b66ea:	f04f 34ff 	mov.w	r4, #4294967295
   b66ee:	e7f5      	b.n	b66dc <_ZN9TCPClient4readEPhj+0x40>

000b66f0 <_ZN9TCPClient12flush_bufferEv>:
   b66f0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b66f2:	2300      	movs	r3, #0
   b66f4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b66f8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b66fa:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b66fe:	4770      	bx	lr

000b6700 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6704:	461f      	mov	r7, r3
    stop();
   b6706:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6708:	460c      	mov	r4, r1
    stop();
   b670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b670c:	b08a      	sub	sp, #40	; 0x28
   b670e:	4605      	mov	r5, r0
   b6710:	4616      	mov	r6, r2
    stop();
   b6712:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b6714:	7d23      	ldrb	r3, [r4, #20]
   b6716:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b671a:	2b04      	cmp	r3, #4
   b671c:	bf0c      	ite	eq
   b671e:	2002      	moveq	r0, #2
   b6720:	200a      	movne	r0, #10
   b6722:	2206      	movs	r2, #6
   b6724:	2101      	movs	r1, #1
   b6726:	f7fe ff43 	bl	b55b0 <sock_socket>
   b672a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b672e:	696b      	ldr	r3, [r5, #20]
   b6730:	681b      	ldr	r3, [r3, #0]
   b6732:	2b00      	cmp	r3, #0
   b6734:	da08      	bge.n	b6748 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b6736:	682b      	ldr	r3, [r5, #0]
   b6738:	4628      	mov	r0, r5
   b673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b673c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b673e:	4798      	blx	r3
}
   b6740:	4620      	mov	r0, r4
   b6742:	b00a      	add	sp, #40	; 0x28
   b6744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b6748:	4628      	mov	r0, r5
   b674a:	f7ff ffd1 	bl	b66f0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b674e:	b1b7      	cbz	r7, b677e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b6750:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6752:	a903      	add	r1, sp, #12
   b6754:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b6756:	9303      	str	r3, [sp, #12]
   b6758:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b675c:	f7fe fe28 	bl	b53b0 <if_index_to_name>
   b6760:	2800      	cmp	r0, #0
   b6762:	d1e8      	bne.n	b6736 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b6764:	6968      	ldr	r0, [r5, #20]
   b6766:	2306      	movs	r3, #6
   b6768:	9300      	str	r3, [sp, #0]
   b676a:	6800      	ldr	r0, [r0, #0]
   b676c:	ab03      	add	r3, sp, #12
   b676e:	f241 020b 	movw	r2, #4107	; 0x100b
   b6772:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6776:	f7fe fef3 	bl	b5560 <sock_setsockopt>
   b677a:	2800      	cmp	r0, #0
   b677c:	d1db      	bne.n	b6736 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b677e:	221c      	movs	r2, #28
   b6780:	2100      	movs	r1, #0
   b6782:	a803      	add	r0, sp, #12
   b6784:	f000 fc24 	bl	b6fd0 <memset>
    if (ip.version() == 4) {
   b6788:	7d23      	ldrb	r3, [r4, #20]
   b678a:	2b04      	cmp	r3, #4
   b678c:	d11d      	bne.n	b67ca <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b678e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b6792:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b6794:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b6798:	f7fe fe4a 	bl	b5430 <inet_htons>
   b679c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b67a0:	6860      	ldr	r0, [r4, #4]
   b67a2:	f7fe fe3d 	bl	b5420 <inet_htonl>
   b67a6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b67a8:	696b      	ldr	r3, [r5, #20]
   b67aa:	221c      	movs	r2, #28
   b67ac:	6818      	ldr	r0, [r3, #0]
   b67ae:	a903      	add	r1, sp, #12
   b67b0:	f7fe fee6 	bl	b5580 <sock_connect>
   b67b4:	2800      	cmp	r0, #0
   b67b6:	d1be      	bne.n	b6736 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b67b8:	3404      	adds	r4, #4
   b67ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b67bc:	696d      	ldr	r5, [r5, #20]
   b67be:	358c      	adds	r5, #140	; 0x8c
   b67c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b67c2:	6823      	ldr	r3, [r4, #0]
   b67c4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b67c6:	2401      	movs	r4, #1
   b67c8:	e7ba      	b.n	b6740 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b67ca:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b67ce:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b67d0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b67d4:	f7fe fe2c 	bl	b5430 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b67d8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b67da:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b67de:	1d23      	adds	r3, r4, #4
   b67e0:	f104 0714 	add.w	r7, r4, #20
   b67e4:	6818      	ldr	r0, [r3, #0]
   b67e6:	6859      	ldr	r1, [r3, #4]
   b67e8:	4632      	mov	r2, r6
   b67ea:	c203      	stmia	r2!, {r0, r1}
   b67ec:	3308      	adds	r3, #8
   b67ee:	42bb      	cmp	r3, r7
   b67f0:	4616      	mov	r6, r2
   b67f2:	d1f7      	bne.n	b67e4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b67f4:	e7d8      	b.n	b67a8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b67f8 <_ZN9TCPClient9availableEv>:
{
   b67f8:	b530      	push	{r4, r5, lr}
   b67fa:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b67fc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b6800:	b08b      	sub	sp, #44	; 0x2c
   b6802:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b6804:	b12b      	cbz	r3, b6812 <_ZN9TCPClient9availableEv+0x1a>
   b6806:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b680a:	429a      	cmp	r2, r3
   b680c:	d101      	bne.n	b6812 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b680e:	f7ff ff6f 	bl	b66f0 <_ZN9TCPClient12flush_bufferEv>
   b6812:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b6814:	6808      	ldr	r0, [r1, #0]
   b6816:	2800      	cmp	r0, #0
   b6818:	db18      	blt.n	b684c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b681a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b681e:	2d7f      	cmp	r5, #127	; 0x7f
   b6820:	d814      	bhi.n	b684c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b6822:	3104      	adds	r1, #4
   b6824:	2308      	movs	r3, #8
   b6826:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b682a:	4429      	add	r1, r5
   b682c:	f7fe feb0 	bl	b5590 <sock_recv>
            if (ret > 0) {
   b6830:	2800      	cmp	r0, #0
   b6832:	dd13      	ble.n	b685c <_ZN9TCPClient9availableEv+0x64>
   b6834:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b6836:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b683a:	b90a      	cbnz	r2, b6840 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b683c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b6840:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b6842:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6846:	4410      	add	r0, r2
   b6848:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b684c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b684e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b6852:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b6856:	1ac0      	subs	r0, r0, r3
   b6858:	b00b      	add	sp, #44	; 0x2c
   b685a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b685c:	f7ff f80c 	bl	b5878 <__errno>
   b6860:	6803      	ldr	r3, [r0, #0]
   b6862:	2b0b      	cmp	r3, #11
   b6864:	d0f2      	beq.n	b684c <_ZN9TCPClient9availableEv+0x54>
   b6866:	f7ff f807 	bl	b5878 <__errno>
   b686a:	6803      	ldr	r3, [r0, #0]
   b686c:	2b0b      	cmp	r3, #11
   b686e:	d0ed      	beq.n	b684c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6870:	2320      	movs	r3, #32
   b6872:	2500      	movs	r5, #0
   b6874:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6878:	f7fe fffe 	bl	b5878 <__errno>
   b687c:	6803      	ldr	r3, [r0, #0]
   b687e:	9301      	str	r3, [sp, #4]
   b6880:	4b08      	ldr	r3, [pc, #32]	; (b68a4 <_ZN9TCPClient9availableEv+0xac>)
   b6882:	4909      	ldr	r1, [pc, #36]	; (b68a8 <_ZN9TCPClient9availableEv+0xb0>)
   b6884:	9300      	str	r3, [sp, #0]
   b6886:	aa02      	add	r2, sp, #8
   b6888:	462b      	mov	r3, r5
   b688a:	2032      	movs	r0, #50	; 0x32
   b688c:	f7fe ff30 	bl	b56f0 <log_message>
                    sock_close(d_->sock);
   b6890:	6963      	ldr	r3, [r4, #20]
   b6892:	6818      	ldr	r0, [r3, #0]
   b6894:	f7fe fe6c 	bl	b5570 <sock_close>
   b6898:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b689a:	f04f 32ff 	mov.w	r2, #4294967295
   b689e:	601a      	str	r2, [r3, #0]
   b68a0:	e7d4      	b.n	b684c <_ZN9TCPClient9availableEv+0x54>
   b68a2:	bf00      	nop
   b68a4:	000b7cab 	.word	0x000b7cab
   b68a8:	000b7ca4 	.word	0x000b7ca4

000b68ac <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b68ac:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b68ae:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b68b0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b68b2:	6818      	ldr	r0, [r3, #0]
   b68b4:	2800      	cmp	r0, #0
   b68b6:	db01      	blt.n	b68bc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b68b8:	f7fe fe5a 	bl	b5570 <sock_close>
   b68bc:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b68be:	f04f 32ff 	mov.w	r2, #4294967295
   b68c2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b68c4:	6960      	ldr	r0, [r4, #20]
   b68c6:	2211      	movs	r2, #17
   b68c8:	2100      	movs	r1, #0
   b68ca:	308c      	adds	r0, #140	; 0x8c
   b68cc:	f000 fb80 	bl	b6fd0 <memset>
    flush_buffer();
   b68d0:	4620      	mov	r0, r4
}
   b68d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b68d6:	f7ff bf0b 	b.w	b66f0 <_ZN9TCPClient12flush_bufferEv>

000b68da <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b68da:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b68dc:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b68de:	4604      	mov	r4, r0
          total(0) {
   b68e0:	6001      	str	r1, [r0, #0]
   b68e2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b68e6:	3088      	adds	r0, #136	; 0x88
   b68e8:	f7ff fbe6 	bl	b60b8 <_ZN9IPAddressC1Ev>
}
   b68ec:	4620      	mov	r0, r4
   b68ee:	bd10      	pop	{r4, pc}

000b68f0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b68f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b68f2:	2300      	movs	r3, #0
   b68f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b68f8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b68fc:	4a0e      	ldr	r2, [pc, #56]	; (b6938 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b68fe:	6103      	str	r3, [r0, #16]
   b6900:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6902:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b6904:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6906:	20ac      	movs	r0, #172	; 0xac
   b6908:	9101      	str	r1, [sp, #4]
   b690a:	f7fd fbc2 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b690e:	1e05      	subs	r5, r0, #0
   b6910:	f105 060c 	add.w	r6, r5, #12
   b6914:	d008      	beq.n	b6928 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b6916:	2301      	movs	r3, #1
   b6918:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b691c:	4b07      	ldr	r3, [pc, #28]	; (b693c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b691e:	9901      	ldr	r1, [sp, #4]
   b6920:	602b      	str	r3, [r5, #0]
   b6922:	4630      	mov	r0, r6
   b6924:	f7ff ffd9 	bl	b68da <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b6928:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b692a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b692e:	f7ff fedf 	bl	b66f0 <_ZN9TCPClient12flush_bufferEv>
}
   b6932:	b002      	add	sp, #8
   b6934:	bd70      	pop	{r4, r5, r6, pc}
   b6936:	bf00      	nop
   b6938:	000b7ce0 	.word	0x000b7ce0
   b693c:	000b7cc4 	.word	0x000b7cc4

000b6940 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b6940:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b6942:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b6946:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b6948:	f7ff ffd2 	bl	b68f0 <_ZN9TCPClientC1Ei>
}
   b694c:	4620      	mov	r0, r4
   b694e:	bd10      	pop	{r4, pc}

000b6950 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b6950:	b510      	push	{r4, lr}
   b6952:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6954:	6800      	ldr	r0, [r0, #0]
   b6956:	2800      	cmp	r0, #0
   b6958:	db01      	blt.n	b695e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b695a:	f7fe fe09 	bl	b5570 <sock_close>
    }
}
   b695e:	4620      	mov	r0, r4
   b6960:	bd10      	pop	{r4, pc}

000b6962 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6962:	300c      	adds	r0, #12
   b6964:	f7ff bff4 	b.w	b6950 <_ZN9TCPClient4DataD1Ev>

000b6968 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6968:	2200      	movs	r2, #0
   b696a:	6840      	ldr	r0, [r0, #4]
   b696c:	4611      	mov	r1, r2
   b696e:	f7fe bf03 	b.w	b5778 <network_ready>

000b6972 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6972:	2200      	movs	r2, #0
   b6974:	6840      	ldr	r0, [r0, #4]
   b6976:	4611      	mov	r1, r2
   b6978:	f7fe bf1e 	b.w	b57b8 <network_listening>

000b697c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b697c:	2200      	movs	r2, #0
   b697e:	6840      	ldr	r0, [r0, #4]
   b6980:	4611      	mov	r1, r2
   b6982:	f7fe bf31 	b.w	b57e8 <network_get_listen_timeout>

000b6986 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6986:	6840      	ldr	r0, [r0, #4]
   b6988:	2200      	movs	r2, #0
   b698a:	f7fe bf25 	b.w	b57d8 <network_set_listen_timeout>

000b698e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b698e:	6840      	ldr	r0, [r0, #4]
   b6990:	2200      	movs	r2, #0
   b6992:	f081 0101 	eor.w	r1, r1, #1
   b6996:	f7fe bf07 	b.w	b57a8 <network_listen>

000b699a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b699a:	2300      	movs	r3, #0
   b699c:	6840      	ldr	r0, [r0, #4]
   b699e:	461a      	mov	r2, r3
   b69a0:	4619      	mov	r1, r3
   b69a2:	f7fe bef9 	b.w	b5798 <network_off>

000b69a6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b69a6:	2300      	movs	r3, #0
   b69a8:	6840      	ldr	r0, [r0, #4]
   b69aa:	461a      	mov	r2, r3
   b69ac:	4619      	mov	r1, r3
   b69ae:	f7fe beeb 	b.w	b5788 <network_on>

000b69b2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b69b2:	2200      	movs	r2, #0
   b69b4:	6840      	ldr	r0, [r0, #4]
   b69b6:	4611      	mov	r1, r2
   b69b8:	f7fe bece 	b.w	b5758 <network_connecting>

000b69bc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b69bc:	6840      	ldr	r0, [r0, #4]
   b69be:	2200      	movs	r2, #0
   b69c0:	2102      	movs	r1, #2
   b69c2:	f7fe bed1 	b.w	b5768 <network_disconnect>

000b69c6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b69c6:	2300      	movs	r3, #0
   b69c8:	6840      	ldr	r0, [r0, #4]
   b69ca:	461a      	mov	r2, r3
   b69cc:	f7fe bebc 	b.w	b5748 <network_connect>

000b69d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b69d0:	4b02      	ldr	r3, [pc, #8]	; (b69dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b69d2:	2204      	movs	r2, #4
   b69d4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b69d6:	4a02      	ldr	r2, [pc, #8]	; (b69e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b69d8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b69da:	4770      	bx	lr
   b69dc:	2003e718 	.word	0x2003e718
   b69e0:	000b7d2c 	.word	0x000b7d2c

000b69e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b69e4:	2300      	movs	r3, #0
   b69e6:	6840      	ldr	r0, [r0, #4]
   b69e8:	461a      	mov	r2, r3
   b69ea:	f7fe bead 	b.w	b5748 <network_connect>

000b69ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b69ee:	6840      	ldr	r0, [r0, #4]
   b69f0:	2200      	movs	r2, #0
   b69f2:	2102      	movs	r1, #2
   b69f4:	f7fe beb8 	b.w	b5768 <network_disconnect>

000b69f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b69f8:	2200      	movs	r2, #0
   b69fa:	6840      	ldr	r0, [r0, #4]
   b69fc:	4611      	mov	r1, r2
   b69fe:	f7fe beab 	b.w	b5758 <network_connecting>

000b6a02 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6a02:	2200      	movs	r2, #0
   b6a04:	6840      	ldr	r0, [r0, #4]
   b6a06:	4611      	mov	r1, r2
   b6a08:	f7fe beb6 	b.w	b5778 <network_ready>

000b6a0c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6a0c:	2300      	movs	r3, #0
   b6a0e:	6840      	ldr	r0, [r0, #4]
   b6a10:	461a      	mov	r2, r3
   b6a12:	4619      	mov	r1, r3
   b6a14:	f7fe beb8 	b.w	b5788 <network_on>

000b6a18 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6a18:	2300      	movs	r3, #0
   b6a1a:	6840      	ldr	r0, [r0, #4]
   b6a1c:	461a      	mov	r2, r3
   b6a1e:	4619      	mov	r1, r3
   b6a20:	f7fe beba 	b.w	b5798 <network_off>

000b6a24 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6a24:	6840      	ldr	r0, [r0, #4]
   b6a26:	2100      	movs	r1, #0
   b6a28:	f7fe bee6 	b.w	b57f8 <network_is_on>

000b6a2c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6a2c:	6840      	ldr	r0, [r0, #4]
   b6a2e:	2100      	movs	r1, #0
   b6a30:	f7fe beea 	b.w	b5808 <network_is_off>

000b6a34 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6a34:	6840      	ldr	r0, [r0, #4]
   b6a36:	2200      	movs	r2, #0
   b6a38:	f081 0101 	eor.w	r1, r1, #1
   b6a3c:	f7fe beb4 	b.w	b57a8 <network_listen>

000b6a40 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6a40:	6840      	ldr	r0, [r0, #4]
   b6a42:	2200      	movs	r2, #0
   b6a44:	f7fe bec8 	b.w	b57d8 <network_set_listen_timeout>

000b6a48 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6a48:	2200      	movs	r2, #0
   b6a4a:	6840      	ldr	r0, [r0, #4]
   b6a4c:	4611      	mov	r1, r2
   b6a4e:	f7fe becb 	b.w	b57e8 <network_get_listen_timeout>

000b6a52 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6a52:	2200      	movs	r2, #0
   b6a54:	6840      	ldr	r0, [r0, #4]
   b6a56:	4611      	mov	r1, r2
   b6a58:	f7fe beae 	b.w	b57b8 <network_listening>

000b6a5c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6a60:	b095      	sub	sp, #84	; 0x54
   b6a62:	4614      	mov	r4, r2
   b6a64:	460d      	mov	r5, r1
   b6a66:	4607      	mov	r7, r0
    IPAddress addr;
   b6a68:	f7ff fb26 	bl	b60b8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6a6c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6a6e:	221c      	movs	r2, #28
   b6a70:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6a72:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6a74:	f000 faac 	bl	b6fd0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6a78:	2340      	movs	r3, #64	; 0x40
   b6a7a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6a7c:	4620      	mov	r0, r4
   b6a7e:	466b      	mov	r3, sp
   b6a80:	aa0c      	add	r2, sp, #48	; 0x30
   b6a82:	2100      	movs	r1, #0
   b6a84:	f7fe fc6c 	bl	b5360 <netdb_getaddrinfo>
    if (!r) {
   b6a88:	4604      	mov	r4, r0
   b6a8a:	2800      	cmp	r0, #0
   b6a8c:	d14b      	bne.n	b6b26 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6a8e:	4602      	mov	r2, r0
   b6a90:	2101      	movs	r1, #1
   b6a92:	6868      	ldr	r0, [r5, #4]
   b6a94:	f7fe fe70 	bl	b5778 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6a98:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6a9a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6a9c:	4622      	mov	r2, r4
   b6a9e:	6868      	ldr	r0, [r5, #4]
   b6aa0:	f7fe fe6a 	bl	b5778 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6aa4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6aa6:	4681      	mov	r9, r0
        bool ok = false;
   b6aa8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6aaa:	2e00      	cmp	r6, #0
   b6aac:	d03b      	beq.n	b6b26 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6aae:	2900      	cmp	r1, #0
   b6ab0:	d139      	bne.n	b6b26 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6ab2:	6873      	ldr	r3, [r6, #4]
   b6ab4:	2b02      	cmp	r3, #2
   b6ab6:	d003      	beq.n	b6ac0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6ab8:	2b0a      	cmp	r3, #10
   b6aba:	d011      	beq.n	b6ae0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6abc:	69f6      	ldr	r6, [r6, #28]
   b6abe:	e7f4      	b.n	b6aaa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6ac0:	f1b8 0f00 	cmp.w	r8, #0
   b6ac4:	d0fa      	beq.n	b6abc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6ac6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6ac8:	a806      	add	r0, sp, #24
   b6aca:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6acc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6ace:	f7ff fb37 	bl	b6140 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ad4:	1d3c      	adds	r4, r7, #4
   b6ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ad8:	682b      	ldr	r3, [r5, #0]
   b6ada:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6adc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6ade:	e7ed      	b.n	b6abc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6ae0:	f1b9 0f00 	cmp.w	r9, #0
   b6ae4:	d0ea      	beq.n	b6abc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6ae6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6ae8:	2210      	movs	r2, #16
   b6aea:	a801      	add	r0, sp, #4
   b6aec:	f000 fa70 	bl	b6fd0 <memset>
                    a.v = 6;
   b6af0:	2306      	movs	r3, #6
   b6af2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6af6:	ad01      	add	r5, sp, #4
   b6af8:	f104 0308 	add.w	r3, r4, #8
   b6afc:	3418      	adds	r4, #24
   b6afe:	6818      	ldr	r0, [r3, #0]
   b6b00:	6859      	ldr	r1, [r3, #4]
   b6b02:	462a      	mov	r2, r5
   b6b04:	c203      	stmia	r2!, {r0, r1}
   b6b06:	3308      	adds	r3, #8
   b6b08:	42a3      	cmp	r3, r4
   b6b0a:	4615      	mov	r5, r2
   b6b0c:	d1f7      	bne.n	b6afe <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6b0e:	a901      	add	r1, sp, #4
   b6b10:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6b12:	ad07      	add	r5, sp, #28
   b6b14:	f7ff fade 	bl	b60d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6b1a:	1d3c      	adds	r4, r7, #4
   b6b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6b1e:	682b      	ldr	r3, [r5, #0]
   b6b20:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6b22:	4649      	mov	r1, r9
   b6b24:	e7ca      	b.n	b6abc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6b26:	9800      	ldr	r0, [sp, #0]
   b6b28:	f7fe fc12 	bl	b5350 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6b2c:	4638      	mov	r0, r7
   b6b2e:	b015      	add	sp, #84	; 0x54
   b6b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6b34 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6b34:	4b02      	ldr	r3, [pc, #8]	; (b6b40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6b36:	4a03      	ldr	r2, [pc, #12]	; (b6b44 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6b38:	601a      	str	r2, [r3, #0]
   b6b3a:	2200      	movs	r2, #0
   b6b3c:	605a      	str	r2, [r3, #4]

} // spark
   b6b3e:	4770      	bx	lr
   b6b40:	2003e720 	.word	0x2003e720
   b6b44:	000b7d68 	.word	0x000b7d68

000b6b48 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6b48:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6b4a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6b4c:	d902      	bls.n	b6b54 <pinAvailable+0xc>
    return false;
   b6b4e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6b50:	b002      	add	sp, #8
   b6b52:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6b54:	f1a0 030b 	sub.w	r3, r0, #11
   b6b58:	2b02      	cmp	r3, #2
   b6b5a:	d81a      	bhi.n	b6b92 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6b5c:	4c17      	ldr	r4, [pc, #92]	; (b6bbc <pinAvailable+0x74>)
   b6b5e:	7821      	ldrb	r1, [r4, #0]
   b6b60:	f3bf 8f5b 	dmb	ish
   b6b64:	f011 0101 	ands.w	r1, r1, #1
   b6b68:	d10b      	bne.n	b6b82 <pinAvailable+0x3a>
   b6b6a:	4620      	mov	r0, r4
   b6b6c:	9101      	str	r1, [sp, #4]
   b6b6e:	f7fd faa3 	bl	b40b8 <__cxa_guard_acquire>
   b6b72:	9901      	ldr	r1, [sp, #4]
   b6b74:	b128      	cbz	r0, b6b82 <pinAvailable+0x3a>
   b6b76:	4812      	ldr	r0, [pc, #72]	; (b6bc0 <pinAvailable+0x78>)
   b6b78:	f7fe feda 	bl	b5930 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6b7c:	4620      	mov	r0, r4
   b6b7e:	f7fd faa0 	bl	b40c2 <__cxa_guard_release>
   b6b82:	4b0f      	ldr	r3, [pc, #60]	; (b6bc0 <pinAvailable+0x78>)
   b6b84:	7818      	ldrb	r0, [r3, #0]
   b6b86:	f7fe fd4b 	bl	b5620 <hal_spi_is_enabled>
   b6b8a:	2800      	cmp	r0, #0
   b6b8c:	d1df      	bne.n	b6b4e <pinAvailable+0x6>
  return true; // 'pin' is available
   b6b8e:	2001      	movs	r0, #1
   b6b90:	e7de      	b.n	b6b50 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6b92:	2801      	cmp	r0, #1
   b6b94:	d809      	bhi.n	b6baa <pinAvailable+0x62>
   b6b96:	f000 f8cf 	bl	b6d38 <_Z19__fetch_global_Wirev>
   b6b9a:	2100      	movs	r1, #0
   b6b9c:	7c00      	ldrb	r0, [r0, #16]
   b6b9e:	f7fe fccf 	bl	b5540 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6ba2:	f080 0001 	eor.w	r0, r0, #1
   b6ba6:	b2c0      	uxtb	r0, r0
   b6ba8:	e7d2      	b.n	b6b50 <pinAvailable+0x8>
   b6baa:	3809      	subs	r0, #9
   b6bac:	2801      	cmp	r0, #1
   b6bae:	d8ee      	bhi.n	b6b8e <pinAvailable+0x46>
   b6bb0:	f000 f882 	bl	b6cb8 <_Z22__fetch_global_Serial1v>
   b6bb4:	7c00      	ldrb	r0, [r0, #16]
   b6bb6:	f7fe fc6b 	bl	b5490 <hal_usart_is_enabled>
   b6bba:	e7f2      	b.n	b6ba2 <pinAvailable+0x5a>
   b6bbc:	2003e6b8 	.word	0x2003e6b8
   b6bc0:	2003e6bc 	.word	0x2003e6bc

000b6bc4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6bc4:	2823      	cmp	r0, #35	; 0x23
{
   b6bc6:	b538      	push	{r3, r4, r5, lr}
   b6bc8:	4604      	mov	r4, r0
   b6bca:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6bcc:	d80a      	bhi.n	b6be4 <pinMode+0x20>
   b6bce:	29ff      	cmp	r1, #255	; 0xff
   b6bd0:	d008      	beq.n	b6be4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6bd2:	f7ff ffb9 	bl	b6b48 <pinAvailable>
   b6bd6:	b128      	cbz	r0, b6be4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6bd8:	4629      	mov	r1, r5
   b6bda:	4620      	mov	r0, r4
}
   b6bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6be0:	f7fe bbc6 	b.w	b5370 <HAL_Pin_Mode>
}
   b6be4:	bd38      	pop	{r3, r4, r5, pc}

000b6be6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6be6:	b538      	push	{r3, r4, r5, lr}
   b6be8:	4604      	mov	r4, r0
   b6bea:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6bec:	f7fe fbc8 	bl	b5380 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6bf0:	28ff      	cmp	r0, #255	; 0xff
   b6bf2:	d010      	beq.n	b6c16 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6bf4:	2806      	cmp	r0, #6
   b6bf6:	d804      	bhi.n	b6c02 <digitalWrite+0x1c>
   b6bf8:	234d      	movs	r3, #77	; 0x4d
   b6bfa:	fa23 f000 	lsr.w	r0, r3, r0
   b6bfe:	07c3      	lsls	r3, r0, #31
   b6c00:	d409      	bmi.n	b6c16 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6c02:	4620      	mov	r0, r4
   b6c04:	f7ff ffa0 	bl	b6b48 <pinAvailable>
   b6c08:	b128      	cbz	r0, b6c16 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b6c0a:	4629      	mov	r1, r5
   b6c0c:	4620      	mov	r0, r4
}
   b6c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6c12:	f7fe bbbd 	b.w	b5390 <HAL_GPIO_Write>
}
   b6c16:	bd38      	pop	{r3, r4, r5, pc}

000b6c18 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b6c18:	b510      	push	{r4, lr}
   b6c1a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6c1c:	f7fe fbb0 	bl	b5380 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6c20:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b6c22:	b2db      	uxtb	r3, r3
   b6c24:	2b01      	cmp	r3, #1
   b6c26:	d908      	bls.n	b6c3a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6c28:	4620      	mov	r0, r4
   b6c2a:	f7ff ff8d 	bl	b6b48 <pinAvailable>
   b6c2e:	b120      	cbz	r0, b6c3a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b6c30:	4620      	mov	r0, r4
}
   b6c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b6c36:	f7fe bbb3 	b.w	b53a0 <HAL_GPIO_Read>
}
   b6c3a:	2000      	movs	r0, #0
   b6c3c:	bd10      	pop	{r4, pc}

000b6c3e <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b6c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6c42:	4690      	mov	r8, r2
   b6c44:	461f      	mov	r7, r3
   b6c46:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b6c48:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b6c4a:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b6c4c:	f1c4 0107 	rsb	r1, r4, #7
   b6c50:	f1b8 0f00 	cmp.w	r8, #0
   b6c54:	d112      	bne.n	b6c7c <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b6c56:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b6c5a:	f001 0101 	and.w	r1, r1, #1
   b6c5e:	4630      	mov	r0, r6
   b6c60:	f7ff ffc1 	bl	b6be6 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b6c64:	2101      	movs	r1, #1
   b6c66:	4628      	mov	r0, r5
   b6c68:	f7ff ffbd 	bl	b6be6 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b6c6c:	2100      	movs	r1, #0
   b6c6e:	4628      	mov	r0, r5
   b6c70:	f7ff ffb9 	bl	b6be6 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b6c74:	3c01      	subs	r4, #1
   b6c76:	d2e9      	bcs.n	b6c4c <shiftOut+0xe>
  }
}
   b6c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b6c7c:	fa47 f104 	asr.w	r1, r7, r4
   b6c80:	e7eb      	b.n	b6c5a <shiftOut+0x1c>

000b6c82 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6c82:	4770      	bx	lr

000b6c84 <_Z20acquireSerial1Bufferv>:
{
   b6c84:	b538      	push	{r3, r4, r5, lr}
   b6c86:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6c88:	2514      	movs	r5, #20
   b6c8a:	462a      	mov	r2, r5
   b6c8c:	2100      	movs	r1, #0
   b6c8e:	f000 f99f 	bl	b6fd0 <memset>
   b6c92:	8025      	strh	r5, [r4, #0]
   b6c94:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6c96:	4907      	ldr	r1, [pc, #28]	; (b6cb4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6c98:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6c9a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6c9c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6c9e:	f000 f86f 	bl	b6d80 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6ca2:	4904      	ldr	r1, [pc, #16]	; (b6cb4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6ca4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6ca6:	4628      	mov	r0, r5
   b6ca8:	f000 f86a 	bl	b6d80 <_ZnajRKSt9nothrow_t>
    };
   b6cac:	60e0      	str	r0, [r4, #12]
}
   b6cae:	4620      	mov	r0, r4
   b6cb0:	bd38      	pop	{r3, r4, r5, pc}
   b6cb2:	bf00      	nop
   b6cb4:	000b7d9c 	.word	0x000b7d9c

000b6cb8 <_Z22__fetch_global_Serial1v>:
{
   b6cb8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6cba:	4d0e      	ldr	r5, [pc, #56]	; (b6cf4 <_Z22__fetch_global_Serial1v+0x3c>)
   b6cbc:	7829      	ldrb	r1, [r5, #0]
   b6cbe:	f3bf 8f5b 	dmb	ish
   b6cc2:	f011 0401 	ands.w	r4, r1, #1
{
   b6cc6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6cc8:	d111      	bne.n	b6cee <_Z22__fetch_global_Serial1v+0x36>
   b6cca:	4628      	mov	r0, r5
   b6ccc:	f7fd f9f4 	bl	b40b8 <__cxa_guard_acquire>
   b6cd0:	b168      	cbz	r0, b6cee <_Z22__fetch_global_Serial1v+0x36>
   b6cd2:	a801      	add	r0, sp, #4
   b6cd4:	f7ff ffd6 	bl	b6c84 <_Z20acquireSerial1Bufferv>
   b6cd8:	aa01      	add	r2, sp, #4
   b6cda:	4621      	mov	r1, r4
   b6cdc:	4806      	ldr	r0, [pc, #24]	; (b6cf8 <_Z22__fetch_global_Serial1v+0x40>)
   b6cde:	f7ff fb05 	bl	b62ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6ce2:	4628      	mov	r0, r5
   b6ce4:	f7fd f9ed 	bl	b40c2 <__cxa_guard_release>
   b6ce8:	4804      	ldr	r0, [pc, #16]	; (b6cfc <_Z22__fetch_global_Serial1v+0x44>)
   b6cea:	f000 f95d 	bl	b6fa8 <atexit>
    return serial1;
}
   b6cee:	4802      	ldr	r0, [pc, #8]	; (b6cf8 <_Z22__fetch_global_Serial1v+0x40>)
   b6cf0:	b007      	add	sp, #28
   b6cf2:	bd30      	pop	{r4, r5, pc}
   b6cf4:	2003e728 	.word	0x2003e728
   b6cf8:	2003e72c 	.word	0x2003e72c
   b6cfc:	000b6c83 	.word	0x000b6c83

000b6d00 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6d00:	4770      	bx	lr
	...

000b6d04 <_Z17acquireWireBufferv>:
{
   b6d04:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6d06:	4b0a      	ldr	r3, [pc, #40]	; (b6d30 <_Z17acquireWireBufferv+0x2c>)
   b6d08:	6003      	str	r3, [r0, #0]
   b6d0a:	2301      	movs	r3, #1
{
   b6d0c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6d0e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6d10:	4908      	ldr	r1, [pc, #32]	; (b6d34 <_Z17acquireWireBufferv+0x30>)
   b6d12:	2020      	movs	r0, #32
   b6d14:	f000 f834 	bl	b6d80 <_ZnajRKSt9nothrow_t>
	};
   b6d18:	2520      	movs	r5, #32
   b6d1a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6d1c:	4905      	ldr	r1, [pc, #20]	; (b6d34 <_Z17acquireWireBufferv+0x30>)
	};
   b6d1e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6d20:	4628      	mov	r0, r5
   b6d22:	f000 f82d 	bl	b6d80 <_ZnajRKSt9nothrow_t>
	};
   b6d26:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b6d2a:	4620      	mov	r0, r4
   b6d2c:	bd38      	pop	{r3, r4, r5, pc}
   b6d2e:	bf00      	nop
   b6d30:	00010018 	.word	0x00010018
   b6d34:	000b7d9c 	.word	0x000b7d9c

000b6d38 <_Z19__fetch_global_Wirev>:
{
   b6d38:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6d3a:	4d0e      	ldr	r5, [pc, #56]	; (b6d74 <_Z19__fetch_global_Wirev+0x3c>)
   b6d3c:	7829      	ldrb	r1, [r5, #0]
   b6d3e:	f3bf 8f5b 	dmb	ish
   b6d42:	f011 0401 	ands.w	r4, r1, #1
{
   b6d46:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6d48:	d111      	bne.n	b6d6e <_Z19__fetch_global_Wirev+0x36>
   b6d4a:	4628      	mov	r0, r5
   b6d4c:	f7fd f9b4 	bl	b40b8 <__cxa_guard_acquire>
   b6d50:	b168      	cbz	r0, b6d6e <_Z19__fetch_global_Wirev+0x36>
   b6d52:	4668      	mov	r0, sp
   b6d54:	f7ff ffd6 	bl	b6d04 <_Z17acquireWireBufferv>
   b6d58:	466a      	mov	r2, sp
   b6d5a:	4621      	mov	r1, r4
   b6d5c:	4806      	ldr	r0, [pc, #24]	; (b6d78 <_Z19__fetch_global_Wirev+0x40>)
   b6d5e:	f7ff fb05 	bl	b636c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6d62:	4628      	mov	r0, r5
   b6d64:	f7fd f9ad 	bl	b40c2 <__cxa_guard_release>
   b6d68:	4804      	ldr	r0, [pc, #16]	; (b6d7c <_Z19__fetch_global_Wirev+0x44>)
   b6d6a:	f000 f91d 	bl	b6fa8 <atexit>
	return wire;
}
   b6d6e:	4802      	ldr	r0, [pc, #8]	; (b6d78 <_Z19__fetch_global_Wirev+0x40>)
   b6d70:	b007      	add	sp, #28
   b6d72:	bd30      	pop	{r4, r5, pc}
   b6d74:	2003e744 	.word	0x2003e744
   b6d78:	2003e748 	.word	0x2003e748
   b6d7c:	000b6d01 	.word	0x000b6d01

000b6d80 <_ZnajRKSt9nothrow_t>:
   b6d80:	f7fd b989 	b.w	b4096 <_Znaj>

000b6d84 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6d84:	4901      	ldr	r1, [pc, #4]	; (b6d8c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6d86:	f000 b8f9 	b.w	b6f7c <_ZNKSt9type_infoeqERKS_>
   b6d8a:	bf00      	nop
   b6d8c:	000b7db8 	.word	0x000b7db8

000b6d90 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6d90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6d92:	2400      	movs	r4, #0
   b6d94:	2310      	movs	r3, #16
   b6d96:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b6d9a:	6803      	ldr	r3, [r0, #0]
   b6d9c:	4615      	mov	r5, r2
   b6d9e:	699e      	ldr	r6, [r3, #24]
   b6da0:	6812      	ldr	r2, [r2, #0]
   b6da2:	466b      	mov	r3, sp
   b6da4:	e9cd 4400 	strd	r4, r4, [sp]
   b6da8:	47b0      	blx	r6
   b6daa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6dae:	f003 0306 	and.w	r3, r3, #6
   b6db2:	2b06      	cmp	r3, #6
   b6db4:	bf03      	ittte	eq
   b6db6:	9b00      	ldreq	r3, [sp, #0]
   b6db8:	602b      	streq	r3, [r5, #0]
   b6dba:	2001      	moveq	r0, #1
   b6dbc:	4620      	movne	r0, r4
   b6dbe:	b004      	add	sp, #16
   b6dc0:	bd70      	pop	{r4, r5, r6, pc}

000b6dc2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6dc2:	9800      	ldr	r0, [sp, #0]
   b6dc4:	4290      	cmp	r0, r2
   b6dc6:	bf14      	ite	ne
   b6dc8:	2001      	movne	r0, #1
   b6dca:	2006      	moveq	r0, #6
   b6dcc:	4770      	bx	lr
	...

000b6dd0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6dd0:	b510      	push	{r4, lr}
   b6dd2:	4b03      	ldr	r3, [pc, #12]	; (b6de0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6dd4:	6003      	str	r3, [r0, #0]
   b6dd6:	4604      	mov	r4, r0
   b6dd8:	f000 f8cd 	bl	b6f76 <_ZNSt9type_infoD1Ev>
   b6ddc:	4620      	mov	r0, r4
   b6dde:	bd10      	pop	{r4, pc}
   b6de0:	000b7df8 	.word	0x000b7df8

000b6de4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6de4:	b510      	push	{r4, lr}
   b6de6:	4604      	mov	r4, r0
   b6de8:	f7ff fff2 	bl	b6dd0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6dec:	4620      	mov	r0, r4
   b6dee:	2108      	movs	r1, #8
   b6df0:	f7fd f953 	bl	b409a <_ZdlPvj>
   b6df4:	4620      	mov	r0, r4
   b6df6:	bd10      	pop	{r4, pc}

000b6df8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6dfc:	461f      	mov	r7, r3
   b6dfe:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6e02:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6e06:	4598      	cmp	r8, r3
   b6e08:	4606      	mov	r6, r0
   b6e0a:	4615      	mov	r5, r2
   b6e0c:	d107      	bne.n	b6e1e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6e0e:	9907      	ldr	r1, [sp, #28]
   b6e10:	f000 f8b4 	bl	b6f7c <_ZNKSt9type_infoeqERKS_>
   b6e14:	b118      	cbz	r0, b6e1e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6e16:	7165      	strb	r5, [r4, #5]
   b6e18:	2000      	movs	r0, #0
   b6e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6e1e:	4639      	mov	r1, r7
   b6e20:	4630      	mov	r0, r6
   b6e22:	f000 f8ab 	bl	b6f7c <_ZNKSt9type_infoeqERKS_>
   b6e26:	2800      	cmp	r0, #0
   b6e28:	d0f6      	beq.n	b6e18 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b6e2a:	2301      	movs	r3, #1
   b6e2c:	f8c4 8000 	str.w	r8, [r4]
   b6e30:	7125      	strb	r5, [r4, #4]
   b6e32:	71a3      	strb	r3, [r4, #6]
   b6e34:	e7f0      	b.n	b6e18 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6e36 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6e36:	b538      	push	{r3, r4, r5, lr}
   b6e38:	4615      	mov	r5, r2
   b6e3a:	461c      	mov	r4, r3
   b6e3c:	f000 f89e 	bl	b6f7c <_ZNKSt9type_infoeqERKS_>
   b6e40:	b120      	cbz	r0, b6e4c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b6e42:	2308      	movs	r3, #8
   b6e44:	60e3      	str	r3, [r4, #12]
   b6e46:	2306      	movs	r3, #6
   b6e48:	6025      	str	r5, [r4, #0]
   b6e4a:	7123      	strb	r3, [r4, #4]
   b6e4c:	bd38      	pop	{r3, r4, r5, pc}

000b6e4e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b6e4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6e50:	4605      	mov	r5, r0
   b6e52:	460c      	mov	r4, r1
   b6e54:	9201      	str	r2, [sp, #4]
   b6e56:	461e      	mov	r6, r3
   b6e58:	f000 f890 	bl	b6f7c <_ZNKSt9type_infoeqERKS_>
   b6e5c:	b950      	cbnz	r0, b6e74 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6e5e:	2e03      	cmp	r6, #3
   b6e60:	d808      	bhi.n	b6e74 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6e62:	6823      	ldr	r3, [r4, #0]
   b6e64:	9a01      	ldr	r2, [sp, #4]
   b6e66:	695b      	ldr	r3, [r3, #20]
   b6e68:	4629      	mov	r1, r5
   b6e6a:	4620      	mov	r0, r4
   b6e6c:	b002      	add	sp, #8
   b6e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6e72:	4718      	bx	r3
   b6e74:	b002      	add	sp, #8
   b6e76:	bd70      	pop	{r4, r5, r6, pc}

000b6e78 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6e78:	b510      	push	{r4, lr}
   b6e7a:	4b03      	ldr	r3, [pc, #12]	; (b6e88 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b6e7c:	6003      	str	r3, [r0, #0]
   b6e7e:	4604      	mov	r4, r0
   b6e80:	f7ff ffa6 	bl	b6dd0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6e84:	4620      	mov	r0, r4
   b6e86:	bd10      	pop	{r4, pc}
   b6e88:	000b7e58 	.word	0x000b7e58

000b6e8c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b6e8c:	b510      	push	{r4, lr}
   b6e8e:	4604      	mov	r4, r0
   b6e90:	f7ff fff2 	bl	b6e78 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6e94:	4620      	mov	r0, r4
   b6e96:	210c      	movs	r1, #12
   b6e98:	f7fd f8ff 	bl	b409a <_ZdlPvj>
   b6e9c:	4620      	mov	r0, r4
   b6e9e:	bd10      	pop	{r4, pc}

000b6ea0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6ea2:	9f08      	ldr	r7, [sp, #32]
   b6ea4:	4297      	cmp	r7, r2
   b6ea6:	4605      	mov	r5, r0
   b6ea8:	460e      	mov	r6, r1
   b6eaa:	4614      	mov	r4, r2
   b6eac:	d00a      	beq.n	b6ec4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b6eae:	68a8      	ldr	r0, [r5, #8]
   b6eb0:	6802      	ldr	r2, [r0, #0]
   b6eb2:	9708      	str	r7, [sp, #32]
   b6eb4:	6a15      	ldr	r5, [r2, #32]
   b6eb6:	4631      	mov	r1, r6
   b6eb8:	4622      	mov	r2, r4
   b6eba:	46ac      	mov	ip, r5
   b6ebc:	b003      	add	sp, #12
   b6ebe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6ec2:	4760      	bx	ip
   b6ec4:	4619      	mov	r1, r3
   b6ec6:	9301      	str	r3, [sp, #4]
   b6ec8:	f000 f858 	bl	b6f7c <_ZNKSt9type_infoeqERKS_>
   b6ecc:	9b01      	ldr	r3, [sp, #4]
   b6ece:	2800      	cmp	r0, #0
   b6ed0:	d0ed      	beq.n	b6eae <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6ed2:	2006      	movs	r0, #6
   b6ed4:	b003      	add	sp, #12
   b6ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6ed8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6ed8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6edc:	460d      	mov	r5, r1
   b6ede:	4619      	mov	r1, r3
   b6ee0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6ee4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6ee8:	4681      	mov	r9, r0
   b6eea:	4617      	mov	r7, r2
   b6eec:	4698      	mov	r8, r3
   b6eee:	f000 f845 	bl	b6f7c <_ZNKSt9type_infoeqERKS_>
   b6ef2:	b190      	cbz	r0, b6f1a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6ef4:	2d00      	cmp	r5, #0
   b6ef6:	6034      	str	r4, [r6, #0]
   b6ef8:	7137      	strb	r7, [r6, #4]
   b6efa:	db09      	blt.n	b6f10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6efc:	1961      	adds	r1, r4, r5
   b6efe:	458a      	cmp	sl, r1
   b6f00:	bf0c      	ite	eq
   b6f02:	2106      	moveq	r1, #6
   b6f04:	2101      	movne	r1, #1
   b6f06:	71b1      	strb	r1, [r6, #6]
   b6f08:	2000      	movs	r0, #0
   b6f0a:	b001      	add	sp, #4
   b6f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6f10:	3502      	adds	r5, #2
   b6f12:	d1f9      	bne.n	b6f08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6f14:	2301      	movs	r3, #1
   b6f16:	71b3      	strb	r3, [r6, #6]
   b6f18:	e7f6      	b.n	b6f08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6f1a:	4554      	cmp	r4, sl
   b6f1c:	d106      	bne.n	b6f2c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6f1e:	4659      	mov	r1, fp
   b6f20:	4648      	mov	r0, r9
   b6f22:	f000 f82b 	bl	b6f7c <_ZNKSt9type_infoeqERKS_>
   b6f26:	b108      	cbz	r0, b6f2c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6f28:	7177      	strb	r7, [r6, #5]
   b6f2a:	e7ed      	b.n	b6f08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6f2c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6f30:	6803      	ldr	r3, [r0, #0]
   b6f32:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b6f36:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b6f3a:	69dc      	ldr	r4, [r3, #28]
   b6f3c:	463a      	mov	r2, r7
   b6f3e:	4643      	mov	r3, r8
   b6f40:	4629      	mov	r1, r5
   b6f42:	46a4      	mov	ip, r4
   b6f44:	b001      	add	sp, #4
   b6f46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6f4a:	4760      	bx	ip

000b6f4c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b6f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6f50:	4607      	mov	r7, r0
   b6f52:	460c      	mov	r4, r1
   b6f54:	4615      	mov	r5, r2
   b6f56:	461e      	mov	r6, r3
   b6f58:	f7ff ff6d 	bl	b6e36 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b6f5c:	b948      	cbnz	r0, b6f72 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b6f5e:	68b8      	ldr	r0, [r7, #8]
   b6f60:	6803      	ldr	r3, [r0, #0]
   b6f62:	699f      	ldr	r7, [r3, #24]
   b6f64:	462a      	mov	r2, r5
   b6f66:	4633      	mov	r3, r6
   b6f68:	4621      	mov	r1, r4
   b6f6a:	46bc      	mov	ip, r7
   b6f6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6f70:	4760      	bx	ip
   b6f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6f76 <_ZNSt9type_infoD1Ev>:
   b6f76:	4770      	bx	lr

000b6f78 <_ZNKSt9type_info14__is_pointer_pEv>:
   b6f78:	2000      	movs	r0, #0
   b6f7a:	4770      	bx	lr

000b6f7c <_ZNKSt9type_infoeqERKS_>:
   b6f7c:	4281      	cmp	r1, r0
   b6f7e:	b508      	push	{r3, lr}
   b6f80:	d00e      	beq.n	b6fa0 <_ZNKSt9type_infoeqERKS_+0x24>
   b6f82:	6840      	ldr	r0, [r0, #4]
   b6f84:	7803      	ldrb	r3, [r0, #0]
   b6f86:	2b2a      	cmp	r3, #42	; 0x2a
   b6f88:	d00c      	beq.n	b6fa4 <_ZNKSt9type_infoeqERKS_+0x28>
   b6f8a:	6849      	ldr	r1, [r1, #4]
   b6f8c:	780b      	ldrb	r3, [r1, #0]
   b6f8e:	2b2a      	cmp	r3, #42	; 0x2a
   b6f90:	bf08      	it	eq
   b6f92:	3101      	addeq	r1, #1
   b6f94:	f000 f852 	bl	b703c <strcmp>
   b6f98:	fab0 f080 	clz	r0, r0
   b6f9c:	0940      	lsrs	r0, r0, #5
   b6f9e:	bd08      	pop	{r3, pc}
   b6fa0:	2001      	movs	r0, #1
   b6fa2:	e7fc      	b.n	b6f9e <_ZNKSt9type_infoeqERKS_+0x22>
   b6fa4:	2000      	movs	r0, #0
   b6fa6:	e7fa      	b.n	b6f9e <_ZNKSt9type_infoeqERKS_+0x22>

000b6fa8 <atexit>:
   b6fa8:	2300      	movs	r3, #0
   b6faa:	4601      	mov	r1, r0
   b6fac:	461a      	mov	r2, r3
   b6fae:	4618      	mov	r0, r3
   b6fb0:	f000 b85e 	b.w	b7070 <__register_exitproc>

000b6fb4 <memcpy>:
   b6fb4:	440a      	add	r2, r1
   b6fb6:	4291      	cmp	r1, r2
   b6fb8:	f100 33ff 	add.w	r3, r0, #4294967295
   b6fbc:	d100      	bne.n	b6fc0 <memcpy+0xc>
   b6fbe:	4770      	bx	lr
   b6fc0:	b510      	push	{r4, lr}
   b6fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6fca:	4291      	cmp	r1, r2
   b6fcc:	d1f9      	bne.n	b6fc2 <memcpy+0xe>
   b6fce:	bd10      	pop	{r4, pc}

000b6fd0 <memset>:
   b6fd0:	4402      	add	r2, r0
   b6fd2:	4603      	mov	r3, r0
   b6fd4:	4293      	cmp	r3, r2
   b6fd6:	d100      	bne.n	b6fda <memset+0xa>
   b6fd8:	4770      	bx	lr
   b6fda:	f803 1b01 	strb.w	r1, [r3], #1
   b6fde:	e7f9      	b.n	b6fd4 <memset+0x4>

000b6fe0 <srand>:
   b6fe0:	b538      	push	{r3, r4, r5, lr}
   b6fe2:	4b10      	ldr	r3, [pc, #64]	; (b7024 <srand+0x44>)
   b6fe4:	681d      	ldr	r5, [r3, #0]
   b6fe6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6fe8:	4604      	mov	r4, r0
   b6fea:	b9b3      	cbnz	r3, b701a <srand+0x3a>
   b6fec:	2018      	movs	r0, #24
   b6fee:	f7fe fc23 	bl	b5838 <malloc>
   b6ff2:	4602      	mov	r2, r0
   b6ff4:	63a8      	str	r0, [r5, #56]	; 0x38
   b6ff6:	b920      	cbnz	r0, b7002 <srand+0x22>
   b6ff8:	4b0b      	ldr	r3, [pc, #44]	; (b7028 <srand+0x48>)
   b6ffa:	480c      	ldr	r0, [pc, #48]	; (b702c <srand+0x4c>)
   b6ffc:	2142      	movs	r1, #66	; 0x42
   b6ffe:	f7fe fc43 	bl	b5888 <__assert_func>
   b7002:	490b      	ldr	r1, [pc, #44]	; (b7030 <srand+0x50>)
   b7004:	4b0b      	ldr	r3, [pc, #44]	; (b7034 <srand+0x54>)
   b7006:	e9c0 1300 	strd	r1, r3, [r0]
   b700a:	4b0b      	ldr	r3, [pc, #44]	; (b7038 <srand+0x58>)
   b700c:	6083      	str	r3, [r0, #8]
   b700e:	230b      	movs	r3, #11
   b7010:	8183      	strh	r3, [r0, #12]
   b7012:	2100      	movs	r1, #0
   b7014:	2001      	movs	r0, #1
   b7016:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b701a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b701c:	2200      	movs	r2, #0
   b701e:	611c      	str	r4, [r3, #16]
   b7020:	615a      	str	r2, [r3, #20]
   b7022:	bd38      	pop	{r3, r4, r5, pc}
   b7024:	2003e580 	.word	0x2003e580
   b7028:	000b7e91 	.word	0x000b7e91
   b702c:	000b7ea8 	.word	0x000b7ea8
   b7030:	abcd330e 	.word	0xabcd330e
   b7034:	e66d1234 	.word	0xe66d1234
   b7038:	0005deec 	.word	0x0005deec

000b703c <strcmp>:
   b703c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7040:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7044:	2a01      	cmp	r2, #1
   b7046:	bf28      	it	cs
   b7048:	429a      	cmpcs	r2, r3
   b704a:	d0f7      	beq.n	b703c <strcmp>
   b704c:	1ad0      	subs	r0, r2, r3
   b704e:	4770      	bx	lr

000b7050 <strcpy>:
   b7050:	4603      	mov	r3, r0
   b7052:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7056:	f803 2b01 	strb.w	r2, [r3], #1
   b705a:	2a00      	cmp	r2, #0
   b705c:	d1f9      	bne.n	b7052 <strcpy+0x2>
   b705e:	4770      	bx	lr

000b7060 <strlen>:
   b7060:	4603      	mov	r3, r0
   b7062:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7066:	2a00      	cmp	r2, #0
   b7068:	d1fb      	bne.n	b7062 <strlen+0x2>
   b706a:	1a18      	subs	r0, r3, r0
   b706c:	3801      	subs	r0, #1
   b706e:	4770      	bx	lr

000b7070 <__register_exitproc>:
   b7070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7074:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7130 <__register_exitproc+0xc0>
   b7078:	4606      	mov	r6, r0
   b707a:	f8d8 0000 	ldr.w	r0, [r8]
   b707e:	461f      	mov	r7, r3
   b7080:	460d      	mov	r5, r1
   b7082:	4691      	mov	r9, r2
   b7084:	f000 f856 	bl	b7134 <__retarget_lock_acquire_recursive>
   b7088:	4b25      	ldr	r3, [pc, #148]	; (b7120 <__register_exitproc+0xb0>)
   b708a:	681c      	ldr	r4, [r3, #0]
   b708c:	b934      	cbnz	r4, b709c <__register_exitproc+0x2c>
   b708e:	4c25      	ldr	r4, [pc, #148]	; (b7124 <__register_exitproc+0xb4>)
   b7090:	601c      	str	r4, [r3, #0]
   b7092:	4b25      	ldr	r3, [pc, #148]	; (b7128 <__register_exitproc+0xb8>)
   b7094:	b113      	cbz	r3, b709c <__register_exitproc+0x2c>
   b7096:	681b      	ldr	r3, [r3, #0]
   b7098:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b709c:	6863      	ldr	r3, [r4, #4]
   b709e:	2b1f      	cmp	r3, #31
   b70a0:	dd07      	ble.n	b70b2 <__register_exitproc+0x42>
   b70a2:	f8d8 0000 	ldr.w	r0, [r8]
   b70a6:	f000 f847 	bl	b7138 <__retarget_lock_release_recursive>
   b70aa:	f04f 30ff 	mov.w	r0, #4294967295
   b70ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b70b2:	b34e      	cbz	r6, b7108 <__register_exitproc+0x98>
   b70b4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b70b8:	b988      	cbnz	r0, b70de <__register_exitproc+0x6e>
   b70ba:	4b1c      	ldr	r3, [pc, #112]	; (b712c <__register_exitproc+0xbc>)
   b70bc:	b923      	cbnz	r3, b70c8 <__register_exitproc+0x58>
   b70be:	f8d8 0000 	ldr.w	r0, [r8]
   b70c2:	f000 f838 	bl	b7136 <__retarget_lock_release>
   b70c6:	e7f0      	b.n	b70aa <__register_exitproc+0x3a>
   b70c8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b70cc:	f7fe fbb4 	bl	b5838 <malloc>
   b70d0:	2800      	cmp	r0, #0
   b70d2:	d0f4      	beq.n	b70be <__register_exitproc+0x4e>
   b70d4:	2300      	movs	r3, #0
   b70d6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b70da:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b70de:	6863      	ldr	r3, [r4, #4]
   b70e0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b70e4:	2201      	movs	r2, #1
   b70e6:	409a      	lsls	r2, r3
   b70e8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b70ec:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b70f0:	4313      	orrs	r3, r2
   b70f2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b70f6:	2e02      	cmp	r6, #2
   b70f8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b70fc:	bf02      	ittt	eq
   b70fe:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7102:	4313      	orreq	r3, r2
   b7104:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7108:	6863      	ldr	r3, [r4, #4]
   b710a:	f8d8 0000 	ldr.w	r0, [r8]
   b710e:	1c5a      	adds	r2, r3, #1
   b7110:	3302      	adds	r3, #2
   b7112:	6062      	str	r2, [r4, #4]
   b7114:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7118:	f000 f80e 	bl	b7138 <__retarget_lock_release_recursive>
   b711c:	2000      	movs	r0, #0
   b711e:	e7c6      	b.n	b70ae <__register_exitproc+0x3e>
   b7120:	2003e7e8 	.word	0x2003e7e8
   b7124:	2003e75c 	.word	0x2003e75c
   b7128:	00000000 	.word	0x00000000
   b712c:	000b5839 	.word	0x000b5839
   b7130:	2003e5e4 	.word	0x2003e5e4

000b7134 <__retarget_lock_acquire_recursive>:
   b7134:	4770      	bx	lr

000b7136 <__retarget_lock_release>:
   b7136:	4770      	bx	lr

000b7138 <__retarget_lock_release_recursive>:
   b7138:	4770      	bx	lr

000b713a <link_code_end>:
	...

000b713c <dynalib_user>:
   b713c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b714c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b715c:	7620 7269 7574 6c61 4e00 206f 6843 6e61      virtual.No Chan
   b716c:	6567 2d20 4320 6e61 6563 6c6c 6e69 2067     ge - Cancelling 
   b717c:	4d43 0a44 7b00 6f22 226e 743a 7572 2c65     CMD..{"on":true,
   b718c:	7322 7461 3a22 2c00 6222 6972 3a22 2c00     "sat":.,"bri":.,
   b719c:	6822 6575 3a22 7b00 6f22 226e 663a 6c61     "hue":.{"on":fal
   b71ac:	6573 007d 6553 646e 6e69 2067 6f43 6d6d     se}.Sending Comm
   b71bc:	6e61 2064 6f74 4820 6575 5000 5455 2f20     and to Hue.PUT /
   b71cc:	7061 2f69 2f00 696c 6867 7374 002f 732f     api/./lights/./s
   b71dc:	6174 6574 4820 5454 2f50 2e31 0031 6f48     tate HTTP/1.1.Ho
   b71ec:	7473 203a 4300 6e6f 6574 746e 4c2d 6e65     st: .Content-Len
   b71fc:	7467 3a68 0020 6f43 746e 6e65 2d74 7954     gth: .Content-Ty
   b720c:	6570 203a 6574 7478 702f 616c 6e69 633b     pe: text/plain;c
   b721c:	6168 7372 7465 553d 4654 382d 4600 6f72     harset=UTF-8.Fro
   b722c:	206d 7548 0065 7753 7469 6863 4e4f 2520     m Hue.SwitchON %
   b723c:	2069 000a 3f3c 6d78 206c 6576 7372 6f69     i ..<?xml versio
   b724c:	3d6e 3122 302e 2022 6e65 6f63 6964 676e     n="1.0" encoding
   b725c:	223d 7475 2d66 2238 3e3f 733c 453a 766e     ="utf-8"?><s:Env
   b726c:	6c65 706f 2065 6d78 6e6c 3a73 3d73 6822     elope xmlns:s="h
   b727c:	7474 3a70 2f2f 6373 6568 616d 2e73 6d78     ttp://schemas.xm
   b728c:	736c 616f 2e70 726f 2f67 6f73 7061 652f     lsoap.org/soap/e
   b729c:	766e 6c65 706f 2f65 2022 3a73 6e65 6f63     nvelope/" s:enco
   b72ac:	6964 676e 7453 6c79 3d65 6822 7474 3a70     dingStyle="http:
   b72bc:	2f2f 6373 6568 616d 2e73 6d78 736c 616f     //schemas.xmlsoa
   b72cc:	2e70 726f 2f67 6f73 7061 652f 636e 646f     p.org/soap/encod
   b72dc:	6e69 2f67 3e22 733c 423a 646f 3e79 753c     ing/"><s:Body><u
   b72ec:	533a 7465 6942 616e 7972 7453 7461 2065     :SetBinaryState 
   b72fc:	6d78 6e6c 3a73 3d75 7522 6e72 423a 6c65     xmlns:u="urn:Bel
   b730c:	696b 3a6e 6573 7672 6369 3a65 6162 6973     kin:service:basi
   b731c:	6563 6576 746e 313a 3e22 423c 6e69 7261     cevent:1"><Binar
   b732c:	5379 6174 6574 313e 2f3c 6942 616e 7972     yState>1</Binary
   b733c:	7453 7461 3e65 2f3c 3a75 6553 4274 6e69     State></u:SetBin
   b734c:	7261 5379 6174 6574 3c3e 732f 423a 646f     aryState></s:Bod
   b735c:	3e79 2f3c 3a73 6e45 6576 6f6c 6570 003e     y></s:Envelope>.
   b736c:	4f50 5453 2f20 7075 706e 632f 6e6f 7274     POST /upnp/contr
   b737c:	6c6f 622f 7361 6369 7665 6e65 3174 4820     ol/basicevent1 H
   b738c:	5454 2f50 2e31 0031 6f43 746e 6e65 2d74     TTP/1.1.Content-
   b739c:	7954 6570 203a 6574 7478 782f 6c6d 203b     Type: text/xml; 
   b73ac:	6863 7261 6573 3d74 7475 2d66 0038 4f53     charset=utf-8.SO
   b73bc:	5041 4341 4954 4e4f 203a 7522 6e72 423a     APACTION: "urn:B
   b73cc:	6c65 696b 3a6e 6573 7672 6369 3a65 6162     elkin:service:ba
   b73dc:	6973 6563 6576 746e 313a 5323 7465 6942     sicevent:1#SetBi
   b73ec:	616e 7972 7453 7461 2265 4300 6e6f 656e     naryState".Conne
   b73fc:	7463 6f69 3a6e 6b20 6565 2d70 6c61 7669     ction: keep-aliv
   b740c:	0065 7773 7469 6863 464f 2046 6925 0a20     e.switchOFF %i .
   b741c:	3c00 783f 6c6d 7620 7265 6973 6e6f 223d     .<?xml version="
   b742c:	2e31 2230 6520 636e 646f 6e69 3d67 7522     1.0" encoding="u
   b743c:	6674 382d 3f22 3c3e 3a73 6e45 6576 6f6c     tf-8"?><s:Envelo
   b744c:	6570 7820 6c6d 736e 733a 223d 7468 7074     pe xmlns:s="http
   b745c:	2f3a 732f 6863 6d65 7361 782e 6c6d 6f73     ://schemas.xmlso
   b746c:	7061 6f2e 6772 732f 616f 2f70 6e65 6576     ap.org/soap/enve
   b747c:	6f6c 6570 222f 7320 653a 636e 646f 6e69     lope/" s:encodin
   b748c:	5367 7974 656c 223d 7468 7074 2f3a 732f     gStyle="http://s
   b749c:	6863 6d65 7361 782e 6c6d 6f73 7061 6f2e     chemas.xmlsoap.o
   b74ac:	6772 732f 616f 2f70 6e65 6f63 6964 676e     rg/soap/encoding
   b74bc:	222f 3c3e 3a73 6f42 7964 3c3e 3a75 6553     /"><s:Body><u:Se
   b74cc:	4274 6e69 7261 5379 6174 6574 7820 6c6d     tBinaryState xml
   b74dc:	736e 753a 223d 7275 3a6e 6542 6b6c 6e69     ns:u="urn:Belkin
   b74ec:	733a 7265 6976 6563 623a 7361 6369 7665     :service:basicev
   b74fc:	6e65 3a74 2231 3c3e 6942 616e 7972 7453     ent:1"><BinarySt
   b750c:	7461 3e65 3c30 422f 6e69 7261 5379 6174     ate>0</BinarySta
   b751c:	6574 3c3e 752f 533a 7465 6942 616e 7972     te></u:SetBinary
   b752c:	7453 7461 3e65 2f3c 3a73 6f42 7964 3c3e     State></s:Body><
   b753c:	732f 453a 766e 6c65 706f 3e65 5200 6165     /s:Envelope>.Rea
   b754c:	7964 7420 206f 6f47 000a 6f49 4e54 7465     dy to Go..IoTNet
   b755c:	6f77 6b72 2e00 0a00 000a 6557 636c 6d6f     work......Welcom
   b756c:	2065 2055 7261 0a65 7600 7369 6f74 3d72     e U are..vistor=
   b757c:	6925 000a 7542 7474 6e6f 6920 2073 7270     %i..Button is pr
   b758c:	7365 6573 2064 000a 6553 7474 6e69 2067     essed ..Setting 
   b759c:	6f63 6f6c 2072 666f 6220 6c75 2062 6925     color of bulb %i
   b75ac:	7420 206f 6f63 6f6c 2072 6925 000a 3931      to color %i..19
   b75bc:	2e32 3631 2e38 2e31 3033 3100 3239 312e     2.168.1.30.192.1
   b75cc:	3836 312e 332e 0031 3931 2e32 3631 2e38     68.1.31.192.168.
   b75dc:	2e31 3233 3100 3239 312e 3836 312e 332e     1.32.192.168.1.3
   b75ec:	0033 3931 2e32 3631 2e38 2e31 3433           3.192.168.1.34.

000b75fb <_ZL11hueUsername>:
   b75fb:	514d 5a6c 697a 4f52 5730 6961 4d35 4d73     MQlZziRO0Wai5MsM
   b760b:	6c48 386c 4178 4155 7151 3877 5135 7272     Hll8xAUAQqw85Qrr
   b761b:	7438 334d 4637 5433                          8tM37F3T.

000b7624 <_ZL8hueHubIP>:
   b7624:	3931 2e32 3631 2e38 2e31 0035               192.168.1.5.

000b7630 <_ZTV16Adafruit_SSD1306>:
	...
   b7638:	4b91 000b 4c21 000b 52c5 000b 5d59 000b     .K..!L...R..Y]..
   b7648:	4b95 000b 4fdd 000b 4a1d 000b 48ad 000b     .K...O...J...H..
   b7658:	509b 000b 5139 000b 516f 000b 518b 000b     .P..9Q..oQ...Q..

000b7668 <_ZL4font>:
   b7668:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b7678:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b7688:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b7698:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b76a8:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b76b8:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b76c8:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b76d8:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b76e8:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b76f8:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b7708:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b7718:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b7728:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b7738:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b7748:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b7758:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b7768:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b7778:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b7788:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b7798:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b77a8:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b77b8:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b77c8:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b77d8:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b77e8:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b77f8:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b7808:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b7818:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b7828:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b7838:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b7848:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b7858:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b7868:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b7878:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b7888:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b7898:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b78a8:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b78b8:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b78c8:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b78d8:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b78e8:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b78f8:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b7908:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b7918:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b7928:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b7938:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b7948:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b7958:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b7968:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b7978:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b7988:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b7998:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b79a8:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b79b8:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b79c8:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b79d8:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b79e8:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b79f8:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b7a08:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b7a18:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b7a28:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b7a38:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b7a48:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b7a58:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b7a68:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b7a78:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b7a88:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b7a98:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b7aa8:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b7ab8:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b7ac8:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b7ad8:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b7ae8:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b7af8:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b7b08:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b7b18:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b7b28:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b7b38:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b7b48:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b7b58:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b7b64 <_ZTV12Adafruit_GFX>:
	...
   b7b74:	52c5 000b 5d59 000b 40a1 000b 4fdd 000b     .R..Y]...@...O..
   b7b84:	5103 000b 511f 000b 509b 000b 5139 000b     .Q...Q...P..9Q..
   b7b94:	516f 000b 518b 000b                         oQ...Q..

000b7b9c <_ZTVN5spark13EthernetClassE>:
	...
   b7ba4:	5907 000b 58fd 000b 58f3 000b 58e9 000b     .Y...X...X...X..
   b7bb4:	58dd 000b 58d1 000b 6a25 000b 6a2d 000b     .X...X..%j..-j..
   b7bc4:	58c5 000b 58bd 000b 58b3 000b 58a9 000b     .X...X...X...X..
   b7bd4:	6a5d 000b                                   ]j..

000b7bd8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b7bd8:	0800 1810 2820 3830                         .... (08

000b7be0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b7be8:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b7bf8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b7c08 <_ZTV9IPAddress>:
	...
   b7c10:	6055 000b 6045 000b 6047 000b               U`..E`..G`..

000b7c1c <_ZTV9USBSerial>:
	...
   b7c24:	6167 000b 61cf 000b 61a5 000b 5d59 000b     ga...a...a..Y]..
   b7c34:	6197 000b 6169 000b 6179 000b 61c9 000b     .a..ia..ya...a..
   b7c44:	6189 000b 6161 000b                         .a..aa..

000b7c4c <_ZTV11USARTSerial>:
	...
   b7c54:	6271 000b 62dd 000b 62b5 000b 5d59 000b     qb...b...b..Y]..
   b7c64:	6285 000b 62a1 000b 6293 000b 62af 000b     .b...b...b...b..
   b7c74:	6273 000b 6277 000b                         sb..wb..

000b7c7c <_ZTV7TwoWire>:
	...
   b7c84:	6315 000b 635f 000b 6337 000b 6317 000b     .c.._c..7c...c..
   b7c94:	633f 000b 6347 000b 634f 000b 6357 000b     ?c..Gc..Oc..Wc..
   b7ca4:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b7cb4:	2072 203d 6425 0000                         r = %d..

000b7cbc <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7cc4:	6455 000b 6479 000b 6963 000b 6487 000b     Ud..yd..ci...d..
   b7cd4:	6459 000b                                   Yd..

000b7cd8 <_ZTV9TCPClient>:
	...
   b7ce0:	410d 000b 4141 000b 63d1 000b 63eb 000b     .A..AA...c...c..
   b7cf0:	67f9 000b 6415 000b 666f 000b 6449 000b     .g...d..of..Id..
   b7d00:	6701 000b 6541 000b 669d 000b 68ad 000b     .g..Ae...f...h..
   b7d10:	663d 000b 644b 000b 63fd 000b 648d 000b     =f..Kd...c...d..
   b7d20:	6521 000b                                   !e..

000b7d24 <_ZTVN5spark9WiFiClassE>:
	...
   b7d2c:	69c7 000b 69bd 000b 69b3 000b 6969 000b     .i...i...i..ii..
   b7d3c:	69a7 000b 699b 000b 6a25 000b 6a2d 000b     .i...i..%j..-j..
   b7d4c:	698f 000b 6987 000b 697d 000b 6973 000b     .i...i..}i..si..
   b7d5c:	6a5d 000b                                   ]j..

000b7d60 <_ZTVN5spark12NetworkClassE>:
	...
   b7d68:	69e5 000b 69ef 000b 69f9 000b 6a03 000b     .i...i...i...j..
   b7d78:	6a0d 000b 6a19 000b 6a25 000b 6a2d 000b     .j...j..%j..-j..
   b7d88:	6a35 000b 6a41 000b 6a49 000b 6a53 000b     5j..Aj..Ij..Sj..
   b7d98:	6a5d 000b                                   ]j..

000b7d9c <_ZSt7nothrow>:
	...

000b7d9d <_ZTSSt19_Sp_make_shared_tag>:
   b7d9d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b7dad:	6572 5f64 6174 0067 0000                     red_tag....

000b7db8 <_ZTISt19_Sp_make_shared_tag>:
   b7db8:	7df8 000b 7d9d 000b                         .}...}..

000b7dc0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7dc0:	7e58 000b 7dcc 000b 7e7c 000b               X~...}..|~..

000b7dcc <_ZTSN10__cxxabiv117__class_type_infoE>:
   b7dcc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b7ddc:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b7dec:	0045 0000                                   E...

000b7df0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7df0:	0000 0000 7dc0 000b 6dd1 000b 6de5 000b     .....}...m...m..
   b7e00:	6f79 000b 6f79 000b 6e4f 000b 6d91 000b     yo..yo..On...m..
   b7e10:	6e37 000b 6df9 000b 6dc3 000b               7n...m...m..

000b7e1c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b7e1c:	7e58 000b 7e28 000b 7dc0 000b               X~..(~...}..

000b7e28 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b7e28:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b7e38:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b7e48:	666e 456f 0000 0000                         nfoE....

000b7e50 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b7e50:	0000 0000 7e1c 000b 6e79 000b 6e8d 000b     .....~..yn...n..
   b7e60:	6f79 000b 6f79 000b 6e4f 000b 6d91 000b     yo..yo..On...m..
   b7e70:	6f4d 000b 6ed9 000b 6ea1 000b               Mo...n...n..

000b7e7c <_ZTISt9type_info>:
   b7e7c:	7df8 000b 7e84 000b                         .}...~..

000b7e84 <_ZTSSt9type_info>:
   b7e84:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b7e94:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b7ea4:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b7eb4:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b7ec4:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b7ed4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7ee4:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7ef4:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b7f04:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7f14:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7f25 <link_const_variable_data_end>:
   b7f25:	00          	.byte	0x00
	...

000b7f28 <link_constructors_location>:
   b7f28:	000b4811 	.word	0x000b4811
   b7f2c:	000b5911 	.word	0x000b5911
   b7f30:	000b5aa5 	.word	0x000b5aa5
   b7f34:	000b5d49 	.word	0x000b5d49
   b7f38:	000b5ed5 	.word	0x000b5ed5
   b7f3c:	000b5ee5 	.word	0x000b5ee5
   b7f40:	000b5f01 	.word	0x000b5f01
   b7f44:	000b69d1 	.word	0x000b69d1
   b7f48:	000b6b35 	.word	0x000b6b35

000b7f4c <link_constructors_end>:
   b7f4c:	00000000 	.word	0x00000000
