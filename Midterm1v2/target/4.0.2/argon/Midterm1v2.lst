
c:/Users/vcox/Documents/IoT/SuvaSmartRoom/Midterm1v2/target/4.0.2/argon/Midterm1v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000026a4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b66c0  000b66c0  000066c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b66e4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000488  2003e1e8  000b66e8  0001e1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000180  2003e670  2003e670  0002e670  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b6b70  000b6b70  00026b70  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b6b98  000b6b98  00026b98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000ff1b3  00000000  00000000  00026b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000111d1  00000000  00000000  00125d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00033ad9  00000000  00000000  00136f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028f8  00000000  00000000  0016a9f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000093c0  00000000  00000000  0016d2f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038763  00000000  00000000  001766b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003a904  00000000  00000000  001aee14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012ede0  00000000  00000000  001e9718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000070e8  00000000  00000000  003184f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 fe9f 	bl	b5d70 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 fea7 	bl	b5d8c <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e1e8 	.word	0x2003e1e8
   b4048:	000b66e8 	.word	0x000b66e8
   b404c:	2003e670 	.word	0x2003e670
   b4050:	2003e670 	.word	0x2003e670
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fa99 	bl	b5594 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b6694 	.word	0x000b6694
   b407c:	000b66b8 	.word	0x000b66b8

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b82e 	b.w	b40e0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f85f 	bl	b4148 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 ba39 	b.w	b5504 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f001 b833 	b.w	b50fc <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f001 b839 	b.w	b510c <free>
	...

000b409c <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b409e:	4a03      	ldr	r2, [pc, #12]	; (b40ac <__cxa_pure_virtual+0x10>)
   b40a0:	4903      	ldr	r1, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x14>)
   b40a2:	200c      	movs	r0, #12
   b40a4:	f000 ff96 	bl	b4fd4 <panic_>
  while (1);
   b40a8:	e7fe      	b.n	b40a8 <__cxa_pure_virtual+0xc>
   b40aa:	bf00      	nop
   b40ac:	000b4d75 	.word	0x000b4d75
   b40b0:	000b5ee8 	.word	0x000b5ee8

000b40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b4:	7800      	ldrb	r0, [r0, #0]
   b40b6:	fab0 f080 	clz	r0, r0
   b40ba:	0940      	lsrs	r0, r0, #5
   b40bc:	4770      	bx	lr

000b40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40be:	2301      	movs	r3, #1
   b40c0:	7003      	strb	r3, [r0, #0]
   b40c2:	4770      	bx	lr

000b40c4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c4:	b40e      	push	{r1, r2, r3}
   b40c6:	b503      	push	{r0, r1, lr}
   b40c8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ca:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40cc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40d2:	f001 f9a8 	bl	b5426 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40d6:	b002      	add	sp, #8
   b40d8:	f85d eb04 	ldr.w	lr, [sp], #4
   b40dc:	b003      	add	sp, #12
   b40de:	4770      	bx	lr

000b40e0 <setup>:
//SYSTEM_MODE(MANUAL); //when internet connection is needed.

SYSTEM_MODE(SEMI_AUTOMATIC); //when no internet connection is needed.


void setup() {
   b40e0:	b510      	push	{r4, lr}
    // while(WiFi.connecting()) {
    // Serial.printf(".");


//below this line is display stuff
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); // initialize with the I2C addr 0x3C (for the 128x64)
   b40e2:	4c15      	ldr	r4, [pc, #84]	; (b4138 <setup+0x58>)
   b40e4:	223c      	movs	r2, #60	; 0x3c
   b40e6:	4620      	mov	r0, r4
   b40e8:	2102      	movs	r1, #2
   b40ea:	f000 fb79 	bl	b47e0 <_ZN16Adafruit_SSD13065beginEhh>
  display.setCursor(0,0);
   b40ee:	2200      	movs	r2, #0
   b40f0:	4611      	mov	r1, r2
   b40f2:	4620      	mov	r0, r4
   b40f4:	f000 fdf2 	bl	b4cdc <_ZN12Adafruit_GFX9setCursorEss>
  display.display(); //this will show the Adafruit logo (splashscreen)
   b40f8:	4620      	mov	r0, r4
   b40fa:	f000 fb01 	bl	b4700 <_ZN16Adafruit_SSD13067displayEv>
  delay(1500); //this will delay the splashscreen to increase the marketing effect
   b40fe:	f240 50dc 	movw	r0, #1500	; 0x5dc
   b4102:	f001 f9d3 	bl	b54ac <delay>
  display.clearDisplay();
   b4106:	4620      	mov	r0, r4
//   display.invertDisplay(true);
//   delay(1000);

// below this line is PIN stuff

  pinMode(led, OUTPUT);         // initalize LED as an output
   b4108:	4c0c      	ldr	r4, [pc, #48]	; (b413c <setup+0x5c>)
  display.clearDisplay();
   b410a:	f000 fa81 	bl	b4610 <_ZN16Adafruit_SSD130612clearDisplayEv>
  pinMode(led, OUTPUT);         // initalize LED as an output
   b410e:	8820      	ldrh	r0, [r4, #0]
   b4110:	2101      	movs	r1, #1
   b4112:	f001 fd47 	bl	b5ba4 <pinMode>
  pinMode(ms_sensor, INPUT);    // initialize motion sensor as an input
   b4116:	4b0a      	ldr	r3, [pc, #40]	; (b4140 <setup+0x60>)
   b4118:	2100      	movs	r1, #0
   b411a:	8818      	ldrh	r0, [r3, #0]
   b411c:	f001 fd42 	bl	b5ba4 <pinMode>
  pinMode(button, INPUT);       // initialize button as an input
   b4120:	4b08      	ldr	r3, [pc, #32]	; (b4144 <setup+0x64>)
   b4122:	2100      	movs	r1, #0
   b4124:	8818      	ldrh	r0, [r3, #0]
   b4126:	f001 fd3d 	bl	b5ba4 <pinMode>
  digitalWrite(led, LOW);       // set the LED as off
   b412a:	8820      	ldrh	r0, [r4, #0]
   b412c:	2100      	movs	r1, #0

}
   b412e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(led, LOW);       // set the LED as off
   b4132:	f001 bd48 	b.w	b5bc6 <digitalWrite>
   b4136:	bf00      	nop
   b4138:	2003e688 	.word	0x2003e688
   b413c:	2003e1ec 	.word	0x2003e1ec
   b4140:	2003e1f0 	.word	0x2003e1f0
   b4144:	2003e1e8 	.word	0x2003e1e8

000b4148 <loop>:

void loop() {
   b4148:	b538      	push	{r3, r4, r5, lr}
// delay(1000);


//below this line is PIN stuff

  ms_val = digitalRead(ms_sensor);      // read motion sensor value
   b414a:	4b2e      	ldr	r3, [pc, #184]	; (b4204 <loop+0xbc>)
   b414c:	4c2e      	ldr	r4, [pc, #184]	; (b4208 <loop+0xc0>)
   b414e:	8818      	ldrh	r0, [r3, #0]
   b4150:	f001 fd52 	bl	b5bf8 <digitalRead>
  button_val = digitalRead(button);     // read button value
   b4154:	4b2d      	ldr	r3, [pc, #180]	; (b420c <loop+0xc4>)
  ms_val = digitalRead(ms_sensor);      // read motion sensor value
   b4156:	6020      	str	r0, [r4, #0]
  button_val = digitalRead(button);     // read button value
   b4158:	8818      	ldrh	r0, [r3, #0]
   b415a:	f001 fd4d 	bl	b5bf8 <digitalRead>
   b415e:	4b2c      	ldr	r3, [pc, #176]	; (b4210 <loop+0xc8>)
  
  if (ms_val == HIGH) {
   b4160:	6824      	ldr	r4, [r4, #0]
  button_val = digitalRead(button);     // read button value
   b4162:	6018      	str	r0, [r3, #0]
  if (ms_val == HIGH) {
   b4164:	4b2b      	ldr	r3, [pc, #172]	; (b4214 <loop+0xcc>)
   b4166:	2c01      	cmp	r4, #1
      if (ms_state == LOW) {
   b4168:	681a      	ldr	r2, [r3, #0]
  if (ms_val == HIGH) {
   b416a:	d13d      	bne.n	b41e8 <loop+0xa0>
      if (ms_state == LOW) {
   b416c:	b902      	cbnz	r2, b4170 <loop+0x28>
          ms_state = HIGH;
   b416e:	601c      	str	r4, [r3, #0]
      if (ms_state == HIGH) {
          ms_state = LOW;
      }
  }

  if (button_val == LOW) {
   b4170:	4d29      	ldr	r5, [pc, #164]	; (b4218 <loop+0xd0>)
   b4172:	2800      	cmp	r0, #0
   b4174:	d13d      	bne.n	b41f2 <loop+0xaa>
        button_presses = button_presses + 1;                            // running total of total button presses
   b4176:	4a29      	ldr	r2, [pc, #164]	; (b421c <loop+0xd4>)
   b4178:	6813      	ldr	r3, [r2, #0]


        if (ms_val == HIGH) {            // motion sensor is activated
   b417a:	2c01      	cmp	r4, #1
        button_presses = button_presses + 1;                            // running total of total button presses
   b417c:	f103 0301 	add.w	r3, r3, #1
   b4180:	6013      	str	r3, [r2, #0]
        if (ms_val == HIGH) {            // motion sensor is activated
   b4182:	d10b      	bne.n	b419c <loop+0x54>
        //if (button_val == HIGH && ms_val == HIGH) {                     // check if button is pressed and motion sensor is activated
            count = count + 1;
   b4184:	682b      	ldr	r3, [r5, #0]
   b4186:	3301      	adds	r3, #1
   b4188:	602b      	str	r3, [r5, #0]
            digitalWrite(led, HIGH);                                    // turn LED on
   b418a:	4b25      	ldr	r3, [pc, #148]	; (b4220 <loop+0xd8>)
   b418c:	4621      	mov	r1, r4
   b418e:	8818      	ldrh	r0, [r3, #0]
   b4190:	f001 fd19 	bl	b5bc6 <digitalWrite>
        
            if (state == LOW) {                                         // check if state is LOW
   b4194:	4b23      	ldr	r3, [pc, #140]	; (b4224 <loop+0xdc>)
   b4196:	681a      	ldr	r2, [r3, #0]
   b4198:	b902      	cbnz	r2, b419c <loop+0x54>
                state = HIGH;                                           // check if state is HIGH
   b419a:	601c      	str	r4, [r3, #0]
            }
        }
        
        delay(500);                                                     // delay 500 milliseconds
   b419c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    }

  else {
      digitalWrite(led, LOW);                       // turn LED OFF
      delay(1500);                                   // delay 500 milliseconds 
   b41a0:	f001 f984 	bl	b54ac <delay>
       // state = LOW;                                // update variable state to LOW
    }
  }
  

    display.setTextSize(2);
   b41a4:	4820      	ldr	r0, [pc, #128]	; (b4228 <loop+0xe0>)
   b41a6:	2102      	movs	r1, #2
   b41a8:	f000 fd9b 	bl	b4ce2 <_ZN12Adafruit_GFX11setTextSizeEh>
    display.setTextColor(WHITE);
   b41ac:	481e      	ldr	r0, [pc, #120]	; (b4228 <loop+0xe0>)
   b41ae:	2101      	movs	r1, #1
   b41b0:	f000 fd9c 	bl	b4cec <_ZN12Adafruit_GFX12setTextColorEt>
    display.setCursor(1,15);
   b41b4:	220f      	movs	r2, #15
   b41b6:	481c      	ldr	r0, [pc, #112]	; (b4228 <loop+0xe0>)
   b41b8:	2101      	movs	r1, #1
   b41ba:	f000 fd8f 	bl	b4cdc <_ZN12Adafruit_GFX9setCursorEss>
    display.printf("Welcome U are\n");
   b41be:	491b      	ldr	r1, [pc, #108]	; (b422c <loop+0xe4>)
   b41c0:	4819      	ldr	r0, [pc, #100]	; (b4228 <loop+0xe0>)
   b41c2:	f7ff ff7f 	bl	b40c4 <_ZN5Print6printfEPKcz>
    display.printf("vistor=%i\n",count);
   b41c6:	682a      	ldr	r2, [r5, #0]
   b41c8:	4919      	ldr	r1, [pc, #100]	; (b4230 <loop+0xe8>)
   b41ca:	4817      	ldr	r0, [pc, #92]	; (b4228 <loop+0xe0>)
   b41cc:	f7ff ff7a 	bl	b40c4 <_ZN5Print6printfEPKcz>
    display.display();
   b41d0:	4815      	ldr	r0, [pc, #84]	; (b4228 <loop+0xe0>)
   b41d2:	f000 fa95 	bl	b4700 <_ZN16Adafruit_SSD13067displayEv>
    delay(1500); 
   b41d6:	f240 50dc 	movw	r0, #1500	; 0x5dc
   b41da:	f001 f967 	bl	b54ac <delay>
    display.clearDisplay();
}
   b41de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    display.clearDisplay();
   b41e2:	4811      	ldr	r0, [pc, #68]	; (b4228 <loop+0xe0>)
   b41e4:	f000 ba14 	b.w	b4610 <_ZN16Adafruit_SSD130612clearDisplayEv>
      if (ms_state == HIGH) {
   b41e8:	2a01      	cmp	r2, #1
          ms_state = LOW;
   b41ea:	bf04      	itt	eq
   b41ec:	2200      	moveq	r2, #0
   b41ee:	601a      	streq	r2, [r3, #0]
   b41f0:	e7be      	b.n	b4170 <loop+0x28>
      digitalWrite(led, LOW);                       // turn LED OFF
   b41f2:	4b0b      	ldr	r3, [pc, #44]	; (b4220 <loop+0xd8>)
   b41f4:	2100      	movs	r1, #0
   b41f6:	8818      	ldrh	r0, [r3, #0]
   b41f8:	f001 fce5 	bl	b5bc6 <digitalWrite>
      delay(1500);                                   // delay 500 milliseconds 
   b41fc:	f240 50dc 	movw	r0, #1500	; 0x5dc
   b4200:	e7ce      	b.n	b41a0 <loop+0x58>
   b4202:	bf00      	nop
   b4204:	2003e1f0 	.word	0x2003e1f0
   b4208:	2003e6b0 	.word	0x2003e6b0
   b420c:	2003e1e8 	.word	0x2003e1e8
   b4210:	2003e680 	.word	0x2003e680
   b4214:	2003e6ac 	.word	0x2003e6ac
   b4218:	2003e684 	.word	0x2003e684
   b421c:	2003e67c 	.word	0x2003e67c
   b4220:	2003e1ec 	.word	0x2003e1ec
   b4224:	2003e6b4 	.word	0x2003e6b4
   b4228:	2003e688 	.word	0x2003e688
   b422c:	000b5efd 	.word	0x000b5efd
   b4230:	000b5f0c 	.word	0x000b5f0c

000b4234 <_GLOBAL__sub_I_display>:
}
   b4234:	b508      	push	{r3, lr}
Adafruit_SSD1306 display(OLED_RESET);
   b4236:	4808      	ldr	r0, [pc, #32]	; (b4258 <_GLOBAL__sub_I_display+0x24>)
   b4238:	2104      	movs	r1, #4
   b423a:	f000 f9d3 	bl	b45e4 <_ZN16Adafruit_SSD1306C1Ea>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b423e:	4b07      	ldr	r3, [pc, #28]	; (b425c <_GLOBAL__sub_I_display+0x28>)
   b4240:	2200      	movs	r2, #0
   b4242:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4246:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b424a:	609a      	str	r2, [r3, #8]
}
   b424c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4250:	2002      	movs	r0, #2
   b4252:	f000 bec7 	b.w	b4fe4 <set_system_mode>
   b4256:	bf00      	nop
   b4258:	2003e688 	.word	0x2003e688
   b425c:	2003e670 	.word	0x2003e670

000b4260 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4260:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b4262:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4264:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4268:	2d02      	cmp	r5, #2
   b426a:	d069      	beq.n	b4340 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b426c:	2d03      	cmp	r5, #3
   b426e:	f000 8099 	beq.w	b43a4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b4272:	2d01      	cmp	r5, #1
   b4274:	d16c      	bne.n	b4350 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b4276:	8905      	ldrh	r5, [r0, #8]
   b4278:	43d2      	mvns	r2, r2
   b427a:	442a      	add	r2, r5
   b427c:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b427e:	2a00      	cmp	r2, #0
   b4280:	db5d      	blt.n	b433e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4282:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4286:	4295      	cmp	r5, r2
   b4288:	dd59      	ble.n	b433e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b428a:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b428c:	bfbe      	ittt	lt
   b428e:	185b      	addlt	r3, r3, r1
   b4290:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4292:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b4294:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4298:	18cd      	adds	r5, r1, r3
   b429a:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b429c:	bfc4      	itt	gt
   b429e:	1a43      	subgt	r3, r0, r1
   b42a0:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b42a2:	2b00      	cmp	r3, #0
   b42a4:	dd4b      	ble.n	b433e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b42a6:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b42aa:	f8df c120 	ldr.w	ip, [pc, #288]	; b43cc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b42ae:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b42b2:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b42b6:	b2db      	uxtb	r3, r3
  pBuf += x;
   b42b8:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b42bc:	d01a      	beq.n	b42f4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b42be:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b42c2:	4e40      	ldr	r6, [pc, #256]	; (b43c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b42c4:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b42c6:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b42c8:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b42ca:	bf3f      	itttt	cc
   b42cc:	eba5 0e03 	subcc.w	lr, r5, r3
   b42d0:	26ff      	movcc	r6, #255	; 0xff
   b42d2:	fa46 f60e 	asrcc.w	r6, r6, lr
   b42d6:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b42d8:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b42dc:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b42de:	bf0c      	ite	eq
   b42e0:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b42e2:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b42e4:	42ab      	cmp	r3, r5
   b42e6:	f80c 6002 	strb.w	r6, [ip, r2]
   b42ea:	d328      	bcc.n	b433e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b42ec:	3908      	subs	r1, #8
   b42ee:	440b      	add	r3, r1
   b42f0:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b42f2:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b42f4:	2b07      	cmp	r3, #7
   b42f6:	d919      	bls.n	b432c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b42f8:	2c01      	cmp	r4, #1
   b42fa:	f04f 35ff 	mov.w	r5, #4294967295
   b42fe:	bf18      	it	ne
   b4300:	2500      	movne	r5, #0
   b4302:	b2ed      	uxtb	r5, r5
   b4304:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4308:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b430a:	3a08      	subs	r2, #8
   b430c:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b430e:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4310:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4314:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4318:	d8f7      	bhi.n	b430a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b431a:	f1a3 0208 	sub.w	r2, r3, #8
   b431e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4322:	3201      	adds	r2, #1
   b4324:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4328:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b432c:	b13b      	cbz	r3, b433e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b432e:	4a26      	ldr	r2, [pc, #152]	; (b43c8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b4330:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b4332:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4334:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4336:	bf0c      	ite	eq
   b4338:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b433a:	4393      	bicne	r3, r2
   b433c:	7003      	strb	r3, [r0, #0]
}
   b433e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4340:	8945      	ldrh	r5, [r0, #10]
   b4342:	43d2      	mvns	r2, r2
   b4344:	442a      	add	r2, r5
      x -= (w-1);
   b4346:	18cd      	adds	r5, r1, r3
   b4348:	8901      	ldrh	r1, [r0, #8]
   b434a:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b434c:	b212      	sxth	r2, r2
      x -= (w-1);
   b434e:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b4350:	2a00      	cmp	r2, #0
   b4352:	dbf4      	blt.n	b433e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4354:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4358:	4295      	cmp	r5, r2
   b435a:	ddf0      	ble.n	b433e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b435c:	2900      	cmp	r1, #0
    w += x;
   b435e:	bfbe      	ittt	lt
   b4360:	185b      	addlt	r3, r3, r1
   b4362:	b21b      	sxthlt	r3, r3
    x = 0;
   b4364:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b4366:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b436a:	18ce      	adds	r6, r1, r3
   b436c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b436e:	bfc4      	itt	gt
   b4370:	1a6b      	subgt	r3, r5, r1
   b4372:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4374:	2b00      	cmp	r3, #0
   b4376:	dde2      	ble.n	b433e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4378:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b437a:	2580      	movs	r5, #128	; 0x80
   b437c:	fb10 1105 	smlabb	r1, r0, r5, r1
   b4380:	4812      	ldr	r0, [pc, #72]	; (b43cc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b4382:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b4384:	f002 0007 	and.w	r0, r2, #7
   b4388:	2201      	movs	r2, #1
   b438a:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b438c:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b438e:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b4390:	440b      	add	r3, r1
   b4392:	d10c      	bne.n	b43ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b4394:	428b      	cmp	r3, r1
   b4396:	d0d2      	beq.n	b433e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4398:	f811 0b01 	ldrb.w	r0, [r1], #1
   b439c:	4310      	orrs	r0, r2
   b439e:	f801 0c01 	strb.w	r0, [r1, #-1]
   b43a2:	e7f7      	b.n	b4394 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b43a4:	18cd      	adds	r5, r1, r3
   b43a6:	8941      	ldrh	r1, [r0, #10]
   b43a8:	1b49      	subs	r1, r1, r5
   b43aa:	b209      	sxth	r1, r1
      break;
   b43ac:	e767      	b.n	b427e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b43ae:	43d2      	mvns	r2, r2
   b43b0:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b43b2:	428b      	cmp	r3, r1
   b43b4:	d0c3      	beq.n	b433e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b43b6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b43ba:	4010      	ands	r0, r2
   b43bc:	f801 0c01 	strb.w	r0, [r1, #-1]
   b43c0:	e7f7      	b.n	b43b2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b43c2:	bf00      	nop
   b43c4:	2003e1fc 	.word	0x2003e1fc
   b43c8:	2003e1f4 	.word	0x2003e1f4
   b43cc:	2003e204 	.word	0x2003e204

000b43d0 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b43d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b43d2:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b43d4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b43d8:	2d02      	cmp	r5, #2
   b43da:	d034      	beq.n	b4446 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b43dc:	2d03      	cmp	r5, #3
   b43de:	f000 809b 	beq.w	b4518 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b43e2:	2d01      	cmp	r5, #1
   b43e4:	d137      	bne.n	b4456 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b43e6:	18d5      	adds	r5, r2, r3
   b43e8:	8902      	ldrh	r2, [r0, #8]
   b43ea:	1b52      	subs	r2, r2, r5
   b43ec:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b43ee:	2900      	cmp	r1, #0
   b43f0:	f2c0 8091 	blt.w	b4516 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b43f4:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b43f8:	428d      	cmp	r5, r1
   b43fa:	f340 808c 	ble.w	b4516 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b43fe:	2a00      	cmp	r2, #0
    w += x;
   b4400:	bfbe      	ittt	lt
   b4402:	189b      	addlt	r3, r3, r2
   b4404:	b21b      	sxthlt	r3, r3
    x = 0;
   b4406:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b4408:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b440c:	18d6      	adds	r6, r2, r3
   b440e:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4410:	bfc4      	itt	gt
   b4412:	1aab      	subgt	r3, r5, r2
   b4414:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4416:	2b00      	cmp	r3, #0
   b4418:	dd7d      	ble.n	b4516 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b441a:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b441c:	2580      	movs	r5, #128	; 0x80
   b441e:	fb10 2205 	smlabb	r2, r0, r5, r2
   b4422:	4845      	ldr	r0, [pc, #276]	; (b4538 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b4424:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b4426:	f001 0007 	and.w	r0, r1, #7
   b442a:	2101      	movs	r1, #1
   b442c:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b442e:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4430:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b4432:	4413      	add	r3, r2
   b4434:	d175      	bne.n	b4522 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b4436:	429a      	cmp	r2, r3
   b4438:	d06d      	beq.n	b4516 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b443a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b443e:	4308      	orrs	r0, r1
   b4440:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4444:	e7f7      	b.n	b4436 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b4446:	8905      	ldrh	r5, [r0, #8]
   b4448:	43c9      	mvns	r1, r1
   b444a:	4429      	add	r1, r5
      y -= (h-1);
   b444c:	18d5      	adds	r5, r2, r3
   b444e:	8942      	ldrh	r2, [r0, #10]
   b4450:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b4452:	b209      	sxth	r1, r1
      y -= (h-1);
   b4454:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b4456:	2900      	cmp	r1, #0
   b4458:	db5d      	blt.n	b4516 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b445a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b445e:	428d      	cmp	r5, r1
   b4460:	dd59      	ble.n	b4516 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b4462:	2a00      	cmp	r2, #0
    __h += __y;
   b4464:	bfbe      	ittt	lt
   b4466:	189b      	addlt	r3, r3, r2
   b4468:	b21b      	sxthlt	r3, r3
    __y = 0;
   b446a:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b446c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4470:	18d5      	adds	r5, r2, r3
   b4472:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4474:	bfc4      	itt	gt
   b4476:	1a83      	subgt	r3, r0, r2
   b4478:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b447a:	2b00      	cmp	r3, #0
   b447c:	dd4b      	ble.n	b4516 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b447e:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b4482:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b4538 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b4486:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b448a:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b448e:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4490:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b4494:	d01a      	beq.n	b44cc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b4496:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b449a:	4e28      	ldr	r6, [pc, #160]	; (b453c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b449c:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b449e:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b44a0:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b44a2:	bf3f      	itttt	cc
   b44a4:	eba5 0e03 	subcc.w	lr, r5, r3
   b44a8:	26ff      	movcc	r6, #255	; 0xff
   b44aa:	fa46 f60e 	asrcc.w	r6, r6, lr
   b44ae:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b44b0:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b44b4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b44b6:	bf0c      	ite	eq
   b44b8:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b44ba:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b44bc:	42ab      	cmp	r3, r5
   b44be:	f80c 6001 	strb.w	r6, [ip, r1]
   b44c2:	d328      	bcc.n	b4516 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b44c4:	3a08      	subs	r2, #8
   b44c6:	4413      	add	r3, r2
   b44c8:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b44ca:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b44cc:	2b07      	cmp	r3, #7
   b44ce:	d919      	bls.n	b4504 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b44d0:	2c01      	cmp	r4, #1
   b44d2:	f04f 35ff 	mov.w	r5, #4294967295
   b44d6:	bf18      	it	ne
   b44d8:	2500      	movne	r5, #0
   b44da:	b2ed      	uxtb	r5, r5
   b44dc:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b44e0:	461a      	mov	r2, r3
      h -= 8;
   b44e2:	3a08      	subs	r2, #8
   b44e4:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b44e6:	2a07      	cmp	r2, #7
      *pBuf = val;
   b44e8:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b44ec:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b44f0:	d8f7      	bhi.n	b44e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b44f2:	f1a3 0208 	sub.w	r2, r3, #8
   b44f6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b44fa:	3201      	adds	r2, #1
   b44fc:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4500:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b4504:	b13b      	cbz	r3, b4516 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b4506:	4a0e      	ldr	r2, [pc, #56]	; (b4540 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b4508:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b450a:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b450c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b450e:	bf0c      	ite	eq
   b4510:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b4512:	4393      	bicne	r3, r2
   b4514:	7003      	strb	r3, [r0, #0]
}
   b4516:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4518:	8945      	ldrh	r5, [r0, #10]
   b451a:	43c9      	mvns	r1, r1
   b451c:	4429      	add	r1, r5
   b451e:	b209      	sxth	r1, r1
      break;
   b4520:	e765      	b.n	b43ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b4522:	43c9      	mvns	r1, r1
   b4524:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b4526:	429a      	cmp	r2, r3
   b4528:	d0f5      	beq.n	b4516 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b452a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b452e:	4008      	ands	r0, r1
   b4530:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4534:	e7f7      	b.n	b4526 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b4536:	bf00      	nop
   b4538:	2003e204 	.word	0x2003e204
   b453c:	2003e1fc 	.word	0x2003e1fc
   b4540:	2003e1f4 	.word	0x2003e1f4

000b4544 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b4544:	4770      	bx	lr
	...

000b4548 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b454a:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b454c:	4606      	mov	r6, r0
   b454e:	4614      	mov	r4, r2
   b4550:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4552:	db2d      	blt.n	b45b0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4554:	f000 fbcf 	bl	b4cf6 <_ZN12Adafruit_GFX5widthEv>
   b4558:	42a8      	cmp	r0, r5
   b455a:	dd29      	ble.n	b45b0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b455c:	2c00      	cmp	r4, #0
   b455e:	db27      	blt.n	b45b0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4560:	4630      	mov	r0, r6
   b4562:	f000 fbcb 	bl	b4cfc <_ZN12Adafruit_GFX6heightEv>
   b4566:	42a0      	cmp	r0, r4
   b4568:	dd22      	ble.n	b45b0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b456a:	4630      	mov	r0, r6
   b456c:	f000 fbc1 	bl	b4cf2 <_ZN12Adafruit_GFX11getRotationEv>
   b4570:	2802      	cmp	r0, #2
   b4572:	d01e      	beq.n	b45b2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b4574:	2803      	cmp	r0, #3
   b4576:	d025      	beq.n	b45c4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b4578:	2801      	cmp	r0, #1
   b457a:	d104      	bne.n	b4586 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b457c:	8933      	ldrh	r3, [r6, #8]
   b457e:	43e2      	mvns	r2, r4
   b4580:	441a      	add	r2, r3
    break;
   b4582:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b4584:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4586:	2c00      	cmp	r4, #0
   b4588:	4622      	mov	r2, r4
   b458a:	bfb8      	it	lt
   b458c:	1de2      	addlt	r2, r4, #7
   b458e:	10d2      	asrs	r2, r2, #3
   b4590:	2180      	movs	r1, #128	; 0x80
   b4592:	fb12 5501 	smlabb	r5, r2, r1, r5
   b4596:	490e      	ldr	r1, [pc, #56]	; (b45d0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b4598:	2201      	movs	r2, #1
   b459a:	f004 0407 	and.w	r4, r4, #7
   b459e:	574b      	ldrsb	r3, [r1, r5]
   b45a0:	fa02 f404 	lsl.w	r4, r2, r4
   b45a4:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b45a6:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b45a8:	bf0c      	ite	eq
   b45aa:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b45ac:	43a3      	bicne	r3, r4
   b45ae:	554b      	strb	r3, [r1, r5]
}
   b45b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b45b2:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b45b4:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b45b6:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b45b8:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b45ba:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b45bc:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b45be:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b45c0:	b224      	sxth	r4, r4
    break;
   b45c2:	e7e0      	b.n	b4586 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b45c4:	8973      	ldrh	r3, [r6, #10]
   b45c6:	3b01      	subs	r3, #1
   b45c8:	1b5b      	subs	r3, r3, r5
    break;
   b45ca:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b45cc:	b21c      	sxth	r4, r3
    break;
   b45ce:	e7da      	b.n	b4586 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b45d0:	2003e204 	.word	0x2003e204

000b45d4 <_ZN16Adafruit_SSD1306D0Ev>:
   b45d4:	b510      	push	{r4, lr}
   b45d6:	2124      	movs	r1, #36	; 0x24
   b45d8:	4604      	mov	r4, r0
   b45da:	f7ff fd5c 	bl	b4096 <_ZdlPvj>
   b45de:	4620      	mov	r0, r4
   b45e0:	bd10      	pop	{r4, pc}
	...

000b45e4 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b45e4:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b45e6:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b45e8:	4604      	mov	r4, r0
   b45ea:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b45ec:	2180      	movs	r1, #128	; 0x80
   b45ee:	f000 faa7 	bl	b4b40 <_ZN12Adafruit_GFXC1Ess>
   b45f2:	4b06      	ldr	r3, [pc, #24]	; (b460c <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b45f4:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b45f6:	23ff      	movs	r3, #255	; 0xff
   b45f8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b45fc:	7763      	strb	r3, [r4, #29]
   b45fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4602:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b4604:	f884 5020 	strb.w	r5, [r4, #32]
}
   b4608:	4620      	mov	r0, r4
   b460a:	bd38      	pop	{r3, r4, r5, pc}
   b460c:	000b5f20 	.word	0x000b5f20

000b4610 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b4610:	4802      	ldr	r0, [pc, #8]	; (b461c <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b4612:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4616:	2100      	movs	r1, #0
   b4618:	f001 bbb8 	b.w	b5d8c <memset>
   b461c:	2003e204 	.word	0x2003e204

000b4620 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4620:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4622:	4c0b      	ldr	r4, [pc, #44]	; (b4650 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4624:	7821      	ldrb	r1, [r4, #0]
   b4626:	f3bf 8f5b 	dmb	ish
   b462a:	f011 0101 	ands.w	r1, r1, #1
   b462e:	d10b      	bne.n	b4648 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4630:	4620      	mov	r0, r4
   b4632:	9101      	str	r1, [sp, #4]
   b4634:	f7ff fd3e 	bl	b40b4 <__cxa_guard_acquire>
   b4638:	9901      	ldr	r1, [sp, #4]
   b463a:	b128      	cbz	r0, b4648 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b463c:	4805      	ldr	r0, [pc, #20]	; (b4654 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b463e:	f000 fdc9 	bl	b51d4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4642:	4620      	mov	r0, r4
   b4644:	f7ff fd3b 	bl	b40be <__cxa_guard_release>
        return instance;
    }
   b4648:	4802      	ldr	r0, [pc, #8]	; (b4654 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b464a:	b002      	add	sp, #8
   b464c:	bd10      	pop	{r4, pc}
   b464e:	bf00      	nop
   b4650:	2003e6b8 	.word	0x2003e6b8
   b4654:	2003e6bc 	.word	0x2003e6bc

000b4658 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b4658:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b465a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b465e:	b143      	cbz	r3, b4672 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b4660:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4662:	f7ff ffdd 	bl	b4620 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4666:	9901      	ldr	r1, [sp, #4]
}
   b4668:	b003      	add	sp, #12
   b466a:	f85d eb04 	ldr.w	lr, [sp], #4
   b466e:	f000 be65 	b.w	b533c <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4672:	460b      	mov	r3, r1
   b4674:	7f81      	ldrb	r1, [r0, #30]
   b4676:	7f40      	ldrb	r0, [r0, #29]
   b4678:	2201      	movs	r2, #1
}
   b467a:	b003      	add	sp, #12
   b467c:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4680:	f001 bacd 	b.w	b5c1e <shiftOut>

000b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4684:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b4686:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b468a:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b468c:	4604      	mov	r4, r0
   b468e:	460d      	mov	r5, r1
  if (sid != -1)
   b4690:	d01d      	beq.n	b46ce <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b4692:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b4696:	2101      	movs	r1, #1
   b4698:	b280      	uxth	r0, r0
   b469a:	f001 fa94 	bl	b5bc6 <digitalWrite>
    digitalWrite(dc, LOW);
   b469e:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b46a2:	2100      	movs	r1, #0
   b46a4:	b280      	uxth	r0, r0
   b46a6:	f001 fa8e 	bl	b5bc6 <digitalWrite>
    digitalWrite(cs, LOW);
   b46aa:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b46ae:	2100      	movs	r1, #0
   b46b0:	b280      	uxth	r0, r0
   b46b2:	f001 fa88 	bl	b5bc6 <digitalWrite>
    fastSPIwrite(c);
   b46b6:	4629      	mov	r1, r5
   b46b8:	4620      	mov	r0, r4
   b46ba:	f7ff ffcd 	bl	b4658 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b46be:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b46c2:	2101      	movs	r1, #1
}
   b46c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b46c8:	b280      	uxth	r0, r0
   b46ca:	f001 ba7c 	b.w	b5bc6 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b46ce:	f001 fb23 	bl	b5d18 <_Z19__fetch_global_Wirev>
   b46d2:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b46d6:	f001 f92d 	bl	b5934 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b46da:	f001 fb1d 	bl	b5d18 <_Z19__fetch_global_Wirev>
   b46de:	6803      	ldr	r3, [r0, #0]
   b46e0:	2100      	movs	r1, #0
   b46e2:	689b      	ldr	r3, [r3, #8]
   b46e4:	4798      	blx	r3
    Wire.write(c);
   b46e6:	f001 fb17 	bl	b5d18 <_Z19__fetch_global_Wirev>
   b46ea:	6803      	ldr	r3, [r0, #0]
   b46ec:	4629      	mov	r1, r5
   b46ee:	689b      	ldr	r3, [r3, #8]
   b46f0:	4798      	blx	r3
    Wire.endTransmission();
   b46f2:	f001 fb11 	bl	b5d18 <_Z19__fetch_global_Wirev>
}
   b46f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b46fa:	f001 b922 	b.w	b5942 <_ZN7TwoWire15endTransmissionEv>
	...

000b4700 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b4700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b4702:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b4704:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b4706:	f7ff ffbd 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b470a:	2100      	movs	r1, #0
   b470c:	4620      	mov	r0, r4
   b470e:	f7ff ffb9 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b4712:	217f      	movs	r1, #127	; 0x7f
   b4714:	4620      	mov	r0, r4
   b4716:	f7ff ffb5 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b471a:	2122      	movs	r1, #34	; 0x22
   b471c:	4620      	mov	r0, r4
   b471e:	f7ff ffb1 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b4722:	2100      	movs	r1, #0
   b4724:	4620      	mov	r0, r4
   b4726:	f7ff ffad 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b472a:	2107      	movs	r1, #7
   b472c:	4620      	mov	r0, r4
   b472e:	f7ff ffa9 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b4732:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b4736:	4f29      	ldr	r7, [pc, #164]	; (b47dc <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b4738:	3301      	adds	r3, #1
   b473a:	d02a      	beq.n	b4792 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b473c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4740:	2101      	movs	r1, #1
   b4742:	b280      	uxth	r0, r0
   b4744:	f001 fa3f 	bl	b5bc6 <digitalWrite>
    digitalWrite(dc, HIGH);
   b4748:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b474c:	2101      	movs	r1, #1
   b474e:	b280      	uxth	r0, r0
   b4750:	f001 fa39 	bl	b5bc6 <digitalWrite>
    digitalWrite(cs, LOW);
   b4754:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4758:	2100      	movs	r1, #0
   b475a:	b280      	uxth	r0, r0
   b475c:	f001 fa33 	bl	b5bc6 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4760:	2001      	movs	r0, #1
   b4762:	f000 fb07 	bl	b4d74 <HAL_Delay_Microseconds>
   b4766:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b476a:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b476c:	f817 1b01 	ldrb.w	r1, [r7], #1
   b4770:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4772:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b4774:	f7ff ff70 	bl	b4658 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4778:	2d00      	cmp	r5, #0
   b477a:	d1f6      	bne.n	b476a <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b477c:	2001      	movs	r0, #1
   b477e:	f000 faf9 	bl	b4d74 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b4782:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4786:	2101      	movs	r1, #1
}
   b4788:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b478c:	b280      	uxth	r0, r0
   b478e:	f001 ba1a 	b.w	b5bc6 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4792:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b4794:	f001 fac0 	bl	b5d18 <_Z19__fetch_global_Wirev>
   b4798:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b479c:	f001 f8ca 	bl	b5934 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b47a0:	f001 faba 	bl	b5d18 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b47a4:	6803      	ldr	r3, [r0, #0]
   b47a6:	2140      	movs	r1, #64	; 0x40
   b47a8:	689b      	ldr	r3, [r3, #8]
   b47aa:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b47ac:	f105 0610 	add.w	r6, r5, #16
   b47b0:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b47b2:	f001 fab1 	bl	b5d18 <_Z19__fetch_global_Wirev>
   b47b6:	6803      	ldr	r3, [r0, #0]
   b47b8:	5d79      	ldrb	r1, [r7, r5]
   b47ba:	689b      	ldr	r3, [r3, #8]
   b47bc:	4798      	blx	r3
		i++;
   b47be:	1c6b      	adds	r3, r5, #1
   b47c0:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b47c2:	42ae      	cmp	r6, r5
   b47c4:	d1f5      	bne.n	b47b2 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b47c6:	f001 faa7 	bl	b5d18 <_Z19__fetch_global_Wirev>
   b47ca:	f001 f8ba 	bl	b5942 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b47ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b47d2:	d100      	bne.n	b47d6 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b47d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b47d6:	4635      	mov	r5, r6
   b47d8:	e7dc      	b.n	b4794 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b47da:	bf00      	nop
   b47dc:	2003e204 	.word	0x2003e204

000b47e0 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b47e0:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b47e2:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b47e6:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b47e8:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b47ea:	4604      	mov	r4, r0
   b47ec:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b47ee:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b47f0:	f000 80c9 	beq.w	b4986 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b47f4:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b47f8:	2101      	movs	r1, #1
   b47fa:	b280      	uxth	r0, r0
   b47fc:	f001 f9d2 	bl	b5ba4 <pinMode>
    pinMode(cs, OUTPUT);
   b4800:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4804:	2101      	movs	r1, #1
   b4806:	b280      	uxth	r0, r0
   b4808:	f001 f9cc 	bl	b5ba4 <pinMode>
    if (!hwSPI){
   b480c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4810:	2b00      	cmp	r3, #0
   b4812:	f000 80a6 	beq.w	b4962 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b4816:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b481a:	2101      	movs	r1, #1
   b481c:	b280      	uxth	r0, r0
   b481e:	f001 f9d2 	bl	b5bc6 <digitalWrite>
        instance().setBitOrder(order);
   b4822:	f7ff fefd 	bl	b4620 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4826:	2101      	movs	r1, #1
   b4828:	f000 fcf2 	bl	b5210 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b482c:	f7ff fef8 	bl	b4620 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4830:	2110      	movs	r1, #16
   b4832:	f000 fd5d 	bl	b52f0 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b4836:	f7ff fef3 	bl	b4620 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b483a:	2100      	movs	r1, #0
   b483c:	f000 fcfc 	bl	b5238 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b4840:	f7ff feee 	bl	b4620 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4844:	f000 fcd0 	bl	b51e8 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b4848:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b484c:	2101      	movs	r1, #1
   b484e:	b280      	uxth	r0, r0
   b4850:	f001 f9a8 	bl	b5ba4 <pinMode>
  digitalWrite(rst, HIGH);
   b4854:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4858:	2101      	movs	r1, #1
   b485a:	b280      	uxth	r0, r0
   b485c:	f001 f9b3 	bl	b5bc6 <digitalWrite>
  delay(1);
   b4860:	2001      	movs	r0, #1
   b4862:	f000 fe23 	bl	b54ac <delay>
  digitalWrite(rst, LOW);
   b4866:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b486a:	2100      	movs	r1, #0
   b486c:	b280      	uxth	r0, r0
   b486e:	f001 f9aa 	bl	b5bc6 <digitalWrite>
  delay(10);
   b4872:	200a      	movs	r0, #10
   b4874:	f000 fe1a 	bl	b54ac <delay>
  digitalWrite(rst, HIGH);
   b4878:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b487c:	2101      	movs	r1, #1
   b487e:	b280      	uxth	r0, r0
   b4880:	f001 f9a1 	bl	b5bc6 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b4884:	4620      	mov	r0, r4
   b4886:	21ae      	movs	r1, #174	; 0xae
   b4888:	f7ff fefc 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b488c:	4620      	mov	r0, r4
   b488e:	21d5      	movs	r1, #213	; 0xd5
   b4890:	f7ff fef8 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b4894:	4620      	mov	r0, r4
   b4896:	2180      	movs	r1, #128	; 0x80
   b4898:	f7ff fef4 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b489c:	4620      	mov	r0, r4
   b489e:	21a8      	movs	r1, #168	; 0xa8
   b48a0:	f7ff fef0 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b48a4:	4620      	mov	r0, r4
   b48a6:	213f      	movs	r1, #63	; 0x3f
   b48a8:	f7ff feec 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b48ac:	4620      	mov	r0, r4
   b48ae:	21d3      	movs	r1, #211	; 0xd3
   b48b0:	f7ff fee8 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b48b4:	4620      	mov	r0, r4
   b48b6:	2100      	movs	r1, #0
   b48b8:	f7ff fee4 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b48bc:	4620      	mov	r0, r4
   b48be:	2140      	movs	r1, #64	; 0x40
   b48c0:	f7ff fee0 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b48c4:	218d      	movs	r1, #141	; 0x8d
   b48c6:	4620      	mov	r0, r4
   b48c8:	f7ff fedc 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b48cc:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b48ce:	bf0c      	ite	eq
   b48d0:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b48d2:	2114      	movne	r1, #20
   b48d4:	4620      	mov	r0, r4
   b48d6:	f7ff fed5 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b48da:	4620      	mov	r0, r4
   b48dc:	2120      	movs	r1, #32
   b48de:	f7ff fed1 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b48e2:	4620      	mov	r0, r4
   b48e4:	2100      	movs	r1, #0
   b48e6:	f7ff fecd 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b48ea:	4620      	mov	r0, r4
   b48ec:	21a1      	movs	r1, #161	; 0xa1
   b48ee:	f7ff fec9 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b48f2:	4620      	mov	r0, r4
   b48f4:	21c8      	movs	r1, #200	; 0xc8
   b48f6:	f7ff fec5 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b48fa:	4620      	mov	r0, r4
   b48fc:	21da      	movs	r1, #218	; 0xda
   b48fe:	f7ff fec1 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b4902:	4620      	mov	r0, r4
   b4904:	2112      	movs	r1, #18
   b4906:	f7ff febd 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b490a:	2181      	movs	r1, #129	; 0x81
   b490c:	4620      	mov	r0, r4
   b490e:	f7ff feb9 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4912:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b4914:	bf0c      	ite	eq
   b4916:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b4918:	21cf      	movne	r1, #207	; 0xcf
   b491a:	4620      	mov	r0, r4
   b491c:	f7ff feb2 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b4920:	21d9      	movs	r1, #217	; 0xd9
   b4922:	4620      	mov	r0, r4
   b4924:	f7ff feae 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4928:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b492a:	bf0c      	ite	eq
   b492c:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b492e:	21f1      	movne	r1, #241	; 0xf1
   b4930:	4620      	mov	r0, r4
   b4932:	f7ff fea7 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b4936:	4620      	mov	r0, r4
   b4938:	21db      	movs	r1, #219	; 0xdb
   b493a:	f7ff fea3 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b493e:	4620      	mov	r0, r4
   b4940:	2140      	movs	r1, #64	; 0x40
   b4942:	f7ff fe9f 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b4946:	4620      	mov	r0, r4
   b4948:	21a4      	movs	r1, #164	; 0xa4
   b494a:	f7ff fe9b 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b494e:	4620      	mov	r0, r4
   b4950:	21a6      	movs	r1, #166	; 0xa6
   b4952:	f7ff fe97 	bl	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b4956:	4620      	mov	r0, r4
   b4958:	21af      	movs	r1, #175	; 0xaf
}
   b495a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b495e:	f7ff be91 	b.w	b4684 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b4962:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b4966:	2101      	movs	r1, #1
   b4968:	b280      	uxth	r0, r0
   b496a:	f001 f91b 	bl	b5ba4 <pinMode>
    	pinMode(sclk, OUTPUT);
   b496e:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b4972:	2101      	movs	r1, #1
   b4974:	b280      	uxth	r0, r0
   b4976:	f001 f915 	bl	b5ba4 <pinMode>
    if (hwSPI){
   b497a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b497e:	2b00      	cmp	r3, #0
   b4980:	f43f af62 	beq.w	b4848 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b4984:	e747      	b.n	b4816 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b4986:	f001 f9c7 	bl	b5d18 <_Z19__fetch_global_Wirev>
   b498a:	f000 ffc9 	bl	b5920 <_ZN7TwoWire5beginEv>
   b498e:	e75b      	b.n	b4848 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b4990 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b4990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4994:	b085      	sub	sp, #20
   b4996:	461f      	mov	r7, r3
   b4998:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b499c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b49a0:	eba8 0902 	sub.w	r9, r8, r2
   b49a4:	eba7 0a01 	sub.w	sl, r7, r1
   b49a8:	f1b9 0f00 	cmp.w	r9, #0
   b49ac:	bfb8      	it	lt
   b49ae:	f1c9 0900 	rsblt	r9, r9, #0
   b49b2:	f1ba 0f00 	cmp.w	sl, #0
   b49b6:	bfb8      	it	lt
   b49b8:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b49bc:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b49be:	4683      	mov	fp, r0
   b49c0:	460c      	mov	r4, r1
   b49c2:	4615      	mov	r5, r2
  if (steep) {
   b49c4:	dd04      	ble.n	b49d0 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b49c6:	463a      	mov	r2, r7
    swap(x0, y0);
   b49c8:	462c      	mov	r4, r5
    swap(x1, y1);
   b49ca:	4647      	mov	r7, r8
    swap(x0, y0);
   b49cc:	460d      	mov	r5, r1
    swap(x1, y1);
   b49ce:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b49d0:	42bc      	cmp	r4, r7
   b49d2:	dd05      	ble.n	b49e0 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b49d4:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b49d6:	4645      	mov	r5, r8
   b49d8:	4690      	mov	r8, r2
  if (x0 > x1) {
   b49da:	4622      	mov	r2, r4
   b49dc:	463c      	mov	r4, r7
   b49de:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b49e0:	1b3e      	subs	r6, r7, r4
   b49e2:	b2b2      	uxth	r2, r6
   b49e4:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b49e6:	eba8 0205 	sub.w	r2, r8, r5
   b49ea:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b49ee:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b49f2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b49f6:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b49fa:	4545      	cmp	r5, r8
   b49fc:	bfb4      	ite	lt
   b49fe:	2201      	movlt	r2, #1
   b4a00:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b4a04:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b4a06:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b4a08:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b4a0a:	42bc      	cmp	r4, r7
   b4a0c:	dc1c      	bgt.n	b4a48 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b4a0e:	f8db 2000 	ldr.w	r2, [fp]
   b4a12:	9303      	str	r3, [sp, #12]
    if (steep) {
   b4a14:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b4a16:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b4a1a:	bfc7      	ittee	gt
   b4a1c:	4629      	movgt	r1, r5
   b4a1e:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b4a20:	462a      	movle	r2, r5
   b4a22:	4621      	movle	r1, r4
   b4a24:	4658      	mov	r0, fp
   b4a26:	47c0      	blx	r8
    }
    err -= dy;
   b4a28:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b4a2a:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b4a2c:	1ab6      	subs	r6, r6, r2
   b4a2e:	b2b1      	uxth	r1, r6
   b4a30:	b236      	sxth	r6, r6
    if (err < 0) {
   b4a32:	2e00      	cmp	r6, #0
   b4a34:	da05      	bge.n	b4a42 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b4a36:	9a02      	ldr	r2, [sp, #8]
   b4a38:	4415      	add	r5, r2
      err += dx;
   b4a3a:	9a00      	ldr	r2, [sp, #0]
   b4a3c:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b4a3e:	b22d      	sxth	r5, r5
      err += dx;
   b4a40:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b4a42:	3401      	adds	r4, #1
   b4a44:	b224      	sxth	r4, r4
   b4a46:	e7e0      	b.n	b4a0a <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b4a48:	b005      	add	sp, #20
   b4a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4a4e <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b4a4e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4a52:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b4a56:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b4a58:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b4a5c:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b4a60:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b4a62:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b4a64:	4616      	mov	r6, r2
   b4a66:	468a      	mov	sl, r1
   b4a68:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b4a6a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b4a6c:	6823      	ldr	r3, [r4, #0]
   b4a6e:	f8cd 8000 	str.w	r8, [sp]
   b4a72:	f109 32ff 	add.w	r2, r9, #4294967295
   b4a76:	4432      	add	r2, r6
   b4a78:	69df      	ldr	r7, [r3, #28]
   b4a7a:	4651      	mov	r1, sl
   b4a7c:	462b      	mov	r3, r5
   b4a7e:	4620      	mov	r0, r4
   b4a80:	b212      	sxth	r2, r2
   b4a82:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b4a84:	6823      	ldr	r3, [r4, #0]
   b4a86:	f8cd 8000 	str.w	r8, [sp]
   b4a8a:	699f      	ldr	r7, [r3, #24]
   b4a8c:	4632      	mov	r2, r6
   b4a8e:	464b      	mov	r3, r9
   b4a90:	4651      	mov	r1, sl
   b4a92:	4620      	mov	r0, r4
   b4a94:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b4a96:	1e6b      	subs	r3, r5, #1
   b4a98:	eb03 010a 	add.w	r1, r3, sl
   b4a9c:	6823      	ldr	r3, [r4, #0]
   b4a9e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b4aa2:	699d      	ldr	r5, [r3, #24]
   b4aa4:	4632      	mov	r2, r6
   b4aa6:	464b      	mov	r3, r9
   b4aa8:	b209      	sxth	r1, r1
   b4aaa:	4620      	mov	r0, r4
   b4aac:	46ac      	mov	ip, r5
}
   b4aae:	b002      	add	sp, #8
   b4ab0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b4ab4:	4760      	bx	ip

000b4ab6 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b4ab6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b4ab8:	3b01      	subs	r3, #1
   b4aba:	4413      	add	r3, r2
   b4abc:	6804      	ldr	r4, [r0, #0]
   b4abe:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4ac2:	9501      	str	r5, [sp, #4]
   b4ac4:	b21b      	sxth	r3, r3
   b4ac6:	9300      	str	r3, [sp, #0]
   b4ac8:	6964      	ldr	r4, [r4, #20]
   b4aca:	460b      	mov	r3, r1
   b4acc:	47a0      	blx	r4
}
   b4ace:	b003      	add	sp, #12
   b4ad0:	bd30      	pop	{r4, r5, pc}

000b4ad2 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b4ad2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b4ad4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4ad8:	6804      	ldr	r4, [r0, #0]
   b4ada:	e9cd 2500 	strd	r2, r5, [sp]
   b4ade:	3b01      	subs	r3, #1
   b4ae0:	440b      	add	r3, r1
   b4ae2:	6964      	ldr	r4, [r4, #20]
   b4ae4:	b21b      	sxth	r3, r3
   b4ae6:	47a0      	blx	r4
}
   b4ae8:	b003      	add	sp, #12
   b4aea:	bd30      	pop	{r4, r5, pc}

000b4aec <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b4aec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4af0:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4af4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4af8:	4605      	mov	r5, r0
   b4afa:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b4afc:	460c      	mov	r4, r1
   b4afe:	18ce      	adds	r6, r1, r3
   b4b00:	42b4      	cmp	r4, r6
   b4b02:	da0b      	bge.n	b4b1c <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b4b04:	682b      	ldr	r3, [r5, #0]
   b4b06:	f8cd 8000 	str.w	r8, [sp]
   b4b0a:	699f      	ldr	r7, [r3, #24]
   b4b0c:	4621      	mov	r1, r4
   b4b0e:	464b      	mov	r3, r9
   b4b10:	4652      	mov	r2, sl
   b4b12:	4628      	mov	r0, r5
   b4b14:	3401      	adds	r4, #1
   b4b16:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b4b18:	b224      	sxth	r4, r4
   b4b1a:	e7f1      	b.n	b4b00 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b4b1c:	b002      	add	sp, #8
   b4b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b4b22 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b4b22:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b4b24:	6802      	ldr	r2, [r0, #0]
   b4b26:	9101      	str	r1, [sp, #4]
   b4b28:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4b2c:	9100      	str	r1, [sp, #0]
   b4b2e:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b4b30:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4b34:	2200      	movs	r2, #0
   b4b36:	4611      	mov	r1, r2
   b4b38:	47a0      	blx	r4
}
   b4b3a:	b002      	add	sp, #8
   b4b3c:	bd10      	pop	{r4, pc}

000b4b3e <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b4b3e:	4770      	bx	lr

000b4b40 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4b40:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b4b42:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b4b44:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b4b46:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   b4b4a:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b4b4c:	4d05      	ldr	r5, [pc, #20]	; (b4b64 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b4b4e:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b4b50:	2201      	movs	r2, #1
   b4b52:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b4b54:	6005      	str	r5, [r0, #0]
   b4b56:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b4b58:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b4b5a:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b4b5c:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b4b5e:	7682      	strb	r2, [r0, #26]
}
   b4b60:	bd30      	pop	{r4, r5, pc}
   b4b62:	bf00      	nop
   b4b64:	000b6454 	.word	0x000b6454

000b4b68 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b4b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4b6c:	ed2d 8b02 	vpush	{d8}
   b4b70:	b08d      	sub	sp, #52	; 0x34
   b4b72:	4607      	mov	r7, r0
   b4b74:	9104      	str	r1, [sp, #16]
   b4b76:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b4b7a:	9105      	str	r1, [sp, #20]
   b4b7c:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b4b80:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b4b82:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b4b86:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b4b88:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b4b8c:	4281      	cmp	r1, r0
   b4b8e:	dd52      	ble.n	b4c36 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b4b90:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b4b94:	4291      	cmp	r1, r2
   b4b96:	dd4e      	ble.n	b4c36 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b4b98:	2106      	movs	r1, #6
   b4b9a:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b4b9e:	2c00      	cmp	r4, #0
   b4ba0:	dd49      	ble.n	b4c36 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b4ba2:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b4ba6:	2c00      	cmp	r4, #0
   b4ba8:	dd45      	ble.n	b4c36 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b4baa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4bae:	930b      	str	r3, [sp, #44]	; 0x2c
   b4bb0:	b293      	uxth	r3, r2
   b4bb2:	9307      	str	r3, [sp, #28]
   b4bb4:	3308      	adds	r3, #8
   b4bb6:	b29b      	uxth	r3, r3
   b4bb8:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b4bba:	2400      	movs	r4, #0
   b4bbc:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b4bbe:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b4bc0:	bf1c      	itt	ne
   b4bc2:	4b2c      	ldrne	r3, [pc, #176]	; (b4c74 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b4bc4:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b4bc6:	9e07      	ldr	r6, [sp, #28]
   b4bc8:	bf16      	itet	ne
   b4bca:	191b      	addne	r3, r3, r4
      line = 0x0;
   b4bcc:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b4bce:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b4bd0:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4bd2:	9a04      	ldr	r2, [sp, #16]
   b4bd4:	b2ab      	uxth	r3, r5
   b4bd6:	930a      	str	r3, [sp, #40]	; 0x28
   b4bd8:	fb04 f305 	mul.w	r3, r4, r5
   b4bdc:	fa13 f382 	uxtah	r3, r3, r2
   b4be0:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b4be2:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4be6:	ee08 3a10 	vmov	s16, r3
   b4bea:	46b0      	mov	r8, r6
   b4bec:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b4bf0:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b4bf4:	9b03      	ldr	r3, [sp, #12]
   b4bf6:	07db      	lsls	r3, r3, #31
   b4bf8:	d52f      	bpl.n	b4c5a <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b4bfa:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b4bfc:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b4bfe:	d11f      	bne.n	b4c40 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b4c00:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b4c04:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b4c06:	b232      	sxth	r2, r6
   b4c08:	4651      	mov	r1, sl
   b4c0a:	4638      	mov	r0, r7
   b4c0c:	47d8      	blx	fp
      line >>= 1;
   b4c0e:	9b03      	ldr	r3, [sp, #12]
   b4c10:	085b      	lsrs	r3, r3, #1
   b4c12:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b4c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4c16:	3601      	adds	r6, #1
   b4c18:	4498      	add	r8, r3
   b4c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4c1c:	b2b6      	uxth	r6, r6
   b4c1e:	42b3      	cmp	r3, r6
   b4c20:	fa1f f888 	uxth.w	r8, r8
   b4c24:	d1e6      	bne.n	b4bf4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b4c26:	9b08      	ldr	r3, [sp, #32]
   b4c28:	3b01      	subs	r3, #1
   b4c2a:	3401      	adds	r4, #1
   b4c2c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4c30:	b264      	sxtb	r4, r4
   b4c32:	9308      	str	r3, [sp, #32]
   b4c34:	d1c3      	bne.n	b4bbe <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b4c36:	b00d      	add	sp, #52	; 0x34
   b4c38:	ecbd 8b02 	vpop	{d8}
   b4c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b4c40:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4c42:	e9cd 9200 	strd	r9, r2, [sp]
   b4c46:	ee18 1a10 	vmov	r1, s16
   b4c4a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b4c4e:	fa0f f288 	sxth.w	r2, r8
   b4c52:	464b      	mov	r3, r9
   b4c54:	4638      	mov	r0, r7
   b4c56:	47d8      	blx	fp
   b4c58:	e7d9      	b.n	b4c0e <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b4c5a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b4c5e:	4293      	cmp	r3, r2
   b4c60:	d0d5      	beq.n	b4c0e <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b4c62:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b4c64:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b4c66:	d103      	bne.n	b4c70 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b4c68:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b4c6c:	9b06      	ldr	r3, [sp, #24]
   b4c6e:	e7ca      	b.n	b4c06 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4c70:	9a06      	ldr	r2, [sp, #24]
   b4c72:	e7e6      	b.n	b4c42 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b4c74:	000b5f50 	.word	0x000b5f50

000b4c78 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b4c78:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b4c7a:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b4c7c:	b085      	sub	sp, #20
   b4c7e:	4604      	mov	r4, r0
  if (c == '\n') {
   b4c80:	d107      	bne.n	b4c92 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b4c82:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b4c84:	8a63      	ldrh	r3, [r4, #18]
   b4c86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b4c8a:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b4c8c:	2300      	movs	r3, #0
   b4c8e:	8223      	strh	r3, [r4, #16]
   b4c90:	e021      	b.n	b4cd6 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b4c92:	290d      	cmp	r1, #13
   b4c94:	d01f      	beq.n	b4cd6 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b4c96:	7e03      	ldrb	r3, [r0, #24]
   b4c98:	9302      	str	r3, [sp, #8]
   b4c9a:	8ac3      	ldrh	r3, [r0, #22]
   b4c9c:	9301      	str	r3, [sp, #4]
   b4c9e:	8a83      	ldrh	r3, [r0, #20]
   b4ca0:	9300      	str	r3, [sp, #0]
   b4ca2:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b4ca6:	460b      	mov	r3, r1
   b4ca8:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b4cac:	f7ff ff5c 	bl	b4b68 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b4cb0:	7e20      	ldrb	r0, [r4, #24]
   b4cb2:	8a23      	ldrh	r3, [r4, #16]
   b4cb4:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b4cb8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b4cbc:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b4cbe:	b21b      	sxth	r3, r3
   b4cc0:	4602      	mov	r2, r0
   b4cc2:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b4cc4:	b139      	cbz	r1, b4cd6 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b4cc6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b4cca:	f06f 0505 	mvn.w	r5, #5
   b4cce:	fb05 1100 	mla	r1, r5, r0, r1
   b4cd2:	428b      	cmp	r3, r1
   b4cd4:	dcd6      	bgt.n	b4c84 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b4cd6:	2001      	movs	r0, #1
   b4cd8:	b005      	add	sp, #20
   b4cda:	bd30      	pop	{r4, r5, pc}

000b4cdc <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b4cdc:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b4cde:	8242      	strh	r2, [r0, #18]
}
   b4ce0:	4770      	bx	lr

000b4ce2 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b4ce2:	2901      	cmp	r1, #1
   b4ce4:	bf38      	it	cc
   b4ce6:	2101      	movcc	r1, #1
   b4ce8:	7601      	strb	r1, [r0, #24]
}
   b4cea:	4770      	bx	lr

000b4cec <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b4cec:	82c1      	strh	r1, [r0, #22]
   b4cee:	8281      	strh	r1, [r0, #20]
}
   b4cf0:	4770      	bx	lr

000b4cf2 <_ZN12Adafruit_GFX11getRotationEv>:
}
   b4cf2:	7e40      	ldrb	r0, [r0, #25]
   b4cf4:	4770      	bx	lr

000b4cf6 <_ZN12Adafruit_GFX5widthEv>:
}
   b4cf6:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b4cfa:	4770      	bx	lr

000b4cfc <_ZN12Adafruit_GFX6heightEv>:
}
   b4cfc:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b4d00:	4770      	bx	lr
	...

000b4d04 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4d04:	b508      	push	{r3, lr}
   b4d06:	4b02      	ldr	r3, [pc, #8]	; (b4d10 <netdb_freeaddrinfo+0xc>)
   b4d08:	681b      	ldr	r3, [r3, #0]
   b4d0a:	689b      	ldr	r3, [r3, #8]
   b4d0c:	9301      	str	r3, [sp, #4]
   b4d0e:	bd08      	pop	{r3, pc}
   b4d10:	00030268 	.word	0x00030268

000b4d14 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4d14:	b508      	push	{r3, lr}
   b4d16:	4b02      	ldr	r3, [pc, #8]	; (b4d20 <netdb_getaddrinfo+0xc>)
   b4d18:	681b      	ldr	r3, [r3, #0]
   b4d1a:	68db      	ldr	r3, [r3, #12]
   b4d1c:	9301      	str	r3, [sp, #4]
   b4d1e:	bd08      	pop	{r3, pc}
   b4d20:	00030268 	.word	0x00030268

000b4d24 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4d24:	b508      	push	{r3, lr}
   b4d26:	4b02      	ldr	r3, [pc, #8]	; (b4d30 <HAL_Pin_Mode+0xc>)
   b4d28:	681b      	ldr	r3, [r3, #0]
   b4d2a:	689b      	ldr	r3, [r3, #8]
   b4d2c:	9301      	str	r3, [sp, #4]
   b4d2e:	bd08      	pop	{r3, pc}
   b4d30:	0003022c 	.word	0x0003022c

000b4d34 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4d34:	b508      	push	{r3, lr}
   b4d36:	4b02      	ldr	r3, [pc, #8]	; (b4d40 <HAL_Get_Pin_Mode+0xc>)
   b4d38:	681b      	ldr	r3, [r3, #0]
   b4d3a:	68db      	ldr	r3, [r3, #12]
   b4d3c:	9301      	str	r3, [sp, #4]
   b4d3e:	bd08      	pop	{r3, pc}
   b4d40:	0003022c 	.word	0x0003022c

000b4d44 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4d44:	b508      	push	{r3, lr}
   b4d46:	4b02      	ldr	r3, [pc, #8]	; (b4d50 <HAL_GPIO_Write+0xc>)
   b4d48:	681b      	ldr	r3, [r3, #0]
   b4d4a:	691b      	ldr	r3, [r3, #16]
   b4d4c:	9301      	str	r3, [sp, #4]
   b4d4e:	bd08      	pop	{r3, pc}
   b4d50:	0003022c 	.word	0x0003022c

000b4d54 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b4d54:	b508      	push	{r3, lr}
   b4d56:	4b02      	ldr	r3, [pc, #8]	; (b4d60 <HAL_GPIO_Read+0xc>)
   b4d58:	681b      	ldr	r3, [r3, #0]
   b4d5a:	695b      	ldr	r3, [r3, #20]
   b4d5c:	9301      	str	r3, [sp, #4]
   b4d5e:	bd08      	pop	{r3, pc}
   b4d60:	0003022c 	.word	0x0003022c

000b4d64 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4d64:	b508      	push	{r3, lr}
   b4d66:	4b02      	ldr	r3, [pc, #8]	; (b4d70 <HAL_RNG_GetRandomNumber+0xc>)
   b4d68:	681b      	ldr	r3, [r3, #0]
   b4d6a:	685b      	ldr	r3, [r3, #4]
   b4d6c:	9301      	str	r3, [sp, #4]
   b4d6e:	bd08      	pop	{r3, pc}
   b4d70:	00030218 	.word	0x00030218

000b4d74 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4d74:	b508      	push	{r3, lr}
   b4d76:	4b02      	ldr	r3, [pc, #8]	; (b4d80 <HAL_Delay_Microseconds+0xc>)
   b4d78:	681b      	ldr	r3, [r3, #0]
   b4d7a:	68db      	ldr	r3, [r3, #12]
   b4d7c:	9301      	str	r3, [sp, #4]
   b4d7e:	bd08      	pop	{r3, pc}
   b4d80:	00030218 	.word	0x00030218

000b4d84 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4d84:	b508      	push	{r3, lr}
   b4d86:	4b02      	ldr	r3, [pc, #8]	; (b4d90 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4d88:	681b      	ldr	r3, [r3, #0]
   b4d8a:	695b      	ldr	r3, [r3, #20]
   b4d8c:	9301      	str	r3, [sp, #4]
   b4d8e:	bd08      	pop	{r3, pc}
   b4d90:	00030218 	.word	0x00030218

000b4d94 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4d94:	b508      	push	{r3, lr}
   b4d96:	4b02      	ldr	r3, [pc, #8]	; (b4da0 <os_mutex_recursive_create+0xc>)
   b4d98:	681b      	ldr	r3, [r3, #0]
   b4d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d9c:	9301      	str	r3, [sp, #4]
   b4d9e:	bd08      	pop	{r3, pc}
   b4da0:	00030248 	.word	0x00030248

000b4da4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4da4:	b508      	push	{r3, lr}
   b4da6:	4b02      	ldr	r3, [pc, #8]	; (b4db0 <inet_inet_ntop+0xc>)
   b4da8:	681b      	ldr	r3, [r3, #0]
   b4daa:	695b      	ldr	r3, [r3, #20]
   b4dac:	9301      	str	r3, [sp, #4]
   b4dae:	bd08      	pop	{r3, pc}
   b4db0:	00030264 	.word	0x00030264

000b4db4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4db4:	b508      	push	{r3, lr}
   b4db6:	4b02      	ldr	r3, [pc, #8]	; (b4dc0 <hal_usart_write+0xc>)
   b4db8:	681b      	ldr	r3, [r3, #0]
   b4dba:	68db      	ldr	r3, [r3, #12]
   b4dbc:	9301      	str	r3, [sp, #4]
   b4dbe:	bd08      	pop	{r3, pc}
   b4dc0:	0003023c 	.word	0x0003023c

000b4dc4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4dc4:	b508      	push	{r3, lr}
   b4dc6:	4b02      	ldr	r3, [pc, #8]	; (b4dd0 <hal_usart_available+0xc>)
   b4dc8:	681b      	ldr	r3, [r3, #0]
   b4dca:	691b      	ldr	r3, [r3, #16]
   b4dcc:	9301      	str	r3, [sp, #4]
   b4dce:	bd08      	pop	{r3, pc}
   b4dd0:	0003023c 	.word	0x0003023c

000b4dd4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4dd4:	b508      	push	{r3, lr}
   b4dd6:	4b02      	ldr	r3, [pc, #8]	; (b4de0 <hal_usart_read+0xc>)
   b4dd8:	681b      	ldr	r3, [r3, #0]
   b4dda:	695b      	ldr	r3, [r3, #20]
   b4ddc:	9301      	str	r3, [sp, #4]
   b4dde:	bd08      	pop	{r3, pc}
   b4de0:	0003023c 	.word	0x0003023c

000b4de4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4de4:	b508      	push	{r3, lr}
   b4de6:	4b02      	ldr	r3, [pc, #8]	; (b4df0 <hal_usart_peek+0xc>)
   b4de8:	681b      	ldr	r3, [r3, #0]
   b4dea:	699b      	ldr	r3, [r3, #24]
   b4dec:	9301      	str	r3, [sp, #4]
   b4dee:	bd08      	pop	{r3, pc}
   b4df0:	0003023c 	.word	0x0003023c

000b4df4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4df4:	b508      	push	{r3, lr}
   b4df6:	4b02      	ldr	r3, [pc, #8]	; (b4e00 <hal_usart_flush+0xc>)
   b4df8:	681b      	ldr	r3, [r3, #0]
   b4dfa:	69db      	ldr	r3, [r3, #28]
   b4dfc:	9301      	str	r3, [sp, #4]
   b4dfe:	bd08      	pop	{r3, pc}
   b4e00:	0003023c 	.word	0x0003023c

000b4e04 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4e04:	b508      	push	{r3, lr}
   b4e06:	4b02      	ldr	r3, [pc, #8]	; (b4e10 <hal_usart_is_enabled+0xc>)
   b4e08:	681b      	ldr	r3, [r3, #0]
   b4e0a:	6a1b      	ldr	r3, [r3, #32]
   b4e0c:	9301      	str	r3, [sp, #4]
   b4e0e:	bd08      	pop	{r3, pc}
   b4e10:	0003023c 	.word	0x0003023c

000b4e14 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4e14:	b508      	push	{r3, lr}
   b4e16:	4b02      	ldr	r3, [pc, #8]	; (b4e20 <hal_usart_available_data_for_write+0xc>)
   b4e18:	681b      	ldr	r3, [r3, #0]
   b4e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4e1c:	9301      	str	r3, [sp, #4]
   b4e1e:	bd08      	pop	{r3, pc}
   b4e20:	0003023c 	.word	0x0003023c

000b4e24 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4e24:	b508      	push	{r3, lr}
   b4e26:	4b02      	ldr	r3, [pc, #8]	; (b4e30 <hal_usart_init_ex+0xc>)
   b4e28:	681b      	ldr	r3, [r3, #0]
   b4e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e2c:	9301      	str	r3, [sp, #4]
   b4e2e:	bd08      	pop	{r3, pc}
   b4e30:	0003023c 	.word	0x0003023c

000b4e34 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4e34:	b508      	push	{r3, lr}
   b4e36:	4b02      	ldr	r3, [pc, #8]	; (b4e40 <hal_i2c_begin+0xc>)
   b4e38:	681b      	ldr	r3, [r3, #0]
   b4e3a:	68db      	ldr	r3, [r3, #12]
   b4e3c:	9301      	str	r3, [sp, #4]
   b4e3e:	bd08      	pop	{r3, pc}
   b4e40:	00030228 	.word	0x00030228

000b4e44 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4e44:	b508      	push	{r3, lr}
   b4e46:	4b02      	ldr	r3, [pc, #8]	; (b4e50 <hal_i2c_begin_transmission+0xc>)
   b4e48:	681b      	ldr	r3, [r3, #0]
   b4e4a:	699b      	ldr	r3, [r3, #24]
   b4e4c:	9301      	str	r3, [sp, #4]
   b4e4e:	bd08      	pop	{r3, pc}
   b4e50:	00030228 	.word	0x00030228

000b4e54 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4e54:	b508      	push	{r3, lr}
   b4e56:	4b02      	ldr	r3, [pc, #8]	; (b4e60 <hal_i2c_end_transmission+0xc>)
   b4e58:	681b      	ldr	r3, [r3, #0]
   b4e5a:	69db      	ldr	r3, [r3, #28]
   b4e5c:	9301      	str	r3, [sp, #4]
   b4e5e:	bd08      	pop	{r3, pc}
   b4e60:	00030228 	.word	0x00030228

000b4e64 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4e64:	b508      	push	{r3, lr}
   b4e66:	4b02      	ldr	r3, [pc, #8]	; (b4e70 <hal_i2c_write+0xc>)
   b4e68:	681b      	ldr	r3, [r3, #0]
   b4e6a:	6a1b      	ldr	r3, [r3, #32]
   b4e6c:	9301      	str	r3, [sp, #4]
   b4e6e:	bd08      	pop	{r3, pc}
   b4e70:	00030228 	.word	0x00030228

000b4e74 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4e74:	b508      	push	{r3, lr}
   b4e76:	4b02      	ldr	r3, [pc, #8]	; (b4e80 <hal_i2c_available+0xc>)
   b4e78:	681b      	ldr	r3, [r3, #0]
   b4e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4e7c:	9301      	str	r3, [sp, #4]
   b4e7e:	bd08      	pop	{r3, pc}
   b4e80:	00030228 	.word	0x00030228

000b4e84 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4e84:	b508      	push	{r3, lr}
   b4e86:	4b02      	ldr	r3, [pc, #8]	; (b4e90 <hal_i2c_read+0xc>)
   b4e88:	681b      	ldr	r3, [r3, #0]
   b4e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4e8c:	9301      	str	r3, [sp, #4]
   b4e8e:	bd08      	pop	{r3, pc}
   b4e90:	00030228 	.word	0x00030228

000b4e94 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4e94:	b508      	push	{r3, lr}
   b4e96:	4b02      	ldr	r3, [pc, #8]	; (b4ea0 <hal_i2c_peek+0xc>)
   b4e98:	681b      	ldr	r3, [r3, #0]
   b4e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e9c:	9301      	str	r3, [sp, #4]
   b4e9e:	bd08      	pop	{r3, pc}
   b4ea0:	00030228 	.word	0x00030228

000b4ea4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4ea4:	b508      	push	{r3, lr}
   b4ea6:	4b02      	ldr	r3, [pc, #8]	; (b4eb0 <hal_i2c_flush+0xc>)
   b4ea8:	681b      	ldr	r3, [r3, #0]
   b4eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4eac:	9301      	str	r3, [sp, #4]
   b4eae:	bd08      	pop	{r3, pc}
   b4eb0:	00030228 	.word	0x00030228

000b4eb4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4eb4:	b508      	push	{r3, lr}
   b4eb6:	4b02      	ldr	r3, [pc, #8]	; (b4ec0 <hal_i2c_is_enabled+0xc>)
   b4eb8:	681b      	ldr	r3, [r3, #0]
   b4eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4ebc:	9301      	str	r3, [sp, #4]
   b4ebe:	bd08      	pop	{r3, pc}
   b4ec0:	00030228 	.word	0x00030228

000b4ec4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4ec4:	b508      	push	{r3, lr}
   b4ec6:	4b02      	ldr	r3, [pc, #8]	; (b4ed0 <hal_i2c_init+0xc>)
   b4ec8:	681b      	ldr	r3, [r3, #0]
   b4eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ecc:	9301      	str	r3, [sp, #4]
   b4ece:	bd08      	pop	{r3, pc}
   b4ed0:	00030228 	.word	0x00030228

000b4ed4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b4ed4:	b508      	push	{r3, lr}
   b4ed6:	4b02      	ldr	r3, [pc, #8]	; (b4ee0 <hal_spi_begin+0xc>)
   b4ed8:	681b      	ldr	r3, [r3, #0]
   b4eda:	681b      	ldr	r3, [r3, #0]
   b4edc:	9301      	str	r3, [sp, #4]
   b4ede:	bd08      	pop	{r3, pc}
   b4ee0:	00030230 	.word	0x00030230

000b4ee4 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b4ee4:	b508      	push	{r3, lr}
   b4ee6:	4b02      	ldr	r3, [pc, #8]	; (b4ef0 <hal_spi_set_bit_order+0xc>)
   b4ee8:	681b      	ldr	r3, [r3, #0]
   b4eea:	689b      	ldr	r3, [r3, #8]
   b4eec:	9301      	str	r3, [sp, #4]
   b4eee:	bd08      	pop	{r3, pc}
   b4ef0:	00030230 	.word	0x00030230

000b4ef4 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b4ef4:	b508      	push	{r3, lr}
   b4ef6:	4b02      	ldr	r3, [pc, #8]	; (b4f00 <hal_spi_set_data_mode+0xc>)
   b4ef8:	681b      	ldr	r3, [r3, #0]
   b4efa:	68db      	ldr	r3, [r3, #12]
   b4efc:	9301      	str	r3, [sp, #4]
   b4efe:	bd08      	pop	{r3, pc}
   b4f00:	00030230 	.word	0x00030230

000b4f04 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b4f04:	b508      	push	{r3, lr}
   b4f06:	4b02      	ldr	r3, [pc, #8]	; (b4f10 <hal_spi_set_clock_divider+0xc>)
   b4f08:	681b      	ldr	r3, [r3, #0]
   b4f0a:	691b      	ldr	r3, [r3, #16]
   b4f0c:	9301      	str	r3, [sp, #4]
   b4f0e:	bd08      	pop	{r3, pc}
   b4f10:	00030230 	.word	0x00030230

000b4f14 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b4f14:	b508      	push	{r3, lr}
   b4f16:	4b02      	ldr	r3, [pc, #8]	; (b4f20 <hal_spi_transfer+0xc>)
   b4f18:	681b      	ldr	r3, [r3, #0]
   b4f1a:	695b      	ldr	r3, [r3, #20]
   b4f1c:	9301      	str	r3, [sp, #4]
   b4f1e:	bd08      	pop	{r3, pc}
   b4f20:	00030230 	.word	0x00030230

000b4f24 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4f24:	b508      	push	{r3, lr}
   b4f26:	4b02      	ldr	r3, [pc, #8]	; (b4f30 <hal_spi_init+0xc>)
   b4f28:	681b      	ldr	r3, [r3, #0]
   b4f2a:	69db      	ldr	r3, [r3, #28]
   b4f2c:	9301      	str	r3, [sp, #4]
   b4f2e:	bd08      	pop	{r3, pc}
   b4f30:	00030230 	.word	0x00030230

000b4f34 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4f34:	b508      	push	{r3, lr}
   b4f36:	4b02      	ldr	r3, [pc, #8]	; (b4f40 <hal_spi_is_enabled+0xc>)
   b4f38:	681b      	ldr	r3, [r3, #0]
   b4f3a:	6a1b      	ldr	r3, [r3, #32]
   b4f3c:	9301      	str	r3, [sp, #4]
   b4f3e:	bd08      	pop	{r3, pc}
   b4f40:	00030230 	.word	0x00030230

000b4f44 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b4f44:	b508      	push	{r3, lr}
   b4f46:	4b02      	ldr	r3, [pc, #8]	; (b4f50 <hal_spi_info+0xc>)
   b4f48:	681b      	ldr	r3, [r3, #0]
   b4f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4f4c:	9301      	str	r3, [sp, #4]
   b4f4e:	bd08      	pop	{r3, pc}
   b4f50:	00030230 	.word	0x00030230

000b4f54 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b02      	ldr	r3, [pc, #8]	; (b4f60 <hal_spi_acquire+0xc>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f5c:	9301      	str	r3, [sp, #4]
   b4f5e:	bd08      	pop	{r3, pc}
   b4f60:	00030230 	.word	0x00030230

000b4f64 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b4f64:	b508      	push	{r3, lr}
   b4f66:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <hal_spi_release+0xc>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4f6c:	9301      	str	r3, [sp, #4]
   b4f6e:	bd08      	pop	{r3, pc}
   b4f70:	00030230 	.word	0x00030230

000b4f74 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4f74:	b508      	push	{r3, lr}
   b4f76:	4b02      	ldr	r3, [pc, #8]	; (b4f80 <HAL_USB_USART_Init+0xc>)
   b4f78:	681b      	ldr	r3, [r3, #0]
   b4f7a:	681b      	ldr	r3, [r3, #0]
   b4f7c:	9301      	str	r3, [sp, #4]
   b4f7e:	bd08      	pop	{r3, pc}
   b4f80:	0003024c 	.word	0x0003024c

000b4f84 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b02      	ldr	r3, [pc, #8]	; (b4f90 <HAL_USB_USART_Available_Data+0xc>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	691b      	ldr	r3, [r3, #16]
   b4f8c:	9301      	str	r3, [sp, #4]
   b4f8e:	bd08      	pop	{r3, pc}
   b4f90:	0003024c 	.word	0x0003024c

000b4f94 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4f94:	b508      	push	{r3, lr}
   b4f96:	4b02      	ldr	r3, [pc, #8]	; (b4fa0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	695b      	ldr	r3, [r3, #20]
   b4f9c:	9301      	str	r3, [sp, #4]
   b4f9e:	bd08      	pop	{r3, pc}
   b4fa0:	0003024c 	.word	0x0003024c

000b4fa4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4fa4:	b508      	push	{r3, lr}
   b4fa6:	4b02      	ldr	r3, [pc, #8]	; (b4fb0 <HAL_USB_USART_Receive_Data+0xc>)
   b4fa8:	681b      	ldr	r3, [r3, #0]
   b4faa:	699b      	ldr	r3, [r3, #24]
   b4fac:	9301      	str	r3, [sp, #4]
   b4fae:	bd08      	pop	{r3, pc}
   b4fb0:	0003024c 	.word	0x0003024c

000b4fb4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4fb4:	b508      	push	{r3, lr}
   b4fb6:	4b02      	ldr	r3, [pc, #8]	; (b4fc0 <HAL_USB_USART_Send_Data+0xc>)
   b4fb8:	681b      	ldr	r3, [r3, #0]
   b4fba:	69db      	ldr	r3, [r3, #28]
   b4fbc:	9301      	str	r3, [sp, #4]
   b4fbe:	bd08      	pop	{r3, pc}
   b4fc0:	0003024c 	.word	0x0003024c

000b4fc4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4fc4:	b508      	push	{r3, lr}
   b4fc6:	4b02      	ldr	r3, [pc, #8]	; (b4fd0 <HAL_USB_USART_Flush_Data+0xc>)
   b4fc8:	681b      	ldr	r3, [r3, #0]
   b4fca:	6a1b      	ldr	r3, [r3, #32]
   b4fcc:	9301      	str	r3, [sp, #4]
   b4fce:	bd08      	pop	{r3, pc}
   b4fd0:	0003024c 	.word	0x0003024c

000b4fd4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4fd4:	b508      	push	{r3, lr}
   b4fd6:	4b02      	ldr	r3, [pc, #8]	; (b4fe0 <panic_+0xc>)
   b4fd8:	681b      	ldr	r3, [r3, #0]
   b4fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4fdc:	9301      	str	r3, [sp, #4]
   b4fde:	bd08      	pop	{r3, pc}
   b4fe0:	00030260 	.word	0x00030260

000b4fe4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4fe4:	b508      	push	{r3, lr}
   b4fe6:	4b02      	ldr	r3, [pc, #8]	; (b4ff0 <set_system_mode+0xc>)
   b4fe8:	681b      	ldr	r3, [r3, #0]
   b4fea:	685b      	ldr	r3, [r3, #4]
   b4fec:	9301      	str	r3, [sp, #4]
   b4fee:	bd08      	pop	{r3, pc}
   b4ff0:	00030220 	.word	0x00030220

000b4ff4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4ff4:	b508      	push	{r3, lr}
   b4ff6:	4b02      	ldr	r3, [pc, #8]	; (b5000 <system_delay_ms+0xc>)
   b4ff8:	681b      	ldr	r3, [r3, #0]
   b4ffa:	695b      	ldr	r3, [r3, #20]
   b4ffc:	9301      	str	r3, [sp, #4]
   b4ffe:	bd08      	pop	{r3, pc}
   b5000:	00030220 	.word	0x00030220

000b5004 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5004:	b508      	push	{r3, lr}
   b5006:	4b03      	ldr	r3, [pc, #12]	; (b5014 <system_ctrl_set_app_request_handler+0x10>)
   b5008:	681b      	ldr	r3, [r3, #0]
   b500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b500e:	9301      	str	r3, [sp, #4]
   b5010:	bd08      	pop	{r3, pc}
   b5012:	0000      	.short	0x0000
   b5014:	00030220 	.word	0x00030220

000b5018 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5018:	b508      	push	{r3, lr}
   b501a:	4b03      	ldr	r3, [pc, #12]	; (b5028 <system_ctrl_set_result+0x10>)
   b501c:	681b      	ldr	r3, [r3, #0]
   b501e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5022:	9301      	str	r3, [sp, #4]
   b5024:	bd08      	pop	{r3, pc}
   b5026:	0000      	.short	0x0000
   b5028:	00030220 	.word	0x00030220

000b502c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b502c:	b508      	push	{r3, lr}
   b502e:	4b02      	ldr	r3, [pc, #8]	; (b5038 <network_connect+0xc>)
   b5030:	681b      	ldr	r3, [r3, #0]
   b5032:	685b      	ldr	r3, [r3, #4]
   b5034:	9301      	str	r3, [sp, #4]
   b5036:	bd08      	pop	{r3, pc}
   b5038:	00030240 	.word	0x00030240

000b503c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b503c:	b508      	push	{r3, lr}
   b503e:	4b02      	ldr	r3, [pc, #8]	; (b5048 <network_connecting+0xc>)
   b5040:	681b      	ldr	r3, [r3, #0]
   b5042:	689b      	ldr	r3, [r3, #8]
   b5044:	9301      	str	r3, [sp, #4]
   b5046:	bd08      	pop	{r3, pc}
   b5048:	00030240 	.word	0x00030240

000b504c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b504c:	b508      	push	{r3, lr}
   b504e:	4b02      	ldr	r3, [pc, #8]	; (b5058 <network_disconnect+0xc>)
   b5050:	681b      	ldr	r3, [r3, #0]
   b5052:	68db      	ldr	r3, [r3, #12]
   b5054:	9301      	str	r3, [sp, #4]
   b5056:	bd08      	pop	{r3, pc}
   b5058:	00030240 	.word	0x00030240

000b505c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b505c:	b508      	push	{r3, lr}
   b505e:	4b02      	ldr	r3, [pc, #8]	; (b5068 <network_ready+0xc>)
   b5060:	681b      	ldr	r3, [r3, #0]
   b5062:	691b      	ldr	r3, [r3, #16]
   b5064:	9301      	str	r3, [sp, #4]
   b5066:	bd08      	pop	{r3, pc}
   b5068:	00030240 	.word	0x00030240

000b506c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b506c:	b508      	push	{r3, lr}
   b506e:	4b02      	ldr	r3, [pc, #8]	; (b5078 <network_on+0xc>)
   b5070:	681b      	ldr	r3, [r3, #0]
   b5072:	695b      	ldr	r3, [r3, #20]
   b5074:	9301      	str	r3, [sp, #4]
   b5076:	bd08      	pop	{r3, pc}
   b5078:	00030240 	.word	0x00030240

000b507c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b507c:	b508      	push	{r3, lr}
   b507e:	4b02      	ldr	r3, [pc, #8]	; (b5088 <network_off+0xc>)
   b5080:	681b      	ldr	r3, [r3, #0]
   b5082:	699b      	ldr	r3, [r3, #24]
   b5084:	9301      	str	r3, [sp, #4]
   b5086:	bd08      	pop	{r3, pc}
   b5088:	00030240 	.word	0x00030240

000b508c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b508c:	b508      	push	{r3, lr}
   b508e:	4b02      	ldr	r3, [pc, #8]	; (b5098 <network_listen+0xc>)
   b5090:	681b      	ldr	r3, [r3, #0]
   b5092:	69db      	ldr	r3, [r3, #28]
   b5094:	9301      	str	r3, [sp, #4]
   b5096:	bd08      	pop	{r3, pc}
   b5098:	00030240 	.word	0x00030240

000b509c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b509c:	b508      	push	{r3, lr}
   b509e:	4b02      	ldr	r3, [pc, #8]	; (b50a8 <network_listening+0xc>)
   b50a0:	681b      	ldr	r3, [r3, #0]
   b50a2:	6a1b      	ldr	r3, [r3, #32]
   b50a4:	9301      	str	r3, [sp, #4]
   b50a6:	bd08      	pop	{r3, pc}
   b50a8:	00030240 	.word	0x00030240

000b50ac <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b50ac:	b508      	push	{r3, lr}
   b50ae:	4b02      	ldr	r3, [pc, #8]	; (b50b8 <network_set_listen_timeout+0xc>)
   b50b0:	681b      	ldr	r3, [r3, #0]
   b50b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b50b4:	9301      	str	r3, [sp, #4]
   b50b6:	bd08      	pop	{r3, pc}
   b50b8:	00030240 	.word	0x00030240

000b50bc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b50bc:	b508      	push	{r3, lr}
   b50be:	4b02      	ldr	r3, [pc, #8]	; (b50c8 <network_get_listen_timeout+0xc>)
   b50c0:	681b      	ldr	r3, [r3, #0]
   b50c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b50c4:	9301      	str	r3, [sp, #4]
   b50c6:	bd08      	pop	{r3, pc}
   b50c8:	00030240 	.word	0x00030240

000b50cc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b50cc:	b508      	push	{r3, lr}
   b50ce:	4b02      	ldr	r3, [pc, #8]	; (b50d8 <network_is_on+0xc>)
   b50d0:	681b      	ldr	r3, [r3, #0]
   b50d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b50d4:	9301      	str	r3, [sp, #4]
   b50d6:	bd08      	pop	{r3, pc}
   b50d8:	00030240 	.word	0x00030240

000b50dc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b50dc:	b508      	push	{r3, lr}
   b50de:	4b02      	ldr	r3, [pc, #8]	; (b50e8 <network_is_off+0xc>)
   b50e0:	681b      	ldr	r3, [r3, #0]
   b50e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b50e4:	9301      	str	r3, [sp, #4]
   b50e6:	bd08      	pop	{r3, pc}
   b50e8:	00030240 	.word	0x00030240

000b50ec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b50ec:	b508      	push	{r3, lr}
   b50ee:	4b02      	ldr	r3, [pc, #8]	; (b50f8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b50f0:	681b      	ldr	r3, [r3, #0]
   b50f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b50f4:	9301      	str	r3, [sp, #4]
   b50f6:	bd08      	pop	{r3, pc}
   b50f8:	00030244 	.word	0x00030244

000b50fc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b50fc:	b508      	push	{r3, lr}
   b50fe:	4b02      	ldr	r3, [pc, #8]	; (b5108 <malloc+0xc>)
   b5100:	681b      	ldr	r3, [r3, #0]
   b5102:	681b      	ldr	r3, [r3, #0]
   b5104:	9301      	str	r3, [sp, #4]
   b5106:	bd08      	pop	{r3, pc}
   b5108:	0003021c 	.word	0x0003021c

000b510c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b510c:	b508      	push	{r3, lr}
   b510e:	4b02      	ldr	r3, [pc, #8]	; (b5118 <free+0xc>)
   b5110:	681b      	ldr	r3, [r3, #0]
   b5112:	685b      	ldr	r3, [r3, #4]
   b5114:	9301      	str	r3, [sp, #4]
   b5116:	bd08      	pop	{r3, pc}
   b5118:	0003021c 	.word	0x0003021c

000b511c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b511c:	b508      	push	{r3, lr}
   b511e:	4b02      	ldr	r3, [pc, #8]	; (b5128 <vsnprintf+0xc>)
   b5120:	681b      	ldr	r3, [r3, #0]
   b5122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5124:	9301      	str	r3, [sp, #4]
   b5126:	bd08      	pop	{r3, pc}
   b5128:	0003021c 	.word	0x0003021c

000b512c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b512c:	b508      	push	{r3, lr}
   b512e:	4b02      	ldr	r3, [pc, #8]	; (b5138 <__assert_func+0xc>)
   b5130:	681b      	ldr	r3, [r3, #0]
   b5132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5134:	9301      	str	r3, [sp, #4]
   b5136:	bd08      	pop	{r3, pc}
   b5138:	0003021c 	.word	0x0003021c

000b513c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b513c:	b508      	push	{r3, lr}
   b513e:	4b02      	ldr	r3, [pc, #8]	; (b5148 <newlib_impure_ptr_callback+0xc>)
   b5140:	681b      	ldr	r3, [r3, #0]
   b5142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5144:	9301      	str	r3, [sp, #4]
   b5146:	bd08      	pop	{r3, pc}
   b5148:	0003021c 	.word	0x0003021c

000b514c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b514c:	2200      	movs	r2, #0
   b514e:	6840      	ldr	r0, [r0, #4]
   b5150:	4611      	mov	r1, r2
   b5152:	f7ff bfa3 	b.w	b509c <network_listening>

000b5156 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5156:	2200      	movs	r2, #0
   b5158:	6840      	ldr	r0, [r0, #4]
   b515a:	4611      	mov	r1, r2
   b515c:	f7ff bfae 	b.w	b50bc <network_get_listen_timeout>

000b5160 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5160:	6840      	ldr	r0, [r0, #4]
   b5162:	2200      	movs	r2, #0
   b5164:	f7ff bfa2 	b.w	b50ac <network_set_listen_timeout>

000b5168 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5168:	6840      	ldr	r0, [r0, #4]
   b516a:	2200      	movs	r2, #0
   b516c:	f081 0101 	eor.w	r1, r1, #1
   b5170:	f7ff bf8c 	b.w	b508c <network_listen>

000b5174 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5174:	2300      	movs	r3, #0
   b5176:	6840      	ldr	r0, [r0, #4]
   b5178:	461a      	mov	r2, r3
   b517a:	4619      	mov	r1, r3
   b517c:	f7ff bf7e 	b.w	b507c <network_off>

000b5180 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5180:	2300      	movs	r3, #0
   b5182:	6840      	ldr	r0, [r0, #4]
   b5184:	461a      	mov	r2, r3
   b5186:	4619      	mov	r1, r3
   b5188:	f7ff bf70 	b.w	b506c <network_on>

000b518c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b518c:	2200      	movs	r2, #0
   b518e:	6840      	ldr	r0, [r0, #4]
   b5190:	4611      	mov	r1, r2
   b5192:	f7ff bf63 	b.w	b505c <network_ready>

000b5196 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5196:	2200      	movs	r2, #0
   b5198:	6840      	ldr	r0, [r0, #4]
   b519a:	4611      	mov	r1, r2
   b519c:	f7ff bf4e 	b.w	b503c <network_connecting>

000b51a0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b51a0:	6840      	ldr	r0, [r0, #4]
   b51a2:	2200      	movs	r2, #0
   b51a4:	2102      	movs	r1, #2
   b51a6:	f7ff bf51 	b.w	b504c <network_disconnect>

000b51aa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b51aa:	2300      	movs	r3, #0
   b51ac:	6840      	ldr	r0, [r0, #4]
   b51ae:	461a      	mov	r2, r3
   b51b0:	f7ff bf3c 	b.w	b502c <network_connect>

000b51b4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b51b4:	4b02      	ldr	r3, [pc, #8]	; (b51c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b51b6:	2203      	movs	r2, #3
   b51b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b51ba:	4a02      	ldr	r2, [pc, #8]	; (b51c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b51bc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b51be:	4770      	bx	lr
   b51c0:	2003e6c4 	.word	0x2003e6c4
   b51c4:	000b648c 	.word	0x000b648c

000b51c8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b51c8:	2100      	movs	r1, #0
   b51ca:	f7ff becb 	b.w	b4f64 <hal_spi_release>

000b51ce <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b51ce:	2100      	movs	r1, #0
   b51d0:	f7ff bec0 	b.w	b4f54 <hal_spi_acquire>

000b51d4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b51d4:	b510      	push	{r4, lr}
   b51d6:	4604      	mov	r4, r0
   b51d8:	4608      	mov	r0, r1
{
    _spi = spi;
   b51da:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b51dc:	f7ff fea2 	bl	b4f24 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b51e0:	2300      	movs	r3, #0
   b51e2:	6063      	str	r3, [r4, #4]
}
   b51e4:	4620      	mov	r0, r4
   b51e6:	bd10      	pop	{r4, pc}

000b51e8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b51e8:	b513      	push	{r0, r1, r4, lr}
   b51ea:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b51ec:	7800      	ldrb	r0, [r0, #0]
   b51ee:	f7ff ffee 	bl	b51ce <_ZN8SPIClass4lockEv.isra.0>
   b51f2:	b958      	cbnz	r0, b520c <_ZN8SPIClass5beginEv+0x24>
   b51f4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b51f6:	9001      	str	r0, [sp, #4]
   b51f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b51fc:	f7ff fe6a 	bl	b4ed4 <hal_spi_begin>
        unlock();
   b5200:	9801      	ldr	r0, [sp, #4]
    }
}
   b5202:	b002      	add	sp, #8
   b5204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5208:	f7ff bfde 	b.w	b51c8 <_ZN8SPIClass6unlockEv.isra.0>
   b520c:	b002      	add	sp, #8
   b520e:	bd10      	pop	{r4, pc}

000b5210 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b5210:	b513      	push	{r0, r1, r4, lr}
   b5212:	4604      	mov	r4, r0
    if (!lock())
   b5214:	7800      	ldrb	r0, [r0, #0]
{
   b5216:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5218:	f7ff ffd9 	bl	b51ce <_ZN8SPIClass4lockEv.isra.0>
   b521c:	9901      	ldr	r1, [sp, #4]
   b521e:	b948      	cbnz	r0, b5234 <_ZN8SPIClass11setBitOrderEh+0x24>
   b5220:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b5222:	9001      	str	r0, [sp, #4]
   b5224:	f7ff fe5e 	bl	b4ee4 <hal_spi_set_bit_order>
        unlock();
   b5228:	9801      	ldr	r0, [sp, #4]
    }
}
   b522a:	b002      	add	sp, #8
   b522c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5230:	f7ff bfca 	b.w	b51c8 <_ZN8SPIClass6unlockEv.isra.0>
   b5234:	b002      	add	sp, #8
   b5236:	bd10      	pop	{r4, pc}

000b5238 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b5238:	b513      	push	{r0, r1, r4, lr}
   b523a:	4604      	mov	r4, r0
    if (!lock())
   b523c:	7800      	ldrb	r0, [r0, #0]
{
   b523e:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5240:	f7ff ffc5 	bl	b51ce <_ZN8SPIClass4lockEv.isra.0>
   b5244:	9901      	ldr	r1, [sp, #4]
   b5246:	b948      	cbnz	r0, b525c <_ZN8SPIClass11setDataModeEh+0x24>
   b5248:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b524a:	9001      	str	r0, [sp, #4]
   b524c:	f7ff fe52 	bl	b4ef4 <hal_spi_set_data_mode>
        unlock();
   b5250:	9801      	ldr	r0, [sp, #4]
    }
}
   b5252:	b002      	add	sp, #8
   b5254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5258:	f7ff bfb6 	b.w	b51c8 <_ZN8SPIClass6unlockEv.isra.0>
   b525c:	b002      	add	sp, #8
   b525e:	bd10      	pop	{r4, pc}

000b5260 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5260:	0840      	lsrs	r0, r0, #1
{
   b5262:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5264:	6018      	str	r0, [r3, #0]
   b5266:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5268:	6818      	ldr	r0, [r3, #0]
   b526a:	4288      	cmp	r0, r1
   b526c:	b2e5      	uxtb	r5, r4
   b526e:	d906      	bls.n	b527e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5270:	3401      	adds	r4, #1
   b5272:	2c08      	cmp	r4, #8
   b5274:	d002      	beq.n	b527c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5276:	0840      	lsrs	r0, r0, #1
   b5278:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b527a:	e7f5      	b.n	b5268 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b527c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b527e:	4b02      	ldr	r3, [pc, #8]	; (b5288 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5280:	5d5b      	ldrb	r3, [r3, r5]
   b5282:	7013      	strb	r3, [r2, #0]
}
   b5284:	bd30      	pop	{r4, r5, pc}
   b5286:	bf00      	nop
   b5288:	000b64c0 	.word	0x000b64c0

000b528c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b528c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5290:	b088      	sub	sp, #32
    unsigned clock = 0;
   b5292:	2300      	movs	r3, #0
{
   b5294:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b5296:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b5298:	9302      	str	r3, [sp, #8]
{
   b529a:	460e      	mov	r6, r1
   b529c:	4617      	mov	r7, r2
    if (!lock())
   b529e:	f7ff ff96 	bl	b51ce <_ZN8SPIClass4lockEv.isra.0>
   b52a2:	4605      	mov	r5, r0
   b52a4:	bb00      	cbnz	r0, b52e8 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b52a6:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b52aa:	4601      	mov	r1, r0
   b52ac:	2214      	movs	r2, #20
   b52ae:	a803      	add	r0, sp, #12
   b52b0:	f000 fd6c 	bl	b5d8c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b52b4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b52b6:	462a      	mov	r2, r5
   b52b8:	a903      	add	r1, sp, #12
   b52ba:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b52bc:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b52c0:	f7ff fe40 	bl	b4f44 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b52c4:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b52c6:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b52ca:	ab02      	add	r3, sp, #8
   b52cc:	f10d 0207 	add.w	r2, sp, #7
   b52d0:	fb07 f106 	mul.w	r1, r7, r6
   b52d4:	f7ff ffc4 	bl	b5260 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b52d8:	7820      	ldrb	r0, [r4, #0]
   b52da:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b52de:	f7ff fe11 	bl	b4f04 <hal_spi_set_clock_divider>
        unlock();
   b52e2:	7820      	ldrb	r0, [r4, #0]
   b52e4:	f7ff ff70 	bl	b51c8 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b52e8:	9802      	ldr	r0, [sp, #8]
   b52ea:	b008      	add	sp, #32
   b52ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b52f0 <_ZN8SPIClass15setClockDividerEh>:
{
   b52f0:	b538      	push	{r3, r4, r5, lr}
   b52f2:	4604      	mov	r4, r0
    if (!lock())
   b52f4:	7800      	ldrb	r0, [r0, #0]
{
   b52f6:	460d      	mov	r5, r1
    if (!lock())
   b52f8:	f7ff ff69 	bl	b51ce <_ZN8SPIClass4lockEv.isra.0>
   b52fc:	4603      	mov	r3, r0
   b52fe:	b9d0      	cbnz	r0, b5336 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b5300:	6861      	ldr	r1, [r4, #4]
   b5302:	b199      	cbz	r1, b532c <_ZN8SPIClass15setClockDividerEh+0x3c>
   b5304:	4a0c      	ldr	r2, [pc, #48]	; (b5338 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b5306:	f812 0b01 	ldrb.w	r0, [r2], #1
   b530a:	4285      	cmp	r5, r0
   b530c:	d002      	beq.n	b5314 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b530e:	3301      	adds	r3, #1
   b5310:	2b08      	cmp	r3, #8
   b5312:	d1f8      	bne.n	b5306 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b5314:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b5316:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b5318:	2201      	movs	r2, #1
   b531a:	40d9      	lsrs	r1, r3
   b531c:	4620      	mov	r0, r4
   b531e:	f7ff ffb5 	bl	b528c <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b5322:	7820      	ldrb	r0, [r4, #0]
}
   b5324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b5328:	f7ff bf4e 	b.w	b51c8 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b532c:	7820      	ldrb	r0, [r4, #0]
   b532e:	4629      	mov	r1, r5
   b5330:	f7ff fde8 	bl	b4f04 <hal_spi_set_clock_divider>
   b5334:	e7f5      	b.n	b5322 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b5336:	bd38      	pop	{r3, r4, r5, pc}
   b5338:	000b64c0 	.word	0x000b64c0

000b533c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b533c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b533e:	7800      	ldrb	r0, [r0, #0]
   b5340:	f7ff fde8 	bl	b4f14 <hal_spi_transfer>
}
   b5344:	b2c0      	uxtb	r0, r0
   b5346:	bd08      	pop	{r3, pc}

000b5348 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5348:	4b05      	ldr	r3, [pc, #20]	; (b5360 <_GLOBAL__sub_I_System+0x18>)
   b534a:	2202      	movs	r2, #2
   b534c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b534e:	4b05      	ldr	r3, [pc, #20]	; (b5364 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5350:	4a05      	ldr	r2, [pc, #20]	; (b5368 <_GLOBAL__sub_I_System+0x20>)
   b5352:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5354:	2000      	movs	r0, #0
   b5356:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b535a:	f7ff be43 	b.w	b4fe4 <set_system_mode>
   b535e:	bf00      	nop
   b5360:	2003e6d8 	.word	0x2003e6d8
   b5364:	2003e6cc 	.word	0x2003e6cc
   b5368:	ffff0000 	.word	0xffff0000

000b536c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b536c:	4802      	ldr	r0, [pc, #8]	; (b5378 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b536e:	2300      	movs	r3, #0
   b5370:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5372:	f7ff bd0f 	b.w	b4d94 <os_mutex_recursive_create>
   b5376:	bf00      	nop
   b5378:	2003e6dc 	.word	0x2003e6dc

000b537c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b537e:	4606      	mov	r6, r0
   b5380:	460d      	mov	r5, r1
  size_t n = 0;
   b5382:	188f      	adds	r7, r1, r2
   b5384:	2400      	movs	r4, #0
  while (size--) {
   b5386:	42bd      	cmp	r5, r7
   b5388:	d00c      	beq.n	b53a4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b538a:	6833      	ldr	r3, [r6, #0]
   b538c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5390:	689b      	ldr	r3, [r3, #8]
   b5392:	4630      	mov	r0, r6
   b5394:	4798      	blx	r3
     if (chunk>=0)
   b5396:	1e03      	subs	r3, r0, #0
   b5398:	db01      	blt.n	b539e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b539a:	441c      	add	r4, r3
  while (size--) {
   b539c:	e7f3      	b.n	b5386 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b539e:	2c00      	cmp	r4, #0
   b53a0:	bf08      	it	eq
   b53a2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b53a4:	4620      	mov	r0, r4
   b53a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b53a8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b53a8:	b513      	push	{r0, r1, r4, lr}
   b53aa:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b53ac:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b53ae:	b159      	cbz	r1, b53c8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b53b0:	9101      	str	r1, [sp, #4]
   b53b2:	f000 fd21 	bl	b5df8 <strlen>
   b53b6:	6823      	ldr	r3, [r4, #0]
   b53b8:	9901      	ldr	r1, [sp, #4]
   b53ba:	68db      	ldr	r3, [r3, #12]
   b53bc:	4602      	mov	r2, r0
   b53be:	4620      	mov	r0, r4
    }
   b53c0:	b002      	add	sp, #8
   b53c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b53c6:	4718      	bx	r3
    }
   b53c8:	b002      	add	sp, #8
   b53ca:	bd10      	pop	{r4, pc}

000b53cc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b53cc:	6803      	ldr	r3, [r0, #0]
   b53ce:	689b      	ldr	r3, [r3, #8]
   b53d0:	4718      	bx	r3

000b53d2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b53d2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b53d4:	210d      	movs	r1, #13
{
   b53d6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b53d8:	f7ff fff8 	bl	b53cc <_ZN5Print5printEc>
  n += print('\n');
   b53dc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b53de:	4604      	mov	r4, r0
  n += print('\n');
   b53e0:	4628      	mov	r0, r5
   b53e2:	f7ff fff3 	bl	b53cc <_ZN5Print5printEc>
  return n;
}
   b53e6:	4420      	add	r0, r4
   b53e8:	bd38      	pop	{r3, r4, r5, pc}

000b53ea <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b53ea:	b530      	push	{r4, r5, lr}
   b53ec:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b53ee:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b53f0:	2a01      	cmp	r2, #1
  *str = '\0';
   b53f2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b53f6:	bf98      	it	ls
   b53f8:	220a      	movls	r2, #10
   b53fa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b53fc:	460d      	mov	r5, r1
   b53fe:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5402:	fb01 5312 	mls	r3, r1, r2, r5
   b5406:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b540a:	2b09      	cmp	r3, #9
   b540c:	bf94      	ite	ls
   b540e:	3330      	addls	r3, #48	; 0x30
   b5410:	3337      	addhi	r3, #55	; 0x37
   b5412:	b2db      	uxtb	r3, r3
  } while(n);
   b5414:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5416:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b541a:	d9ef      	bls.n	b53fc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b541c:	4621      	mov	r1, r4
   b541e:	f7ff ffc3 	bl	b53a8 <_ZN5Print5writeEPKc>
}
   b5422:	b00b      	add	sp, #44	; 0x2c
   b5424:	bd30      	pop	{r4, r5, pc}

000b5426 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b542a:	b086      	sub	sp, #24
   b542c:	af00      	add	r7, sp, #0
   b542e:	4605      	mov	r5, r0
   b5430:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5432:	1d38      	adds	r0, r7, #4
   b5434:	2114      	movs	r1, #20
{
   b5436:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5438:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b543a:	f7ff fe6f 	bl	b511c <vsnprintf>

    if (n<bufsize)
   b543e:	2813      	cmp	r0, #19
   b5440:	d80e      	bhi.n	b5460 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5442:	1d39      	adds	r1, r7, #4
   b5444:	4628      	mov	r0, r5
   b5446:	f7ff ffaf 	bl	b53a8 <_ZN5Print5writeEPKc>
   b544a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b544c:	b11e      	cbz	r6, b5456 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b544e:	4628      	mov	r0, r5
   b5450:	f7ff ffbf 	bl	b53d2 <_ZN5Print7printlnEv>
   b5454:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5456:	4620      	mov	r0, r4
   b5458:	3718      	adds	r7, #24
   b545a:	46bd      	mov	sp, r7
   b545c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5460:	f100 0308 	add.w	r3, r0, #8
   b5464:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5468:	46e8      	mov	r8, sp
        char bigger[n+1];
   b546a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b546e:	4622      	mov	r2, r4
   b5470:	1c41      	adds	r1, r0, #1
   b5472:	683b      	ldr	r3, [r7, #0]
   b5474:	4668      	mov	r0, sp
   b5476:	f7ff fe51 	bl	b511c <vsnprintf>
  return write(str);
   b547a:	4669      	mov	r1, sp
   b547c:	4628      	mov	r0, r5
   b547e:	f7ff ff93 	bl	b53a8 <_ZN5Print5writeEPKc>
   b5482:	4604      	mov	r4, r0
   b5484:	46c5      	mov	sp, r8
   b5486:	e7e1      	b.n	b544c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5488 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5488:	4b01      	ldr	r3, [pc, #4]	; (b5490 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b548a:	4a02      	ldr	r2, [pc, #8]	; (b5494 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b548c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b548e:	4770      	bx	lr
   b5490:	2003e6e0 	.word	0x2003e6e0
   b5494:	000b64c8 	.word	0x000b64c8

000b5498 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5498:	4b02      	ldr	r3, [pc, #8]	; (b54a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b549a:	681a      	ldr	r2, [r3, #0]
   b549c:	4b02      	ldr	r3, [pc, #8]	; (b54a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b549e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b54a0:	4770      	bx	lr
   b54a2:	bf00      	nop
   b54a4:	2003e604 	.word	0x2003e604
   b54a8:	2003e6e4 	.word	0x2003e6e4

000b54ac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b54ac:	2100      	movs	r1, #0
   b54ae:	f7ff bda1 	b.w	b4ff4 <system_delay_ms>
	...

000b54b4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b54b4:	4b01      	ldr	r3, [pc, #4]	; (b54bc <_GLOBAL__sub_I_RGB+0x8>)
   b54b6:	2200      	movs	r2, #0
   b54b8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b54ba:	4770      	bx	lr
   b54bc:	2003e6e8 	.word	0x2003e6e8

000b54c0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b54c0:	4b01      	ldr	r3, [pc, #4]	; (b54c8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b54c2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b54c4:	4770      	bx	lr
   b54c6:	bf00      	nop
   b54c8:	2003e608 	.word	0x2003e608

000b54cc <serialEventRun>:
{
   b54cc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b54ce:	4b0b      	ldr	r3, [pc, #44]	; (b54fc <serialEventRun+0x30>)
   b54d0:	b143      	cbz	r3, b54e4 <serialEventRun+0x18>
   b54d2:	f000 f963 	bl	b579c <_Z16_fetch_usbserialv>
   b54d6:	6803      	ldr	r3, [r0, #0]
   b54d8:	691b      	ldr	r3, [r3, #16]
   b54da:	4798      	blx	r3
   b54dc:	2800      	cmp	r0, #0
   b54de:	dd01      	ble.n	b54e4 <serialEventRun+0x18>
        serialEvent();
   b54e0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b54e4:	4b06      	ldr	r3, [pc, #24]	; (b5500 <serialEventRun+0x34>)
   b54e6:	b143      	cbz	r3, b54fa <serialEventRun+0x2e>
   b54e8:	f000 fbd6 	bl	b5c98 <_Z22__fetch_global_Serial1v>
   b54ec:	6803      	ldr	r3, [r0, #0]
   b54ee:	691b      	ldr	r3, [r3, #16]
   b54f0:	4798      	blx	r3
   b54f2:	2800      	cmp	r0, #0
   b54f4:	dd01      	ble.n	b54fa <serialEventRun+0x2e>
        serialEvent1();
   b54f6:	f3af 8000 	nop.w
}
   b54fa:	bd08      	pop	{r3, pc}
	...

000b5504 <_post_loop>:
{
   b5504:	b508      	push	{r3, lr}
	serialEventRun();
   b5506:	f7ff ffe1 	bl	b54cc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b550a:	f7ff fc3b 	bl	b4d84 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b550e:	4b01      	ldr	r3, [pc, #4]	; (b5514 <_post_loop+0x10>)
   b5510:	6018      	str	r0, [r3, #0]
}
   b5512:	bd08      	pop	{r3, pc}
   b5514:	2003e740 	.word	0x2003e740

000b5518 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5518:	4805      	ldr	r0, [pc, #20]	; (b5530 <_Z33system_initialize_user_backup_ramv+0x18>)
   b551a:	4a06      	ldr	r2, [pc, #24]	; (b5534 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b551c:	4906      	ldr	r1, [pc, #24]	; (b5538 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b551e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5520:	1a12      	subs	r2, r2, r0
   b5522:	f000 fc25 	bl	b5d70 <memcpy>
    __backup_sram_signature = signature;
   b5526:	4b05      	ldr	r3, [pc, #20]	; (b553c <_Z33system_initialize_user_backup_ramv+0x24>)
   b5528:	4a05      	ldr	r2, [pc, #20]	; (b5540 <_Z33system_initialize_user_backup_ramv+0x28>)
   b552a:	601a      	str	r2, [r3, #0]
}
   b552c:	bd08      	pop	{r3, pc}
   b552e:	bf00      	nop
   b5530:	2003f400 	.word	0x2003f400
   b5534:	2003f404 	.word	0x2003f404
   b5538:	000b66e4 	.word	0x000b66e4
   b553c:	2003f400 	.word	0x2003f400
   b5540:	9a271c1e 	.word	0x9a271c1e

000b5544 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5544:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5546:	2300      	movs	r3, #0
   b5548:	9300      	str	r3, [sp, #0]
   b554a:	461a      	mov	r2, r3
   b554c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5550:	f7ff fd62 	bl	b5018 <system_ctrl_set_result>
}
   b5554:	b003      	add	sp, #12
   b5556:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b555c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b555c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b555e:	8843      	ldrh	r3, [r0, #2]
   b5560:	2b0a      	cmp	r3, #10
   b5562:	d008      	beq.n	b5576 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5564:	2b50      	cmp	r3, #80	; 0x50
   b5566:	d10b      	bne.n	b5580 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5568:	4b09      	ldr	r3, [pc, #36]	; (b5590 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b556a:	681b      	ldr	r3, [r3, #0]
   b556c:	b14b      	cbz	r3, b5582 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b556e:	b003      	add	sp, #12
   b5570:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5574:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5576:	f7ff ffe5 	bl	b5544 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b557a:	b003      	add	sp, #12
   b557c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5580:	2300      	movs	r3, #0
   b5582:	9300      	str	r3, [sp, #0]
   b5584:	461a      	mov	r2, r3
   b5586:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b558a:	f7ff fd45 	bl	b5018 <system_ctrl_set_result>
}
   b558e:	e7f4      	b.n	b557a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5590:	2003e6fc 	.word	0x2003e6fc

000b5594 <module_user_init_hook>:
{
   b5594:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5596:	4812      	ldr	r0, [pc, #72]	; (b55e0 <module_user_init_hook+0x4c>)
   b5598:	2100      	movs	r1, #0
   b559a:	f7ff fdcf 	bl	b513c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b559e:	4b11      	ldr	r3, [pc, #68]	; (b55e4 <module_user_init_hook+0x50>)
   b55a0:	681a      	ldr	r2, [r3, #0]
   b55a2:	4b11      	ldr	r3, [pc, #68]	; (b55e8 <module_user_init_hook+0x54>)
   b55a4:	429a      	cmp	r2, r3
   b55a6:	4b11      	ldr	r3, [pc, #68]	; (b55ec <module_user_init_hook+0x58>)
   b55a8:	bf0c      	ite	eq
   b55aa:	2201      	moveq	r2, #1
   b55ac:	2200      	movne	r2, #0
   b55ae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b55b0:	d001      	beq.n	b55b6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b55b2:	f7ff ffb1 	bl	b5518 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b55b6:	f7ff fbd5 	bl	b4d64 <HAL_RNG_GetRandomNumber>
   b55ba:	4604      	mov	r4, r0
    srand(seed);
   b55bc:	f000 fbee 	bl	b5d9c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b55c0:	4b0b      	ldr	r3, [pc, #44]	; (b55f0 <module_user_init_hook+0x5c>)
   b55c2:	b113      	cbz	r3, b55ca <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b55c4:	4620      	mov	r0, r4
   b55c6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b55ca:	2100      	movs	r1, #0
   b55cc:	4808      	ldr	r0, [pc, #32]	; (b55f0 <module_user_init_hook+0x5c>)
   b55ce:	f7ff fd8d 	bl	b50ec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b55d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b55d6:	4807      	ldr	r0, [pc, #28]	; (b55f4 <module_user_init_hook+0x60>)
   b55d8:	2100      	movs	r1, #0
   b55da:	f7ff bd13 	b.w	b5004 <system_ctrl_set_app_request_handler>
   b55de:	bf00      	nop
   b55e0:	000b54c1 	.word	0x000b54c1
   b55e4:	2003f400 	.word	0x2003f400
   b55e8:	9a271c1e 	.word	0x9a271c1e
   b55ec:	2003e6f8 	.word	0x2003e6f8
   b55f0:	00000000 	.word	0x00000000
   b55f4:	000b555d 	.word	0x000b555d

000b55f8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b55f8:	4770      	bx	lr

000b55fa <_ZN9IPAddressD0Ev>:
   b55fa:	b510      	push	{r4, lr}
   b55fc:	2118      	movs	r1, #24
   b55fe:	4604      	mov	r4, r0
   b5600:	f7fe fd49 	bl	b4096 <_ZdlPvj>
   b5604:	4620      	mov	r0, r4
   b5606:	bd10      	pop	{r4, pc}

000b5608 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5608:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b560a:	7d03      	ldrb	r3, [r0, #20]
   b560c:	2b06      	cmp	r3, #6
{
   b560e:	b08d      	sub	sp, #52	; 0x34
   b5610:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5612:	f100 0704 	add.w	r7, r0, #4
   b5616:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b561a:	d012      	beq.n	b5642 <_ZNK9IPAddress7printToER5Print+0x3a>
   b561c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5620:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5624:	220a      	movs	r2, #10
   b5626:	4630      	mov	r0, r6
   b5628:	f7ff fedf 	bl	b53ea <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b562c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b562e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5630:	d019      	beq.n	b5666 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5632:	2c00      	cmp	r4, #0
   b5634:	d0f4      	beq.n	b5620 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5636:	212e      	movs	r1, #46	; 0x2e
   b5638:	4630      	mov	r0, r6
   b563a:	f7ff fec7 	bl	b53cc <_ZN5Print5printEc>
   b563e:	4404      	add	r4, r0
   b5640:	e7ee      	b.n	b5620 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5642:	232f      	movs	r3, #47	; 0x2f
   b5644:	466a      	mov	r2, sp
   b5646:	4639      	mov	r1, r7
   b5648:	200a      	movs	r0, #10
		buf[0] = 0;
   b564a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b564e:	f7ff fba9 	bl	b4da4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5652:	4668      	mov	r0, sp
   b5654:	f000 fbd0 	bl	b5df8 <strlen>
   b5658:	6833      	ldr	r3, [r6, #0]
   b565a:	4602      	mov	r2, r0
   b565c:	68db      	ldr	r3, [r3, #12]
   b565e:	4669      	mov	r1, sp
   b5660:	4630      	mov	r0, r6
   b5662:	4798      	blx	r3
   b5664:	4604      	mov	r4, r0
    }
    return n;
}
   b5666:	4620      	mov	r0, r4
   b5668:	b00d      	add	sp, #52	; 0x34
   b566a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b566c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b566c:	b510      	push	{r4, lr}
   b566e:	4b05      	ldr	r3, [pc, #20]	; (b5684 <_ZN9IPAddressC1Ev+0x18>)
   b5670:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5672:	2211      	movs	r2, #17
   b5674:	f840 3b04 	str.w	r3, [r0], #4
   b5678:	2100      	movs	r1, #0
   b567a:	f000 fb87 	bl	b5d8c <memset>
}
   b567e:	4620      	mov	r0, r4
   b5680:	bd10      	pop	{r4, pc}
   b5682:	bf00      	nop
   b5684:	000b64f0 	.word	0x000b64f0

000b5688 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5688:	4603      	mov	r3, r0
   b568a:	4a07      	ldr	r2, [pc, #28]	; (b56a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b568c:	b510      	push	{r4, lr}
   b568e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5692:	f101 0210 	add.w	r2, r1, #16
   b5696:	f851 4b04 	ldr.w	r4, [r1], #4
   b569a:	f843 4b04 	str.w	r4, [r3], #4
   b569e:	4291      	cmp	r1, r2
   b56a0:	d1f9      	bne.n	b5696 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b56a2:	780a      	ldrb	r2, [r1, #0]
   b56a4:	701a      	strb	r2, [r3, #0]
}
   b56a6:	bd10      	pop	{r4, pc}
   b56a8:	000b64f0 	.word	0x000b64f0

000b56ac <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b56ac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b56ae:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b56b2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b56b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b56ba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b56be:	2304      	movs	r3, #4
   b56c0:	6041      	str	r1, [r0, #4]
   b56c2:	7503      	strb	r3, [r0, #20]
}
   b56c4:	bd10      	pop	{r4, pc}
	...

000b56c8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b56c8:	b507      	push	{r0, r1, r2, lr}
   b56ca:	4b06      	ldr	r3, [pc, #24]	; (b56e4 <_ZN9IPAddressC1EPKh+0x1c>)
   b56cc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b56ce:	78cb      	ldrb	r3, [r1, #3]
   b56d0:	9300      	str	r3, [sp, #0]
   b56d2:	788b      	ldrb	r3, [r1, #2]
   b56d4:	784a      	ldrb	r2, [r1, #1]
   b56d6:	7809      	ldrb	r1, [r1, #0]
   b56d8:	f7ff ffe8 	bl	b56ac <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b56dc:	b003      	add	sp, #12
   b56de:	f85d fb04 	ldr.w	pc, [sp], #4
   b56e2:	bf00      	nop
   b56e4:	000b64f0 	.word	0x000b64f0

000b56e8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b56e8:	7441      	strb	r1, [r0, #17]
}
   b56ea:	4770      	bx	lr

000b56ec <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b56ec:	4770      	bx	lr

000b56ee <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b56ee:	4770      	bx	lr

000b56f0 <_ZN9USBSerial4readEv>:
{
   b56f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b56f2:	2100      	movs	r1, #0
   b56f4:	7c00      	ldrb	r0, [r0, #16]
   b56f6:	f7ff fc55 	bl	b4fa4 <HAL_USB_USART_Receive_Data>
}
   b56fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b56fe:	bd08      	pop	{r3, pc}

000b5700 <_ZN9USBSerial4peekEv>:
{
   b5700:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5702:	2101      	movs	r1, #1
   b5704:	7c00      	ldrb	r0, [r0, #16]
   b5706:	f7ff fc4d 	bl	b4fa4 <HAL_USB_USART_Receive_Data>
}
   b570a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b570e:	bd08      	pop	{r3, pc}

000b5710 <_ZN9USBSerial17availableForWriteEv>:
{
   b5710:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5712:	7c00      	ldrb	r0, [r0, #16]
   b5714:	f7ff fc3e 	bl	b4f94 <HAL_USB_USART_Available_Data_For_Write>
}
   b5718:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b571c:	bd08      	pop	{r3, pc}

000b571e <_ZN9USBSerial9availableEv>:
{
   b571e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5720:	7c00      	ldrb	r0, [r0, #16]
   b5722:	f7ff fc2f 	bl	b4f84 <HAL_USB_USART_Available_Data>
}
   b5726:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b572a:	bd08      	pop	{r3, pc}

000b572c <_ZN9USBSerial5writeEh>:
{
   b572c:	b513      	push	{r0, r1, r4, lr}
   b572e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5730:	7c00      	ldrb	r0, [r0, #16]
{
   b5732:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5734:	f7ff fc2e 	bl	b4f94 <HAL_USB_USART_Available_Data_For_Write>
   b5738:	2800      	cmp	r0, #0
   b573a:	9901      	ldr	r1, [sp, #4]
   b573c:	dc01      	bgt.n	b5742 <_ZN9USBSerial5writeEh+0x16>
   b573e:	7c60      	ldrb	r0, [r4, #17]
   b5740:	b120      	cbz	r0, b574c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5742:	7c20      	ldrb	r0, [r4, #16]
   b5744:	f7ff fc36 	bl	b4fb4 <HAL_USB_USART_Send_Data>
   b5748:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b574c:	b002      	add	sp, #8
   b574e:	bd10      	pop	{r4, pc}

000b5750 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5750:	7c00      	ldrb	r0, [r0, #16]
   b5752:	f7ff bc37 	b.w	b4fc4 <HAL_USB_USART_Flush_Data>

000b5756 <_ZN9USBSerialD0Ev>:
   b5756:	b510      	push	{r4, lr}
   b5758:	2114      	movs	r1, #20
   b575a:	4604      	mov	r4, r0
   b575c:	f7fe fc9b 	bl	b4096 <_ZdlPvj>
   b5760:	4620      	mov	r0, r4
   b5762:	bd10      	pop	{r4, pc}

000b5764 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5764:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b576a:	4604      	mov	r4, r0
   b576c:	4608      	mov	r0, r1
   b576e:	2100      	movs	r1, #0
   b5770:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5774:	4b04      	ldr	r3, [pc, #16]	; (b5788 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5776:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5778:	2301      	movs	r3, #1
  _serial = serial;
   b577a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b577c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b577e:	4611      	mov	r1, r2
   b5780:	f7ff fbf8 	bl	b4f74 <HAL_USB_USART_Init>
}
   b5784:	4620      	mov	r0, r4
   b5786:	bd10      	pop	{r4, pc}
   b5788:	000b6504 	.word	0x000b6504

000b578c <_Z19acquireSerialBufferv>:
{
   b578c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b578e:	2214      	movs	r2, #20
{
   b5790:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5792:	2100      	movs	r1, #0
   b5794:	f000 fafa 	bl	b5d8c <memset>
}
   b5798:	4620      	mov	r0, r4
   b579a:	bd10      	pop	{r4, pc}

000b579c <_Z16_fetch_usbserialv>:
{
   b579c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b579e:	4c0f      	ldr	r4, [pc, #60]	; (b57dc <_Z16_fetch_usbserialv+0x40>)
{
   b57a0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b57a2:	a803      	add	r0, sp, #12
   b57a4:	f7ff fff2 	bl	b578c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b57a8:	7821      	ldrb	r1, [r4, #0]
   b57aa:	f3bf 8f5b 	dmb	ish
   b57ae:	f011 0101 	ands.w	r1, r1, #1
   b57b2:	d10f      	bne.n	b57d4 <_Z16_fetch_usbserialv+0x38>
   b57b4:	4620      	mov	r0, r4
   b57b6:	9101      	str	r1, [sp, #4]
   b57b8:	f7fe fc7c 	bl	b40b4 <__cxa_guard_acquire>
   b57bc:	9901      	ldr	r1, [sp, #4]
   b57be:	b148      	cbz	r0, b57d4 <_Z16_fetch_usbserialv+0x38>
   b57c0:	aa03      	add	r2, sp, #12
   b57c2:	4807      	ldr	r0, [pc, #28]	; (b57e0 <_Z16_fetch_usbserialv+0x44>)
   b57c4:	f7ff ffce 	bl	b5764 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b57c8:	4620      	mov	r0, r4
   b57ca:	f7fe fc78 	bl	b40be <__cxa_guard_release>
   b57ce:	4805      	ldr	r0, [pc, #20]	; (b57e4 <_Z16_fetch_usbserialv+0x48>)
   b57d0:	f000 fac8 	bl	b5d64 <atexit>
	return _usbserial;
}
   b57d4:	4802      	ldr	r0, [pc, #8]	; (b57e0 <_Z16_fetch_usbserialv+0x44>)
   b57d6:	b008      	add	sp, #32
   b57d8:	bd10      	pop	{r4, pc}
   b57da:	bf00      	nop
   b57dc:	2003e700 	.word	0x2003e700
   b57e0:	2003e704 	.word	0x2003e704
   b57e4:	000b56ed 	.word	0x000b56ed

000b57e8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b57e8:	4770      	bx	lr

000b57ea <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b57ea:	7441      	strb	r1, [r0, #17]
}
   b57ec:	4770      	bx	lr

000b57ee <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b57ee:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b57f0:	7c00      	ldrb	r0, [r0, #16]
   b57f2:	f7ff fb0f 	bl	b4e14 <hal_usart_available_data_for_write>
}
   b57f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b57fa:	bd08      	pop	{r3, pc}

000b57fc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b57fc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b57fe:	7c00      	ldrb	r0, [r0, #16]
   b5800:	f7ff fae0 	bl	b4dc4 <hal_usart_available>
}
   b5804:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5808:	bd08      	pop	{r3, pc}

000b580a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b580a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b580c:	7c00      	ldrb	r0, [r0, #16]
   b580e:	f7ff fae9 	bl	b4de4 <hal_usart_peek>
}
   b5812:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5816:	bd08      	pop	{r3, pc}

000b5818 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5818:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b581a:	7c00      	ldrb	r0, [r0, #16]
   b581c:	f7ff fada 	bl	b4dd4 <hal_usart_read>
}
   b5820:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5824:	bd08      	pop	{r3, pc}

000b5826 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5826:	7c00      	ldrb	r0, [r0, #16]
   b5828:	f7ff bae4 	b.w	b4df4 <hal_usart_flush>

000b582c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b582c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b582e:	7c45      	ldrb	r5, [r0, #17]
{
   b5830:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5832:	b12d      	cbz	r5, b5840 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5834:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5836:	b003      	add	sp, #12
   b5838:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b583c:	f7ff baba 	b.w	b4db4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5840:	7c00      	ldrb	r0, [r0, #16]
   b5842:	9101      	str	r1, [sp, #4]
   b5844:	f7ff fae6 	bl	b4e14 <hal_usart_available_data_for_write>
   b5848:	2800      	cmp	r0, #0
   b584a:	9901      	ldr	r1, [sp, #4]
   b584c:	dcf2      	bgt.n	b5834 <_ZN11USARTSerial5writeEh+0x8>
}
   b584e:	4628      	mov	r0, r5
   b5850:	b003      	add	sp, #12
   b5852:	bd30      	pop	{r4, r5, pc}

000b5854 <_ZN11USARTSerialD0Ev>:
   b5854:	b510      	push	{r4, lr}
   b5856:	2114      	movs	r1, #20
   b5858:	4604      	mov	r4, r0
   b585a:	f7fe fc1c 	bl	b4096 <_ZdlPvj>
   b585e:	4620      	mov	r0, r4
   b5860:	bd10      	pop	{r4, pc}
	...

000b5864 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5864:	b510      	push	{r4, lr}
   b5866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b586a:	4604      	mov	r4, r0
   b586c:	4608      	mov	r0, r1
   b586e:	4611      	mov	r1, r2
   b5870:	2200      	movs	r2, #0
   b5872:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5876:	4b04      	ldr	r3, [pc, #16]	; (b5888 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5878:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b587a:	2301      	movs	r3, #1
  _serial = serial;
   b587c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b587e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5880:	f7ff fad0 	bl	b4e24 <hal_usart_init_ex>
}
   b5884:	4620      	mov	r0, r4
   b5886:	bd10      	pop	{r4, pc}
   b5888:	000b6534 	.word	0x000b6534

000b588c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b588c:	4770      	bx	lr

000b588e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b588e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5890:	4606      	mov	r6, r0
   b5892:	4615      	mov	r5, r2
   b5894:	460c      	mov	r4, r1
   b5896:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5898:	42bc      	cmp	r4, r7
   b589a:	d006      	beq.n	b58aa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b589c:	6833      	ldr	r3, [r6, #0]
   b589e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b58a2:	689b      	ldr	r3, [r3, #8]
   b58a4:	4630      	mov	r0, r6
   b58a6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b58a8:	e7f6      	b.n	b5898 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b58aa:	4628      	mov	r0, r5
   b58ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b58ae <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b58ae:	7c00      	ldrb	r0, [r0, #16]
   b58b0:	2200      	movs	r2, #0
   b58b2:	f7ff bad7 	b.w	b4e64 <hal_i2c_write>

000b58b6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b58b6:	7c00      	ldrb	r0, [r0, #16]
   b58b8:	2100      	movs	r1, #0
   b58ba:	f7ff badb 	b.w	b4e74 <hal_i2c_available>

000b58be <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b58be:	7c00      	ldrb	r0, [r0, #16]
   b58c0:	2100      	movs	r1, #0
   b58c2:	f7ff badf 	b.w	b4e84 <hal_i2c_read>

000b58c6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b58c6:	7c00      	ldrb	r0, [r0, #16]
   b58c8:	2100      	movs	r1, #0
   b58ca:	f7ff bae3 	b.w	b4e94 <hal_i2c_peek>

000b58ce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b58ce:	7c00      	ldrb	r0, [r0, #16]
   b58d0:	2100      	movs	r1, #0
   b58d2:	f7ff bae7 	b.w	b4ea4 <hal_i2c_flush>

000b58d6 <_ZN7TwoWireD0Ev>:
   b58d6:	b510      	push	{r4, lr}
   b58d8:	2114      	movs	r1, #20
   b58da:	4604      	mov	r4, r0
   b58dc:	f7fe fbdb 	bl	b4096 <_ZdlPvj>
   b58e0:	4620      	mov	r0, r4
   b58e2:	bd10      	pop	{r4, pc}

000b58e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b58e4:	b538      	push	{r3, r4, r5, lr}
   b58e6:	4604      	mov	r4, r0
   b58e8:	4615      	mov	r5, r2
   b58ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b58ee:	2200      	movs	r2, #0
   b58f0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b58f4:	4b09      	ldr	r3, [pc, #36]	; (b591c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b58f6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b58f8:	4608      	mov	r0, r1
   b58fa:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b58fc:	4629      	mov	r1, r5
   b58fe:	f7ff fae1 	bl	b4ec4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5902:	30bf      	adds	r0, #191	; 0xbf
   b5904:	d108      	bne.n	b5918 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5906:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5908:	07db      	lsls	r3, r3, #31
   b590a:	d505      	bpl.n	b5918 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b590c:	6868      	ldr	r0, [r5, #4]
   b590e:	f7ff fbfd 	bl	b510c <free>
    free(conf.tx_buffer);
   b5912:	68e8      	ldr	r0, [r5, #12]
   b5914:	f7ff fbfa 	bl	b510c <free>
}
   b5918:	4620      	mov	r0, r4
   b591a:	bd38      	pop	{r3, r4, r5, pc}
   b591c:	000b6564 	.word	0x000b6564

000b5920 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5920:	2300      	movs	r3, #0
   b5922:	7c00      	ldrb	r0, [r0, #16]
   b5924:	461a      	mov	r2, r3
   b5926:	4619      	mov	r1, r3
   b5928:	f7ff ba84 	b.w	b4e34 <hal_i2c_begin>

000b592c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b592c:	7c00      	ldrb	r0, [r0, #16]
   b592e:	2200      	movs	r2, #0
   b5930:	f7ff ba88 	b.w	b4e44 <hal_i2c_begin_transmission>

000b5934 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b5934:	b2c9      	uxtb	r1, r1
   b5936:	f7ff bff9 	b.w	b592c <_ZN7TwoWire17beginTransmissionEh>

000b593a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b593a:	7c00      	ldrb	r0, [r0, #16]
   b593c:	2200      	movs	r2, #0
   b593e:	f7ff ba89 	b.w	b4e54 <hal_i2c_end_transmission>

000b5942 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5942:	2101      	movs	r1, #1
   b5944:	f7ff bff9 	b.w	b593a <_ZN7TwoWire15endTransmissionEh>

000b5948 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5948:	2200      	movs	r2, #0
   b594a:	6840      	ldr	r0, [r0, #4]
   b594c:	4611      	mov	r1, r2
   b594e:	f7ff bb85 	b.w	b505c <network_ready>

000b5952 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5952:	2200      	movs	r2, #0
   b5954:	6840      	ldr	r0, [r0, #4]
   b5956:	4611      	mov	r1, r2
   b5958:	f7ff bba0 	b.w	b509c <network_listening>

000b595c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b595c:	2200      	movs	r2, #0
   b595e:	6840      	ldr	r0, [r0, #4]
   b5960:	4611      	mov	r1, r2
   b5962:	f7ff bbab 	b.w	b50bc <network_get_listen_timeout>

000b5966 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5966:	6840      	ldr	r0, [r0, #4]
   b5968:	2200      	movs	r2, #0
   b596a:	f7ff bb9f 	b.w	b50ac <network_set_listen_timeout>

000b596e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b596e:	6840      	ldr	r0, [r0, #4]
   b5970:	2200      	movs	r2, #0
   b5972:	f081 0101 	eor.w	r1, r1, #1
   b5976:	f7ff bb89 	b.w	b508c <network_listen>

000b597a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b597a:	2300      	movs	r3, #0
   b597c:	6840      	ldr	r0, [r0, #4]
   b597e:	461a      	mov	r2, r3
   b5980:	4619      	mov	r1, r3
   b5982:	f7ff bb7b 	b.w	b507c <network_off>

000b5986 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5986:	2300      	movs	r3, #0
   b5988:	6840      	ldr	r0, [r0, #4]
   b598a:	461a      	mov	r2, r3
   b598c:	4619      	mov	r1, r3
   b598e:	f7ff bb6d 	b.w	b506c <network_on>

000b5992 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5992:	2200      	movs	r2, #0
   b5994:	6840      	ldr	r0, [r0, #4]
   b5996:	4611      	mov	r1, r2
   b5998:	f7ff bb50 	b.w	b503c <network_connecting>

000b599c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b599c:	6840      	ldr	r0, [r0, #4]
   b599e:	2200      	movs	r2, #0
   b59a0:	2102      	movs	r1, #2
   b59a2:	f7ff bb53 	b.w	b504c <network_disconnect>

000b59a6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b59a6:	2300      	movs	r3, #0
   b59a8:	6840      	ldr	r0, [r0, #4]
   b59aa:	461a      	mov	r2, r3
   b59ac:	f7ff bb3e 	b.w	b502c <network_connect>

000b59b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b59b0:	4b02      	ldr	r3, [pc, #8]	; (b59bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b59b2:	2204      	movs	r2, #4
   b59b4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b59b6:	4a02      	ldr	r2, [pc, #8]	; (b59c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b59b8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b59ba:	4770      	bx	lr
   b59bc:	2003e718 	.word	0x2003e718
   b59c0:	000b658c 	.word	0x000b658c

000b59c4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b59c4:	2300      	movs	r3, #0
   b59c6:	6840      	ldr	r0, [r0, #4]
   b59c8:	461a      	mov	r2, r3
   b59ca:	f7ff bb2f 	b.w	b502c <network_connect>

000b59ce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b59ce:	6840      	ldr	r0, [r0, #4]
   b59d0:	2200      	movs	r2, #0
   b59d2:	2102      	movs	r1, #2
   b59d4:	f7ff bb3a 	b.w	b504c <network_disconnect>

000b59d8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b59d8:	2200      	movs	r2, #0
   b59da:	6840      	ldr	r0, [r0, #4]
   b59dc:	4611      	mov	r1, r2
   b59de:	f7ff bb2d 	b.w	b503c <network_connecting>

000b59e2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b59e2:	2200      	movs	r2, #0
   b59e4:	6840      	ldr	r0, [r0, #4]
   b59e6:	4611      	mov	r1, r2
   b59e8:	f7ff bb38 	b.w	b505c <network_ready>

000b59ec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b59ec:	2300      	movs	r3, #0
   b59ee:	6840      	ldr	r0, [r0, #4]
   b59f0:	461a      	mov	r2, r3
   b59f2:	4619      	mov	r1, r3
   b59f4:	f7ff bb3a 	b.w	b506c <network_on>

000b59f8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b59f8:	2300      	movs	r3, #0
   b59fa:	6840      	ldr	r0, [r0, #4]
   b59fc:	461a      	mov	r2, r3
   b59fe:	4619      	mov	r1, r3
   b5a00:	f7ff bb3c 	b.w	b507c <network_off>

000b5a04 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5a04:	6840      	ldr	r0, [r0, #4]
   b5a06:	2100      	movs	r1, #0
   b5a08:	f7ff bb60 	b.w	b50cc <network_is_on>

000b5a0c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5a0c:	6840      	ldr	r0, [r0, #4]
   b5a0e:	2100      	movs	r1, #0
   b5a10:	f7ff bb64 	b.w	b50dc <network_is_off>

000b5a14 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5a14:	6840      	ldr	r0, [r0, #4]
   b5a16:	2200      	movs	r2, #0
   b5a18:	f081 0101 	eor.w	r1, r1, #1
   b5a1c:	f7ff bb36 	b.w	b508c <network_listen>

000b5a20 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5a20:	6840      	ldr	r0, [r0, #4]
   b5a22:	2200      	movs	r2, #0
   b5a24:	f7ff bb42 	b.w	b50ac <network_set_listen_timeout>

000b5a28 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5a28:	2200      	movs	r2, #0
   b5a2a:	6840      	ldr	r0, [r0, #4]
   b5a2c:	4611      	mov	r1, r2
   b5a2e:	f7ff bb45 	b.w	b50bc <network_get_listen_timeout>

000b5a32 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5a32:	2200      	movs	r2, #0
   b5a34:	6840      	ldr	r0, [r0, #4]
   b5a36:	4611      	mov	r1, r2
   b5a38:	f7ff bb30 	b.w	b509c <network_listening>

000b5a3c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5a40:	b095      	sub	sp, #84	; 0x54
   b5a42:	4614      	mov	r4, r2
   b5a44:	460d      	mov	r5, r1
   b5a46:	4607      	mov	r7, r0
    IPAddress addr;
   b5a48:	f7ff fe10 	bl	b566c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5a4c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5a4e:	221c      	movs	r2, #28
   b5a50:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5a52:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5a54:	f000 f99a 	bl	b5d8c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5a58:	2340      	movs	r3, #64	; 0x40
   b5a5a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5a5c:	4620      	mov	r0, r4
   b5a5e:	466b      	mov	r3, sp
   b5a60:	aa0c      	add	r2, sp, #48	; 0x30
   b5a62:	2100      	movs	r1, #0
   b5a64:	f7ff f956 	bl	b4d14 <netdb_getaddrinfo>
    if (!r) {
   b5a68:	4604      	mov	r4, r0
   b5a6a:	2800      	cmp	r0, #0
   b5a6c:	d14b      	bne.n	b5b06 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5a6e:	4602      	mov	r2, r0
   b5a70:	2101      	movs	r1, #1
   b5a72:	6868      	ldr	r0, [r5, #4]
   b5a74:	f7ff faf2 	bl	b505c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5a78:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5a7a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5a7c:	4622      	mov	r2, r4
   b5a7e:	6868      	ldr	r0, [r5, #4]
   b5a80:	f7ff faec 	bl	b505c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5a84:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5a86:	4681      	mov	r9, r0
        bool ok = false;
   b5a88:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5a8a:	2e00      	cmp	r6, #0
   b5a8c:	d03b      	beq.n	b5b06 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5a8e:	2900      	cmp	r1, #0
   b5a90:	d139      	bne.n	b5b06 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5a92:	6873      	ldr	r3, [r6, #4]
   b5a94:	2b02      	cmp	r3, #2
   b5a96:	d003      	beq.n	b5aa0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5a98:	2b0a      	cmp	r3, #10
   b5a9a:	d011      	beq.n	b5ac0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5a9c:	69f6      	ldr	r6, [r6, #28]
   b5a9e:	e7f4      	b.n	b5a8a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5aa0:	f1b8 0f00 	cmp.w	r8, #0
   b5aa4:	d0fa      	beq.n	b5a9c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5aa6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5aa8:	a806      	add	r0, sp, #24
   b5aaa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5aac:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5aae:	f7ff fe0b 	bl	b56c8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ab4:	1d3c      	adds	r4, r7, #4
   b5ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ab8:	682b      	ldr	r3, [r5, #0]
   b5aba:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5abc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5abe:	e7ed      	b.n	b5a9c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5ac0:	f1b9 0f00 	cmp.w	r9, #0
   b5ac4:	d0ea      	beq.n	b5a9c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5ac6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5ac8:	2210      	movs	r2, #16
   b5aca:	a801      	add	r0, sp, #4
   b5acc:	f000 f95e 	bl	b5d8c <memset>
                    a.v = 6;
   b5ad0:	2306      	movs	r3, #6
   b5ad2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5ad6:	ad01      	add	r5, sp, #4
   b5ad8:	f104 0308 	add.w	r3, r4, #8
   b5adc:	3418      	adds	r4, #24
   b5ade:	6818      	ldr	r0, [r3, #0]
   b5ae0:	6859      	ldr	r1, [r3, #4]
   b5ae2:	462a      	mov	r2, r5
   b5ae4:	c203      	stmia	r2!, {r0, r1}
   b5ae6:	3308      	adds	r3, #8
   b5ae8:	42a3      	cmp	r3, r4
   b5aea:	4615      	mov	r5, r2
   b5aec:	d1f7      	bne.n	b5ade <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5aee:	a901      	add	r1, sp, #4
   b5af0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5af2:	ad07      	add	r5, sp, #28
   b5af4:	f7ff fdc8 	bl	b5688 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5afa:	1d3c      	adds	r4, r7, #4
   b5afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5afe:	682b      	ldr	r3, [r5, #0]
   b5b00:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5b02:	4649      	mov	r1, r9
   b5b04:	e7ca      	b.n	b5a9c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5b06:	9800      	ldr	r0, [sp, #0]
   b5b08:	f7ff f8fc 	bl	b4d04 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5b0c:	4638      	mov	r0, r7
   b5b0e:	b015      	add	sp, #84	; 0x54
   b5b10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5b14 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5b14:	4b02      	ldr	r3, [pc, #8]	; (b5b20 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5b16:	4a03      	ldr	r2, [pc, #12]	; (b5b24 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5b18:	601a      	str	r2, [r3, #0]
   b5b1a:	2200      	movs	r2, #0
   b5b1c:	605a      	str	r2, [r3, #4]

} // spark
   b5b1e:	4770      	bx	lr
   b5b20:	2003e720 	.word	0x2003e720
   b5b24:	000b65c8 	.word	0x000b65c8

000b5b28 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5b28:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5b2a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5b2c:	d902      	bls.n	b5b34 <pinAvailable+0xc>
    return false;
   b5b2e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5b30:	b002      	add	sp, #8
   b5b32:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5b34:	f1a0 030b 	sub.w	r3, r0, #11
   b5b38:	2b02      	cmp	r3, #2
   b5b3a:	d81a      	bhi.n	b5b72 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5b3c:	4c17      	ldr	r4, [pc, #92]	; (b5b9c <pinAvailable+0x74>)
   b5b3e:	7821      	ldrb	r1, [r4, #0]
   b5b40:	f3bf 8f5b 	dmb	ish
   b5b44:	f011 0101 	ands.w	r1, r1, #1
   b5b48:	d10b      	bne.n	b5b62 <pinAvailable+0x3a>
   b5b4a:	4620      	mov	r0, r4
   b5b4c:	9101      	str	r1, [sp, #4]
   b5b4e:	f7fe fab1 	bl	b40b4 <__cxa_guard_acquire>
   b5b52:	9901      	ldr	r1, [sp, #4]
   b5b54:	b128      	cbz	r0, b5b62 <pinAvailable+0x3a>
   b5b56:	4812      	ldr	r0, [pc, #72]	; (b5ba0 <pinAvailable+0x78>)
   b5b58:	f7ff fb3c 	bl	b51d4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5b5c:	4620      	mov	r0, r4
   b5b5e:	f7fe faae 	bl	b40be <__cxa_guard_release>
   b5b62:	4b0f      	ldr	r3, [pc, #60]	; (b5ba0 <pinAvailable+0x78>)
   b5b64:	7818      	ldrb	r0, [r3, #0]
   b5b66:	f7ff f9e5 	bl	b4f34 <hal_spi_is_enabled>
   b5b6a:	2800      	cmp	r0, #0
   b5b6c:	d1df      	bne.n	b5b2e <pinAvailable+0x6>
  return true; // 'pin' is available
   b5b6e:	2001      	movs	r0, #1
   b5b70:	e7de      	b.n	b5b30 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5b72:	2801      	cmp	r0, #1
   b5b74:	d809      	bhi.n	b5b8a <pinAvailable+0x62>
   b5b76:	f000 f8cf 	bl	b5d18 <_Z19__fetch_global_Wirev>
   b5b7a:	2100      	movs	r1, #0
   b5b7c:	7c00      	ldrb	r0, [r0, #16]
   b5b7e:	f7ff f999 	bl	b4eb4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5b82:	f080 0001 	eor.w	r0, r0, #1
   b5b86:	b2c0      	uxtb	r0, r0
   b5b88:	e7d2      	b.n	b5b30 <pinAvailable+0x8>
   b5b8a:	3809      	subs	r0, #9
   b5b8c:	2801      	cmp	r0, #1
   b5b8e:	d8ee      	bhi.n	b5b6e <pinAvailable+0x46>
   b5b90:	f000 f882 	bl	b5c98 <_Z22__fetch_global_Serial1v>
   b5b94:	7c00      	ldrb	r0, [r0, #16]
   b5b96:	f7ff f935 	bl	b4e04 <hal_usart_is_enabled>
   b5b9a:	e7f2      	b.n	b5b82 <pinAvailable+0x5a>
   b5b9c:	2003e6b8 	.word	0x2003e6b8
   b5ba0:	2003e6bc 	.word	0x2003e6bc

000b5ba4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5ba4:	2823      	cmp	r0, #35	; 0x23
{
   b5ba6:	b538      	push	{r3, r4, r5, lr}
   b5ba8:	4604      	mov	r4, r0
   b5baa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5bac:	d80a      	bhi.n	b5bc4 <pinMode+0x20>
   b5bae:	29ff      	cmp	r1, #255	; 0xff
   b5bb0:	d008      	beq.n	b5bc4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5bb2:	f7ff ffb9 	bl	b5b28 <pinAvailable>
   b5bb6:	b128      	cbz	r0, b5bc4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5bb8:	4629      	mov	r1, r5
   b5bba:	4620      	mov	r0, r4
}
   b5bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5bc0:	f7ff b8b0 	b.w	b4d24 <HAL_Pin_Mode>
}
   b5bc4:	bd38      	pop	{r3, r4, r5, pc}

000b5bc6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5bc6:	b538      	push	{r3, r4, r5, lr}
   b5bc8:	4604      	mov	r4, r0
   b5bca:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5bcc:	f7ff f8b2 	bl	b4d34 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5bd0:	28ff      	cmp	r0, #255	; 0xff
   b5bd2:	d010      	beq.n	b5bf6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5bd4:	2806      	cmp	r0, #6
   b5bd6:	d804      	bhi.n	b5be2 <digitalWrite+0x1c>
   b5bd8:	234d      	movs	r3, #77	; 0x4d
   b5bda:	fa23 f000 	lsr.w	r0, r3, r0
   b5bde:	07c3      	lsls	r3, r0, #31
   b5be0:	d409      	bmi.n	b5bf6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5be2:	4620      	mov	r0, r4
   b5be4:	f7ff ffa0 	bl	b5b28 <pinAvailable>
   b5be8:	b128      	cbz	r0, b5bf6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5bea:	4629      	mov	r1, r5
   b5bec:	4620      	mov	r0, r4
}
   b5bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5bf2:	f7ff b8a7 	b.w	b4d44 <HAL_GPIO_Write>
}
   b5bf6:	bd38      	pop	{r3, r4, r5, pc}

000b5bf8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b5bf8:	b510      	push	{r4, lr}
   b5bfa:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5bfc:	f7ff f89a 	bl	b4d34 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b5c00:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b5c02:	b2db      	uxtb	r3, r3
   b5c04:	2b01      	cmp	r3, #1
   b5c06:	d908      	bls.n	b5c1a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b5c08:	4620      	mov	r0, r4
   b5c0a:	f7ff ff8d 	bl	b5b28 <pinAvailable>
   b5c0e:	b120      	cbz	r0, b5c1a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b5c10:	4620      	mov	r0, r4
}
   b5c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b5c16:	f7ff b89d 	b.w	b4d54 <HAL_GPIO_Read>
}
   b5c1a:	2000      	movs	r0, #0
   b5c1c:	bd10      	pop	{r4, pc}

000b5c1e <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b5c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5c22:	4690      	mov	r8, r2
   b5c24:	461f      	mov	r7, r3
   b5c26:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b5c28:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b5c2a:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b5c2c:	f1c4 0107 	rsb	r1, r4, #7
   b5c30:	f1b8 0f00 	cmp.w	r8, #0
   b5c34:	d112      	bne.n	b5c5c <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b5c36:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b5c3a:	f001 0101 	and.w	r1, r1, #1
   b5c3e:	4630      	mov	r0, r6
   b5c40:	f7ff ffc1 	bl	b5bc6 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b5c44:	2101      	movs	r1, #1
   b5c46:	4628      	mov	r0, r5
   b5c48:	f7ff ffbd 	bl	b5bc6 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b5c4c:	2100      	movs	r1, #0
   b5c4e:	4628      	mov	r0, r5
   b5c50:	f7ff ffb9 	bl	b5bc6 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b5c54:	3c01      	subs	r4, #1
   b5c56:	d2e9      	bcs.n	b5c2c <shiftOut+0xe>
  }
}
   b5c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b5c5c:	fa47 f104 	asr.w	r1, r7, r4
   b5c60:	e7eb      	b.n	b5c3a <shiftOut+0x1c>

000b5c62 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5c62:	4770      	bx	lr

000b5c64 <_Z20acquireSerial1Bufferv>:
{
   b5c64:	b538      	push	{r3, r4, r5, lr}
   b5c66:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5c68:	2514      	movs	r5, #20
   b5c6a:	462a      	mov	r2, r5
   b5c6c:	2100      	movs	r1, #0
   b5c6e:	f000 f88d 	bl	b5d8c <memset>
   b5c72:	8025      	strh	r5, [r4, #0]
   b5c74:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5c76:	4907      	ldr	r1, [pc, #28]	; (b5c94 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5c78:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5c7a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5c7c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5c7e:	f000 f86f 	bl	b5d60 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5c82:	4904      	ldr	r1, [pc, #16]	; (b5c94 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5c84:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5c86:	4628      	mov	r0, r5
   b5c88:	f000 f86a 	bl	b5d60 <_ZnajRKSt9nothrow_t>
    };
   b5c8c:	60e0      	str	r0, [r4, #12]
}
   b5c8e:	4620      	mov	r0, r4
   b5c90:	bd38      	pop	{r3, r4, r5, pc}
   b5c92:	bf00      	nop
   b5c94:	000b65fc 	.word	0x000b65fc

000b5c98 <_Z22__fetch_global_Serial1v>:
{
   b5c98:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5c9a:	4d0e      	ldr	r5, [pc, #56]	; (b5cd4 <_Z22__fetch_global_Serial1v+0x3c>)
   b5c9c:	7829      	ldrb	r1, [r5, #0]
   b5c9e:	f3bf 8f5b 	dmb	ish
   b5ca2:	f011 0401 	ands.w	r4, r1, #1
{
   b5ca6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5ca8:	d111      	bne.n	b5cce <_Z22__fetch_global_Serial1v+0x36>
   b5caa:	4628      	mov	r0, r5
   b5cac:	f7fe fa02 	bl	b40b4 <__cxa_guard_acquire>
   b5cb0:	b168      	cbz	r0, b5cce <_Z22__fetch_global_Serial1v+0x36>
   b5cb2:	a801      	add	r0, sp, #4
   b5cb4:	f7ff ffd6 	bl	b5c64 <_Z20acquireSerial1Bufferv>
   b5cb8:	aa01      	add	r2, sp, #4
   b5cba:	4621      	mov	r1, r4
   b5cbc:	4806      	ldr	r0, [pc, #24]	; (b5cd8 <_Z22__fetch_global_Serial1v+0x40>)
   b5cbe:	f7ff fdd1 	bl	b5864 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5cc2:	4628      	mov	r0, r5
   b5cc4:	f7fe f9fb 	bl	b40be <__cxa_guard_release>
   b5cc8:	4804      	ldr	r0, [pc, #16]	; (b5cdc <_Z22__fetch_global_Serial1v+0x44>)
   b5cca:	f000 f84b 	bl	b5d64 <atexit>
    return serial1;
}
   b5cce:	4802      	ldr	r0, [pc, #8]	; (b5cd8 <_Z22__fetch_global_Serial1v+0x40>)
   b5cd0:	b007      	add	sp, #28
   b5cd2:	bd30      	pop	{r4, r5, pc}
   b5cd4:	2003e728 	.word	0x2003e728
   b5cd8:	2003e72c 	.word	0x2003e72c
   b5cdc:	000b5c63 	.word	0x000b5c63

000b5ce0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5ce0:	4770      	bx	lr
	...

000b5ce4 <_Z17acquireWireBufferv>:
{
   b5ce4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5ce6:	4b0a      	ldr	r3, [pc, #40]	; (b5d10 <_Z17acquireWireBufferv+0x2c>)
   b5ce8:	6003      	str	r3, [r0, #0]
   b5cea:	2301      	movs	r3, #1
{
   b5cec:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5cee:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5cf0:	4908      	ldr	r1, [pc, #32]	; (b5d14 <_Z17acquireWireBufferv+0x30>)
   b5cf2:	2020      	movs	r0, #32
   b5cf4:	f000 f834 	bl	b5d60 <_ZnajRKSt9nothrow_t>
	};
   b5cf8:	2520      	movs	r5, #32
   b5cfa:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5cfc:	4905      	ldr	r1, [pc, #20]	; (b5d14 <_Z17acquireWireBufferv+0x30>)
	};
   b5cfe:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5d00:	4628      	mov	r0, r5
   b5d02:	f000 f82d 	bl	b5d60 <_ZnajRKSt9nothrow_t>
	};
   b5d06:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5d0a:	4620      	mov	r0, r4
   b5d0c:	bd38      	pop	{r3, r4, r5, pc}
   b5d0e:	bf00      	nop
   b5d10:	00010018 	.word	0x00010018
   b5d14:	000b65fc 	.word	0x000b65fc

000b5d18 <_Z19__fetch_global_Wirev>:
{
   b5d18:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5d1a:	4d0e      	ldr	r5, [pc, #56]	; (b5d54 <_Z19__fetch_global_Wirev+0x3c>)
   b5d1c:	7829      	ldrb	r1, [r5, #0]
   b5d1e:	f3bf 8f5b 	dmb	ish
   b5d22:	f011 0401 	ands.w	r4, r1, #1
{
   b5d26:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5d28:	d111      	bne.n	b5d4e <_Z19__fetch_global_Wirev+0x36>
   b5d2a:	4628      	mov	r0, r5
   b5d2c:	f7fe f9c2 	bl	b40b4 <__cxa_guard_acquire>
   b5d30:	b168      	cbz	r0, b5d4e <_Z19__fetch_global_Wirev+0x36>
   b5d32:	4668      	mov	r0, sp
   b5d34:	f7ff ffd6 	bl	b5ce4 <_Z17acquireWireBufferv>
   b5d38:	466a      	mov	r2, sp
   b5d3a:	4621      	mov	r1, r4
   b5d3c:	4806      	ldr	r0, [pc, #24]	; (b5d58 <_Z19__fetch_global_Wirev+0x40>)
   b5d3e:	f7ff fdd1 	bl	b58e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5d42:	4628      	mov	r0, r5
   b5d44:	f7fe f9bb 	bl	b40be <__cxa_guard_release>
   b5d48:	4804      	ldr	r0, [pc, #16]	; (b5d5c <_Z19__fetch_global_Wirev+0x44>)
   b5d4a:	f000 f80b 	bl	b5d64 <atexit>
	return wire;
}
   b5d4e:	4802      	ldr	r0, [pc, #8]	; (b5d58 <_Z19__fetch_global_Wirev+0x40>)
   b5d50:	b007      	add	sp, #28
   b5d52:	bd30      	pop	{r4, r5, pc}
   b5d54:	2003e744 	.word	0x2003e744
   b5d58:	2003e748 	.word	0x2003e748
   b5d5c:	000b5ce1 	.word	0x000b5ce1

000b5d60 <_ZnajRKSt9nothrow_t>:
   b5d60:	f7fe b997 	b.w	b4092 <_Znaj>

000b5d64 <atexit>:
   b5d64:	2300      	movs	r3, #0
   b5d66:	4601      	mov	r1, r0
   b5d68:	461a      	mov	r2, r3
   b5d6a:	4618      	mov	r0, r3
   b5d6c:	f000 b84c 	b.w	b5e08 <__register_exitproc>

000b5d70 <memcpy>:
   b5d70:	440a      	add	r2, r1
   b5d72:	4291      	cmp	r1, r2
   b5d74:	f100 33ff 	add.w	r3, r0, #4294967295
   b5d78:	d100      	bne.n	b5d7c <memcpy+0xc>
   b5d7a:	4770      	bx	lr
   b5d7c:	b510      	push	{r4, lr}
   b5d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5d82:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5d86:	4291      	cmp	r1, r2
   b5d88:	d1f9      	bne.n	b5d7e <memcpy+0xe>
   b5d8a:	bd10      	pop	{r4, pc}

000b5d8c <memset>:
   b5d8c:	4402      	add	r2, r0
   b5d8e:	4603      	mov	r3, r0
   b5d90:	4293      	cmp	r3, r2
   b5d92:	d100      	bne.n	b5d96 <memset+0xa>
   b5d94:	4770      	bx	lr
   b5d96:	f803 1b01 	strb.w	r1, [r3], #1
   b5d9a:	e7f9      	b.n	b5d90 <memset+0x4>

000b5d9c <srand>:
   b5d9c:	b538      	push	{r3, r4, r5, lr}
   b5d9e:	4b10      	ldr	r3, [pc, #64]	; (b5de0 <srand+0x44>)
   b5da0:	681d      	ldr	r5, [r3, #0]
   b5da2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5da4:	4604      	mov	r4, r0
   b5da6:	b9b3      	cbnz	r3, b5dd6 <srand+0x3a>
   b5da8:	2018      	movs	r0, #24
   b5daa:	f7ff f9a7 	bl	b50fc <malloc>
   b5dae:	4602      	mov	r2, r0
   b5db0:	63a8      	str	r0, [r5, #56]	; 0x38
   b5db2:	b920      	cbnz	r0, b5dbe <srand+0x22>
   b5db4:	4b0b      	ldr	r3, [pc, #44]	; (b5de4 <srand+0x48>)
   b5db6:	480c      	ldr	r0, [pc, #48]	; (b5de8 <srand+0x4c>)
   b5db8:	2142      	movs	r1, #66	; 0x42
   b5dba:	f7ff f9b7 	bl	b512c <__assert_func>
   b5dbe:	490b      	ldr	r1, [pc, #44]	; (b5dec <srand+0x50>)
   b5dc0:	4b0b      	ldr	r3, [pc, #44]	; (b5df0 <srand+0x54>)
   b5dc2:	e9c0 1300 	strd	r1, r3, [r0]
   b5dc6:	4b0b      	ldr	r3, [pc, #44]	; (b5df4 <srand+0x58>)
   b5dc8:	6083      	str	r3, [r0, #8]
   b5dca:	230b      	movs	r3, #11
   b5dcc:	8183      	strh	r3, [r0, #12]
   b5dce:	2100      	movs	r1, #0
   b5dd0:	2001      	movs	r0, #1
   b5dd2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5dd6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5dd8:	2200      	movs	r2, #0
   b5dda:	611c      	str	r4, [r3, #16]
   b5ddc:	615a      	str	r2, [r3, #20]
   b5dde:	bd38      	pop	{r3, r4, r5, pc}
   b5de0:	2003e608 	.word	0x2003e608
   b5de4:	000b65fd 	.word	0x000b65fd
   b5de8:	000b6614 	.word	0x000b6614
   b5dec:	abcd330e 	.word	0xabcd330e
   b5df0:	e66d1234 	.word	0xe66d1234
   b5df4:	0005deec 	.word	0x0005deec

000b5df8 <strlen>:
   b5df8:	4603      	mov	r3, r0
   b5dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5dfe:	2a00      	cmp	r2, #0
   b5e00:	d1fb      	bne.n	b5dfa <strlen+0x2>
   b5e02:	1a18      	subs	r0, r3, r0
   b5e04:	3801      	subs	r0, #1
   b5e06:	4770      	bx	lr

000b5e08 <__register_exitproc>:
   b5e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5e0c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5ec8 <__register_exitproc+0xc0>
   b5e10:	4606      	mov	r6, r0
   b5e12:	f8d8 0000 	ldr.w	r0, [r8]
   b5e16:	461f      	mov	r7, r3
   b5e18:	460d      	mov	r5, r1
   b5e1a:	4691      	mov	r9, r2
   b5e1c:	f000 f856 	bl	b5ecc <__retarget_lock_acquire_recursive>
   b5e20:	4b25      	ldr	r3, [pc, #148]	; (b5eb8 <__register_exitproc+0xb0>)
   b5e22:	681c      	ldr	r4, [r3, #0]
   b5e24:	b934      	cbnz	r4, b5e34 <__register_exitproc+0x2c>
   b5e26:	4c25      	ldr	r4, [pc, #148]	; (b5ebc <__register_exitproc+0xb4>)
   b5e28:	601c      	str	r4, [r3, #0]
   b5e2a:	4b25      	ldr	r3, [pc, #148]	; (b5ec0 <__register_exitproc+0xb8>)
   b5e2c:	b113      	cbz	r3, b5e34 <__register_exitproc+0x2c>
   b5e2e:	681b      	ldr	r3, [r3, #0]
   b5e30:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5e34:	6863      	ldr	r3, [r4, #4]
   b5e36:	2b1f      	cmp	r3, #31
   b5e38:	dd07      	ble.n	b5e4a <__register_exitproc+0x42>
   b5e3a:	f8d8 0000 	ldr.w	r0, [r8]
   b5e3e:	f000 f847 	bl	b5ed0 <__retarget_lock_release_recursive>
   b5e42:	f04f 30ff 	mov.w	r0, #4294967295
   b5e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5e4a:	b34e      	cbz	r6, b5ea0 <__register_exitproc+0x98>
   b5e4c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5e50:	b988      	cbnz	r0, b5e76 <__register_exitproc+0x6e>
   b5e52:	4b1c      	ldr	r3, [pc, #112]	; (b5ec4 <__register_exitproc+0xbc>)
   b5e54:	b923      	cbnz	r3, b5e60 <__register_exitproc+0x58>
   b5e56:	f8d8 0000 	ldr.w	r0, [r8]
   b5e5a:	f000 f838 	bl	b5ece <__retarget_lock_release>
   b5e5e:	e7f0      	b.n	b5e42 <__register_exitproc+0x3a>
   b5e60:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5e64:	f7ff f94a 	bl	b50fc <malloc>
   b5e68:	2800      	cmp	r0, #0
   b5e6a:	d0f4      	beq.n	b5e56 <__register_exitproc+0x4e>
   b5e6c:	2300      	movs	r3, #0
   b5e6e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5e72:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5e76:	6863      	ldr	r3, [r4, #4]
   b5e78:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5e7c:	2201      	movs	r2, #1
   b5e7e:	409a      	lsls	r2, r3
   b5e80:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5e84:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5e88:	4313      	orrs	r3, r2
   b5e8a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5e8e:	2e02      	cmp	r6, #2
   b5e90:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5e94:	bf02      	ittt	eq
   b5e96:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5e9a:	4313      	orreq	r3, r2
   b5e9c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5ea0:	6863      	ldr	r3, [r4, #4]
   b5ea2:	f8d8 0000 	ldr.w	r0, [r8]
   b5ea6:	1c5a      	adds	r2, r3, #1
   b5ea8:	3302      	adds	r3, #2
   b5eaa:	6062      	str	r2, [r4, #4]
   b5eac:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5eb0:	f000 f80e 	bl	b5ed0 <__retarget_lock_release_recursive>
   b5eb4:	2000      	movs	r0, #0
   b5eb6:	e7c6      	b.n	b5e46 <__register_exitproc+0x3e>
   b5eb8:	2003e7e8 	.word	0x2003e7e8
   b5ebc:	2003e75c 	.word	0x2003e75c
   b5ec0:	00000000 	.word	0x00000000
   b5ec4:	000b50fd 	.word	0x000b50fd
   b5ec8:	2003e66c 	.word	0x2003e66c

000b5ecc <__retarget_lock_acquire_recursive>:
   b5ecc:	4770      	bx	lr

000b5ece <__retarget_lock_release>:
   b5ece:	4770      	bx	lr

000b5ed0 <__retarget_lock_release_recursive>:
   b5ed0:	4770      	bx	lr

000b5ed2 <link_code_end>:
	...

000b5ed4 <dynalib_user>:
   b5ed4:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b5ee4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b5ef4:	7620 7269 7574 6c61 5700 6c65 6f63 656d      virtual.Welcome
   b5f04:	5520 6120 6572 000a 6976 7473 726f 253d      U are..vistor=%
   b5f14:	0a69 0000                                   i...

000b5f18 <_ZTV16Adafruit_SSD1306>:
	...
   b5f20:	4545 000b 45d5 000b 4c79 000b 537d 000b     EE...E..yL..}S..
   b5f30:	4549 000b 4991 000b 43d1 000b 4261 000b     IE...I...C..aB..
   b5f40:	4a4f 000b 4aed 000b 4b23 000b 4b3f 000b     OJ...J..#K..?K..

000b5f50 <_ZL4font>:
   b5f50:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b5f60:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b5f70:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b5f80:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b5f90:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b5fa0:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b5fb0:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b5fc0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b5fd0:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b5fe0:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b5ff0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b6000:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b6010:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b6020:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b6030:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b6040:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b6050:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b6060:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b6070:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b6080:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b6090:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b60a0:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b60b0:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b60c0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b60d0:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b60e0:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b60f0:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b6100:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b6110:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b6120:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b6130:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b6140:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b6150:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b6160:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b6170:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b6180:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b6190:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b61a0:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b61b0:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b61c0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b61d0:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b61e0:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b61f0:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b6200:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b6210:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b6220:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b6230:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b6240:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b6250:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b6260:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b6270:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b6280:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b6290:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b62a0:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b62b0:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b62c0:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b62d0:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b62e0:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b62f0:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b6300:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b6310:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b6320:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b6330:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b6340:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b6350:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b6360:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b6370:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b6380:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b6390:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b63a0:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b63b0:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b63c0:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b63d0:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b63e0:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b63f0:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b6400:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b6410:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b6420:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b6430:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b6440:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b644c <_ZTV12Adafruit_GFX>:
	...
   b645c:	4c79 000b 537d 000b 409d 000b 4991 000b     yL..}S...@...I..
   b646c:	4ab7 000b 4ad3 000b 4a4f 000b 4aed 000b     .J...J..OJ...J..
   b647c:	4b23 000b 4b3f 000b                         #K..?K..

000b6484 <_ZTVN5spark13EthernetClassE>:
	...
   b648c:	51ab 000b 51a1 000b 5197 000b 518d 000b     .Q...Q...Q...Q..
   b649c:	5181 000b 5175 000b 5a05 000b 5a0d 000b     .Q..uQ...Z...Z..
   b64ac:	5169 000b 5161 000b 5157 000b 514d 000b     iQ..aQ..WQ..MQ..
   b64bc:	5a3d 000b                                   =Z..

000b64c0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b64c0:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   b64d0:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b64e0:	7361 7463 6d69 0065                         asctime.

000b64e8 <_ZTV9IPAddress>:
	...
   b64f0:	5609 000b 55f9 000b 55fb 000b               .V...U...U..

000b64fc <_ZTV9USBSerial>:
	...
   b6504:	56ef 000b 5757 000b 572d 000b 537d 000b     .V..WW..-W..}S..
   b6514:	571f 000b 56f1 000b 5701 000b 5751 000b     .W...V...W..QW..
   b6524:	5711 000b 56e9 000b                         .W...V..

000b652c <_ZTV11USARTSerial>:
	...
   b6534:	57e9 000b 5855 000b 582d 000b 537d 000b     .W..UX..-X..}S..
   b6544:	57fd 000b 5819 000b 580b 000b 5827 000b     .W...X...X..'X..
   b6554:	57eb 000b 57ef 000b                         .W...W..

000b655c <_ZTV7TwoWire>:
	...
   b6564:	588d 000b 58d7 000b 58af 000b 588f 000b     .X...X...X...X..
   b6574:	58b7 000b 58bf 000b 58c7 000b 58cf 000b     .X...X...X...X..

000b6584 <_ZTVN5spark9WiFiClassE>:
	...
   b658c:	59a7 000b 599d 000b 5993 000b 5949 000b     .Y...Y...Y..IY..
   b659c:	5987 000b 597b 000b 5a05 000b 5a0d 000b     .Y..{Y...Z...Z..
   b65ac:	596f 000b 5967 000b 595d 000b 5953 000b     oY..gY..]Y..SY..
   b65bc:	5a3d 000b                                   =Z..

000b65c0 <_ZTVN5spark12NetworkClassE>:
	...
   b65c8:	59c5 000b 59cf 000b 59d9 000b 59e3 000b     .Y...Y...Y...Y..
   b65d8:	59ed 000b 59f9 000b 5a05 000b 5a0d 000b     .Y...Y...Z...Z..
   b65e8:	5a15 000b 5a21 000b 5a29 000b 5a33 000b     .Z..!Z..)Z..3Z..
   b65f8:	5a3d 000b                                   =Z..

000b65fc <_ZSt7nothrow>:
   b65fc:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b660c:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b661c:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b662c:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b663c:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b664c:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b665c:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b666c:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b667c:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b668c:	646e 632e                                    nd.c.

000b6691 <link_const_variable_data_end>:
   b6691:	00          	.byte	0x00
	...

000b6694 <link_constructors_location>:
   b6694:	000b4235 	.word	0x000b4235
   b6698:	000b51b5 	.word	0x000b51b5
   b669c:	000b5349 	.word	0x000b5349
   b66a0:	000b536d 	.word	0x000b536d
   b66a4:	000b5489 	.word	0x000b5489
   b66a8:	000b5499 	.word	0x000b5499
   b66ac:	000b54b5 	.word	0x000b54b5
   b66b0:	000b59b1 	.word	0x000b59b1
   b66b4:	000b5b15 	.word	0x000b5b15

000b66b8 <link_constructors_end>:
	...
