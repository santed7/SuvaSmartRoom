
c:/Users/vcox/Documents/IoT/SuvaSmartRoom/Midterm1TestPINCODE/target/4.0.2/argon/Midterm1TestPINCODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001dd4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5df0  000b5df0  00005df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b5e14  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  2003e5dc  000b5e18  0001e5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000019c  2003e658  2003e658  0002e658  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000b5e90  000b5e90  00025e90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b5eb8  000b5eb8  00025eb8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001125cd  00000000  00000000  00025ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00011e03  00000000  00000000  00138489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000386bc  00000000  00000000  0014a28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a20  00000000  00000000  00182948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a050  00000000  00000000  00185368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036de0  00000000  00000000  0018f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003a6ef  00000000  00000000  001c6198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00134596  00000000  00000000  00200887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000075d4  00000000  00000000  00334e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 fca8 	bl	b5982 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 fcb0 	bl	b599e <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5dc 	.word	0x2003e5dc
   b4048:	000b5e18 	.word	0x000b5e18
   b404c:	2003e654 	.word	0x2003e654
   b4050:	2003e658 	.word	0x2003e658
   b4054:	2003e7f1 	.word	0x2003e7f1

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f000 fe29 	bl	b4cb4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b5dc4 	.word	0x000b5dc4
   b407c:	000b5de8 	.word	0x000b5de8

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b816 	b.w	b40b0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f845 	bl	b4114 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 bdc9 	b.w	b4c24 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bafd 	b.w	b4690 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bafb 	b.w	b4690 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bb01 	b.w	b46a0 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <setup>:
int button_presses = 0;
//int IR_triggers = 0;

SYSTEM_MODE(SEMI_AUTOMATIC); //when no internet connection is needed.

void setup() {
   b40b0:	b510      	push	{r4, lr}
  pinMode(led, OUTPUT);         // initalize LED as an output
   b40b2:	4c0a      	ldr	r4, [pc, #40]	; (b40dc <setup+0x2c>)
   b40b4:	2101      	movs	r1, #1
   b40b6:	8820      	ldrh	r0, [r4, #0]
   b40b8:	f001 fb9c 	bl	b57f4 <pinMode>
  pinMode(ms_sensor, INPUT);    // initialize motion sensor as an input
   b40bc:	4b08      	ldr	r3, [pc, #32]	; (b40e0 <setup+0x30>)
   b40be:	2100      	movs	r1, #0
   b40c0:	8818      	ldrh	r0, [r3, #0]
   b40c2:	f001 fb97 	bl	b57f4 <pinMode>
  pinMode(button, INPUT);       // initialize button as an input
   b40c6:	4b07      	ldr	r3, [pc, #28]	; (b40e4 <setup+0x34>)
   b40c8:	2100      	movs	r1, #0
   b40ca:	8818      	ldrh	r0, [r3, #0]
   b40cc:	f001 fb92 	bl	b57f4 <pinMode>
  digitalWrite(led, LOW);       // set the LED as off
   b40d0:	8820      	ldrh	r0, [r4, #0]
   b40d2:	2100      	movs	r1, #0
  //Particle.subscribe("Detect", IR_func, MY_DEVICES);
}
   b40d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(led, LOW);       // set the LED as off
   b40d8:	f001 bb9d 	b.w	b5816 <digitalWrite>
   b40dc:	2003e5e0 	.word	0x2003e5e0
   b40e0:	2003e5e4 	.word	0x2003e5e4
   b40e4:	2003e5dc 	.word	0x2003e5dc

000b40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b40e8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b40ea:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b40ec:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b40ee:	b17c      	cbz	r4, b4110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b40f0:	6863      	ldr	r3, [r4, #4]
   b40f2:	3b01      	subs	r3, #1
   b40f4:	6063      	str	r3, [r4, #4]
   b40f6:	b95b      	cbnz	r3, b4110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b40f8:	6823      	ldr	r3, [r4, #0]
   b40fa:	4620      	mov	r0, r4
   b40fc:	689b      	ldr	r3, [r3, #8]
   b40fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4100:	68a3      	ldr	r3, [r4, #8]
   b4102:	3b01      	subs	r3, #1
   b4104:	60a3      	str	r3, [r4, #8]
   b4106:	b91b      	cbnz	r3, b4110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4108:	6823      	ldr	r3, [r4, #0]
   b410a:	4620      	mov	r0, r4
   b410c:	68db      	ldr	r3, [r3, #12]
   b410e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4110:	4628      	mov	r0, r5
   b4112:	bd38      	pop	{r3, r4, r5, pc}

000b4114 <loop>:
    
//     return count;              // return IR_val so it carries over to the rest of the code
// }


void loop(){
   b4114:	b5f0      	push	{r4, r5, r6, r7, lr}
  ms_val = digitalRead(ms_sensor);      // read motion sensor value
   b4116:	4b4e      	ldr	r3, [pc, #312]	; (b4250 <loop+0x13c>)
   b4118:	4d4e      	ldr	r5, [pc, #312]	; (b4254 <loop+0x140>)
   b411a:	8818      	ldrh	r0, [r3, #0]
  button_val = digitalRead(button);     // read button value
   b411c:	4e4e      	ldr	r6, [pc, #312]	; (b4258 <loop+0x144>)
   b411e:	4c4f      	ldr	r4, [pc, #316]	; (b425c <loop+0x148>)
void loop(){
   b4120:	b091      	sub	sp, #68	; 0x44
  ms_val = digitalRead(ms_sensor);      // read motion sensor value
   b4122:	f001 fb91 	bl	b5848 <digitalRead>
  button_val = digitalRead(button);     // read button value
   b4126:	4b4e      	ldr	r3, [pc, #312]	; (b4260 <loop+0x14c>)
  ms_val = digitalRead(ms_sensor);      // read motion sensor value
   b4128:	6028      	str	r0, [r5, #0]
  button_val = digitalRead(button);     // read button value
   b412a:	8818      	ldrh	r0, [r3, #0]
   b412c:	f001 fb8c 	bl	b5848 <digitalRead>
  
  if (ms_val == HIGH) {
   b4130:	682f      	ldr	r7, [r5, #0]
      if (ms_state == LOW) {
   b4132:	6823      	ldr	r3, [r4, #0]
  button_val = digitalRead(button);     // read button value
   b4134:	6030      	str	r0, [r6, #0]
  if (ms_val == HIGH) {
   b4136:	2f01      	cmp	r7, #1
   b4138:	d168      	bne.n	b420c <loop+0xf8>
      if (ms_state == LOW) {
   b413a:	b96b      	cbnz	r3, b4158 <loop+0x44>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b413c:	4b49      	ldr	r3, [pc, #292]	; (b4264 <loop+0x150>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b413e:	4a4a      	ldr	r2, [pc, #296]	; (b4268 <loop+0x154>)
   b4140:	781b      	ldrb	r3, [r3, #0]
   b4142:	494a      	ldr	r1, [pc, #296]	; (b426c <loop+0x158>)
   b4144:	f88d 3000 	strb.w	r3, [sp]
   b4148:	a80c      	add	r0, sp, #48	; 0x30
   b414a:	233c      	movs	r3, #60	; 0x3c
   b414c:	f000 ff10 	bl	b4f70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4150:	a80d      	add	r0, sp, #52	; 0x34
   b4152:	f7ff ffc9 	bl	b40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          Particle.publish("Motion Sensor Value", "HIGH");
          ms_state = HIGH;
   b4156:	6027      	str	r7, [r4, #0]
          Particle.publish("Motion Sensor Value", "LOW");
          ms_state = LOW;
      }
  }

  if (button_val == HIGH) {
   b4158:	6833      	ldr	r3, [r6, #0]
   b415a:	2b01      	cmp	r3, #1
   b415c:	d168      	bne.n	b4230 <loop+0x11c>
        button_presses = button_presses + 1;                            // running total of total button presses
   b415e:	4a44      	ldr	r2, [pc, #272]	; (b4270 <loop+0x15c>)

        if (button_val == HIGH && ms_val == HIGH) {                     // check if button is pressed and motion sensor is activated
   b4160:	682c      	ldr	r4, [r5, #0]
        button_presses = button_presses + 1;                            // running total of total button presses
   b4162:	6813      	ldr	r3, [r2, #0]
        if (button_val == HIGH && ms_val == HIGH) {                     // check if button is pressed and motion sensor is activated
   b4164:	2c01      	cmp	r4, #1
        button_presses = button_presses + 1;                            // running total of total button presses
   b4166:	f103 0301 	add.w	r3, r3, #1
   b416a:	6013      	str	r3, [r2, #0]
        if (button_val == HIGH && ms_val == HIGH) {                     // check if button is pressed and motion sensor is activated
   b416c:	d10c      	bne.n	b4188 <loop+0x74>
            count = count + 1;
   b416e:	4a41      	ldr	r2, [pc, #260]	; (b4274 <loop+0x160>)
   b4170:	6813      	ldr	r3, [r2, #0]
   b4172:	3301      	adds	r3, #1
   b4174:	6013      	str	r3, [r2, #0]
            digitalWrite(led, HIGH);                                    // turn LED on
   b4176:	4b40      	ldr	r3, [pc, #256]	; (b4278 <loop+0x164>)
   b4178:	4621      	mov	r1, r4
   b417a:	8818      	ldrh	r0, [r3, #0]
   b417c:	f001 fb4b 	bl	b5816 <digitalWrite>
        
            if (state == LOW) {                                         // check if state is LOW
   b4180:	4b3e      	ldr	r3, [pc, #248]	; (b427c <loop+0x168>)
   b4182:	681a      	ldr	r2, [r3, #0]
   b4184:	b902      	cbnz	r2, b4188 <loop+0x74>
                state = HIGH;                                           // check if state is HIGH
   b4186:	601c      	str	r4, [r3, #0]
            }
        }
        
        delay(500);                                                     // delay 500 milliseconds
   b4188:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b418c:	f000 fd1e 	bl	b4bcc <delay>
  }
  
  
  
  
  if (Time.second() == 0) {
   b4190:	f000 fd06 	bl	b4ba0 <_ZN9TimeClass6secondEv>
   b4194:	2800      	cmp	r0, #0
   b4196:	d137      	bne.n	b4208 <loop+0xf4>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4198:	4939      	ldr	r1, [pc, #228]	; (b4280 <loop+0x16c>)
   b419a:	a808      	add	r0, sp, #32
   b419c:	f000 fba9 	bl	b48f2 <_ZN6StringC1EPK19__FlashStringHelper>
       Particle.publish( "Counter", "{ \"People Counted\": \"" + String(count) + "\","+              //Publishes people counted, button presses, and IR sensor triggers to Thingspeak
   b41a0:	4b34      	ldr	r3, [pc, #208]	; (b4274 <loop+0x160>)
   b41a2:	220a      	movs	r2, #10
   b41a4:	6819      	ldr	r1, [r3, #0]
   b41a6:	a804      	add	r0, sp, #16
   b41a8:	f000 fbc9 	bl	b493e <_ZN6StringC1Eih>
   b41ac:	a904      	add	r1, sp, #16
   b41ae:	a808      	add	r0, sp, #32
   b41b0:	f000 fbef 	bl	b4992 <_ZplRK15StringSumHelperRK6String>
   b41b4:	4933      	ldr	r1, [pc, #204]	; (b4284 <loop+0x170>)
   b41b6:	f000 fbf8 	bl	b49aa <_ZplRK15StringSumHelperPKc>
       "\"Button Presses\": \"" + String(button_presses) + "\"}", 60, PRIVATE);
   b41ba:	4933      	ldr	r1, [pc, #204]	; (b4288 <loop+0x174>)
   b41bc:	f000 fbf5 	bl	b49aa <_ZplRK15StringSumHelperPKc>
   b41c0:	4b2b      	ldr	r3, [pc, #172]	; (b4270 <loop+0x15c>)
   b41c2:	220a      	movs	r2, #10
   b41c4:	6819      	ldr	r1, [r3, #0]
   b41c6:	4604      	mov	r4, r0
   b41c8:	a80c      	add	r0, sp, #48	; 0x30
   b41ca:	f000 fbb8 	bl	b493e <_ZN6StringC1Eih>
   b41ce:	a90c      	add	r1, sp, #48	; 0x30
   b41d0:	4620      	mov	r0, r4
   b41d2:	f000 fbde 	bl	b4992 <_ZplRK15StringSumHelperRK6String>
   b41d6:	492d      	ldr	r1, [pc, #180]	; (b428c <loop+0x178>)
   b41d8:	f000 fbe7 	bl	b49aa <_ZplRK15StringSumHelperPKc>
	const char * c_str() const { return buffer; }
   b41dc:	4b2c      	ldr	r3, [pc, #176]	; (b4290 <loop+0x17c>)
   b41de:	6802      	ldr	r2, [r0, #0]
   b41e0:	781b      	ldrb	r3, [r3, #0]
   b41e2:	492c      	ldr	r1, [pc, #176]	; (b4294 <loop+0x180>)
   b41e4:	f88d 3000 	strb.w	r3, [sp]
   b41e8:	a802      	add	r0, sp, #8
   b41ea:	233c      	movs	r3, #60	; 0x3c
   b41ec:	f000 fec0 	bl	b4f70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b41f0:	a803      	add	r0, sp, #12
   b41f2:	f7ff ff79 	bl	b40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b41f6:	a80c      	add	r0, sp, #48	; 0x30
   b41f8:	f000 fb30 	bl	b485c <_ZN6StringD1Ev>
       Particle.publish( "Counter", "{ \"People Counted\": \"" + String(count) + "\","+              //Publishes people counted, button presses, and IR sensor triggers to Thingspeak
   b41fc:	a804      	add	r0, sp, #16
   b41fe:	f000 fb2d 	bl	b485c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4202:	a808      	add	r0, sp, #32
   b4204:	f000 fb2a 	bl	b485c <_ZN6StringD1Ev>
  }
  
   b4208:	b011      	add	sp, #68	; 0x44
   b420a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (ms_state == HIGH) {
   b420c:	2b01      	cmp	r3, #1
   b420e:	d1a3      	bne.n	b4158 <loop+0x44>
   b4210:	4b14      	ldr	r3, [pc, #80]	; (b4264 <loop+0x150>)
   b4212:	4a21      	ldr	r2, [pc, #132]	; (b4298 <loop+0x184>)
   b4214:	781b      	ldrb	r3, [r3, #0]
   b4216:	4915      	ldr	r1, [pc, #84]	; (b426c <loop+0x158>)
   b4218:	f88d 3000 	strb.w	r3, [sp]
   b421c:	a80c      	add	r0, sp, #48	; 0x30
   b421e:	233c      	movs	r3, #60	; 0x3c
   b4220:	f000 fea6 	bl	b4f70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4224:	a80d      	add	r0, sp, #52	; 0x34
   b4226:	f7ff ff5f 	bl	b40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          ms_state = LOW;
   b422a:	2300      	movs	r3, #0
   b422c:	6023      	str	r3, [r4, #0]
   b422e:	e793      	b.n	b4158 <loop+0x44>
      digitalWrite(led, LOW);                       // turn LED OFF
   b4230:	4b11      	ldr	r3, [pc, #68]	; (b4278 <loop+0x164>)
   b4232:	2100      	movs	r1, #0
   b4234:	8818      	ldrh	r0, [r3, #0]
   b4236:	f001 faee 	bl	b5816 <digitalWrite>
      delay(500);                                   // delay 500 milliseconds 
   b423a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b423e:	f000 fcc5 	bl	b4bcc <delay>
      if (state == HIGH){                           // check if state is high
   b4242:	4b0e      	ldr	r3, [pc, #56]	; (b427c <loop+0x168>)
   b4244:	681a      	ldr	r2, [r3, #0]
   b4246:	2a01      	cmp	r2, #1
        state = LOW;                                // update variable state to LOW
   b4248:	bf04      	itt	eq
   b424a:	2200      	moveq	r2, #0
   b424c:	601a      	streq	r2, [r3, #0]
   b424e:	e79f      	b.n	b4190 <loop+0x7c>
   b4250:	2003e5e4 	.word	0x2003e5e4
   b4254:	2003e678 	.word	0x2003e678
   b4258:	2003e66c 	.word	0x2003e66c
   b425c:	2003e674 	.word	0x2003e674
   b4260:	2003e5dc 	.word	0x2003e5dc
   b4264:	2003e664 	.word	0x2003e664
   b4268:	000b5b48 	.word	0x000b5b48
   b426c:	000b5b4d 	.word	0x000b5b4d
   b4270:	2003e668 	.word	0x2003e668
   b4274:	2003e670 	.word	0x2003e670
   b4278:	2003e5e0 	.word	0x2003e5e0
   b427c:	2003e67c 	.word	0x2003e67c
   b4280:	000b5b65 	.word	0x000b5b65
   b4284:	000b5b7b 	.word	0x000b5b7b
   b4288:	000b5b7e 	.word	0x000b5b7e
   b428c:	000b5b92 	.word	0x000b5b92
   b4290:	2003e665 	.word	0x2003e665
   b4294:	000b5b95 	.word	0x000b5b95
   b4298:	000b5b61 	.word	0x000b5b61

000b429c <_GLOBAL__sub_I_led>:
        val_(val) {
   b429c:	4b07      	ldr	r3, [pc, #28]	; (b42bc <_GLOBAL__sub_I_led+0x20>)
   b429e:	2200      	movs	r2, #0
   b42a0:	701a      	strb	r2, [r3, #0]
   b42a2:	4b07      	ldr	r3, [pc, #28]	; (b42c0 <_GLOBAL__sub_I_led+0x24>)
   b42a4:	2101      	movs	r1, #1
   b42a6:	7019      	strb	r1, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b42a8:	4b06      	ldr	r3, [pc, #24]	; (b42c4 <_GLOBAL__sub_I_led+0x28>)
   b42aa:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b42ae:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b42b2:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b42b4:	2002      	movs	r0, #2
   b42b6:	f000 b927 	b.w	b4508 <set_system_mode>
   b42ba:	bf00      	nop
   b42bc:	2003e664 	.word	0x2003e664
   b42c0:	2003e665 	.word	0x2003e665
   b42c4:	2003e658 	.word	0x2003e658

000b42c8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b42c8:	b508      	push	{r3, lr}
   b42ca:	4b02      	ldr	r3, [pc, #8]	; (b42d4 <netdb_freeaddrinfo+0xc>)
   b42cc:	681b      	ldr	r3, [r3, #0]
   b42ce:	689b      	ldr	r3, [r3, #8]
   b42d0:	9301      	str	r3, [sp, #4]
   b42d2:	bd08      	pop	{r3, pc}
   b42d4:	00030268 	.word	0x00030268

000b42d8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b42d8:	b508      	push	{r3, lr}
   b42da:	4b02      	ldr	r3, [pc, #8]	; (b42e4 <netdb_getaddrinfo+0xc>)
   b42dc:	681b      	ldr	r3, [r3, #0]
   b42de:	68db      	ldr	r3, [r3, #12]
   b42e0:	9301      	str	r3, [sp, #4]
   b42e2:	bd08      	pop	{r3, pc}
   b42e4:	00030268 	.word	0x00030268

000b42e8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b42e8:	b508      	push	{r3, lr}
   b42ea:	4b02      	ldr	r3, [pc, #8]	; (b42f4 <HAL_Pin_Mode+0xc>)
   b42ec:	681b      	ldr	r3, [r3, #0]
   b42ee:	689b      	ldr	r3, [r3, #8]
   b42f0:	9301      	str	r3, [sp, #4]
   b42f2:	bd08      	pop	{r3, pc}
   b42f4:	0003022c 	.word	0x0003022c

000b42f8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b42f8:	b508      	push	{r3, lr}
   b42fa:	4b02      	ldr	r3, [pc, #8]	; (b4304 <HAL_Get_Pin_Mode+0xc>)
   b42fc:	681b      	ldr	r3, [r3, #0]
   b42fe:	68db      	ldr	r3, [r3, #12]
   b4300:	9301      	str	r3, [sp, #4]
   b4302:	bd08      	pop	{r3, pc}
   b4304:	0003022c 	.word	0x0003022c

000b4308 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4308:	b508      	push	{r3, lr}
   b430a:	4b02      	ldr	r3, [pc, #8]	; (b4314 <HAL_GPIO_Write+0xc>)
   b430c:	681b      	ldr	r3, [r3, #0]
   b430e:	691b      	ldr	r3, [r3, #16]
   b4310:	9301      	str	r3, [sp, #4]
   b4312:	bd08      	pop	{r3, pc}
   b4314:	0003022c 	.word	0x0003022c

000b4318 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b4318:	b508      	push	{r3, lr}
   b431a:	4b02      	ldr	r3, [pc, #8]	; (b4324 <HAL_GPIO_Read+0xc>)
   b431c:	681b      	ldr	r3, [r3, #0]
   b431e:	695b      	ldr	r3, [r3, #20]
   b4320:	9301      	str	r3, [sp, #4]
   b4322:	bd08      	pop	{r3, pc}
   b4324:	0003022c 	.word	0x0003022c

000b4328 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4328:	b508      	push	{r3, lr}
   b432a:	4b02      	ldr	r3, [pc, #8]	; (b4334 <HAL_RNG_GetRandomNumber+0xc>)
   b432c:	681b      	ldr	r3, [r3, #0]
   b432e:	685b      	ldr	r3, [r3, #4]
   b4330:	9301      	str	r3, [sp, #4]
   b4332:	bd08      	pop	{r3, pc}
   b4334:	00030218 	.word	0x00030218

000b4338 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4338:	b508      	push	{r3, lr}
   b433a:	4b02      	ldr	r3, [pc, #8]	; (b4344 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b433c:	681b      	ldr	r3, [r3, #0]
   b433e:	695b      	ldr	r3, [r3, #20]
   b4340:	9301      	str	r3, [sp, #4]
   b4342:	bd08      	pop	{r3, pc}
   b4344:	00030218 	.word	0x00030218

000b4348 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b4348:	b508      	push	{r3, lr}
   b434a:	4b02      	ldr	r3, [pc, #8]	; (b4354 <hal_rtc_time_is_valid+0xc>)
   b434c:	681b      	ldr	r3, [r3, #0]
   b434e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4350:	9301      	str	r3, [sp, #4]
   b4352:	bd08      	pop	{r3, pc}
   b4354:	00030218 	.word	0x00030218

000b4358 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b4358:	b508      	push	{r3, lr}
   b435a:	4b02      	ldr	r3, [pc, #8]	; (b4364 <hal_rtc_get_time+0xc>)
   b435c:	681b      	ldr	r3, [r3, #0]
   b435e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b4360:	9301      	str	r3, [sp, #4]
   b4362:	bd08      	pop	{r3, pc}
   b4364:	00030218 	.word	0x00030218

000b4368 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4368:	b508      	push	{r3, lr}
   b436a:	4b02      	ldr	r3, [pc, #8]	; (b4374 <os_mutex_recursive_create+0xc>)
   b436c:	681b      	ldr	r3, [r3, #0]
   b436e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4370:	9301      	str	r3, [sp, #4]
   b4372:	bd08      	pop	{r3, pc}
   b4374:	00030248 	.word	0x00030248

000b4378 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4378:	b508      	push	{r3, lr}
   b437a:	4b02      	ldr	r3, [pc, #8]	; (b4384 <inet_inet_ntop+0xc>)
   b437c:	681b      	ldr	r3, [r3, #0]
   b437e:	695b      	ldr	r3, [r3, #20]
   b4380:	9301      	str	r3, [sp, #4]
   b4382:	bd08      	pop	{r3, pc}
   b4384:	00030264 	.word	0x00030264

000b4388 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4388:	b508      	push	{r3, lr}
   b438a:	4b02      	ldr	r3, [pc, #8]	; (b4394 <hal_usart_write+0xc>)
   b438c:	681b      	ldr	r3, [r3, #0]
   b438e:	68db      	ldr	r3, [r3, #12]
   b4390:	9301      	str	r3, [sp, #4]
   b4392:	bd08      	pop	{r3, pc}
   b4394:	0003023c 	.word	0x0003023c

000b4398 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4398:	b508      	push	{r3, lr}
   b439a:	4b02      	ldr	r3, [pc, #8]	; (b43a4 <hal_usart_available+0xc>)
   b439c:	681b      	ldr	r3, [r3, #0]
   b439e:	691b      	ldr	r3, [r3, #16]
   b43a0:	9301      	str	r3, [sp, #4]
   b43a2:	bd08      	pop	{r3, pc}
   b43a4:	0003023c 	.word	0x0003023c

000b43a8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b43a8:	b508      	push	{r3, lr}
   b43aa:	4b02      	ldr	r3, [pc, #8]	; (b43b4 <hal_usart_read+0xc>)
   b43ac:	681b      	ldr	r3, [r3, #0]
   b43ae:	695b      	ldr	r3, [r3, #20]
   b43b0:	9301      	str	r3, [sp, #4]
   b43b2:	bd08      	pop	{r3, pc}
   b43b4:	0003023c 	.word	0x0003023c

000b43b8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b43b8:	b508      	push	{r3, lr}
   b43ba:	4b02      	ldr	r3, [pc, #8]	; (b43c4 <hal_usart_peek+0xc>)
   b43bc:	681b      	ldr	r3, [r3, #0]
   b43be:	699b      	ldr	r3, [r3, #24]
   b43c0:	9301      	str	r3, [sp, #4]
   b43c2:	bd08      	pop	{r3, pc}
   b43c4:	0003023c 	.word	0x0003023c

000b43c8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b43c8:	b508      	push	{r3, lr}
   b43ca:	4b02      	ldr	r3, [pc, #8]	; (b43d4 <hal_usart_flush+0xc>)
   b43cc:	681b      	ldr	r3, [r3, #0]
   b43ce:	69db      	ldr	r3, [r3, #28]
   b43d0:	9301      	str	r3, [sp, #4]
   b43d2:	bd08      	pop	{r3, pc}
   b43d4:	0003023c 	.word	0x0003023c

000b43d8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b43d8:	b508      	push	{r3, lr}
   b43da:	4b02      	ldr	r3, [pc, #8]	; (b43e4 <hal_usart_is_enabled+0xc>)
   b43dc:	681b      	ldr	r3, [r3, #0]
   b43de:	6a1b      	ldr	r3, [r3, #32]
   b43e0:	9301      	str	r3, [sp, #4]
   b43e2:	bd08      	pop	{r3, pc}
   b43e4:	0003023c 	.word	0x0003023c

000b43e8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b43e8:	b508      	push	{r3, lr}
   b43ea:	4b02      	ldr	r3, [pc, #8]	; (b43f4 <hal_usart_available_data_for_write+0xc>)
   b43ec:	681b      	ldr	r3, [r3, #0]
   b43ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b43f0:	9301      	str	r3, [sp, #4]
   b43f2:	bd08      	pop	{r3, pc}
   b43f4:	0003023c 	.word	0x0003023c

000b43f8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b43f8:	b508      	push	{r3, lr}
   b43fa:	4b02      	ldr	r3, [pc, #8]	; (b4404 <hal_usart_init_ex+0xc>)
   b43fc:	681b      	ldr	r3, [r3, #0]
   b43fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4400:	9301      	str	r3, [sp, #4]
   b4402:	bd08      	pop	{r3, pc}
   b4404:	0003023c 	.word	0x0003023c

000b4408 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4408:	b508      	push	{r3, lr}
   b440a:	4b02      	ldr	r3, [pc, #8]	; (b4414 <hal_i2c_write+0xc>)
   b440c:	681b      	ldr	r3, [r3, #0]
   b440e:	6a1b      	ldr	r3, [r3, #32]
   b4410:	9301      	str	r3, [sp, #4]
   b4412:	bd08      	pop	{r3, pc}
   b4414:	00030228 	.word	0x00030228

000b4418 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4418:	b508      	push	{r3, lr}
   b441a:	4b02      	ldr	r3, [pc, #8]	; (b4424 <hal_i2c_available+0xc>)
   b441c:	681b      	ldr	r3, [r3, #0]
   b441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4420:	9301      	str	r3, [sp, #4]
   b4422:	bd08      	pop	{r3, pc}
   b4424:	00030228 	.word	0x00030228

000b4428 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4428:	b508      	push	{r3, lr}
   b442a:	4b02      	ldr	r3, [pc, #8]	; (b4434 <hal_i2c_read+0xc>)
   b442c:	681b      	ldr	r3, [r3, #0]
   b442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4430:	9301      	str	r3, [sp, #4]
   b4432:	bd08      	pop	{r3, pc}
   b4434:	00030228 	.word	0x00030228

000b4438 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4438:	b508      	push	{r3, lr}
   b443a:	4b02      	ldr	r3, [pc, #8]	; (b4444 <hal_i2c_peek+0xc>)
   b443c:	681b      	ldr	r3, [r3, #0]
   b443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4440:	9301      	str	r3, [sp, #4]
   b4442:	bd08      	pop	{r3, pc}
   b4444:	00030228 	.word	0x00030228

000b4448 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4448:	b508      	push	{r3, lr}
   b444a:	4b02      	ldr	r3, [pc, #8]	; (b4454 <hal_i2c_flush+0xc>)
   b444c:	681b      	ldr	r3, [r3, #0]
   b444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4450:	9301      	str	r3, [sp, #4]
   b4452:	bd08      	pop	{r3, pc}
   b4454:	00030228 	.word	0x00030228

000b4458 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4458:	b508      	push	{r3, lr}
   b445a:	4b02      	ldr	r3, [pc, #8]	; (b4464 <hal_i2c_is_enabled+0xc>)
   b445c:	681b      	ldr	r3, [r3, #0]
   b445e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4460:	9301      	str	r3, [sp, #4]
   b4462:	bd08      	pop	{r3, pc}
   b4464:	00030228 	.word	0x00030228

000b4468 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4468:	b508      	push	{r3, lr}
   b446a:	4b02      	ldr	r3, [pc, #8]	; (b4474 <hal_i2c_init+0xc>)
   b446c:	681b      	ldr	r3, [r3, #0]
   b446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4470:	9301      	str	r3, [sp, #4]
   b4472:	bd08      	pop	{r3, pc}
   b4474:	00030228 	.word	0x00030228

000b4478 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4478:	b508      	push	{r3, lr}
   b447a:	4b02      	ldr	r3, [pc, #8]	; (b4484 <hal_spi_init+0xc>)
   b447c:	681b      	ldr	r3, [r3, #0]
   b447e:	69db      	ldr	r3, [r3, #28]
   b4480:	9301      	str	r3, [sp, #4]
   b4482:	bd08      	pop	{r3, pc}
   b4484:	00030230 	.word	0x00030230

000b4488 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4488:	b508      	push	{r3, lr}
   b448a:	4b02      	ldr	r3, [pc, #8]	; (b4494 <hal_spi_is_enabled+0xc>)
   b448c:	681b      	ldr	r3, [r3, #0]
   b448e:	6a1b      	ldr	r3, [r3, #32]
   b4490:	9301      	str	r3, [sp, #4]
   b4492:	bd08      	pop	{r3, pc}
   b4494:	00030230 	.word	0x00030230

000b4498 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4498:	b508      	push	{r3, lr}
   b449a:	4b02      	ldr	r3, [pc, #8]	; (b44a4 <HAL_USB_USART_Init+0xc>)
   b449c:	681b      	ldr	r3, [r3, #0]
   b449e:	681b      	ldr	r3, [r3, #0]
   b44a0:	9301      	str	r3, [sp, #4]
   b44a2:	bd08      	pop	{r3, pc}
   b44a4:	0003024c 	.word	0x0003024c

000b44a8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b44a8:	b508      	push	{r3, lr}
   b44aa:	4b02      	ldr	r3, [pc, #8]	; (b44b4 <HAL_USB_USART_Available_Data+0xc>)
   b44ac:	681b      	ldr	r3, [r3, #0]
   b44ae:	691b      	ldr	r3, [r3, #16]
   b44b0:	9301      	str	r3, [sp, #4]
   b44b2:	bd08      	pop	{r3, pc}
   b44b4:	0003024c 	.word	0x0003024c

000b44b8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b44b8:	b508      	push	{r3, lr}
   b44ba:	4b02      	ldr	r3, [pc, #8]	; (b44c4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b44bc:	681b      	ldr	r3, [r3, #0]
   b44be:	695b      	ldr	r3, [r3, #20]
   b44c0:	9301      	str	r3, [sp, #4]
   b44c2:	bd08      	pop	{r3, pc}
   b44c4:	0003024c 	.word	0x0003024c

000b44c8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b44c8:	b508      	push	{r3, lr}
   b44ca:	4b02      	ldr	r3, [pc, #8]	; (b44d4 <HAL_USB_USART_Receive_Data+0xc>)
   b44cc:	681b      	ldr	r3, [r3, #0]
   b44ce:	699b      	ldr	r3, [r3, #24]
   b44d0:	9301      	str	r3, [sp, #4]
   b44d2:	bd08      	pop	{r3, pc}
   b44d4:	0003024c 	.word	0x0003024c

000b44d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b44d8:	b508      	push	{r3, lr}
   b44da:	4b02      	ldr	r3, [pc, #8]	; (b44e4 <HAL_USB_USART_Send_Data+0xc>)
   b44dc:	681b      	ldr	r3, [r3, #0]
   b44de:	69db      	ldr	r3, [r3, #28]
   b44e0:	9301      	str	r3, [sp, #4]
   b44e2:	bd08      	pop	{r3, pc}
   b44e4:	0003024c 	.word	0x0003024c

000b44e8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b44e8:	b508      	push	{r3, lr}
   b44ea:	4b02      	ldr	r3, [pc, #8]	; (b44f4 <HAL_USB_USART_Flush_Data+0xc>)
   b44ec:	681b      	ldr	r3, [r3, #0]
   b44ee:	6a1b      	ldr	r3, [r3, #32]
   b44f0:	9301      	str	r3, [sp, #4]
   b44f2:	bd08      	pop	{r3, pc}
   b44f4:	0003024c 	.word	0x0003024c

000b44f8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b44f8:	b508      	push	{r3, lr}
   b44fa:	4b02      	ldr	r3, [pc, #8]	; (b4504 <system_mode+0xc>)
   b44fc:	681b      	ldr	r3, [r3, #0]
   b44fe:	681b      	ldr	r3, [r3, #0]
   b4500:	9301      	str	r3, [sp, #4]
   b4502:	bd08      	pop	{r3, pc}
   b4504:	00030220 	.word	0x00030220

000b4508 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4508:	b508      	push	{r3, lr}
   b450a:	4b02      	ldr	r3, [pc, #8]	; (b4514 <set_system_mode+0xc>)
   b450c:	681b      	ldr	r3, [r3, #0]
   b450e:	685b      	ldr	r3, [r3, #4]
   b4510:	9301      	str	r3, [sp, #4]
   b4512:	bd08      	pop	{r3, pc}
   b4514:	00030220 	.word	0x00030220

000b4518 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4518:	b508      	push	{r3, lr}
   b451a:	4b02      	ldr	r3, [pc, #8]	; (b4524 <system_delay_ms+0xc>)
   b451c:	681b      	ldr	r3, [r3, #0]
   b451e:	695b      	ldr	r3, [r3, #20]
   b4520:	9301      	str	r3, [sp, #4]
   b4522:	bd08      	pop	{r3, pc}
   b4524:	00030220 	.word	0x00030220

000b4528 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4528:	b508      	push	{r3, lr}
   b452a:	4b02      	ldr	r3, [pc, #8]	; (b4534 <application_thread_current+0xc>)
   b452c:	681b      	ldr	r3, [r3, #0]
   b452e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4530:	9301      	str	r3, [sp, #4]
   b4532:	bd08      	pop	{r3, pc}
   b4534:	00030220 	.word	0x00030220

000b4538 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4538:	b508      	push	{r3, lr}
   b453a:	4b02      	ldr	r3, [pc, #8]	; (b4544 <application_thread_invoke+0xc>)
   b453c:	681b      	ldr	r3, [r3, #0]
   b453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4540:	9301      	str	r3, [sp, #4]
   b4542:	bd08      	pop	{r3, pc}
   b4544:	00030220 	.word	0x00030220

000b4548 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b4548:	b508      	push	{r3, lr}
   b454a:	4b02      	ldr	r3, [pc, #8]	; (b4554 <system_thread_get_state+0xc>)
   b454c:	681b      	ldr	r3, [r3, #0]
   b454e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4550:	9301      	str	r3, [sp, #4]
   b4552:	bd08      	pop	{r3, pc}
   b4554:	00030220 	.word	0x00030220

000b4558 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4558:	b508      	push	{r3, lr}
   b455a:	4b03      	ldr	r3, [pc, #12]	; (b4568 <system_ctrl_set_app_request_handler+0x10>)
   b455c:	681b      	ldr	r3, [r3, #0]
   b455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4562:	9301      	str	r3, [sp, #4]
   b4564:	bd08      	pop	{r3, pc}
   b4566:	0000      	.short	0x0000
   b4568:	00030220 	.word	0x00030220

000b456c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b456c:	b508      	push	{r3, lr}
   b456e:	4b03      	ldr	r3, [pc, #12]	; (b457c <system_ctrl_set_result+0x10>)
   b4570:	681b      	ldr	r3, [r3, #0]
   b4572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4576:	9301      	str	r3, [sp, #4]
   b4578:	bd08      	pop	{r3, pc}
   b457a:	0000      	.short	0x0000
   b457c:	00030220 	.word	0x00030220

000b4580 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4580:	b508      	push	{r3, lr}
   b4582:	4b02      	ldr	r3, [pc, #8]	; (b458c <network_connect+0xc>)
   b4584:	681b      	ldr	r3, [r3, #0]
   b4586:	685b      	ldr	r3, [r3, #4]
   b4588:	9301      	str	r3, [sp, #4]
   b458a:	bd08      	pop	{r3, pc}
   b458c:	00030240 	.word	0x00030240

000b4590 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4590:	b508      	push	{r3, lr}
   b4592:	4b02      	ldr	r3, [pc, #8]	; (b459c <network_connecting+0xc>)
   b4594:	681b      	ldr	r3, [r3, #0]
   b4596:	689b      	ldr	r3, [r3, #8]
   b4598:	9301      	str	r3, [sp, #4]
   b459a:	bd08      	pop	{r3, pc}
   b459c:	00030240 	.word	0x00030240

000b45a0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b45a0:	b508      	push	{r3, lr}
   b45a2:	4b02      	ldr	r3, [pc, #8]	; (b45ac <network_disconnect+0xc>)
   b45a4:	681b      	ldr	r3, [r3, #0]
   b45a6:	68db      	ldr	r3, [r3, #12]
   b45a8:	9301      	str	r3, [sp, #4]
   b45aa:	bd08      	pop	{r3, pc}
   b45ac:	00030240 	.word	0x00030240

000b45b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b45b0:	b508      	push	{r3, lr}
   b45b2:	4b02      	ldr	r3, [pc, #8]	; (b45bc <network_ready+0xc>)
   b45b4:	681b      	ldr	r3, [r3, #0]
   b45b6:	691b      	ldr	r3, [r3, #16]
   b45b8:	9301      	str	r3, [sp, #4]
   b45ba:	bd08      	pop	{r3, pc}
   b45bc:	00030240 	.word	0x00030240

000b45c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b45c0:	b508      	push	{r3, lr}
   b45c2:	4b02      	ldr	r3, [pc, #8]	; (b45cc <network_on+0xc>)
   b45c4:	681b      	ldr	r3, [r3, #0]
   b45c6:	695b      	ldr	r3, [r3, #20]
   b45c8:	9301      	str	r3, [sp, #4]
   b45ca:	bd08      	pop	{r3, pc}
   b45cc:	00030240 	.word	0x00030240

000b45d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b45d0:	b508      	push	{r3, lr}
   b45d2:	4b02      	ldr	r3, [pc, #8]	; (b45dc <network_off+0xc>)
   b45d4:	681b      	ldr	r3, [r3, #0]
   b45d6:	699b      	ldr	r3, [r3, #24]
   b45d8:	9301      	str	r3, [sp, #4]
   b45da:	bd08      	pop	{r3, pc}
   b45dc:	00030240 	.word	0x00030240

000b45e0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b45e0:	b508      	push	{r3, lr}
   b45e2:	4b02      	ldr	r3, [pc, #8]	; (b45ec <network_listen+0xc>)
   b45e4:	681b      	ldr	r3, [r3, #0]
   b45e6:	69db      	ldr	r3, [r3, #28]
   b45e8:	9301      	str	r3, [sp, #4]
   b45ea:	bd08      	pop	{r3, pc}
   b45ec:	00030240 	.word	0x00030240

000b45f0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b45f0:	b508      	push	{r3, lr}
   b45f2:	4b02      	ldr	r3, [pc, #8]	; (b45fc <network_listening+0xc>)
   b45f4:	681b      	ldr	r3, [r3, #0]
   b45f6:	6a1b      	ldr	r3, [r3, #32]
   b45f8:	9301      	str	r3, [sp, #4]
   b45fa:	bd08      	pop	{r3, pc}
   b45fc:	00030240 	.word	0x00030240

000b4600 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4600:	b508      	push	{r3, lr}
   b4602:	4b02      	ldr	r3, [pc, #8]	; (b460c <network_set_listen_timeout+0xc>)
   b4604:	681b      	ldr	r3, [r3, #0]
   b4606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4608:	9301      	str	r3, [sp, #4]
   b460a:	bd08      	pop	{r3, pc}
   b460c:	00030240 	.word	0x00030240

000b4610 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4610:	b508      	push	{r3, lr}
   b4612:	4b02      	ldr	r3, [pc, #8]	; (b461c <network_get_listen_timeout+0xc>)
   b4614:	681b      	ldr	r3, [r3, #0]
   b4616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4618:	9301      	str	r3, [sp, #4]
   b461a:	bd08      	pop	{r3, pc}
   b461c:	00030240 	.word	0x00030240

000b4620 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4620:	b508      	push	{r3, lr}
   b4622:	4b02      	ldr	r3, [pc, #8]	; (b462c <network_is_on+0xc>)
   b4624:	681b      	ldr	r3, [r3, #0]
   b4626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4628:	9301      	str	r3, [sp, #4]
   b462a:	bd08      	pop	{r3, pc}
   b462c:	00030240 	.word	0x00030240

000b4630 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4630:	b508      	push	{r3, lr}
   b4632:	4b02      	ldr	r3, [pc, #8]	; (b463c <network_is_off+0xc>)
   b4634:	681b      	ldr	r3, [r3, #0]
   b4636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4638:	9301      	str	r3, [sp, #4]
   b463a:	bd08      	pop	{r3, pc}
   b463c:	00030240 	.word	0x00030240

000b4640 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b4640:	b508      	push	{r3, lr}
   b4642:	4b02      	ldr	r3, [pc, #8]	; (b464c <spark_process+0xc>)
   b4644:	681b      	ldr	r3, [r3, #0]
   b4646:	689b      	ldr	r3, [r3, #8]
   b4648:	9301      	str	r3, [sp, #4]
   b464a:	bd08      	pop	{r3, pc}
   b464c:	00030244 	.word	0x00030244

000b4650 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4650:	b508      	push	{r3, lr}
   b4652:	4b02      	ldr	r3, [pc, #8]	; (b465c <spark_cloud_flag_connected+0xc>)
   b4654:	681b      	ldr	r3, [r3, #0]
   b4656:	695b      	ldr	r3, [r3, #20]
   b4658:	9301      	str	r3, [sp, #4]
   b465a:	bd08      	pop	{r3, pc}
   b465c:	00030244 	.word	0x00030244

000b4660 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4660:	b508      	push	{r3, lr}
   b4662:	4b02      	ldr	r3, [pc, #8]	; (b466c <spark_send_event+0xc>)
   b4664:	681b      	ldr	r3, [r3, #0]
   b4666:	6a1b      	ldr	r3, [r3, #32]
   b4668:	9301      	str	r3, [sp, #4]
   b466a:	bd08      	pop	{r3, pc}
   b466c:	00030244 	.word	0x00030244

000b4670 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b4670:	b508      	push	{r3, lr}
   b4672:	4b02      	ldr	r3, [pc, #8]	; (b467c <spark_sync_time_pending+0xc>)
   b4674:	681b      	ldr	r3, [r3, #0]
   b4676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4678:	9301      	str	r3, [sp, #4]
   b467a:	bd08      	pop	{r3, pc}
   b467c:	00030244 	.word	0x00030244

000b4680 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4680:	b508      	push	{r3, lr}
   b4682:	4b02      	ldr	r3, [pc, #8]	; (b468c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4684:	681b      	ldr	r3, [r3, #0]
   b4686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4688:	9301      	str	r3, [sp, #4]
   b468a:	bd08      	pop	{r3, pc}
   b468c:	00030244 	.word	0x00030244

000b4690 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4690:	b508      	push	{r3, lr}
   b4692:	4b02      	ldr	r3, [pc, #8]	; (b469c <malloc+0xc>)
   b4694:	681b      	ldr	r3, [r3, #0]
   b4696:	681b      	ldr	r3, [r3, #0]
   b4698:	9301      	str	r3, [sp, #4]
   b469a:	bd08      	pop	{r3, pc}
   b469c:	0003021c 	.word	0x0003021c

000b46a0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b46a0:	b508      	push	{r3, lr}
   b46a2:	4b02      	ldr	r3, [pc, #8]	; (b46ac <free+0xc>)
   b46a4:	681b      	ldr	r3, [r3, #0]
   b46a6:	685b      	ldr	r3, [r3, #4]
   b46a8:	9301      	str	r3, [sp, #4]
   b46aa:	bd08      	pop	{r3, pc}
   b46ac:	0003021c 	.word	0x0003021c

000b46b0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b46b0:	b508      	push	{r3, lr}
   b46b2:	4b02      	ldr	r3, [pc, #8]	; (b46bc <realloc+0xc>)
   b46b4:	681b      	ldr	r3, [r3, #0]
   b46b6:	689b      	ldr	r3, [r3, #8]
   b46b8:	9301      	str	r3, [sp, #4]
   b46ba:	bd08      	pop	{r3, pc}
   b46bc:	0003021c 	.word	0x0003021c

000b46c0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b46c0:	b508      	push	{r3, lr}
   b46c2:	4b02      	ldr	r3, [pc, #8]	; (b46cc <abort+0xc>)
   b46c4:	681b      	ldr	r3, [r3, #0]
   b46c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46c8:	9301      	str	r3, [sp, #4]
   b46ca:	bd08      	pop	{r3, pc}
   b46cc:	0003021c 	.word	0x0003021c

000b46d0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b46d0:	b508      	push	{r3, lr}
   b46d2:	4b02      	ldr	r3, [pc, #8]	; (b46dc <_malloc_r+0xc>)
   b46d4:	681b      	ldr	r3, [r3, #0]
   b46d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b46d8:	9301      	str	r3, [sp, #4]
   b46da:	bd08      	pop	{r3, pc}
   b46dc:	0003021c 	.word	0x0003021c

000b46e0 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b46e0:	b508      	push	{r3, lr}
   b46e2:	4b02      	ldr	r3, [pc, #8]	; (b46ec <__assert_func+0xc>)
   b46e4:	681b      	ldr	r3, [r3, #0]
   b46e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46e8:	9301      	str	r3, [sp, #4]
   b46ea:	bd08      	pop	{r3, pc}
   b46ec:	0003021c 	.word	0x0003021c

000b46f0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b46f0:	b508      	push	{r3, lr}
   b46f2:	4b02      	ldr	r3, [pc, #8]	; (b46fc <newlib_impure_ptr_callback+0xc>)
   b46f4:	681b      	ldr	r3, [r3, #0]
   b46f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b46f8:	9301      	str	r3, [sp, #4]
   b46fa:	bd08      	pop	{r3, pc}
   b46fc:	0003021c 	.word	0x0003021c

000b4700 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b4700:	b508      	push	{r3, lr}
   b4702:	4b02      	ldr	r3, [pc, #8]	; (b470c <localtime_r+0xc>)
   b4704:	681b      	ldr	r3, [r3, #0]
   b4706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4708:	9301      	str	r3, [sp, #4]
   b470a:	bd08      	pop	{r3, pc}
   b470c:	0003021c 	.word	0x0003021c

000b4710 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4710:	2200      	movs	r2, #0
   b4712:	6840      	ldr	r0, [r0, #4]
   b4714:	4611      	mov	r1, r2
   b4716:	f7ff bf6b 	b.w	b45f0 <network_listening>

000b471a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b471a:	2200      	movs	r2, #0
   b471c:	6840      	ldr	r0, [r0, #4]
   b471e:	4611      	mov	r1, r2
   b4720:	f7ff bf76 	b.w	b4610 <network_get_listen_timeout>

000b4724 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4724:	6840      	ldr	r0, [r0, #4]
   b4726:	2200      	movs	r2, #0
   b4728:	f7ff bf6a 	b.w	b4600 <network_set_listen_timeout>

000b472c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b472c:	6840      	ldr	r0, [r0, #4]
   b472e:	2200      	movs	r2, #0
   b4730:	f081 0101 	eor.w	r1, r1, #1
   b4734:	f7ff bf54 	b.w	b45e0 <network_listen>

000b4738 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4738:	2300      	movs	r3, #0
   b473a:	6840      	ldr	r0, [r0, #4]
   b473c:	461a      	mov	r2, r3
   b473e:	4619      	mov	r1, r3
   b4740:	f7ff bf46 	b.w	b45d0 <network_off>

000b4744 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4744:	2300      	movs	r3, #0
   b4746:	6840      	ldr	r0, [r0, #4]
   b4748:	461a      	mov	r2, r3
   b474a:	4619      	mov	r1, r3
   b474c:	f7ff bf38 	b.w	b45c0 <network_on>

000b4750 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4750:	2200      	movs	r2, #0
   b4752:	6840      	ldr	r0, [r0, #4]
   b4754:	4611      	mov	r1, r2
   b4756:	f7ff bf2b 	b.w	b45b0 <network_ready>

000b475a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b475a:	2200      	movs	r2, #0
   b475c:	6840      	ldr	r0, [r0, #4]
   b475e:	4611      	mov	r1, r2
   b4760:	f7ff bf16 	b.w	b4590 <network_connecting>

000b4764 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4764:	6840      	ldr	r0, [r0, #4]
   b4766:	2200      	movs	r2, #0
   b4768:	2102      	movs	r1, #2
   b476a:	f7ff bf19 	b.w	b45a0 <network_disconnect>

000b476e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b476e:	2300      	movs	r3, #0
   b4770:	6840      	ldr	r0, [r0, #4]
   b4772:	461a      	mov	r2, r3
   b4774:	f7ff bf04 	b.w	b4580 <network_connect>

000b4778 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4778:	4b02      	ldr	r3, [pc, #8]	; (b4784 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b477a:	2203      	movs	r2, #3
   b477c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b477e:	4a02      	ldr	r2, [pc, #8]	; (b4788 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4780:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4782:	4770      	bx	lr
   b4784:	2003e680 	.word	0x2003e680
   b4788:	000b5ba8 	.word	0x000b5ba8

000b478c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b478c:	b510      	push	{r4, lr}
   b478e:	4604      	mov	r4, r0
   b4790:	4608      	mov	r0, r1
{
    _spi = spi;
   b4792:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4794:	f7ff fe70 	bl	b4478 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4798:	2300      	movs	r3, #0
   b479a:	6063      	str	r3, [r4, #4]
}
   b479c:	4620      	mov	r0, r4
   b479e:	bd10      	pop	{r4, pc}

000b47a0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b47a0:	4b05      	ldr	r3, [pc, #20]	; (b47b8 <_GLOBAL__sub_I_System+0x18>)
   b47a2:	2202      	movs	r2, #2
   b47a4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b47a6:	4b05      	ldr	r3, [pc, #20]	; (b47bc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b47a8:	4a05      	ldr	r2, [pc, #20]	; (b47c0 <_GLOBAL__sub_I_System+0x20>)
   b47aa:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b47ac:	2000      	movs	r0, #0
   b47ae:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b47b2:	f7ff bea9 	b.w	b4508 <set_system_mode>
   b47b6:	bf00      	nop
   b47b8:	2003e694 	.word	0x2003e694
   b47bc:	2003e688 	.word	0x2003e688
   b47c0:	ffff0000 	.word	0xffff0000

000b47c4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b47c4:	b510      	push	{r4, lr}
   b47c6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b47c8:	f001 f945 	bl	b5a56 <strlen>
   b47cc:	3801      	subs	r0, #1
   b47ce:	1823      	adds	r3, r4, r0
   b47d0:	4620      	mov	r0, r4
	while(i<j){
   b47d2:	4283      	cmp	r3, r0
   b47d4:	d906      	bls.n	b47e4 <_Z11str_reversePc+0x20>
		c = *i;
   b47d6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b47d8:	7819      	ldrb	r1, [r3, #0]
   b47da:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b47de:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b47e2:	e7f6      	b.n	b47d2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b47e4:	bd10      	pop	{r4, pc}

000b47e6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b47e6:	b570      	push	{r4, r5, r6, lr}
   b47e8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b47ea:	1e91      	subs	r1, r2, #2
   b47ec:	2922      	cmp	r1, #34	; 0x22
   b47ee:	d81d      	bhi.n	b482c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b47f0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b47f2:	b930      	cbnz	r0, b4802 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b47f4:	4423      	add	r3, r4
            *ptr++ = '0';
   b47f6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b47f8:	429d      	cmp	r5, r3
   b47fa:	d210      	bcs.n	b481e <ultoa+0x38>
            *ptr++ = '0';
   b47fc:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b4800:	e7fa      	b.n	b47f8 <ultoa+0x12>
            result.quot = a/radix;
   b4802:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b4806:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b480a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b480c:	2809      	cmp	r0, #9
                *ptr += '0';
   b480e:	bf94      	ite	ls
   b4810:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b4812:	3157      	addhi	r1, #87	; 0x57
   b4814:	b2c9      	uxtb	r1, r1
   b4816:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b481a:	4630      	mov	r0, r6
	while(a){
   b481c:	e7e9      	b.n	b47f2 <ultoa+0xc>

	*ptr = '\0';
   b481e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b4820:	4620      	mov	r0, r4
	*ptr = '\0';
   b4822:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b4824:	f7ff ffce 	bl	b47c4 <_Z11str_reversePc>
	return buffer;
   b4828:	4620      	mov	r0, r4
}
   b482a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b482c:	2000      	movs	r0, #0
   b482e:	e7fc      	b.n	b482a <ultoa+0x44>

000b4830 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b4830:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b4832:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b4834:	460c      	mov	r4, r1
   b4836:	4615      	mov	r5, r2
	if(a<0){
   b4838:	da0e      	bge.n	b4858 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b483a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b483e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b4842:	bf14      	ite	ne
   b4844:	4258      	negne	r0, r3
   b4846:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b4848:	2301      	movs	r3, #1
		*buffer = '-';
   b484a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b484c:	462a      	mov	r2, r5
   b484e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b4850:	f7ff ffc9 	bl	b47e6 <ultoa>
	}
	return buffer;
}
   b4854:	4620      	mov	r0, r4
   b4856:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b4858:	2301      	movs	r3, #1
   b485a:	e7f9      	b.n	b4850 <itoa+0x20>

000b485c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b485c:	b510      	push	{r4, lr}
   b485e:	4604      	mov	r4, r0
{
	free(buffer);
   b4860:	6800      	ldr	r0, [r0, #0]
   b4862:	f7ff ff1d 	bl	b46a0 <free>
}
   b4866:	4620      	mov	r0, r4
   b4868:	bd10      	pop	{r4, pc}

000b486a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b486a:	b510      	push	{r4, lr}
   b486c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b486e:	6800      	ldr	r0, [r0, #0]
   b4870:	b108      	cbz	r0, b4876 <_ZN6String10invalidateEv+0xc>
   b4872:	f7ff ff15 	bl	b46a0 <free>
	buffer = NULL;
   b4876:	2300      	movs	r3, #0
	capacity = len = 0;
   b4878:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b487c:	6023      	str	r3, [r4, #0]
}
   b487e:	bd10      	pop	{r4, pc}

000b4880 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4880:	b538      	push	{r3, r4, r5, lr}
   b4882:	4604      	mov	r4, r0
   b4884:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4886:	6800      	ldr	r0, [r0, #0]
   b4888:	3101      	adds	r1, #1
   b488a:	f7ff ff11 	bl	b46b0 <realloc>
	if (newbuffer) {
   b488e:	b110      	cbz	r0, b4896 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b4890:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4894:	2001      	movs	r0, #1
	}
	return 0;
}
   b4896:	bd38      	pop	{r3, r4, r5, pc}

000b4898 <_ZN6String7reserveEj>:
{
   b4898:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b489a:	6803      	ldr	r3, [r0, #0]
{
   b489c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b489e:	b123      	cbz	r3, b48aa <_ZN6String7reserveEj+0x12>
   b48a0:	6843      	ldr	r3, [r0, #4]
   b48a2:	428b      	cmp	r3, r1
   b48a4:	d301      	bcc.n	b48aa <_ZN6String7reserveEj+0x12>
   b48a6:	2001      	movs	r0, #1
}
   b48a8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b48aa:	4620      	mov	r0, r4
   b48ac:	f7ff ffe8 	bl	b4880 <_ZN6String12changeBufferEj>
   b48b0:	2800      	cmp	r0, #0
   b48b2:	d0f9      	beq.n	b48a8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b48b4:	68a3      	ldr	r3, [r4, #8]
   b48b6:	2b00      	cmp	r3, #0
   b48b8:	d1f5      	bne.n	b48a6 <_ZN6String7reserveEj+0xe>
   b48ba:	6822      	ldr	r2, [r4, #0]
   b48bc:	7013      	strb	r3, [r2, #0]
   b48be:	e7f2      	b.n	b48a6 <_ZN6String7reserveEj+0xe>

000b48c0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b48c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b48c2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b48c4:	4611      	mov	r1, r2
   b48c6:	9201      	str	r2, [sp, #4]
{
   b48c8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b48ca:	f7ff ffe5 	bl	b4898 <_ZN6String7reserveEj>
   b48ce:	9a01      	ldr	r2, [sp, #4]
   b48d0:	b928      	cbnz	r0, b48de <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b48d2:	4620      	mov	r0, r4
   b48d4:	f7ff ffc9 	bl	b486a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b48d8:	4620      	mov	r0, r4
   b48da:	b003      	add	sp, #12
   b48dc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b48de:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b48e0:	4629      	mov	r1, r5
   b48e2:	6820      	ldr	r0, [r4, #0]
   b48e4:	f001 f84d 	bl	b5982 <memcpy>
	buffer[len] = 0;
   b48e8:	6822      	ldr	r2, [r4, #0]
   b48ea:	68a3      	ldr	r3, [r4, #8]
   b48ec:	2100      	movs	r1, #0
   b48ee:	54d1      	strb	r1, [r2, r3]
	return *this;
   b48f0:	e7f2      	b.n	b48d8 <_ZN6String4copyEPKcj+0x18>

000b48f2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b48f2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b48f4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b48f6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b48fa:	4604      	mov	r4, r0
	len = 0;
   b48fc:	6083      	str	r3, [r0, #8]
	flags = 0;
   b48fe:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b4900:	b141      	cbz	r1, b4914 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b4902:	4608      	mov	r0, r1
   b4904:	9101      	str	r1, [sp, #4]
   b4906:	f001 f8a6 	bl	b5a56 <strlen>
   b490a:	9901      	ldr	r1, [sp, #4]
   b490c:	4602      	mov	r2, r0
   b490e:	4620      	mov	r0, r4
   b4910:	f7ff ffd6 	bl	b48c0 <_ZN6String4copyEPKcj>
}
   b4914:	4620      	mov	r0, r4
   b4916:	b002      	add	sp, #8
   b4918:	bd10      	pop	{r4, pc}

000b491a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b491a:	b513      	push	{r0, r1, r4, lr}
   b491c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b491e:	b159      	cbz	r1, b4938 <_ZN6StringaSEPKc+0x1e>
   b4920:	4608      	mov	r0, r1
   b4922:	9101      	str	r1, [sp, #4]
   b4924:	f001 f897 	bl	b5a56 <strlen>
   b4928:	9901      	ldr	r1, [sp, #4]
   b492a:	4602      	mov	r2, r0
   b492c:	4620      	mov	r0, r4
   b492e:	f7ff ffc7 	bl	b48c0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b4932:	4620      	mov	r0, r4
   b4934:	b002      	add	sp, #8
   b4936:	bd10      	pop	{r4, pc}
	else invalidate();
   b4938:	f7ff ff97 	bl	b486a <_ZN6String10invalidateEv>
   b493c:	e7f9      	b.n	b4932 <_ZN6StringaSEPKc+0x18>

000b493e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b493e:	b510      	push	{r4, lr}
   b4940:	4604      	mov	r4, r0
   b4942:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b4944:	2300      	movs	r3, #0
	capacity = 0;
   b4946:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b494a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b494c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b494e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b4950:	a901      	add	r1, sp, #4
   b4952:	f7ff ff6d 	bl	b4830 <itoa>
	*this = buf;
   b4956:	a901      	add	r1, sp, #4
   b4958:	4620      	mov	r0, r4
   b495a:	f7ff ffde 	bl	b491a <_ZN6StringaSEPKc>
}
   b495e:	4620      	mov	r0, r4
   b4960:	b00a      	add	sp, #40	; 0x28
   b4962:	bd10      	pop	{r4, pc}

000b4964 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b4964:	b570      	push	{r4, r5, r6, lr}
   b4966:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b4968:	460e      	mov	r6, r1
   b496a:	b909      	cbnz	r1, b4970 <_ZN6String6concatEPKcj+0xc>
   b496c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b496e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b4970:	b16a      	cbz	r2, b498e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b4972:	6884      	ldr	r4, [r0, #8]
   b4974:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b4976:	4621      	mov	r1, r4
   b4978:	f7ff ff8e 	bl	b4898 <_ZN6String7reserveEj>
   b497c:	2800      	cmp	r0, #0
   b497e:	d0f5      	beq.n	b496c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b4980:	6828      	ldr	r0, [r5, #0]
   b4982:	68ab      	ldr	r3, [r5, #8]
   b4984:	4631      	mov	r1, r6
   b4986:	4418      	add	r0, r3
   b4988:	f001 f840 	bl	b5a0c <strcpy>
	len = newlen;
   b498c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b498e:	2001      	movs	r0, #1
   b4990:	e7ed      	b.n	b496e <_ZN6String6concatEPKcj+0xa>

000b4992 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b4992:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b4994:	688a      	ldr	r2, [r1, #8]
   b4996:	6809      	ldr	r1, [r1, #0]
{
   b4998:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b499a:	f7ff ffe3 	bl	b4964 <_ZN6String6concatEPKcj>
   b499e:	b910      	cbnz	r0, b49a6 <_ZplRK15StringSumHelperRK6String+0x14>
   b49a0:	4620      	mov	r0, r4
   b49a2:	f7ff ff62 	bl	b486a <_ZN6String10invalidateEv>
	return a;
}
   b49a6:	4620      	mov	r0, r4
   b49a8:	bd10      	pop	{r4, pc}

000b49aa <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b49aa:	b513      	push	{r0, r1, r4, lr}
   b49ac:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b49ae:	b929      	cbnz	r1, b49bc <_ZplRK15StringSumHelperPKc+0x12>
   b49b0:	4620      	mov	r0, r4
   b49b2:	f7ff ff5a 	bl	b486a <_ZN6String10invalidateEv>
	return a;
}
   b49b6:	4620      	mov	r0, r4
   b49b8:	b002      	add	sp, #8
   b49ba:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b49bc:	4608      	mov	r0, r1
   b49be:	9101      	str	r1, [sp, #4]
   b49c0:	f001 f849 	bl	b5a56 <strlen>
   b49c4:	9901      	ldr	r1, [sp, #4]
   b49c6:	4602      	mov	r2, r0
   b49c8:	4620      	mov	r0, r4
   b49ca:	f7ff ffcb 	bl	b4964 <_ZN6String6concatEPKcj>
   b49ce:	2800      	cmp	r0, #0
   b49d0:	d0ee      	beq.n	b49b0 <_ZplRK15StringSumHelperPKc+0x6>
   b49d2:	e7f0      	b.n	b49b6 <_ZplRK15StringSumHelperPKc+0xc>

000b49d4 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b49d4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b49d6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b49d8:	4604      	mov	r4, r0
      if (_M_manager)
   b49da:	b113      	cbz	r3, b49e2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b49dc:	2203      	movs	r2, #3
   b49de:	4601      	mov	r1, r0
   b49e0:	4798      	blx	r3
    }
   b49e2:	4620      	mov	r0, r4
   b49e4:	bd10      	pop	{r4, pc}

000b49e6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b49e6:	b513      	push	{r0, r1, r4, lr}
   b49e8:	460b      	mov	r3, r1
   b49ea:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b49ec:	e9d0 0100 	ldrd	r0, r1, [r0]
   b49f0:	466c      	mov	r4, sp
   b49f2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b49f6:	e893 0003 	ldmia.w	r3, {r0, r1}
   b49fa:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b49fe:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4a02:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4a06:	b002      	add	sp, #8
   b4a08:	bd10      	pop	{r4, pc}
	...

000b4a0c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4a0c:	4802      	ldr	r0, [pc, #8]	; (b4a18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4a0e:	2300      	movs	r3, #0
   b4a10:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4a12:	f7ff bca9 	b.w	b4368 <os_mutex_recursive_create>
   b4a16:	bf00      	nop
   b4a18:	2003e698 	.word	0x2003e698

000b4a1c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4a1e:	4606      	mov	r6, r0
   b4a20:	460d      	mov	r5, r1
  size_t n = 0;
   b4a22:	188f      	adds	r7, r1, r2
   b4a24:	2400      	movs	r4, #0
  while (size--) {
   b4a26:	42bd      	cmp	r5, r7
   b4a28:	d00c      	beq.n	b4a44 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4a2a:	6833      	ldr	r3, [r6, #0]
   b4a2c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4a30:	689b      	ldr	r3, [r3, #8]
   b4a32:	4630      	mov	r0, r6
   b4a34:	4798      	blx	r3
     if (chunk>=0)
   b4a36:	1e03      	subs	r3, r0, #0
   b4a38:	db01      	blt.n	b4a3e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4a3a:	441c      	add	r4, r3
  while (size--) {
   b4a3c:	e7f3      	b.n	b4a26 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4a3e:	2c00      	cmp	r4, #0
   b4a40:	bf08      	it	eq
   b4a42:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4a44:	4620      	mov	r0, r4
   b4a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4a48 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4a48:	b513      	push	{r0, r1, r4, lr}
   b4a4a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4a4c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4a4e:	b159      	cbz	r1, b4a68 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4a50:	9101      	str	r1, [sp, #4]
   b4a52:	f001 f800 	bl	b5a56 <strlen>
   b4a56:	6823      	ldr	r3, [r4, #0]
   b4a58:	9901      	ldr	r1, [sp, #4]
   b4a5a:	68db      	ldr	r3, [r3, #12]
   b4a5c:	4602      	mov	r2, r0
   b4a5e:	4620      	mov	r0, r4
    }
   b4a60:	b002      	add	sp, #8
   b4a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4a66:	4718      	bx	r3
    }
   b4a68:	b002      	add	sp, #8
   b4a6a:	bd10      	pop	{r4, pc}

000b4a6c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4a6c:	6803      	ldr	r3, [r0, #0]
   b4a6e:	689b      	ldr	r3, [r3, #8]
   b4a70:	4718      	bx	r3

000b4a72 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4a72:	b530      	push	{r4, r5, lr}
   b4a74:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4a76:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4a78:	2a01      	cmp	r2, #1
  *str = '\0';
   b4a7a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4a7e:	bf98      	it	ls
   b4a80:	220a      	movls	r2, #10
   b4a82:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4a84:	460d      	mov	r5, r1
   b4a86:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4a8a:	fb01 5312 	mls	r3, r1, r2, r5
   b4a8e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4a92:	2b09      	cmp	r3, #9
   b4a94:	bf94      	ite	ls
   b4a96:	3330      	addls	r3, #48	; 0x30
   b4a98:	3337      	addhi	r3, #55	; 0x37
   b4a9a:	b2db      	uxtb	r3, r3
  } while(n);
   b4a9c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4a9e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4aa2:	d9ef      	bls.n	b4a84 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4aa4:	4621      	mov	r1, r4
   b4aa6:	f7ff ffcf 	bl	b4a48 <_ZN5Print5writeEPKc>
}
   b4aaa:	b00b      	add	sp, #44	; 0x2c
   b4aac:	bd30      	pop	{r4, r5, pc}
	...

000b4ab0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4ab0:	4b01      	ldr	r3, [pc, #4]	; (b4ab8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4ab2:	4a02      	ldr	r2, [pc, #8]	; (b4abc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4ab4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4ab6:	4770      	bx	lr
   b4ab8:	2003e69c 	.word	0x2003e69c
   b4abc:	000b5bdc 	.word	0x000b5bdc

000b4ac0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b4ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b4ac4:	4a15      	ldr	r2, [pc, #84]	; (b4b1c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b4ac6:	f8df 8060 	ldr.w	r8, [pc, #96]	; b4b28 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b4aca:	e9d2 6300 	ldrd	r6, r3, [r2]
   b4ace:	1980      	adds	r0, r0, r6
   b4ad0:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b4ad4:	4b12      	ldr	r3, [pc, #72]	; (b4b20 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b4ad6:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b4ada:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b4ade:	1986      	adds	r6, r0, r6
   b4ae0:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b4ae4:	42bb      	cmp	r3, r7
   b4ae6:	bf08      	it	eq
   b4ae8:	42b2      	cmpeq	r2, r6
{
   b4aea:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b4aec:	d013      	beq.n	b4b16 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b4aee:	a903      	add	r1, sp, #12
   b4af0:	4668      	mov	r0, sp
   b4af2:	e9cd 6700 	strd	r6, r7, [sp]
   b4af6:	f7ff fe03 	bl	b4700 <localtime_r>
	calendar_time.tm_year += 1900;
   b4afa:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b4afc:	4d09      	ldr	r5, [pc, #36]	; (b4b24 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b4afe:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b4b02:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b4b04:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b4b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b4b0e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b4b12:	6823      	ldr	r3, [r4, #0]
   b4b14:	602b      	str	r3, [r5, #0]
    }
}
   b4b16:	b00c      	add	sp, #48	; 0x30
   b4b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4b1c:	2003e6d0 	.word	0x2003e6d0
   b4b20:	2003e6c8 	.word	0x2003e6c8
   b4b24:	2003e6a4 	.word	0x2003e6a4
   b4b28:	2003e6d8 	.word	0x2003e6d8

000b4b2c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b4b2c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4b2e:	2000      	movs	r0, #0
   b4b30:	f7ff fd9e 	bl	b4670 <spark_sync_time_pending>
   b4b34:	b128      	cbz	r0, b4b42 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4b36:	f7ff fd8b 	bl	b4650 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4b3a:	f080 0001 	eor.w	r0, r0, #1
   b4b3e:	b2c0      	uxtb	r0, r0
    }
   b4b40:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4b42:	2001      	movs	r0, #1
   b4b44:	e7fc      	b.n	b4b40 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b4b46 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b4b46:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b4b48:	2000      	movs	r0, #0
   b4b4a:	f7ff fbfd 	bl	b4348 <hal_rtc_time_is_valid>
    if (rtcstate)
   b4b4e:	4604      	mov	r4, r0
   b4b50:	b9a0      	cbnz	r0, b4b7c <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b4b52:	f7ff fcd1 	bl	b44f8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b4b56:	2801      	cmp	r0, #1
   b4b58:	d110      	bne.n	b4b7c <_ZN9TimeClass7isValidEv+0x36>
   b4b5a:	4620      	mov	r0, r4
   b4b5c:	f7ff fcf4 	bl	b4548 <system_thread_get_state>
   b4b60:	b960      	cbnz	r0, b4b7c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b4b62:	f7ff ffe3 	bl	b4b2c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4b66:	b910      	cbnz	r0, b4b6e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b4b68:	f7ff fd6a 	bl	b4640 <spark_process>
        while (_while() && !_condition()) {
   b4b6c:	e7f9      	b.n	b4b62 <_ZN9TimeClass7isValidEv+0x1c>
   b4b6e:	f7ff ffdd 	bl	b4b2c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b4b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b4b76:	2000      	movs	r0, #0
   b4b78:	f7ff bbe6 	b.w	b4348 <hal_rtc_time_is_valid>
}
   b4b7c:	4620      	mov	r0, r4
   b4b7e:	bd10      	pop	{r4, pc}

000b4b80 <_ZN9TimeClass3nowEv>:
{
   b4b80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b4b82:	f7ff ffe0 	bl	b4b46 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b4b86:	2210      	movs	r2, #16
   b4b88:	2100      	movs	r1, #0
   b4b8a:	4668      	mov	r0, sp
   b4b8c:	f000 ff07 	bl	b599e <memset>
    hal_rtc_get_time(&tv, nullptr);
   b4b90:	2100      	movs	r1, #0
   b4b92:	4668      	mov	r0, sp
   b4b94:	f7ff fbe0 	bl	b4358 <hal_rtc_get_time>
}
   b4b98:	9800      	ldr	r0, [sp, #0]
   b4b9a:	b005      	add	sp, #20
   b4b9c:	f85d fb04 	ldr.w	pc, [sp], #4

000b4ba0 <_ZN9TimeClass6secondEv>:
{
   b4ba0:	b508      	push	{r3, lr}
	return second(now());
   b4ba2:	f7ff ffed 	bl	b4b80 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b4ba6:	17c1      	asrs	r1, r0, #31
   b4ba8:	f7ff ff8a 	bl	b4ac0 <_ZL22Refresh_UnixTime_Cachex>
}
   b4bac:	4b01      	ldr	r3, [pc, #4]	; (b4bb4 <_ZN9TimeClass6secondEv+0x14>)
   b4bae:	6818      	ldr	r0, [r3, #0]
   b4bb0:	bd08      	pop	{r3, pc}
   b4bb2:	bf00      	nop
   b4bb4:	2003e6a4 	.word	0x2003e6a4

000b4bb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4bb8:	4b02      	ldr	r3, [pc, #8]	; (b4bc4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4bba:	681a      	ldr	r2, [r3, #0]
   b4bbc:	4b02      	ldr	r3, [pc, #8]	; (b4bc8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4bbe:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4bc0:	4770      	bx	lr
   b4bc2:	bf00      	nop
   b4bc4:	2003e5e8 	.word	0x2003e5e8
   b4bc8:	2003e6a0 	.word	0x2003e6a0

000b4bcc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4bcc:	2100      	movs	r1, #0
   b4bce:	f7ff bca3 	b.w	b4518 <system_delay_ms>
	...

000b4bd4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b4bd4:	4b01      	ldr	r3, [pc, #4]	; (b4bdc <_GLOBAL__sub_I_RGB+0x8>)
   b4bd6:	2200      	movs	r2, #0
   b4bd8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4bda:	4770      	bx	lr
   b4bdc:	2003e6e0 	.word	0x2003e6e0

000b4be0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4be0:	4b01      	ldr	r3, [pc, #4]	; (b4be8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4be2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4be4:	4770      	bx	lr
   b4be6:	bf00      	nop
   b4be8:	2003e5ec 	.word	0x2003e5ec

000b4bec <serialEventRun>:
{
   b4bec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4bee:	4b0b      	ldr	r3, [pc, #44]	; (b4c1c <serialEventRun+0x30>)
   b4bf0:	b143      	cbz	r3, b4c04 <serialEventRun+0x18>
   b4bf2:	f000 fbfb 	bl	b53ec <_Z16_fetch_usbserialv>
   b4bf6:	6803      	ldr	r3, [r0, #0]
   b4bf8:	691b      	ldr	r3, [r3, #16]
   b4bfa:	4798      	blx	r3
   b4bfc:	2800      	cmp	r0, #0
   b4bfe:	dd01      	ble.n	b4c04 <serialEventRun+0x18>
        serialEvent();
   b4c00:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4c04:	4b06      	ldr	r3, [pc, #24]	; (b4c20 <serialEventRun+0x34>)
   b4c06:	b143      	cbz	r3, b4c1a <serialEventRun+0x2e>
   b4c08:	f000 fe4c 	bl	b58a4 <_Z22__fetch_global_Serial1v>
   b4c0c:	6803      	ldr	r3, [r0, #0]
   b4c0e:	691b      	ldr	r3, [r3, #16]
   b4c10:	4798      	blx	r3
   b4c12:	2800      	cmp	r0, #0
   b4c14:	dd01      	ble.n	b4c1a <serialEventRun+0x2e>
        serialEvent1();
   b4c16:	f3af 8000 	nop.w
}
   b4c1a:	bd08      	pop	{r3, pc}
	...

000b4c24 <_post_loop>:
{
   b4c24:	b508      	push	{r3, lr}
	serialEventRun();
   b4c26:	f7ff ffe1 	bl	b4bec <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4c2a:	f7ff fb85 	bl	b4338 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4c2e:	4b01      	ldr	r3, [pc, #4]	; (b4c34 <_post_loop+0x10>)
   b4c30:	6018      	str	r0, [r3, #0]
}
   b4c32:	bd08      	pop	{r3, pc}
   b4c34:	2003e744 	.word	0x2003e744

000b4c38 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4c38:	4805      	ldr	r0, [pc, #20]	; (b4c50 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4c3a:	4a06      	ldr	r2, [pc, #24]	; (b4c54 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4c3c:	4906      	ldr	r1, [pc, #24]	; (b4c58 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4c3e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4c40:	1a12      	subs	r2, r2, r0
   b4c42:	f000 fe9e 	bl	b5982 <memcpy>
    __backup_sram_signature = signature;
   b4c46:	4b05      	ldr	r3, [pc, #20]	; (b4c5c <_Z33system_initialize_user_backup_ramv+0x24>)
   b4c48:	4a05      	ldr	r2, [pc, #20]	; (b4c60 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4c4a:	601a      	str	r2, [r3, #0]
}
   b4c4c:	bd08      	pop	{r3, pc}
   b4c4e:	bf00      	nop
   b4c50:	2003f400 	.word	0x2003f400
   b4c54:	2003f404 	.word	0x2003f404
   b4c58:	000b5e14 	.word	0x000b5e14
   b4c5c:	2003f400 	.word	0x2003f400
   b4c60:	9a271c1e 	.word	0x9a271c1e

000b4c64 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4c64:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4c66:	2300      	movs	r3, #0
   b4c68:	9300      	str	r3, [sp, #0]
   b4c6a:	461a      	mov	r2, r3
   b4c6c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4c70:	f7ff fc7c 	bl	b456c <system_ctrl_set_result>
}
   b4c74:	b003      	add	sp, #12
   b4c76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4c7c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4c7c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4c7e:	8843      	ldrh	r3, [r0, #2]
   b4c80:	2b0a      	cmp	r3, #10
   b4c82:	d008      	beq.n	b4c96 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4c84:	2b50      	cmp	r3, #80	; 0x50
   b4c86:	d10b      	bne.n	b4ca0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4c88:	4b09      	ldr	r3, [pc, #36]	; (b4cb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4c8a:	681b      	ldr	r3, [r3, #0]
   b4c8c:	b14b      	cbz	r3, b4ca2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4c8e:	b003      	add	sp, #12
   b4c90:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4c94:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4c96:	f7ff ffe5 	bl	b4c64 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4c9a:	b003      	add	sp, #12
   b4c9c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4ca0:	2300      	movs	r3, #0
   b4ca2:	9300      	str	r3, [sp, #0]
   b4ca4:	461a      	mov	r2, r3
   b4ca6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4caa:	f7ff fc5f 	bl	b456c <system_ctrl_set_result>
}
   b4cae:	e7f4      	b.n	b4c9a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4cb0:	2003e6f4 	.word	0x2003e6f4

000b4cb4 <module_user_init_hook>:
{
   b4cb4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4cb6:	4812      	ldr	r0, [pc, #72]	; (b4d00 <module_user_init_hook+0x4c>)
   b4cb8:	2100      	movs	r1, #0
   b4cba:	f7ff fd19 	bl	b46f0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4cbe:	4b11      	ldr	r3, [pc, #68]	; (b4d04 <module_user_init_hook+0x50>)
   b4cc0:	681a      	ldr	r2, [r3, #0]
   b4cc2:	4b11      	ldr	r3, [pc, #68]	; (b4d08 <module_user_init_hook+0x54>)
   b4cc4:	429a      	cmp	r2, r3
   b4cc6:	4b11      	ldr	r3, [pc, #68]	; (b4d0c <module_user_init_hook+0x58>)
   b4cc8:	bf0c      	ite	eq
   b4cca:	2201      	moveq	r2, #1
   b4ccc:	2200      	movne	r2, #0
   b4cce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4cd0:	d001      	beq.n	b4cd6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4cd2:	f7ff ffb1 	bl	b4c38 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4cd6:	f7ff fb27 	bl	b4328 <HAL_RNG_GetRandomNumber>
   b4cda:	4604      	mov	r4, r0
    srand(seed);
   b4cdc:	f000 fe68 	bl	b59b0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4ce0:	4b0b      	ldr	r3, [pc, #44]	; (b4d10 <module_user_init_hook+0x5c>)
   b4ce2:	b113      	cbz	r3, b4cea <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4ce4:	4620      	mov	r0, r4
   b4ce6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4cea:	2100      	movs	r1, #0
   b4cec:	4808      	ldr	r0, [pc, #32]	; (b4d10 <module_user_init_hook+0x5c>)
   b4cee:	f7ff fcc7 	bl	b4680 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4cf6:	4807      	ldr	r0, [pc, #28]	; (b4d14 <module_user_init_hook+0x60>)
   b4cf8:	2100      	movs	r1, #0
   b4cfa:	f7ff bc2d 	b.w	b4558 <system_ctrl_set_app_request_handler>
   b4cfe:	bf00      	nop
   b4d00:	000b4be1 	.word	0x000b4be1
   b4d04:	2003f400 	.word	0x2003f400
   b4d08:	9a271c1e 	.word	0x9a271c1e
   b4d0c:	2003e6f0 	.word	0x2003e6f0
   b4d10:	00000000 	.word	0x00000000
   b4d14:	000b4c7d 	.word	0x000b4c7d

000b4d18 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4d18:	4770      	bx	lr

000b4d1a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b4d1a:	2000      	movs	r0, #0
   b4d1c:	4770      	bx	lr

000b4d1e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4d1e:	b510      	push	{r4, lr}
   b4d20:	2110      	movs	r1, #16
   b4d22:	4604      	mov	r4, r0
   b4d24:	f7ff f9b9 	bl	b409a <_ZdlPvj>
   b4d28:	4620      	mov	r0, r4
   b4d2a:	bd10      	pop	{r4, pc}

000b4d2c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b4d2c:	b508      	push	{r3, lr}
      { delete this; }
   b4d2e:	f7ff fff6 	bl	b4d1e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b4d32:	bd08      	pop	{r3, pc}

000b4d34 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b4d34:	b530      	push	{r4, r5, lr}
        type_(type) {
   b4d36:	2200      	movs	r2, #0
   b4d38:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b4d3c:	6002      	str	r2, [r0, #0]
   b4d3e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4d40:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b4d42:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4d44:	680c      	ldr	r4, [r1, #0]
   b4d46:	8085      	strh	r5, [r0, #4]
   b4d48:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b4d4a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b4d4c:	bd30      	pop	{r4, r5, pc}

000b4d4e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b4d4e:	b510      	push	{r4, lr}
   b4d50:	4604      	mov	r4, r0
    free((void*)msg_);
   b4d52:	6800      	ldr	r0, [r0, #0]
   b4d54:	f7ff fca4 	bl	b46a0 <free>
}
   b4d58:	4620      	mov	r0, r4
   b4d5a:	bd10      	pop	{r4, pc}

000b4d5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4d5c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b4d5e:	68c4      	ldr	r4, [r0, #12]
   b4d60:	b1f4      	cbz	r4, b4da0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4d62:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b4d64:	2b02      	cmp	r3, #2
   b4d66:	d103      	bne.n	b4d70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b4d68:	f104 000c 	add.w	r0, r4, #12
   b4d6c:	f7ff ffef 	bl	b4d4e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b4d70:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b4d72:	b135      	cbz	r5, b4d82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b4d74:	4628      	mov	r0, r5
   b4d76:	f7ff fe2d 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
   b4d7a:	2110      	movs	r1, #16
   b4d7c:	4628      	mov	r0, r5
   b4d7e:	f7ff f98c 	bl	b409a <_ZdlPvj>
   b4d82:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b4d84:	b135      	cbz	r5, b4d94 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b4d86:	4628      	mov	r0, r5
   b4d88:	f7ff fe24 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
   b4d8c:	2110      	movs	r1, #16
   b4d8e:	4628      	mov	r0, r5
   b4d90:	f7ff f983 	bl	b409a <_ZdlPvj>
   b4d94:	4620      	mov	r0, r4
   b4d96:	2114      	movs	r1, #20
   b4d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4d9c:	f7ff b97d 	b.w	b409a <_ZdlPvj>
   b4da0:	bd38      	pop	{r3, r4, r5, pc}

000b4da2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4da2:	680b      	ldr	r3, [r1, #0]
   b4da4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4da6:	684b      	ldr	r3, [r1, #4]
   b4da8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4daa:	b113      	cbz	r3, b4db2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b4dac:	685a      	ldr	r2, [r3, #4]
   b4dae:	3201      	adds	r2, #1
   b4db0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4db2:	4770      	bx	lr

000b4db4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b4db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4db6:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4db8:	4668      	mov	r0, sp
   b4dba:	460d      	mov	r5, r1
   b4dbc:	f7ff fff1 	bl	b4da2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4dc0:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4dc2:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4dc4:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b4dc6:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b4dc8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4dca:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b4dcc:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b4dce:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b4dd0:	f7ff f98a 	bl	b40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b4dd4:	b135      	cbz	r5, b4de4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b4dd6:	1d28      	adds	r0, r5, #4
   b4dd8:	f7ff f986 	bl	b40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4ddc:	2108      	movs	r1, #8
   b4dde:	4628      	mov	r0, r5
   b4de0:	f7ff f95b 	bl	b409a <_ZdlPvj>
        return p;
    }
   b4de4:	4620      	mov	r0, r4
   b4de6:	b003      	add	sp, #12
   b4de8:	bd30      	pop	{r4, r5, pc}

000b4dea <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b4dea:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4dec:	b510      	push	{r4, lr}
      if (_M_empty())
   b4dee:	b90a      	cbnz	r2, b4df4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b4df0:	f000 fdbe 	bl	b5970 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b4df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4df8:	68c3      	ldr	r3, [r0, #12]
   b4dfa:	4718      	bx	r3

000b4dfc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4dfc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4dfe:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4e00:	f100 0110 	add.w	r1, r0, #16
   b4e04:	f7ff fff1 	bl	b4dea <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b4e08:	bd08      	pop	{r3, pc}

000b4e0a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b4e0a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4e0c:	b510      	push	{r4, lr}
      if (_M_empty())
   b4e0e:	b90a      	cbnz	r2, b4e14 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b4e10:	f000 fdae 	bl	b5970 <_ZSt25__throw_bad_function_callv>
    }
   b4e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4e18:	68c3      	ldr	r3, [r0, #12]
   b4e1a:	4718      	bx	r3

000b4e1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4e1c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4e1e:	6800      	ldr	r0, [r0, #0]
   b4e20:	f100 0110 	add.w	r1, r0, #16
   b4e24:	f7ff fff1 	bl	b4e0a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b4e28:	bd08      	pop	{r3, pc}
	...

000b4e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b4e2c:	b538      	push	{r3, r4, r5, lr}
   b4e2e:	2300      	movs	r3, #0
   b4e30:	4604      	mov	r4, r0
   b4e32:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4e34:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b4e36:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4e38:	f7ff f92b 	bl	b4092 <_Znwj>
   b4e3c:	b128      	cbz	r0, b4e4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b4e3e:	2301      	movs	r3, #1
   b4e40:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b4e44:	4b02      	ldr	r3, [pc, #8]	; (b4e50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b4e46:	6003      	str	r3, [r0, #0]
   b4e48:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4e4a:	6020      	str	r0, [r4, #0]
	}
   b4e4c:	4620      	mov	r0, r4
   b4e4e:	bd38      	pop	{r3, r4, r5, pc}
   b4e50:	000b5c04 	.word	0x000b5c04

000b4e54 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b4e54:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4e56:	2300      	movs	r3, #0
   b4e58:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4e5a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4e5c:	4604      	mov	r4, r0
   b4e5e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4e60:	b12b      	cbz	r3, b4e6e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4e62:	2202      	movs	r2, #2
   b4e64:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4e66:	68eb      	ldr	r3, [r5, #12]
   b4e68:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4e6a:	68ab      	ldr	r3, [r5, #8]
   b4e6c:	60a3      	str	r3, [r4, #8]
    }
   b4e6e:	4620      	mov	r0, r4
   b4e70:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4e74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b4e74:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4e76:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4e78:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b4e7a:	4668      	mov	r0, sp
   b4e7c:	f7ff ff5a 	bl	b4d34 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4e80:	f04f 0302 	mov.w	r3, #2
   b4e84:	e8d4 2f4f 	ldrexb	r2, [r4]
   b4e88:	2a00      	cmp	r2, #0
   b4e8a:	d103      	bne.n	b4e94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b4e8c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b4e90:	2900      	cmp	r1, #0
   b4e92:	d1f7      	bne.n	b4e84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b4e94:	d125      	bne.n	b4ee2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b4e96:	f104 050c 	add.w	r5, r4, #12
   b4e9a:	4669      	mov	r1, sp
   b4e9c:	4628      	mov	r0, r5
   b4e9e:	f7ff ff49 	bl	b4d34 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b4ea2:	f3bf 8f5b 	dmb	ish
   b4ea6:	2301      	movs	r3, #1
   b4ea8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4eaa:	2000      	movs	r0, #0
   b4eac:	f104 0308 	add.w	r3, r4, #8
   b4eb0:	f3bf 8f5b 	dmb	ish
   b4eb4:	e853 6f00 	ldrex	r6, [r3]
   b4eb8:	e843 0200 	strex	r2, r0, [r3]
   b4ebc:	2a00      	cmp	r2, #0
   b4ebe:	d1f9      	bne.n	b4eb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b4ec0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4ec4:	b16e      	cbz	r6, b4ee2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b4ec6:	f7ff fb2f 	bl	b4528 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4eca:	b178      	cbz	r0, b4eec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4ecc:	4629      	mov	r1, r5
   b4ece:	4630      	mov	r0, r6
   b4ed0:	f7ff ff8b 	bl	b4dea <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b4ed4:	4630      	mov	r0, r6
   b4ed6:	f7ff fd7d 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4eda:	2110      	movs	r1, #16
   b4edc:	4630      	mov	r0, r6
   b4ede:	f7ff f8dc 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b4ee2:	4668      	mov	r0, sp
   b4ee4:	f7ff ff33 	bl	b4d4e <_ZN8particle5ErrorD1Ev>
    }
   b4ee8:	b009      	add	sp, #36	; 0x24
   b4eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4eec:	4631      	mov	r1, r6
   b4eee:	a802      	add	r0, sp, #8
   b4ef0:	f7ff ffb0 	bl	b4e54 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4ef4:	68e0      	ldr	r0, [r4, #12]
   b4ef6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4efa:	b108      	cbz	r0, b4f00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b4efc:	f000 fd8e 	bl	b5a1c <strdup>
        type_(type) {
   b4f00:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4f02:	2010      	movs	r0, #16
   b4f04:	f8ad 501c 	strh.w	r5, [sp, #28]
   b4f08:	f7ff f8c3 	bl	b4092 <_Znwj>
   b4f0c:	4605      	mov	r5, r0
   b4f0e:	b1e8      	cbz	r0, b4f4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b4f10:	2700      	movs	r7, #0
   b4f12:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4f14:	2018      	movs	r0, #24
   b4f16:	f7ff f8bc 	bl	b4092 <_Znwj>
   b4f1a:	4604      	mov	r4, r0
   b4f1c:	b188      	cbz	r0, b4f42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b4f1e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b4f20:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4f22:	a802      	add	r0, sp, #8
   b4f24:	f7ff fd5f 	bl	b49e6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4f28:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b4f2a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4f2c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4f2e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4f30:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4f32:	a906      	add	r1, sp, #24
   b4f34:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4f36:	60e3      	str	r3, [r4, #12]
   b4f38:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b4f3c:	9205      	str	r2, [sp, #20]
   b4f3e:	f7ff fef9 	bl	b4d34 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b4f42:	4b08      	ldr	r3, [pc, #32]	; (b4f64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b4f44:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4f46:	4b08      	ldr	r3, [pc, #32]	; (b4f68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4f48:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4f4a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b4f4c:	a806      	add	r0, sp, #24
   b4f4e:	f7ff fefe 	bl	b4d4e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4f52:	a802      	add	r0, sp, #8
   b4f54:	f7ff fd3e 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4f58:	2200      	movs	r2, #0
   b4f5a:	4629      	mov	r1, r5
   b4f5c:	4803      	ldr	r0, [pc, #12]	; (b4f6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b4f5e:	f7ff faeb 	bl	b4538 <application_thread_invoke>
   b4f62:	e7b7      	b.n	b4ed4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b4f64:	000b4dfd 	.word	0x000b4dfd
   b4f68:	000b5081 	.word	0x000b5081
   b4f6c:	000b54dd 	.word	0x000b54dd

000b4f70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b4f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4f74:	b08b      	sub	sp, #44	; 0x2c
   b4f76:	4605      	mov	r5, r0
   b4f78:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4f7c:	460f      	mov	r7, r1
   b4f7e:	4690      	mov	r8, r2
   b4f80:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4f82:	f7ff fb65 	bl	b4650 <spark_cloud_flag_connected>
   b4f86:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b4f88:	4683      	mov	fp, r0
   b4f8a:	bb38      	cbnz	r0, b4fdc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b4f8c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b4f90:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4f92:	a905      	add	r1, sp, #20
   b4f94:	4630      	mov	r0, r6
   b4f96:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4f9a:	f7ff fecb 	bl	b4d34 <_ZN8particle5ErrorC1EOS0_>
   b4f9e:	2014      	movs	r0, #20
   b4fa0:	f7ff f877 	bl	b4092 <_Znwj>
   b4fa4:	4604      	mov	r4, r0
   b4fa6:	b148      	cbz	r0, b4fbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b4fa8:	2302      	movs	r3, #2
   b4faa:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4fac:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4fae:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4fb2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b4fb4:	4631      	mov	r1, r6
   b4fb6:	300c      	adds	r0, #12
   b4fb8:	f7ff febc 	bl	b4d34 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4fbc:	4628      	mov	r0, r5
	: __shared_count(__p)
   b4fbe:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4fc0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b4fc4:	f7ff ff32 	bl	b4e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4fc8:	4630      	mov	r0, r6
   b4fca:	f7ff fec0 	bl	b4d4e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b4fce:	a805      	add	r0, sp, #20
   b4fd0:	f7ff febd 	bl	b4d4e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b4fd4:	4628      	mov	r0, r5
   b4fd6:	b00b      	add	sp, #44	; 0x2c
   b4fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b4fdc:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b4fde:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b4fe0:	2014      	movs	r0, #20
   b4fe2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b4fe6:	9307      	str	r3, [sp, #28]
   b4fe8:	f7ff f853 	bl	b4092 <_Znwj>
   b4fec:	4601      	mov	r1, r0
   b4fee:	b118      	cbz	r0, b4ff8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4ff0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b4ff4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4ff6:	7044      	strb	r4, [r0, #1]
   b4ff8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4ffa:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b4ffc:	f7ff ff16 	bl	b4e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5000:	4b1e      	ldr	r3, [pc, #120]	; (b507c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b5002:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b5004:	2008      	movs	r0, #8
   b5006:	f7ff f844 	bl	b4092 <_Znwj>
   b500a:	4604      	mov	r4, r0
   b500c:	b110      	cbz	r0, b5014 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b500e:	a903      	add	r1, sp, #12
   b5010:	f7ff fec7 	bl	b4da2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5014:	9600      	str	r6, [sp, #0]
   b5016:	fa5f f38a 	uxtb.w	r3, sl
   b501a:	464a      	mov	r2, r9
   b501c:	4641      	mov	r1, r8
   b501e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b5020:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5022:	f7ff fb1d 	bl	b4660 <spark_send_event>
   b5026:	b9b8      	cbnz	r0, b5058 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5028:	9b03      	ldr	r3, [sp, #12]
   b502a:	785b      	ldrb	r3, [r3, #1]
   b502c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b5030:	b993      	cbnz	r3, b5058 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b5032:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b5036:	a905      	add	r1, sp, #20
   b5038:	a803      	add	r0, sp, #12
   b503a:	9205      	str	r2, [sp, #20]
   b503c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5040:	f7ff ff18 	bl	b4e74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5044:	a805      	add	r0, sp, #20
   b5046:	f7ff fe82 	bl	b4d4e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b504a:	a805      	add	r0, sp, #20
   b504c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b504e:	f7ff feb1 	bl	b4db4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b5052:	a806      	add	r0, sp, #24
   b5054:	f7ff f848 	bl	b40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5058:	a903      	add	r1, sp, #12
   b505a:	a805      	add	r0, sp, #20
   b505c:	f7ff fea1 	bl	b4da2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5060:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5062:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5064:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b5066:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5068:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b506a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b506c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b506e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5070:	f7ff f83a 	bl	b40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5074:	a804      	add	r0, sp, #16
   b5076:	f7ff f837 	bl	b40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b507a:	e7ab      	b.n	b4fd4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b507c:	000b50fd 	.word	0x000b50fd

000b5080 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5080:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5084:	4605      	mov	r5, r0
	switch (__op)
   b5086:	d103      	bne.n	b5090 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5088:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b508a:	6003      	str	r3, [r0, #0]
      }
   b508c:	2000      	movs	r0, #0
   b508e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5090:	2a02      	cmp	r2, #2
   b5092:	d010      	beq.n	b50b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5094:	2a03      	cmp	r2, #3
   b5096:	d1f9      	bne.n	b508c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5098:	6804      	ldr	r4, [r0, #0]
   b509a:	2c00      	cmp	r4, #0
   b509c:	d0f6      	beq.n	b508c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b509e:	f104 0010 	add.w	r0, r4, #16
   b50a2:	f7ff fe54 	bl	b4d4e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b50a6:	4620      	mov	r0, r4
   b50a8:	f7ff fc94 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b50ac:	2118      	movs	r1, #24
   b50ae:	4620      	mov	r0, r4
   b50b0:	f7fe fff3 	bl	b409a <_ZdlPvj>
   b50b4:	e7ea      	b.n	b508c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b50b6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b50b8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b50ba:	f7fe ffea 	bl	b4092 <_Znwj>
   b50be:	4604      	mov	r4, r0
   b50c0:	b150      	cbz	r0, b50d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b50c2:	4631      	mov	r1, r6
   b50c4:	f7ff fec6 	bl	b4e54 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b50c8:	6930      	ldr	r0, [r6, #16]
   b50ca:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b50ce:	b108      	cbz	r0, b50d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b50d0:	f000 fca4 	bl	b5a1c <strdup>
        type_(type) {
   b50d4:	6120      	str	r0, [r4, #16]
   b50d6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b50d8:	602c      	str	r4, [r5, #0]
	}
   b50da:	e7d7      	b.n	b508c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b50dc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b50dc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b50de:	2300      	movs	r3, #0
   b50e0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b50e2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b50e4:	4604      	mov	r4, r0
   b50e6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b50e8:	b12b      	cbz	r3, b50f6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b50ea:	2202      	movs	r2, #2
   b50ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b50ee:	68eb      	ldr	r3, [r5, #12]
   b50f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b50f2:	68ab      	ldr	r3, [r5, #8]
   b50f4:	60a3      	str	r3, [r4, #8]
    }
   b50f6:	4620      	mov	r0, r4
   b50f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b50fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b50fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b50fe:	b089      	sub	sp, #36	; 0x24
   b5100:	4604      	mov	r4, r0
   b5102:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b5104:	a801      	add	r0, sp, #4
   b5106:	4611      	mov	r1, r2
   b5108:	f7ff fe54 	bl	b4db4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b510c:	b1a4      	cbz	r4, b5138 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b510e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5110:	b11d      	cbz	r5, b511a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b5112:	4628      	mov	r0, r5
   b5114:	f000 fc82 	bl	b5a1c <strdup>
   b5118:	4605      	mov	r5, r0
   b511a:	a801      	add	r0, sp, #4
   b511c:	a903      	add	r1, sp, #12
        type_(type) {
   b511e:	9503      	str	r5, [sp, #12]
   b5120:	f8ad 4010 	strh.w	r4, [sp, #16]
   b5124:	f7ff fea6 	bl	b4e74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5128:	a803      	add	r0, sp, #12
   b512a:	f7ff fe10 	bl	b4d4e <_ZN8particle5ErrorD1Ev>
   b512e:	a802      	add	r0, sp, #8
   b5130:	f7fe ffda 	bl	b40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5134:	b009      	add	sp, #36	; 0x24
   b5136:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5138:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b513a:	2301      	movs	r3, #1
   b513c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b5140:	2a00      	cmp	r2, #0
   b5142:	d103      	bne.n	b514c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b5144:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5148:	2900      	cmp	r1, #0
   b514a:	d1f7      	bne.n	b513c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b514c:	d1ef      	bne.n	b512e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b514e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5150:	f3bf 8f5b 	dmb	ish
   b5154:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5156:	1d2b      	adds	r3, r5, #4
   b5158:	f3bf 8f5b 	dmb	ish
   b515c:	e853 6f00 	ldrex	r6, [r3]
   b5160:	e843 4200 	strex	r2, r4, [r3]
   b5164:	2a00      	cmp	r2, #0
   b5166:	d1f9      	bne.n	b515c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5168:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b516c:	2e00      	cmp	r6, #0
   b516e:	d0de      	beq.n	b512e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5170:	4620      	mov	r0, r4
   b5172:	f7ff f9d9 	bl	b4528 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5176:	4607      	mov	r7, r0
   b5178:	b160      	cbz	r0, b5194 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b517a:	f105 010c 	add.w	r1, r5, #12
   b517e:	4630      	mov	r0, r6
   b5180:	f7ff fe43 	bl	b4e0a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5184:	4630      	mov	r0, r6
   b5186:	f7ff fc25 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b518a:	2110      	movs	r1, #16
   b518c:	4630      	mov	r0, r6
   b518e:	f7fe ff84 	bl	b409a <_ZdlPvj>
   b5192:	e7cc      	b.n	b512e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5194:	4631      	mov	r1, r6
   b5196:	a803      	add	r0, sp, #12
   b5198:	f7ff ffa0 	bl	b50dc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b519c:	7b2b      	ldrb	r3, [r5, #12]
   b519e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b51a2:	2010      	movs	r0, #16
   b51a4:	f7fe ff75 	bl	b4092 <_Znwj>
   b51a8:	4605      	mov	r5, r0
   b51aa:	b1d0      	cbz	r0, b51e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b51ac:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b51ae:	2014      	movs	r0, #20
   b51b0:	f7fe ff6f 	bl	b4092 <_Znwj>
   b51b4:	4604      	mov	r4, r0
   b51b6:	b178      	cbz	r0, b51d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b51b8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b51ba:	4601      	mov	r1, r0
   b51bc:	a803      	add	r0, sp, #12
   b51be:	f7ff fc12 	bl	b49e6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b51c2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b51c4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b51c6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b51c8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b51ca:	9205      	str	r2, [sp, #20]
   b51cc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b51ce:	60e3      	str	r3, [r4, #12]
   b51d0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b51d4:	9206      	str	r2, [sp, #24]
   b51d6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b51d8:	4b06      	ldr	r3, [pc, #24]	; (b51f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b51da:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b51dc:	4b06      	ldr	r3, [pc, #24]	; (b51f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b51de:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b51e0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b51e2:	a803      	add	r0, sp, #12
   b51e4:	f7ff fbf6 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b51e8:	2200      	movs	r2, #0
   b51ea:	4629      	mov	r1, r5
   b51ec:	4803      	ldr	r0, [pc, #12]	; (b51fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b51ee:	f7ff f9a3 	bl	b4538 <application_thread_invoke>
   b51f2:	e7c7      	b.n	b5184 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b51f4:	000b4e1d 	.word	0x000b4e1d
   b51f8:	000b5201 	.word	0x000b5201
   b51fc:	000b54dd 	.word	0x000b54dd

000b5200 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5200:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5202:	b570      	push	{r4, r5, r6, lr}
   b5204:	4604      	mov	r4, r0
	switch (__op)
   b5206:	d103      	bne.n	b5210 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5208:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b520a:	6003      	str	r3, [r0, #0]
      }
   b520c:	2000      	movs	r0, #0
   b520e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5210:	2a02      	cmp	r2, #2
   b5212:	d00c      	beq.n	b522e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5214:	2a03      	cmp	r2, #3
   b5216:	d1f9      	bne.n	b520c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5218:	6804      	ldr	r4, [r0, #0]
   b521a:	2c00      	cmp	r4, #0
   b521c:	d0f6      	beq.n	b520c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b521e:	4620      	mov	r0, r4
   b5220:	f7ff fbd8 	bl	b49d4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5224:	2114      	movs	r1, #20
   b5226:	4620      	mov	r0, r4
   b5228:	f7fe ff37 	bl	b409a <_ZdlPvj>
   b522c:	e7ee      	b.n	b520c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b522e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5230:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5232:	f7fe ff2e 	bl	b4092 <_Znwj>
   b5236:	4605      	mov	r5, r0
   b5238:	b120      	cbz	r0, b5244 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b523a:	4631      	mov	r1, r6
   b523c:	f7ff ff4e 	bl	b50dc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5240:	7c33      	ldrb	r3, [r6, #16]
   b5242:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5244:	6025      	str	r5, [r4, #0]
	}
   b5246:	e7e1      	b.n	b520c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5248 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5248:	4770      	bx	lr

000b524a <_ZN9IPAddressD0Ev>:
   b524a:	b510      	push	{r4, lr}
   b524c:	2118      	movs	r1, #24
   b524e:	4604      	mov	r4, r0
   b5250:	f7fe ff23 	bl	b409a <_ZdlPvj>
   b5254:	4620      	mov	r0, r4
   b5256:	bd10      	pop	{r4, pc}

000b5258 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5258:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b525a:	7d03      	ldrb	r3, [r0, #20]
   b525c:	2b06      	cmp	r3, #6
{
   b525e:	b08d      	sub	sp, #52	; 0x34
   b5260:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5262:	f100 0704 	add.w	r7, r0, #4
   b5266:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b526a:	d012      	beq.n	b5292 <_ZNK9IPAddress7printToER5Print+0x3a>
   b526c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5270:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5274:	220a      	movs	r2, #10
   b5276:	4630      	mov	r0, r6
   b5278:	f7ff fbfb 	bl	b4a72 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b527c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b527e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5280:	d019      	beq.n	b52b6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5282:	2c00      	cmp	r4, #0
   b5284:	d0f4      	beq.n	b5270 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5286:	212e      	movs	r1, #46	; 0x2e
   b5288:	4630      	mov	r0, r6
   b528a:	f7ff fbef 	bl	b4a6c <_ZN5Print5printEc>
   b528e:	4404      	add	r4, r0
   b5290:	e7ee      	b.n	b5270 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5292:	232f      	movs	r3, #47	; 0x2f
   b5294:	466a      	mov	r2, sp
   b5296:	4639      	mov	r1, r7
   b5298:	200a      	movs	r0, #10
		buf[0] = 0;
   b529a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b529e:	f7ff f86b 	bl	b4378 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b52a2:	4668      	mov	r0, sp
   b52a4:	f000 fbd7 	bl	b5a56 <strlen>
   b52a8:	6833      	ldr	r3, [r6, #0]
   b52aa:	4602      	mov	r2, r0
   b52ac:	68db      	ldr	r3, [r3, #12]
   b52ae:	4669      	mov	r1, sp
   b52b0:	4630      	mov	r0, r6
   b52b2:	4798      	blx	r3
   b52b4:	4604      	mov	r4, r0
    }
    return n;
}
   b52b6:	4620      	mov	r0, r4
   b52b8:	b00d      	add	sp, #52	; 0x34
   b52ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b52bc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b52bc:	b510      	push	{r4, lr}
   b52be:	4b05      	ldr	r3, [pc, #20]	; (b52d4 <_ZN9IPAddressC1Ev+0x18>)
   b52c0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b52c2:	2211      	movs	r2, #17
   b52c4:	f840 3b04 	str.w	r3, [r0], #4
   b52c8:	2100      	movs	r1, #0
   b52ca:	f000 fb68 	bl	b599e <memset>
}
   b52ce:	4620      	mov	r0, r4
   b52d0:	bd10      	pop	{r4, pc}
   b52d2:	bf00      	nop
   b52d4:	000b5c20 	.word	0x000b5c20

000b52d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b52d8:	4603      	mov	r3, r0
   b52da:	4a07      	ldr	r2, [pc, #28]	; (b52f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b52dc:	b510      	push	{r4, lr}
   b52de:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b52e2:	f101 0210 	add.w	r2, r1, #16
   b52e6:	f851 4b04 	ldr.w	r4, [r1], #4
   b52ea:	f843 4b04 	str.w	r4, [r3], #4
   b52ee:	4291      	cmp	r1, r2
   b52f0:	d1f9      	bne.n	b52e6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b52f2:	780a      	ldrb	r2, [r1, #0]
   b52f4:	701a      	strb	r2, [r3, #0]
}
   b52f6:	bd10      	pop	{r4, pc}
   b52f8:	000b5c20 	.word	0x000b5c20

000b52fc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b52fc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b52fe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5302:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5306:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b530a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b530e:	2304      	movs	r3, #4
   b5310:	6041      	str	r1, [r0, #4]
   b5312:	7503      	strb	r3, [r0, #20]
}
   b5314:	bd10      	pop	{r4, pc}
	...

000b5318 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5318:	b507      	push	{r0, r1, r2, lr}
   b531a:	4b06      	ldr	r3, [pc, #24]	; (b5334 <_ZN9IPAddressC1EPKh+0x1c>)
   b531c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b531e:	78cb      	ldrb	r3, [r1, #3]
   b5320:	9300      	str	r3, [sp, #0]
   b5322:	788b      	ldrb	r3, [r1, #2]
   b5324:	784a      	ldrb	r2, [r1, #1]
   b5326:	7809      	ldrb	r1, [r1, #0]
   b5328:	f7ff ffe8 	bl	b52fc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b532c:	b003      	add	sp, #12
   b532e:	f85d fb04 	ldr.w	pc, [sp], #4
   b5332:	bf00      	nop
   b5334:	000b5c20 	.word	0x000b5c20

000b5338 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5338:	7441      	strb	r1, [r0, #17]
}
   b533a:	4770      	bx	lr

000b533c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b533c:	4770      	bx	lr

000b533e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b533e:	4770      	bx	lr

000b5340 <_ZN9USBSerial4readEv>:
{
   b5340:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5342:	2100      	movs	r1, #0
   b5344:	7c00      	ldrb	r0, [r0, #16]
   b5346:	f7ff f8bf 	bl	b44c8 <HAL_USB_USART_Receive_Data>
}
   b534a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b534e:	bd08      	pop	{r3, pc}

000b5350 <_ZN9USBSerial4peekEv>:
{
   b5350:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5352:	2101      	movs	r1, #1
   b5354:	7c00      	ldrb	r0, [r0, #16]
   b5356:	f7ff f8b7 	bl	b44c8 <HAL_USB_USART_Receive_Data>
}
   b535a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b535e:	bd08      	pop	{r3, pc}

000b5360 <_ZN9USBSerial17availableForWriteEv>:
{
   b5360:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5362:	7c00      	ldrb	r0, [r0, #16]
   b5364:	f7ff f8a8 	bl	b44b8 <HAL_USB_USART_Available_Data_For_Write>
}
   b5368:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b536c:	bd08      	pop	{r3, pc}

000b536e <_ZN9USBSerial9availableEv>:
{
   b536e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5370:	7c00      	ldrb	r0, [r0, #16]
   b5372:	f7ff f899 	bl	b44a8 <HAL_USB_USART_Available_Data>
}
   b5376:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b537a:	bd08      	pop	{r3, pc}

000b537c <_ZN9USBSerial5writeEh>:
{
   b537c:	b513      	push	{r0, r1, r4, lr}
   b537e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5380:	7c00      	ldrb	r0, [r0, #16]
{
   b5382:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5384:	f7ff f898 	bl	b44b8 <HAL_USB_USART_Available_Data_For_Write>
   b5388:	2800      	cmp	r0, #0
   b538a:	9901      	ldr	r1, [sp, #4]
   b538c:	dc01      	bgt.n	b5392 <_ZN9USBSerial5writeEh+0x16>
   b538e:	7c60      	ldrb	r0, [r4, #17]
   b5390:	b120      	cbz	r0, b539c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5392:	7c20      	ldrb	r0, [r4, #16]
   b5394:	f7ff f8a0 	bl	b44d8 <HAL_USB_USART_Send_Data>
   b5398:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b539c:	b002      	add	sp, #8
   b539e:	bd10      	pop	{r4, pc}

000b53a0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b53a0:	7c00      	ldrb	r0, [r0, #16]
   b53a2:	f7ff b8a1 	b.w	b44e8 <HAL_USB_USART_Flush_Data>

000b53a6 <_ZN9USBSerialD0Ev>:
   b53a6:	b510      	push	{r4, lr}
   b53a8:	2114      	movs	r1, #20
   b53aa:	4604      	mov	r4, r0
   b53ac:	f7fe fe75 	bl	b409a <_ZdlPvj>
   b53b0:	4620      	mov	r0, r4
   b53b2:	bd10      	pop	{r4, pc}

000b53b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b53b4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b53b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b53ba:	4604      	mov	r4, r0
   b53bc:	4608      	mov	r0, r1
   b53be:	2100      	movs	r1, #0
   b53c0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b53c4:	4b04      	ldr	r3, [pc, #16]	; (b53d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b53c6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b53c8:	2301      	movs	r3, #1
  _serial = serial;
   b53ca:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b53cc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b53ce:	4611      	mov	r1, r2
   b53d0:	f7ff f862 	bl	b4498 <HAL_USB_USART_Init>
}
   b53d4:	4620      	mov	r0, r4
   b53d6:	bd10      	pop	{r4, pc}
   b53d8:	000b5c34 	.word	0x000b5c34

000b53dc <_Z19acquireSerialBufferv>:
{
   b53dc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b53de:	2214      	movs	r2, #20
{
   b53e0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b53e2:	2100      	movs	r1, #0
   b53e4:	f000 fadb 	bl	b599e <memset>
}
   b53e8:	4620      	mov	r0, r4
   b53ea:	bd10      	pop	{r4, pc}

000b53ec <_Z16_fetch_usbserialv>:
{
   b53ec:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b53ee:	4c0f      	ldr	r4, [pc, #60]	; (b542c <_Z16_fetch_usbserialv+0x40>)
{
   b53f0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b53f2:	a803      	add	r0, sp, #12
   b53f4:	f7ff fff2 	bl	b53dc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b53f8:	7821      	ldrb	r1, [r4, #0]
   b53fa:	f3bf 8f5b 	dmb	ish
   b53fe:	f011 0101 	ands.w	r1, r1, #1
   b5402:	d10f      	bne.n	b5424 <_Z16_fetch_usbserialv+0x38>
   b5404:	4620      	mov	r0, r4
   b5406:	9101      	str	r1, [sp, #4]
   b5408:	f7fe fe49 	bl	b409e <__cxa_guard_acquire>
   b540c:	9901      	ldr	r1, [sp, #4]
   b540e:	b148      	cbz	r0, b5424 <_Z16_fetch_usbserialv+0x38>
   b5410:	aa03      	add	r2, sp, #12
   b5412:	4807      	ldr	r0, [pc, #28]	; (b5430 <_Z16_fetch_usbserialv+0x44>)
   b5414:	f7ff ffce 	bl	b53b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5418:	4620      	mov	r0, r4
   b541a:	f7fe fe45 	bl	b40a8 <__cxa_guard_release>
   b541e:	4805      	ldr	r0, [pc, #20]	; (b5434 <_Z16_fetch_usbserialv+0x48>)
   b5420:	f000 faa9 	bl	b5976 <atexit>
	return _usbserial;
}
   b5424:	4802      	ldr	r0, [pc, #8]	; (b5430 <_Z16_fetch_usbserialv+0x44>)
   b5426:	b008      	add	sp, #32
   b5428:	bd10      	pop	{r4, pc}
   b542a:	bf00      	nop
   b542c:	2003e6f8 	.word	0x2003e6f8
   b5430:	2003e6fc 	.word	0x2003e6fc
   b5434:	000b533d 	.word	0x000b533d

000b5438 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5438:	4770      	bx	lr

000b543a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b543a:	7441      	strb	r1, [r0, #17]
}
   b543c:	4770      	bx	lr

000b543e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b543e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5440:	7c00      	ldrb	r0, [r0, #16]
   b5442:	f7fe ffd1 	bl	b43e8 <hal_usart_available_data_for_write>
}
   b5446:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b544a:	bd08      	pop	{r3, pc}

000b544c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b544c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b544e:	7c00      	ldrb	r0, [r0, #16]
   b5450:	f7fe ffa2 	bl	b4398 <hal_usart_available>
}
   b5454:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5458:	bd08      	pop	{r3, pc}

000b545a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b545a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b545c:	7c00      	ldrb	r0, [r0, #16]
   b545e:	f7fe ffab 	bl	b43b8 <hal_usart_peek>
}
   b5462:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5466:	bd08      	pop	{r3, pc}

000b5468 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5468:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b546a:	7c00      	ldrb	r0, [r0, #16]
   b546c:	f7fe ff9c 	bl	b43a8 <hal_usart_read>
}
   b5470:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5474:	bd08      	pop	{r3, pc}

000b5476 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5476:	7c00      	ldrb	r0, [r0, #16]
   b5478:	f7fe bfa6 	b.w	b43c8 <hal_usart_flush>

000b547c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b547c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b547e:	7c45      	ldrb	r5, [r0, #17]
{
   b5480:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5482:	b12d      	cbz	r5, b5490 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5484:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5486:	b003      	add	sp, #12
   b5488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b548c:	f7fe bf7c 	b.w	b4388 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5490:	7c00      	ldrb	r0, [r0, #16]
   b5492:	9101      	str	r1, [sp, #4]
   b5494:	f7fe ffa8 	bl	b43e8 <hal_usart_available_data_for_write>
   b5498:	2800      	cmp	r0, #0
   b549a:	9901      	ldr	r1, [sp, #4]
   b549c:	dcf2      	bgt.n	b5484 <_ZN11USARTSerial5writeEh+0x8>
}
   b549e:	4628      	mov	r0, r5
   b54a0:	b003      	add	sp, #12
   b54a2:	bd30      	pop	{r4, r5, pc}

000b54a4 <_ZN11USARTSerialD0Ev>:
   b54a4:	b510      	push	{r4, lr}
   b54a6:	2114      	movs	r1, #20
   b54a8:	4604      	mov	r4, r0
   b54aa:	f7fe fdf6 	bl	b409a <_ZdlPvj>
   b54ae:	4620      	mov	r0, r4
   b54b0:	bd10      	pop	{r4, pc}
	...

000b54b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b54b4:	b510      	push	{r4, lr}
   b54b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b54ba:	4604      	mov	r4, r0
   b54bc:	4608      	mov	r0, r1
   b54be:	4611      	mov	r1, r2
   b54c0:	2200      	movs	r2, #0
   b54c2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b54c6:	4b04      	ldr	r3, [pc, #16]	; (b54d8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b54c8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b54ca:	2301      	movs	r3, #1
  _serial = serial;
   b54cc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b54ce:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b54d0:	f7fe ff92 	bl	b43f8 <hal_usart_init_ex>
}
   b54d4:	4620      	mov	r0, r4
   b54d6:	bd10      	pop	{r4, pc}
   b54d8:	000b5c64 	.word	0x000b5c64

000b54dc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b54dc:	b510      	push	{r4, lr}
      if (_M_empty())
   b54de:	6883      	ldr	r3, [r0, #8]
   b54e0:	4604      	mov	r4, r0
   b54e2:	b90b      	cbnz	r3, b54e8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b54e4:	f000 fa44 	bl	b5970 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b54e8:	68c3      	ldr	r3, [r0, #12]
   b54ea:	4798      	blx	r3
      if (_M_manager)
   b54ec:	68a3      	ldr	r3, [r4, #8]
   b54ee:	b11b      	cbz	r3, b54f8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b54f0:	2203      	movs	r2, #3
   b54f2:	4621      	mov	r1, r4
   b54f4:	4620      	mov	r0, r4
   b54f6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b54f8:	4620      	mov	r0, r4
   b54fa:	2110      	movs	r1, #16
}
   b54fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5500:	f7fe bdcb 	b.w	b409a <_ZdlPvj>

000b5504 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5504:	4770      	bx	lr

000b5506 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5508:	4606      	mov	r6, r0
   b550a:	4615      	mov	r5, r2
   b550c:	460c      	mov	r4, r1
   b550e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5510:	42bc      	cmp	r4, r7
   b5512:	d006      	beq.n	b5522 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5514:	6833      	ldr	r3, [r6, #0]
   b5516:	f814 1b01 	ldrb.w	r1, [r4], #1
   b551a:	689b      	ldr	r3, [r3, #8]
   b551c:	4630      	mov	r0, r6
   b551e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5520:	e7f6      	b.n	b5510 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5522:	4628      	mov	r0, r5
   b5524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5526 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5526:	7c00      	ldrb	r0, [r0, #16]
   b5528:	2200      	movs	r2, #0
   b552a:	f7fe bf6d 	b.w	b4408 <hal_i2c_write>

000b552e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b552e:	7c00      	ldrb	r0, [r0, #16]
   b5530:	2100      	movs	r1, #0
   b5532:	f7fe bf71 	b.w	b4418 <hal_i2c_available>

000b5536 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5536:	7c00      	ldrb	r0, [r0, #16]
   b5538:	2100      	movs	r1, #0
   b553a:	f7fe bf75 	b.w	b4428 <hal_i2c_read>

000b553e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b553e:	7c00      	ldrb	r0, [r0, #16]
   b5540:	2100      	movs	r1, #0
   b5542:	f7fe bf79 	b.w	b4438 <hal_i2c_peek>

000b5546 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5546:	7c00      	ldrb	r0, [r0, #16]
   b5548:	2100      	movs	r1, #0
   b554a:	f7fe bf7d 	b.w	b4448 <hal_i2c_flush>

000b554e <_ZN7TwoWireD0Ev>:
   b554e:	b510      	push	{r4, lr}
   b5550:	2114      	movs	r1, #20
   b5552:	4604      	mov	r4, r0
   b5554:	f7fe fda1 	bl	b409a <_ZdlPvj>
   b5558:	4620      	mov	r0, r4
   b555a:	bd10      	pop	{r4, pc}

000b555c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b555c:	b538      	push	{r3, r4, r5, lr}
   b555e:	4604      	mov	r4, r0
   b5560:	4615      	mov	r5, r2
   b5562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5566:	2200      	movs	r2, #0
   b5568:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b556c:	4b09      	ldr	r3, [pc, #36]	; (b5594 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b556e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5570:	4608      	mov	r0, r1
   b5572:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5574:	4629      	mov	r1, r5
   b5576:	f7fe ff77 	bl	b4468 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b557a:	30bf      	adds	r0, #191	; 0xbf
   b557c:	d108      	bne.n	b5590 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b557e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5580:	07db      	lsls	r3, r3, #31
   b5582:	d505      	bpl.n	b5590 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5584:	6868      	ldr	r0, [r5, #4]
   b5586:	f7ff f88b 	bl	b46a0 <free>
    free(conf.tx_buffer);
   b558a:	68e8      	ldr	r0, [r5, #12]
   b558c:	f7ff f888 	bl	b46a0 <free>
}
   b5590:	4620      	mov	r0, r4
   b5592:	bd38      	pop	{r3, r4, r5, pc}
   b5594:	000b5c94 	.word	0x000b5c94

000b5598 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5598:	2200      	movs	r2, #0
   b559a:	6840      	ldr	r0, [r0, #4]
   b559c:	4611      	mov	r1, r2
   b559e:	f7ff b807 	b.w	b45b0 <network_ready>

000b55a2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b55a2:	2200      	movs	r2, #0
   b55a4:	6840      	ldr	r0, [r0, #4]
   b55a6:	4611      	mov	r1, r2
   b55a8:	f7ff b822 	b.w	b45f0 <network_listening>

000b55ac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b55ac:	2200      	movs	r2, #0
   b55ae:	6840      	ldr	r0, [r0, #4]
   b55b0:	4611      	mov	r1, r2
   b55b2:	f7ff b82d 	b.w	b4610 <network_get_listen_timeout>

000b55b6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b55b6:	6840      	ldr	r0, [r0, #4]
   b55b8:	2200      	movs	r2, #0
   b55ba:	f7ff b821 	b.w	b4600 <network_set_listen_timeout>

000b55be <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b55be:	6840      	ldr	r0, [r0, #4]
   b55c0:	2200      	movs	r2, #0
   b55c2:	f081 0101 	eor.w	r1, r1, #1
   b55c6:	f7ff b80b 	b.w	b45e0 <network_listen>

000b55ca <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b55ca:	2300      	movs	r3, #0
   b55cc:	6840      	ldr	r0, [r0, #4]
   b55ce:	461a      	mov	r2, r3
   b55d0:	4619      	mov	r1, r3
   b55d2:	f7fe bffd 	b.w	b45d0 <network_off>

000b55d6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b55d6:	2300      	movs	r3, #0
   b55d8:	6840      	ldr	r0, [r0, #4]
   b55da:	461a      	mov	r2, r3
   b55dc:	4619      	mov	r1, r3
   b55de:	f7fe bfef 	b.w	b45c0 <network_on>

000b55e2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b55e2:	2200      	movs	r2, #0
   b55e4:	6840      	ldr	r0, [r0, #4]
   b55e6:	4611      	mov	r1, r2
   b55e8:	f7fe bfd2 	b.w	b4590 <network_connecting>

000b55ec <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b55ec:	6840      	ldr	r0, [r0, #4]
   b55ee:	2200      	movs	r2, #0
   b55f0:	2102      	movs	r1, #2
   b55f2:	f7fe bfd5 	b.w	b45a0 <network_disconnect>

000b55f6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b55f6:	2300      	movs	r3, #0
   b55f8:	6840      	ldr	r0, [r0, #4]
   b55fa:	461a      	mov	r2, r3
   b55fc:	f7fe bfc0 	b.w	b4580 <network_connect>

000b5600 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5600:	4b02      	ldr	r3, [pc, #8]	; (b560c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5602:	2204      	movs	r2, #4
   b5604:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5606:	4a02      	ldr	r2, [pc, #8]	; (b5610 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5608:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b560a:	4770      	bx	lr
   b560c:	2003e710 	.word	0x2003e710
   b5610:	000b5cbc 	.word	0x000b5cbc

000b5614 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5614:	2300      	movs	r3, #0
   b5616:	6840      	ldr	r0, [r0, #4]
   b5618:	461a      	mov	r2, r3
   b561a:	f7fe bfb1 	b.w	b4580 <network_connect>

000b561e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b561e:	6840      	ldr	r0, [r0, #4]
   b5620:	2200      	movs	r2, #0
   b5622:	2102      	movs	r1, #2
   b5624:	f7fe bfbc 	b.w	b45a0 <network_disconnect>

000b5628 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5628:	2200      	movs	r2, #0
   b562a:	6840      	ldr	r0, [r0, #4]
   b562c:	4611      	mov	r1, r2
   b562e:	f7fe bfaf 	b.w	b4590 <network_connecting>

000b5632 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5632:	2200      	movs	r2, #0
   b5634:	6840      	ldr	r0, [r0, #4]
   b5636:	4611      	mov	r1, r2
   b5638:	f7fe bfba 	b.w	b45b0 <network_ready>

000b563c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b563c:	2300      	movs	r3, #0
   b563e:	6840      	ldr	r0, [r0, #4]
   b5640:	461a      	mov	r2, r3
   b5642:	4619      	mov	r1, r3
   b5644:	f7fe bfbc 	b.w	b45c0 <network_on>

000b5648 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5648:	2300      	movs	r3, #0
   b564a:	6840      	ldr	r0, [r0, #4]
   b564c:	461a      	mov	r2, r3
   b564e:	4619      	mov	r1, r3
   b5650:	f7fe bfbe 	b.w	b45d0 <network_off>

000b5654 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5654:	6840      	ldr	r0, [r0, #4]
   b5656:	2100      	movs	r1, #0
   b5658:	f7fe bfe2 	b.w	b4620 <network_is_on>

000b565c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b565c:	6840      	ldr	r0, [r0, #4]
   b565e:	2100      	movs	r1, #0
   b5660:	f7fe bfe6 	b.w	b4630 <network_is_off>

000b5664 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5664:	6840      	ldr	r0, [r0, #4]
   b5666:	2200      	movs	r2, #0
   b5668:	f081 0101 	eor.w	r1, r1, #1
   b566c:	f7fe bfb8 	b.w	b45e0 <network_listen>

000b5670 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5670:	6840      	ldr	r0, [r0, #4]
   b5672:	2200      	movs	r2, #0
   b5674:	f7fe bfc4 	b.w	b4600 <network_set_listen_timeout>

000b5678 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5678:	2200      	movs	r2, #0
   b567a:	6840      	ldr	r0, [r0, #4]
   b567c:	4611      	mov	r1, r2
   b567e:	f7fe bfc7 	b.w	b4610 <network_get_listen_timeout>

000b5682 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5682:	2200      	movs	r2, #0
   b5684:	6840      	ldr	r0, [r0, #4]
   b5686:	4611      	mov	r1, r2
   b5688:	f7fe bfb2 	b.w	b45f0 <network_listening>

000b568c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b568c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5690:	b095      	sub	sp, #84	; 0x54
   b5692:	4614      	mov	r4, r2
   b5694:	460d      	mov	r5, r1
   b5696:	4607      	mov	r7, r0
    IPAddress addr;
   b5698:	f7ff fe10 	bl	b52bc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b569c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b569e:	221c      	movs	r2, #28
   b56a0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b56a2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b56a4:	f000 f97b 	bl	b599e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b56a8:	2340      	movs	r3, #64	; 0x40
   b56aa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b56ac:	4620      	mov	r0, r4
   b56ae:	466b      	mov	r3, sp
   b56b0:	aa0c      	add	r2, sp, #48	; 0x30
   b56b2:	2100      	movs	r1, #0
   b56b4:	f7fe fe10 	bl	b42d8 <netdb_getaddrinfo>
    if (!r) {
   b56b8:	4604      	mov	r4, r0
   b56ba:	2800      	cmp	r0, #0
   b56bc:	d14b      	bne.n	b5756 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b56be:	4602      	mov	r2, r0
   b56c0:	2101      	movs	r1, #1
   b56c2:	6868      	ldr	r0, [r5, #4]
   b56c4:	f7fe ff74 	bl	b45b0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b56c8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b56ca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b56cc:	4622      	mov	r2, r4
   b56ce:	6868      	ldr	r0, [r5, #4]
   b56d0:	f7fe ff6e 	bl	b45b0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b56d4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b56d6:	4681      	mov	r9, r0
        bool ok = false;
   b56d8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b56da:	2e00      	cmp	r6, #0
   b56dc:	d03b      	beq.n	b5756 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b56de:	2900      	cmp	r1, #0
   b56e0:	d139      	bne.n	b5756 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b56e2:	6873      	ldr	r3, [r6, #4]
   b56e4:	2b02      	cmp	r3, #2
   b56e6:	d003      	beq.n	b56f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b56e8:	2b0a      	cmp	r3, #10
   b56ea:	d011      	beq.n	b5710 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b56ec:	69f6      	ldr	r6, [r6, #28]
   b56ee:	e7f4      	b.n	b56da <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b56f0:	f1b8 0f00 	cmp.w	r8, #0
   b56f4:	d0fa      	beq.n	b56ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b56f6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b56f8:	a806      	add	r0, sp, #24
   b56fa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b56fc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b56fe:	f7ff fe0b 	bl	b5318 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5704:	1d3c      	adds	r4, r7, #4
   b5706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5708:	682b      	ldr	r3, [r5, #0]
   b570a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b570c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b570e:	e7ed      	b.n	b56ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5710:	f1b9 0f00 	cmp.w	r9, #0
   b5714:	d0ea      	beq.n	b56ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5716:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5718:	2210      	movs	r2, #16
   b571a:	a801      	add	r0, sp, #4
   b571c:	f000 f93f 	bl	b599e <memset>
                    a.v = 6;
   b5720:	2306      	movs	r3, #6
   b5722:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5726:	ad01      	add	r5, sp, #4
   b5728:	f104 0308 	add.w	r3, r4, #8
   b572c:	3418      	adds	r4, #24
   b572e:	6818      	ldr	r0, [r3, #0]
   b5730:	6859      	ldr	r1, [r3, #4]
   b5732:	462a      	mov	r2, r5
   b5734:	c203      	stmia	r2!, {r0, r1}
   b5736:	3308      	adds	r3, #8
   b5738:	42a3      	cmp	r3, r4
   b573a:	4615      	mov	r5, r2
   b573c:	d1f7      	bne.n	b572e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b573e:	a901      	add	r1, sp, #4
   b5740:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5742:	ad07      	add	r5, sp, #28
   b5744:	f7ff fdc8 	bl	b52d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b574a:	1d3c      	adds	r4, r7, #4
   b574c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b574e:	682b      	ldr	r3, [r5, #0]
   b5750:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5752:	4649      	mov	r1, r9
   b5754:	e7ca      	b.n	b56ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5756:	9800      	ldr	r0, [sp, #0]
   b5758:	f7fe fdb6 	bl	b42c8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b575c:	4638      	mov	r0, r7
   b575e:	b015      	add	sp, #84	; 0x54
   b5760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5764 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5764:	4b02      	ldr	r3, [pc, #8]	; (b5770 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5766:	4a03      	ldr	r2, [pc, #12]	; (b5774 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5768:	601a      	str	r2, [r3, #0]
   b576a:	2200      	movs	r2, #0
   b576c:	605a      	str	r2, [r3, #4]

} // spark
   b576e:	4770      	bx	lr
   b5770:	2003e718 	.word	0x2003e718
   b5774:	000b5cf8 	.word	0x000b5cf8

000b5778 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5778:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b577a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b577c:	d902      	bls.n	b5784 <pinAvailable+0xc>
    return false;
   b577e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5780:	b002      	add	sp, #8
   b5782:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5784:	f1a0 030b 	sub.w	r3, r0, #11
   b5788:	2b02      	cmp	r3, #2
   b578a:	d81a      	bhi.n	b57c2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b578c:	4c17      	ldr	r4, [pc, #92]	; (b57ec <pinAvailable+0x74>)
   b578e:	7821      	ldrb	r1, [r4, #0]
   b5790:	f3bf 8f5b 	dmb	ish
   b5794:	f011 0101 	ands.w	r1, r1, #1
   b5798:	d10b      	bne.n	b57b2 <pinAvailable+0x3a>
   b579a:	4620      	mov	r0, r4
   b579c:	9101      	str	r1, [sp, #4]
   b579e:	f7fe fc7e 	bl	b409e <__cxa_guard_acquire>
   b57a2:	9901      	ldr	r1, [sp, #4]
   b57a4:	b128      	cbz	r0, b57b2 <pinAvailable+0x3a>
   b57a6:	4812      	ldr	r0, [pc, #72]	; (b57f0 <pinAvailable+0x78>)
   b57a8:	f7fe fff0 	bl	b478c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b57ac:	4620      	mov	r0, r4
   b57ae:	f7fe fc7b 	bl	b40a8 <__cxa_guard_release>
   b57b2:	4b0f      	ldr	r3, [pc, #60]	; (b57f0 <pinAvailable+0x78>)
   b57b4:	7818      	ldrb	r0, [r3, #0]
   b57b6:	f7fe fe67 	bl	b4488 <hal_spi_is_enabled>
   b57ba:	2800      	cmp	r0, #0
   b57bc:	d1df      	bne.n	b577e <pinAvailable+0x6>
  return true; // 'pin' is available
   b57be:	2001      	movs	r0, #1
   b57c0:	e7de      	b.n	b5780 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b57c2:	2801      	cmp	r0, #1
   b57c4:	d809      	bhi.n	b57da <pinAvailable+0x62>
   b57c6:	f000 f8ad 	bl	b5924 <_Z19__fetch_global_Wirev>
   b57ca:	2100      	movs	r1, #0
   b57cc:	7c00      	ldrb	r0, [r0, #16]
   b57ce:	f7fe fe43 	bl	b4458 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b57d2:	f080 0001 	eor.w	r0, r0, #1
   b57d6:	b2c0      	uxtb	r0, r0
   b57d8:	e7d2      	b.n	b5780 <pinAvailable+0x8>
   b57da:	3809      	subs	r0, #9
   b57dc:	2801      	cmp	r0, #1
   b57de:	d8ee      	bhi.n	b57be <pinAvailable+0x46>
   b57e0:	f000 f860 	bl	b58a4 <_Z22__fetch_global_Serial1v>
   b57e4:	7c00      	ldrb	r0, [r0, #16]
   b57e6:	f7fe fdf7 	bl	b43d8 <hal_usart_is_enabled>
   b57ea:	e7f2      	b.n	b57d2 <pinAvailable+0x5a>
   b57ec:	2003e720 	.word	0x2003e720
   b57f0:	2003e724 	.word	0x2003e724

000b57f4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b57f4:	2823      	cmp	r0, #35	; 0x23
{
   b57f6:	b538      	push	{r3, r4, r5, lr}
   b57f8:	4604      	mov	r4, r0
   b57fa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b57fc:	d80a      	bhi.n	b5814 <pinMode+0x20>
   b57fe:	29ff      	cmp	r1, #255	; 0xff
   b5800:	d008      	beq.n	b5814 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5802:	f7ff ffb9 	bl	b5778 <pinAvailable>
   b5806:	b128      	cbz	r0, b5814 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5808:	4629      	mov	r1, r5
   b580a:	4620      	mov	r0, r4
}
   b580c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5810:	f7fe bd6a 	b.w	b42e8 <HAL_Pin_Mode>
}
   b5814:	bd38      	pop	{r3, r4, r5, pc}

000b5816 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5816:	b538      	push	{r3, r4, r5, lr}
   b5818:	4604      	mov	r4, r0
   b581a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b581c:	f7fe fd6c 	bl	b42f8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5820:	28ff      	cmp	r0, #255	; 0xff
   b5822:	d010      	beq.n	b5846 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5824:	2806      	cmp	r0, #6
   b5826:	d804      	bhi.n	b5832 <digitalWrite+0x1c>
   b5828:	234d      	movs	r3, #77	; 0x4d
   b582a:	fa23 f000 	lsr.w	r0, r3, r0
   b582e:	07c3      	lsls	r3, r0, #31
   b5830:	d409      	bmi.n	b5846 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5832:	4620      	mov	r0, r4
   b5834:	f7ff ffa0 	bl	b5778 <pinAvailable>
   b5838:	b128      	cbz	r0, b5846 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b583a:	4629      	mov	r1, r5
   b583c:	4620      	mov	r0, r4
}
   b583e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5842:	f7fe bd61 	b.w	b4308 <HAL_GPIO_Write>
}
   b5846:	bd38      	pop	{r3, r4, r5, pc}

000b5848 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b5848:	b510      	push	{r4, lr}
   b584a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b584c:	f7fe fd54 	bl	b42f8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b5850:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b5852:	b2db      	uxtb	r3, r3
   b5854:	2b01      	cmp	r3, #1
   b5856:	d908      	bls.n	b586a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b5858:	4620      	mov	r0, r4
   b585a:	f7ff ff8d 	bl	b5778 <pinAvailable>
   b585e:	b120      	cbz	r0, b586a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b5860:	4620      	mov	r0, r4
}
   b5862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b5866:	f7fe bd57 	b.w	b4318 <HAL_GPIO_Read>
}
   b586a:	2000      	movs	r0, #0
   b586c:	bd10      	pop	{r4, pc}

000b586e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b586e:	4770      	bx	lr

000b5870 <_Z20acquireSerial1Bufferv>:
{
   b5870:	b538      	push	{r3, r4, r5, lr}
   b5872:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5874:	2514      	movs	r5, #20
   b5876:	462a      	mov	r2, r5
   b5878:	2100      	movs	r1, #0
   b587a:	f000 f890 	bl	b599e <memset>
   b587e:	8025      	strh	r5, [r4, #0]
   b5880:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5882:	4907      	ldr	r1, [pc, #28]	; (b58a0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5884:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5886:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5888:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b588a:	f000 f86f 	bl	b596c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b588e:	4904      	ldr	r1, [pc, #16]	; (b58a0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5890:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5892:	4628      	mov	r0, r5
   b5894:	f000 f86a 	bl	b596c <_ZnajRKSt9nothrow_t>
    };
   b5898:	60e0      	str	r0, [r4, #12]
}
   b589a:	4620      	mov	r0, r4
   b589c:	bd38      	pop	{r3, r4, r5, pc}
   b589e:	bf00      	nop
   b58a0:	000b5d2c 	.word	0x000b5d2c

000b58a4 <_Z22__fetch_global_Serial1v>:
{
   b58a4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b58a6:	4d0e      	ldr	r5, [pc, #56]	; (b58e0 <_Z22__fetch_global_Serial1v+0x3c>)
   b58a8:	7829      	ldrb	r1, [r5, #0]
   b58aa:	f3bf 8f5b 	dmb	ish
   b58ae:	f011 0401 	ands.w	r4, r1, #1
{
   b58b2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b58b4:	d111      	bne.n	b58da <_Z22__fetch_global_Serial1v+0x36>
   b58b6:	4628      	mov	r0, r5
   b58b8:	f7fe fbf1 	bl	b409e <__cxa_guard_acquire>
   b58bc:	b168      	cbz	r0, b58da <_Z22__fetch_global_Serial1v+0x36>
   b58be:	a801      	add	r0, sp, #4
   b58c0:	f7ff ffd6 	bl	b5870 <_Z20acquireSerial1Bufferv>
   b58c4:	aa01      	add	r2, sp, #4
   b58c6:	4621      	mov	r1, r4
   b58c8:	4806      	ldr	r0, [pc, #24]	; (b58e4 <_Z22__fetch_global_Serial1v+0x40>)
   b58ca:	f7ff fdf3 	bl	b54b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b58ce:	4628      	mov	r0, r5
   b58d0:	f7fe fbea 	bl	b40a8 <__cxa_guard_release>
   b58d4:	4804      	ldr	r0, [pc, #16]	; (b58e8 <_Z22__fetch_global_Serial1v+0x44>)
   b58d6:	f000 f84e 	bl	b5976 <atexit>
    return serial1;
}
   b58da:	4802      	ldr	r0, [pc, #8]	; (b58e4 <_Z22__fetch_global_Serial1v+0x40>)
   b58dc:	b007      	add	sp, #28
   b58de:	bd30      	pop	{r4, r5, pc}
   b58e0:	2003e72c 	.word	0x2003e72c
   b58e4:	2003e730 	.word	0x2003e730
   b58e8:	000b586f 	.word	0x000b586f

000b58ec <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b58ec:	4770      	bx	lr
	...

000b58f0 <_Z17acquireWireBufferv>:
{
   b58f0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b58f2:	4b0a      	ldr	r3, [pc, #40]	; (b591c <_Z17acquireWireBufferv+0x2c>)
   b58f4:	6003      	str	r3, [r0, #0]
   b58f6:	2301      	movs	r3, #1
{
   b58f8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b58fa:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b58fc:	4908      	ldr	r1, [pc, #32]	; (b5920 <_Z17acquireWireBufferv+0x30>)
   b58fe:	2020      	movs	r0, #32
   b5900:	f000 f834 	bl	b596c <_ZnajRKSt9nothrow_t>
	};
   b5904:	2520      	movs	r5, #32
   b5906:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5908:	4905      	ldr	r1, [pc, #20]	; (b5920 <_Z17acquireWireBufferv+0x30>)
	};
   b590a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b590c:	4628      	mov	r0, r5
   b590e:	f000 f82d 	bl	b596c <_ZnajRKSt9nothrow_t>
	};
   b5912:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5916:	4620      	mov	r0, r4
   b5918:	bd38      	pop	{r3, r4, r5, pc}
   b591a:	bf00      	nop
   b591c:	00010018 	.word	0x00010018
   b5920:	000b5d2c 	.word	0x000b5d2c

000b5924 <_Z19__fetch_global_Wirev>:
{
   b5924:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5926:	4d0e      	ldr	r5, [pc, #56]	; (b5960 <_Z19__fetch_global_Wirev+0x3c>)
   b5928:	7829      	ldrb	r1, [r5, #0]
   b592a:	f3bf 8f5b 	dmb	ish
   b592e:	f011 0401 	ands.w	r4, r1, #1
{
   b5932:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5934:	d111      	bne.n	b595a <_Z19__fetch_global_Wirev+0x36>
   b5936:	4628      	mov	r0, r5
   b5938:	f7fe fbb1 	bl	b409e <__cxa_guard_acquire>
   b593c:	b168      	cbz	r0, b595a <_Z19__fetch_global_Wirev+0x36>
   b593e:	4668      	mov	r0, sp
   b5940:	f7ff ffd6 	bl	b58f0 <_Z17acquireWireBufferv>
   b5944:	466a      	mov	r2, sp
   b5946:	4621      	mov	r1, r4
   b5948:	4806      	ldr	r0, [pc, #24]	; (b5964 <_Z19__fetch_global_Wirev+0x40>)
   b594a:	f7ff fe07 	bl	b555c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b594e:	4628      	mov	r0, r5
   b5950:	f7fe fbaa 	bl	b40a8 <__cxa_guard_release>
   b5954:	4804      	ldr	r0, [pc, #16]	; (b5968 <_Z19__fetch_global_Wirev+0x44>)
   b5956:	f000 f80e 	bl	b5976 <atexit>
	return wire;
}
   b595a:	4802      	ldr	r0, [pc, #8]	; (b5964 <_Z19__fetch_global_Wirev+0x40>)
   b595c:	b007      	add	sp, #28
   b595e:	bd30      	pop	{r4, r5, pc}
   b5960:	2003e748 	.word	0x2003e748
   b5964:	2003e74c 	.word	0x2003e74c
   b5968:	000b58ed 	.word	0x000b58ed

000b596c <_ZnajRKSt9nothrow_t>:
   b596c:	f7fe bb93 	b.w	b4096 <_Znaj>

000b5970 <_ZSt25__throw_bad_function_callv>:
   b5970:	b508      	push	{r3, lr}
   b5972:	f7fe fea5 	bl	b46c0 <abort>

000b5976 <atexit>:
   b5976:	2300      	movs	r3, #0
   b5978:	4601      	mov	r1, r0
   b597a:	461a      	mov	r2, r3
   b597c:	4618      	mov	r0, r3
   b597e:	f000 b873 	b.w	b5a68 <__register_exitproc>

000b5982 <memcpy>:
   b5982:	440a      	add	r2, r1
   b5984:	4291      	cmp	r1, r2
   b5986:	f100 33ff 	add.w	r3, r0, #4294967295
   b598a:	d100      	bne.n	b598e <memcpy+0xc>
   b598c:	4770      	bx	lr
   b598e:	b510      	push	{r4, lr}
   b5990:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5994:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5998:	4291      	cmp	r1, r2
   b599a:	d1f9      	bne.n	b5990 <memcpy+0xe>
   b599c:	bd10      	pop	{r4, pc}

000b599e <memset>:
   b599e:	4402      	add	r2, r0
   b59a0:	4603      	mov	r3, r0
   b59a2:	4293      	cmp	r3, r2
   b59a4:	d100      	bne.n	b59a8 <memset+0xa>
   b59a6:	4770      	bx	lr
   b59a8:	f803 1b01 	strb.w	r1, [r3], #1
   b59ac:	e7f9      	b.n	b59a2 <memset+0x4>
	...

000b59b0 <srand>:
   b59b0:	b538      	push	{r3, r4, r5, lr}
   b59b2:	4b10      	ldr	r3, [pc, #64]	; (b59f4 <srand+0x44>)
   b59b4:	681d      	ldr	r5, [r3, #0]
   b59b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b59b8:	4604      	mov	r4, r0
   b59ba:	b9b3      	cbnz	r3, b59ea <srand+0x3a>
   b59bc:	2018      	movs	r0, #24
   b59be:	f7fe fe67 	bl	b4690 <malloc>
   b59c2:	4602      	mov	r2, r0
   b59c4:	63a8      	str	r0, [r5, #56]	; 0x38
   b59c6:	b920      	cbnz	r0, b59d2 <srand+0x22>
   b59c8:	4b0b      	ldr	r3, [pc, #44]	; (b59f8 <srand+0x48>)
   b59ca:	480c      	ldr	r0, [pc, #48]	; (b59fc <srand+0x4c>)
   b59cc:	2142      	movs	r1, #66	; 0x42
   b59ce:	f7fe fe87 	bl	b46e0 <__assert_func>
   b59d2:	490b      	ldr	r1, [pc, #44]	; (b5a00 <srand+0x50>)
   b59d4:	4b0b      	ldr	r3, [pc, #44]	; (b5a04 <srand+0x54>)
   b59d6:	e9c0 1300 	strd	r1, r3, [r0]
   b59da:	4b0b      	ldr	r3, [pc, #44]	; (b5a08 <srand+0x58>)
   b59dc:	6083      	str	r3, [r0, #8]
   b59de:	230b      	movs	r3, #11
   b59e0:	8183      	strh	r3, [r0, #12]
   b59e2:	2100      	movs	r1, #0
   b59e4:	2001      	movs	r0, #1
   b59e6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b59ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b59ec:	2200      	movs	r2, #0
   b59ee:	611c      	str	r4, [r3, #16]
   b59f0:	615a      	str	r2, [r3, #20]
   b59f2:	bd38      	pop	{r3, r4, r5, pc}
   b59f4:	2003e5ec 	.word	0x2003e5ec
   b59f8:	000b5d2d 	.word	0x000b5d2d
   b59fc:	000b5d44 	.word	0x000b5d44
   b5a00:	abcd330e 	.word	0xabcd330e
   b5a04:	e66d1234 	.word	0xe66d1234
   b5a08:	0005deec 	.word	0x0005deec

000b5a0c <strcpy>:
   b5a0c:	4603      	mov	r3, r0
   b5a0e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b5a12:	f803 2b01 	strb.w	r2, [r3], #1
   b5a16:	2a00      	cmp	r2, #0
   b5a18:	d1f9      	bne.n	b5a0e <strcpy+0x2>
   b5a1a:	4770      	bx	lr

000b5a1c <strdup>:
   b5a1c:	4b02      	ldr	r3, [pc, #8]	; (b5a28 <strdup+0xc>)
   b5a1e:	4601      	mov	r1, r0
   b5a20:	6818      	ldr	r0, [r3, #0]
   b5a22:	f000 b803 	b.w	b5a2c <_strdup_r>
   b5a26:	bf00      	nop
   b5a28:	2003e5ec 	.word	0x2003e5ec

000b5a2c <_strdup_r>:
   b5a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5a2e:	4604      	mov	r4, r0
   b5a30:	4608      	mov	r0, r1
   b5a32:	460d      	mov	r5, r1
   b5a34:	f000 f80f 	bl	b5a56 <strlen>
   b5a38:	1c42      	adds	r2, r0, #1
   b5a3a:	4611      	mov	r1, r2
   b5a3c:	4620      	mov	r0, r4
   b5a3e:	9201      	str	r2, [sp, #4]
   b5a40:	f7fe fe46 	bl	b46d0 <_malloc_r>
   b5a44:	4604      	mov	r4, r0
   b5a46:	b118      	cbz	r0, b5a50 <_strdup_r+0x24>
   b5a48:	9a01      	ldr	r2, [sp, #4]
   b5a4a:	4629      	mov	r1, r5
   b5a4c:	f7ff ff99 	bl	b5982 <memcpy>
   b5a50:	4620      	mov	r0, r4
   b5a52:	b003      	add	sp, #12
   b5a54:	bd30      	pop	{r4, r5, pc}

000b5a56 <strlen>:
   b5a56:	4603      	mov	r3, r0
   b5a58:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5a5c:	2a00      	cmp	r2, #0
   b5a5e:	d1fb      	bne.n	b5a58 <strlen+0x2>
   b5a60:	1a18      	subs	r0, r3, r0
   b5a62:	3801      	subs	r0, #1
   b5a64:	4770      	bx	lr
	...

000b5a68 <__register_exitproc>:
   b5a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5a6c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5b28 <__register_exitproc+0xc0>
   b5a70:	4606      	mov	r6, r0
   b5a72:	f8d8 0000 	ldr.w	r0, [r8]
   b5a76:	461f      	mov	r7, r3
   b5a78:	460d      	mov	r5, r1
   b5a7a:	4691      	mov	r9, r2
   b5a7c:	f000 f856 	bl	b5b2c <__retarget_lock_acquire_recursive>
   b5a80:	4b25      	ldr	r3, [pc, #148]	; (b5b18 <__register_exitproc+0xb0>)
   b5a82:	681c      	ldr	r4, [r3, #0]
   b5a84:	b934      	cbnz	r4, b5a94 <__register_exitproc+0x2c>
   b5a86:	4c25      	ldr	r4, [pc, #148]	; (b5b1c <__register_exitproc+0xb4>)
   b5a88:	601c      	str	r4, [r3, #0]
   b5a8a:	4b25      	ldr	r3, [pc, #148]	; (b5b20 <__register_exitproc+0xb8>)
   b5a8c:	b113      	cbz	r3, b5a94 <__register_exitproc+0x2c>
   b5a8e:	681b      	ldr	r3, [r3, #0]
   b5a90:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5a94:	6863      	ldr	r3, [r4, #4]
   b5a96:	2b1f      	cmp	r3, #31
   b5a98:	dd07      	ble.n	b5aaa <__register_exitproc+0x42>
   b5a9a:	f8d8 0000 	ldr.w	r0, [r8]
   b5a9e:	f000 f847 	bl	b5b30 <__retarget_lock_release_recursive>
   b5aa2:	f04f 30ff 	mov.w	r0, #4294967295
   b5aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5aaa:	b34e      	cbz	r6, b5b00 <__register_exitproc+0x98>
   b5aac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5ab0:	b988      	cbnz	r0, b5ad6 <__register_exitproc+0x6e>
   b5ab2:	4b1c      	ldr	r3, [pc, #112]	; (b5b24 <__register_exitproc+0xbc>)
   b5ab4:	b923      	cbnz	r3, b5ac0 <__register_exitproc+0x58>
   b5ab6:	f8d8 0000 	ldr.w	r0, [r8]
   b5aba:	f000 f838 	bl	b5b2e <__retarget_lock_release>
   b5abe:	e7f0      	b.n	b5aa2 <__register_exitproc+0x3a>
   b5ac0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5ac4:	f7fe fde4 	bl	b4690 <malloc>
   b5ac8:	2800      	cmp	r0, #0
   b5aca:	d0f4      	beq.n	b5ab6 <__register_exitproc+0x4e>
   b5acc:	2300      	movs	r3, #0
   b5ace:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5ad2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5ad6:	6863      	ldr	r3, [r4, #4]
   b5ad8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5adc:	2201      	movs	r2, #1
   b5ade:	409a      	lsls	r2, r3
   b5ae0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5ae4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5ae8:	4313      	orrs	r3, r2
   b5aea:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5aee:	2e02      	cmp	r6, #2
   b5af0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5af4:	bf02      	ittt	eq
   b5af6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5afa:	4313      	orreq	r3, r2
   b5afc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5b00:	6863      	ldr	r3, [r4, #4]
   b5b02:	f8d8 0000 	ldr.w	r0, [r8]
   b5b06:	1c5a      	adds	r2, r3, #1
   b5b08:	3302      	adds	r3, #2
   b5b0a:	6062      	str	r2, [r4, #4]
   b5b0c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5b10:	f000 f80e 	bl	b5b30 <__retarget_lock_release_recursive>
   b5b14:	2000      	movs	r0, #0
   b5b16:	e7c6      	b.n	b5aa6 <__register_exitproc+0x3e>
   b5b18:	2003e7ec 	.word	0x2003e7ec
   b5b1c:	2003e760 	.word	0x2003e760
   b5b20:	00000000 	.word	0x00000000
   b5b24:	000b4691 	.word	0x000b4691
   b5b28:	2003e650 	.word	0x2003e650

000b5b2c <__retarget_lock_acquire_recursive>:
   b5b2c:	4770      	bx	lr

000b5b2e <__retarget_lock_release>:
   b5b2e:	4770      	bx	lr

000b5b30 <__retarget_lock_release_recursive>:
   b5b30:	4770      	bx	lr

000b5b32 <link_code_end>:
	...

000b5b34 <dynalib_user>:
   b5b34:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b5b44:	0000 0000 4948 4847 4d00 746f 6f69 206e     ....HIGH.Motion 
   b5b54:	6553 736e 726f 5620 6c61 6575 4c00 574f     Sensor Value.LOW
   b5b64:	7b00 2220 6550 706f 656c 4320 756f 746e     .{ "People Count
   b5b74:	6465 3a22 2220 2200 002c 4222 7475 6f74     ed": ".",."Butto
   b5b84:	206e 7250 7365 6573 2273 203a 0022 7d22     n Presses": "."}
   b5b94:	4300 756f 746e 7265 0000 0000               .Counter....

000b5ba0 <_ZTVN5spark13EthernetClassE>:
	...
   b5ba8:	476f 000b 4765 000b 475b 000b 4751 000b     oG..eG..[G..QG..
   b5bb8:	4745 000b 4739 000b 5655 000b 565d 000b     EG..9G..UV..]V..
   b5bc8:	472d 000b 4725 000b 471b 000b 4711 000b     -G..%G...G...G..
   b5bd8:	568d 000b 7061 0070 5925 252d 2d6d 6425     .V..app.%Y-%m-%d
   b5be8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b5bf8:	6d69 0065                                   ime.

000b5bfc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b5c04:	4d19 000b 4d1f 000b 4d5d 000b 4d2d 000b     .M...M..]M..-M..
   b5c14:	4d1b 000b                                   .M..

000b5c18 <_ZTV9IPAddress>:
	...
   b5c20:	5259 000b 5249 000b 524b 000b               YR..IR..KR..

000b5c2c <_ZTV9USBSerial>:
	...
   b5c34:	533f 000b 53a7 000b 537d 000b 4a1d 000b     ?S...S..}S...J..
   b5c44:	536f 000b 5341 000b 5351 000b 53a1 000b     oS..AS..QS...S..
   b5c54:	5361 000b 5339 000b                         aS..9S..

000b5c5c <_ZTV11USARTSerial>:
	...
   b5c64:	5439 000b 54a5 000b 547d 000b 4a1d 000b     9T...T..}T...J..
   b5c74:	544d 000b 5469 000b 545b 000b 5477 000b     MT..iT..[T..wT..
   b5c84:	543b 000b 543f 000b                         ;T..?T..

000b5c8c <_ZTV7TwoWire>:
	...
   b5c94:	5505 000b 554f 000b 5527 000b 5507 000b     .U..OU..'U...U..
   b5ca4:	552f 000b 5537 000b 553f 000b 5547 000b     /U..7U..?U..GU..

000b5cb4 <_ZTVN5spark9WiFiClassE>:
	...
   b5cbc:	55f7 000b 55ed 000b 55e3 000b 5599 000b     .U...U...U...U..
   b5ccc:	55d7 000b 55cb 000b 5655 000b 565d 000b     .U...U..UV..]V..
   b5cdc:	55bf 000b 55b7 000b 55ad 000b 55a3 000b     .U...U...U...U..
   b5cec:	568d 000b                                   .V..

000b5cf0 <_ZTVN5spark12NetworkClassE>:
	...
   b5cf8:	5615 000b 561f 000b 5629 000b 5633 000b     .V...V..)V..3V..
   b5d08:	563d 000b 5649 000b 5655 000b 565d 000b     =V..IV..UV..]V..
   b5d18:	5665 000b 5671 000b 5679 000b 5683 000b     eV..qV..yV...V..
   b5d28:	568d 000b                                   .V..

000b5d2c <_ZSt7nothrow>:
   b5d2c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5d3c:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b5d4c:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b5d5c:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b5d6c:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b5d7c:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b5d8c:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b5d9c:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b5dac:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b5dbc:	646e 632e                                    nd.c.

000b5dc1 <link_const_variable_data_end>:
   b5dc1:	00          	.byte	0x00
	...

000b5dc4 <link_constructors_location>:
   b5dc4:	000b429d 	.word	0x000b429d
   b5dc8:	000b4779 	.word	0x000b4779
   b5dcc:	000b47a1 	.word	0x000b47a1
   b5dd0:	000b4a0d 	.word	0x000b4a0d
   b5dd4:	000b4ab1 	.word	0x000b4ab1
   b5dd8:	000b4bb9 	.word	0x000b4bb9
   b5ddc:	000b4bd5 	.word	0x000b4bd5
   b5de0:	000b5601 	.word	0x000b5601
   b5de4:	000b5765 	.word	0x000b5765

000b5de8 <link_constructors_end>:
	...
