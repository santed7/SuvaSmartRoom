
c:/Users/vcox/Documents/IoT/SuvaSmartRoom/Midterm2/Midterm2v2/target/4.0.2/argon/Midterm2v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003554  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7570  000b7570  00007570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7594  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003e4ec  000b7598  0001e4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000294  2003e55c  2003e55c  0002e55c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7608  000b7608  00027608  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b7630  000b7630  00027630  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00120dbd  00000000  00000000  00027634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00014178  00000000  00000000  001483f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00037213  00000000  00000000  0015c569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002d70  00000000  00000000  0019377c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a1d8  00000000  00000000  001964ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d897  00000000  00000000  001a06c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000429bc  00000000  00000000  001ddf5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136f63  00000000  00000000  00220917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007f70  00000000  00000000  0035787c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fe09 	bl	b6c44 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fe2b 	bl	b6c94 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e4ec 	.word	0x2003e4ec
   b4048:	000b7598 	.word	0x000b7598
   b404c:	2003e55c 	.word	0x2003e55c
   b4050:	2003e55c 	.word	0x2003e55c
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 f9cf 	bl	b5400 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7544 	.word	0x000b7544
   b407c:	000b7568 	.word	0x000b7568

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b830 	b.w	b40e4 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f90d 	bl	b42a4 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 b96f 	b.w	b5370 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bf9b 	b.w	b4fcc <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bf99 	b.w	b4fcc <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bf9f 	b.w	b4fdc <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f000 feec 	bl	b4e84 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b4c15 	.word	0x000b4c15
   b40b4:	000b6e3c 	.word	0x000b6e3c

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c8:	b40e      	push	{r1, r2, r3}
   b40ca:	b503      	push	{r0, r1, lr}
   b40cc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ce:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40d6:	f001 f8c6 	bl	b5266 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40da:	b002      	add	sp, #8
   b40dc:	f85d eb04 	ldr.w	lr, [sp], #4
   b40e0:	b003      	add	sp, #12
   b40e2:	4770      	bx	lr

000b40e4 <setup>:
//srand(unsigned int seed_value);
//int random = rand();

SYSTEM_MODE(SEMI_AUTOMATIC);

 void setup() {
   b40e4:	b538      	push	{r3, r4, r5, lr}
  pinMode(soilentGreen, INPUT);
   b40e6:	4b31      	ldr	r3, [pc, #196]	; (b41ac <setup+0xc8>)
   b40e8:	2100      	movs	r1, #0
   b40ea:	8818      	ldrh	r0, [r3, #0]
   b40ec:	f001 ff66 	bl	b5fbc <pinMode>
  pinMode(pumpPIN, OUTPUT);
   b40f0:	2101      	movs	r1, #1
   b40f2:	200b      	movs	r0, #11
   b40f4:	f001 ff62 	bl	b5fbc <pinMode>
  Serial.begin(9600);
   b40f8:	f001 faa4 	bl	b5644 <_Z16_fetch_usbserialv>
   b40fc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4100:	f001 fa90 	bl	b5624 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b4104:	2000      	movs	r0, #0
   b4106:	f000 fd95 	bl	b4c34 <hal_timer_millis>
        while (_while() && !_condition()) {
   b410a:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b410e:	4604      	mov	r4, r0
   b4110:	2000      	movs	r0, #0
   b4112:	f000 fd8f 	bl	b4c34 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4116:	1b00      	subs	r0, r0, r4
   b4118:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b411c:	42a8      	cmp	r0, r5
   b411e:	f171 0300 	sbcs.w	r3, r1, #0
   b4122:	d207      	bcs.n	b4134 <setup+0x50>
  waitFor(Serial.isConnected,10000);
   b4124:	f001 fa8e 	bl	b5644 <_Z16_fetch_usbserialv>
   b4128:	f001 fa80 	bl	b562c <_ZN9USBSerial11isConnectedEv>
   b412c:	b910      	cbnz	r0, b4134 <setup+0x50>
            spark_process();
   b412e:	f000 ff3d 	bl	b4fac <spark_process>
        while (_while() && !_condition()) {
   b4132:	e7ed      	b.n	b4110 <setup+0x2c>
   b4134:	f001 fa86 	bl	b5644 <_Z16_fetch_usbserialv>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4138:	4c1d      	ldr	r4, [pc, #116]	; (b41b0 <setup+0xcc>)

   // Connect to Internet but not Particle Cloud
  WiFi.on();
  WiFi.connect();
  while(WiFi.connecting()) {
    Serial.printf(".");
   b413a:	4d1e      	ldr	r5, [pc, #120]	; (b41b4 <setup+0xd0>)
  waitFor(Serial.isConnected,10000);
   b413c:	f001 fa76 	bl	b562c <_ZN9USBSerial11isConnectedEv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4140:	2300      	movs	r3, #0
   b4142:	461a      	mov	r2, r3
   b4144:	4619      	mov	r1, r3
   b4146:	6860      	ldr	r0, [r4, #4]
   b4148:	f000 fef0 	bl	b4f2c <network_on>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b414c:	2300      	movs	r3, #0
   b414e:	6860      	ldr	r0, [r4, #4]
   b4150:	461a      	mov	r2, r3
   b4152:	4619      	mov	r1, r3
   b4154:	f000 feca 	bl	b4eec <network_connect>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   b4158:	2200      	movs	r2, #0
   b415a:	6860      	ldr	r0, [r4, #4]
   b415c:	4611      	mov	r1, r2
   b415e:	f000 fecd 	bl	b4efc <network_connecting>
  while(WiFi.connecting()) {
   b4162:	b128      	cbz	r0, b4170 <setup+0x8c>
    Serial.printf(".");
   b4164:	f001 fa6e 	bl	b5644 <_Z16_fetch_usbserialv>
   b4168:	4629      	mov	r1, r5
   b416a:	f7ff ffad 	bl	b40c8 <_ZN5Print6printfEPKcz>
  while(WiFi.connecting()) {
   b416e:	e7f3      	b.n	b4158 <setup+0x74>
  }
  Serial.printf("\n\n");
   b4170:	f001 fa68 	bl	b5644 <_Z16_fetch_usbserialv>
   b4174:	4910      	ldr	r1, [pc, #64]	; (b41b8 <setup+0xd4>)
   b4176:	f7ff ffa7 	bl	b40c8 <_ZN5Print6printfEPKcz>
  // delay(6000);
  // digitalWrite(pumpPIN,HIGH);
  // delay(6000);
  // digitalWrite(pumpPIN,LOW);
  // Setup MQTT subscription
  mqtt.subscribe(&subFeed);//must tell Argon to subscribe
   b417a:	4910      	ldr	r1, [pc, #64]	; (b41bc <setup+0xd8>)
   b417c:	4810      	ldr	r0, [pc, #64]	; (b41c0 <setup+0xdc>)
   b417e:	f000 fa7b 	bl	b4678 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>
  
 myScale.set_scale(); // initialize loadcell
   b4182:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   b4186:	480f      	ldr	r0, [pc, #60]	; (b41c4 <setup+0xe0>)
   b4188:	f000 fcf1 	bl	b4b6e <_ZN5HX7119set_scaleEf>
 delay(5000); // this is time for the loadcell settle
   b418c:	f241 3088 	movw	r0, #5000	; 0x1388
   b4190:	f001 f8ac 	bl	b52ec <delay>
 myScale.tare(29.25); // set the tare weight (or zero )
   b4194:	480b      	ldr	r0, [pc, #44]	; (b41c4 <setup+0xe0>)
   b4196:	211d      	movs	r1, #29
   b4198:	f000 fce3 	bl	b4b62 <_ZN5HX7114tareEh>
 myScale.set_scale(CAL_FACTOR); // adjust when calibrating scale to desired units
 
 }
   b419c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 myScale.set_scale(CAL_FACTOR); // adjust when calibrating scale to desired units
   b41a0:	ed9f 0a09 	vldr	s0, [pc, #36]	; b41c8 <setup+0xe4>
   b41a4:	4807      	ldr	r0, [pc, #28]	; (b41c4 <setup+0xe0>)
   b41a6:	f000 bce2 	b.w	b4b6e <_ZN5HX7119set_scaleEf>
   b41aa:	bf00      	nop
   b41ac:	2003e4ec 	.word	0x2003e4ec
   b41b0:	2003e70c 	.word	0x2003e70c
   b41b4:	000b70fa 	.word	0x000b70fa
   b41b8:	000b6e51 	.word	0x000b6e51
   b41bc:	2003e67c 	.word	0x2003e67c
   b41c0:	2003e58c 	.word	0x2003e58c
   b41c4:	2003e660 	.word	0x2003e660
   b41c8:	42be0000 	.word	0x42be0000

000b41cc <_Z12MQTT_connectv>:
    lastTime = millis();
  }
}
// Function to connect and reconnect as necessary to the MQTT server.
// Should be called in the loop function and it will take care if connecting.
void MQTT_connect() {
   b41cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int8_t ret;
 
  // Return if already connected.
  if (mqtt.connected()) {
   b41d0:	4818      	ldr	r0, [pc, #96]	; (b4234 <_Z12MQTT_connectv+0x68>)
   b41d2:	f000 f8ef 	bl	b43b4 <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   b41d6:	bb58      	cbnz	r0, b4230 <_Z12MQTT_connectv+0x64>
    return;
  }
 
  Serial.print("Connecting to MQTT... ");
   b41d8:	f001 fa34 	bl	b5644 <_Z16_fetch_usbserialv>
   b41dc:	4916      	ldr	r1, [pc, #88]	; (b4238 <_Z12MQTT_connectv+0x6c>)
 
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b41de:	4e15      	ldr	r6, [pc, #84]	; (b4234 <_Z12MQTT_connectv+0x68>)
       Serial.printf("Error Code %s\n",mqtt.connectErrorString(ret));
   b41e0:	f8df 8060 	ldr.w	r8, [pc, #96]	; b4244 <_Z12MQTT_connectv+0x78>
       Serial.printf("Retrying MQTT connection in 5 seconds...\n");
   b41e4:	4f15      	ldr	r7, [pc, #84]	; (b423c <_Z12MQTT_connectv+0x70>)
  Serial.print("Connecting to MQTT... ");
   b41e6:	f001 f803 	bl	b51f0 <_ZN5Print5printEPKc>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b41ea:	4812      	ldr	r0, [pc, #72]	; (b4234 <_Z12MQTT_connectv+0x68>)
   b41ec:	f000 fb8f 	bl	b490e <_ZN13Adafruit_MQTT7connectEv>
   b41f0:	4604      	mov	r4, r0
   b41f2:	b1c0      	cbz	r0, b4226 <_Z12MQTT_connectv+0x5a>
       Serial.printf("Error Code %s\n",mqtt.connectErrorString(ret));
   b41f4:	f001 fa26 	bl	b5644 <_Z16_fetch_usbserialv>
   b41f8:	4621      	mov	r1, r4
   b41fa:	4605      	mov	r5, r0
   b41fc:	4630      	mov	r0, r6
   b41fe:	f000 fa19 	bl	b4634 <_ZN13Adafruit_MQTT18connectErrorStringEa>
   b4202:	4641      	mov	r1, r8
   b4204:	4602      	mov	r2, r0
   b4206:	4628      	mov	r0, r5
   b4208:	f7ff ff5e 	bl	b40c8 <_ZN5Print6printfEPKcz>
       Serial.printf("Retrying MQTT connection in 5 seconds...\n");
   b420c:	f001 fa1a 	bl	b5644 <_Z16_fetch_usbserialv>
   b4210:	4639      	mov	r1, r7
   b4212:	f7ff ff59 	bl	b40c8 <_ZN5Print6printfEPKcz>
       mqtt.disconnect();
   b4216:	4630      	mov	r0, r6
   b4218:	f000 fa1a 	bl	b4650 <_ZN13Adafruit_MQTT10disconnectEv>
       delay(5000);  // wait 5 seconds and try again
   b421c:	f241 3088 	movw	r0, #5000	; 0x1388
   b4220:	f001 f864 	bl	b52ec <delay>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b4224:	e7e1      	b.n	b41ea <_Z12MQTT_connectv+0x1e>
  }
  Serial.printf("MQTT Connected!\n");
   b4226:	f001 fa0d 	bl	b5644 <_Z16_fetch_usbserialv>
   b422a:	4905      	ldr	r1, [pc, #20]	; (b4240 <_Z12MQTT_connectv+0x74>)
   b422c:	f7ff ff4c 	bl	b40c8 <_ZN5Print6printfEPKcz>
}
   b4230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4234:	2003e58c 	.word	0x2003e58c
   b4238:	000b6e54 	.word	0x000b6e54
   b423c:	000b6e7a 	.word	0x000b6e7a
   b4240:	000b6ea4 	.word	0x000b6ea4
   b4244:	000b6e6b 	.word	0x000b6e6b

000b4248 <_Z9MQTT_pingv>:
bool MQTT_ping() {
   b4248:	b538      	push	{r3, r4, r5, lr}
  static unsigned int last;
  bool pingStatus;
  //keep the connection alive
  if ((millis()-last)>120000) {
   b424a:	4d11      	ldr	r5, [pc, #68]	; (b4290 <_Z9MQTT_pingv+0x48>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b424c:	f000 fcea 	bl	b4c24 <HAL_Timer_Get_Milli_Seconds>
   b4250:	682b      	ldr	r3, [r5, #0]
   b4252:	1ac0      	subs	r0, r0, r3
   b4254:	4b0f      	ldr	r3, [pc, #60]	; (b4294 <_Z9MQTT_pingv+0x4c>)
   b4256:	4298      	cmp	r0, r3
bool MQTT_ping() {
   b4258:	f04f 0400 	mov.w	r4, #0
  if ((millis()-last)>120000) {
   b425c:	d915      	bls.n	b428a <_Z9MQTT_pingv+0x42>
      Serial.printf("Pinging MQTT \n");
   b425e:	f001 f9f1 	bl	b5644 <_Z16_fetch_usbserialv>
   b4262:	490d      	ldr	r1, [pc, #52]	; (b4298 <_Z9MQTT_pingv+0x50>)
   b4264:	f7ff ff30 	bl	b40c8 <_ZN5Print6printfEPKcz>
      pingStatus = mqtt.ping();
   b4268:	480c      	ldr	r0, [pc, #48]	; (b429c <_Z9MQTT_pingv+0x54>)
   b426a:	2101      	movs	r1, #1
   b426c:	f000 fa1f 	bl	b46ae <_ZN13Adafruit_MQTT4pingEh>
      if(!pingStatus) {
   b4270:	4604      	mov	r4, r0
   b4272:	b938      	cbnz	r0, b4284 <_Z9MQTT_pingv+0x3c>
        Serial.printf("Disconnecting \n");
   b4274:	f001 f9e6 	bl	b5644 <_Z16_fetch_usbserialv>
   b4278:	4909      	ldr	r1, [pc, #36]	; (b42a0 <_Z9MQTT_pingv+0x58>)
   b427a:	f7ff ff25 	bl	b40c8 <_ZN5Print6printfEPKcz>
        mqtt.disconnect();
   b427e:	4807      	ldr	r0, [pc, #28]	; (b429c <_Z9MQTT_pingv+0x54>)
   b4280:	f000 f9e6 	bl	b4650 <_ZN13Adafruit_MQTT10disconnectEv>
   b4284:	f000 fcce 	bl	b4c24 <HAL_Timer_Get_Milli_Seconds>
      }
      last = millis();
   b4288:	6028      	str	r0, [r5, #0]
  }
  return pingStatus;
}
   b428a:	4620      	mov	r0, r4
   b428c:	bd38      	pop	{r3, r4, r5, pc}
   b428e:	bf00      	nop
   b4290:	2003e584 	.word	0x2003e584
   b4294:	0001d4c0 	.word	0x0001d4c0
   b4298:	000b6eb5 	.word	0x000b6eb5
   b429c:	2003e58c 	.word	0x2003e58c
   b42a0:	000b6ec4 	.word	0x000b6ec4

000b42a4 <loop>:
 void loop () {
   b42a4:	b538      	push	{r3, r4, r5, lr}
  soilentGreen=analogRead(soilentGreen);
   b42a6:	4c17      	ldr	r4, [pc, #92]	; (b4304 <loop+0x60>)
  if((millis()-lastTime > 6000)) {
   b42a8:	4d17      	ldr	r5, [pc, #92]	; (b4308 <loop+0x64>)
  soilentGreen=analogRead(soilentGreen);
   b42aa:	8820      	ldrh	r0, [r4, #0]
   b42ac:	f001 fec3 	bl	b6036 <analogRead>
   b42b0:	6020      	str	r0, [r4, #0]
  MQTT_connect();
   b42b2:	f7ff ff8b 	bl	b41cc <_Z12MQTT_connectv>
  MQTT_ping();
   b42b6:	f7ff ffc7 	bl	b4248 <_Z9MQTT_pingv>
 weight = myScale.get_units(SAMPLES); // return weight in units set by set_scale ();
   b42ba:	210a      	movs	r1, #10
   b42bc:	4813      	ldr	r0, [pc, #76]	; (b430c <loop+0x68>)
   b42be:	f000 fc3c 	bl	b4b3a <_ZN5HX7119get_unitsEh>
   b42c2:	4b13      	ldr	r3, [pc, #76]	; (b4310 <loop+0x6c>)
 delay(5000); // gonna wait between readings
   b42c4:	f241 3088 	movw	r0, #5000	; 0x1388
 weight = myScale.get_units(SAMPLES); // return weight in units set by set_scale ();
   b42c8:	ed83 0a00 	vstr	s0, [r3]
 delay(5000); // gonna wait between readings
   b42cc:	f001 f80e 	bl	b52ec <delay>
   b42d0:	f000 fca8 	bl	b4c24 <HAL_Timer_Get_Milli_Seconds>
  if((millis()-lastTime > 6000)) {
   b42d4:	682b      	ldr	r3, [r5, #0]
   b42d6:	1ac0      	subs	r0, r0, r3
   b42d8:	f241 7370 	movw	r3, #6000	; 0x1770
   b42dc:	4298      	cmp	r0, r3
   b42de:	d910      	bls.n	b4302 <loop+0x5e>
    if(mqtt.Update()) {
   b42e0:	480c      	ldr	r0, [pc, #48]	; (b4314 <loop+0x70>)
   b42e2:	f000 f8ed 	bl	b44c0 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   b42e6:	b118      	cbz	r0, b42f0 <loop+0x4c>
      pubFeed.publish(soilentGreen);
   b42e8:	6821      	ldr	r1, [r4, #0]
   b42ea:	480b      	ldr	r0, [pc, #44]	; (b4318 <loop+0x74>)
   b42ec:	f000 fb6b 	bl	b49c6 <_ZN21Adafruit_MQTT_Publish7publishEi>
      Serial.printf("Moisture reading is %i \n",soilentGreen); 
   b42f0:	f001 f9a8 	bl	b5644 <_Z16_fetch_usbserialv>
   b42f4:	6822      	ldr	r2, [r4, #0]
   b42f6:	4909      	ldr	r1, [pc, #36]	; (b431c <loop+0x78>)
   b42f8:	f7ff fee6 	bl	b40c8 <_ZN5Print6printfEPKcz>
   b42fc:	f000 fc92 	bl	b4c24 <HAL_Timer_Get_Milli_Seconds>
    lastTime = millis();
   b4300:	6028      	str	r0, [r5, #0]
}
   b4302:	bd38      	pop	{r3, r4, r5, pc}
   b4304:	2003e4ec 	.word	0x2003e4ec
   b4308:	2003e588 	.word	0x2003e588
   b430c:	2003e660 	.word	0x2003e660
   b4310:	2003e6b4 	.word	0x2003e6b4
   b4314:	2003e58c 	.word	0x2003e58c
   b4318:	2003e670 	.word	0x2003e670
   b431c:	000b6ed4 	.word	0x000b6ed4

000b4320 <_GLOBAL__sub_I_myScale>:
}
   b4320:	b537      	push	{r0, r1, r2, r4, r5, lr}
TCPClient TheClient; 
   b4322:	4d18      	ldr	r5, [pc, #96]	; (b4384 <_GLOBAL__sub_I_myScale+0x64>)
 HX711 myScale (14, 17); // my (2) digital pins [2 are needed]
   b4324:	4818      	ldr	r0, [pc, #96]	; (b4388 <_GLOBAL__sub_I_myScale+0x68>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   b4326:	4c19      	ldr	r4, [pc, #100]	; (b438c <_GLOBAL__sub_I_myScale+0x6c>)
   b4328:	2380      	movs	r3, #128	; 0x80
   b432a:	2211      	movs	r2, #17
   b432c:	210e      	movs	r1, #14
   b432e:	f000 fbd7 	bl	b4ae0 <_ZN5HX711C1Ehhh>
TCPClient TheClient; 
   b4332:	4628      	mov	r0, r5
   b4334:	f001 fd00 	bl	b5d38 <_ZN9TCPClientC1Ev>
   b4338:	4b15      	ldr	r3, [pc, #84]	; (b4390 <_GLOBAL__sub_I_myScale+0x70>)
   b433a:	9300      	str	r3, [sp, #0]
   b433c:	4915      	ldr	r1, [pc, #84]	; (b4394 <_GLOBAL__sub_I_myScale+0x74>)
   b433e:	4b16      	ldr	r3, [pc, #88]	; (b4398 <_GLOBAL__sub_I_myScale+0x78>)
   b4340:	f240 725b 	movw	r2, #1883	; 0x75b
   b4344:	4620      	mov	r0, r4
   b4346:	f000 f8f1 	bl	b452c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   b434a:	4b14      	ldr	r3, [pc, #80]	; (b439c <_GLOBAL__sub_I_myScale+0x7c>)
   b434c:	6023      	str	r3, [r4, #0]
Adafruit_MQTT_Subscribe subFeed = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/suvabuttononoff"); 
   b434e:	4621      	mov	r1, r4
   b4350:	4a13      	ldr	r2, [pc, #76]	; (b43a0 <_GLOBAL__sub_I_myScale+0x80>)
   b4352:	4814      	ldr	r0, [pc, #80]	; (b43a4 <_GLOBAL__sub_I_myScale+0x84>)
   b4354:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
   b4358:	2300      	movs	r3, #0
   b435a:	f000 fb43 	bl	b49e4 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish pubFeed = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/soilentGreen");
   b435e:	4a12      	ldr	r2, [pc, #72]	; (b43a8 <_GLOBAL__sub_I_myScale+0x88>)
   b4360:	4812      	ldr	r0, [pc, #72]	; (b43ac <_GLOBAL__sub_I_myScale+0x8c>)
   b4362:	2300      	movs	r3, #0
   b4364:	4621      	mov	r1, r4
   b4366:	f000 fb29 	bl	b49bc <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
              error_(SYSTEM_ERROR_NONE) {
   b436a:	4b11      	ldr	r3, [pc, #68]	; (b43b0 <_GLOBAL__sub_I_myScale+0x90>)
   b436c:	2200      	movs	r2, #0
   b436e:	e9c3 2200 	strd	r2, r2, [r3]
        set_system_mode(mode);
   b4372:	2002      	movs	r0, #2
    SleepResult() {}
   b4374:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4378:	609a      	str	r2, [r3, #8]
}
   b437a:	b003      	add	sp, #12
   b437c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        set_system_mode(mode);
   b4380:	f000 bd90 	b.w	b4ea4 <set_system_mode>
   b4384:	2003e568 	.word	0x2003e568
   b4388:	2003e660 	.word	0x2003e660
   b438c:	2003e58c 	.word	0x2003e58c
   b4390:	000b6f05 	.word	0x000b6f05
   b4394:	000b6ef5 	.word	0x000b6ef5
   b4398:	000b6eed 	.word	0x000b6eed
   b439c:	000b6f68 	.word	0x000b6f68
   b43a0:	000b6f26 	.word	0x000b6f26
   b43a4:	2003e67c 	.word	0x2003e67c
   b43a8:	000b6f44 	.word	0x000b6f44
   b43ac:	2003e670 	.word	0x2003e670
   b43b0:	2003e55c 	.word	0x2003e55c

000b43b4 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   b43b4:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   b43b6:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b43ba:	6803      	ldr	r3, [r0, #0]
   b43bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b43be:	4798      	blx	r3
}
   b43c0:	3800      	subs	r0, #0
   b43c2:	bf18      	it	ne
   b43c4:	2001      	movne	r0, #1
   b43c6:	bd08      	pop	{r3, pc}

000b43c8 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   b43c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b43ca:	4606      	mov	r6, r0
   b43cc:	460f      	mov	r7, r1
   b43ce:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   b43d0:	b1c4      	cbz	r4, b4404 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   b43d2:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b43d6:	6803      	ldr	r3, [r0, #0]
   b43d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b43da:	4798      	blx	r3
   b43dc:	b908      	cbnz	r0, b43e2 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   b43de:	2000      	movs	r0, #0
    }
  }
  return true;
}
   b43e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret = client->write(buffer, sendlen);
   b43e2:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   b43e6:	2cfa      	cmp	r4, #250	; 0xfa
   b43e8:	6803      	ldr	r3, [r0, #0]
   b43ea:	4625      	mov	r5, r4
   b43ec:	bfa8      	it	ge
   b43ee:	25fa      	movge	r5, #250	; 0xfa
   b43f0:	68db      	ldr	r3, [r3, #12]
   b43f2:	462a      	mov	r2, r5
   b43f4:	4639      	mov	r1, r7
   b43f6:	4798      	blx	r3
   b43f8:	b283      	uxth	r3, r0
      len -= ret;
   b43fa:	1ae4      	subs	r4, r4, r3
      if (ret != sendlen) {
   b43fc:	429d      	cmp	r5, r3
      len -= ret;
   b43fe:	b2a4      	uxth	r4, r4
      if (ret != sendlen) {
   b4400:	d0e6      	beq.n	b43d0 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   b4402:	e7ec      	b.n	b43de <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
  return true;
   b4404:	2001      	movs	r0, #1
   b4406:	e7eb      	b.n	b43e0 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x18>

000b4408 <_ZN19Adafruit_MQTT_SPARKD1Ev>:
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   b4408:	4770      	bx	lr

000b440a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
                                          int16_t timeout) {
   b440a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b440e:	4606      	mov	r6, r0
   b4410:	4688      	mov	r8, r1
   b4412:	4691      	mov	r9, r2
   b4414:	461f      	mov	r7, r3
   b4416:	461d      	mov	r5, r3
  uint16_t len = 0;
   b4418:	2400      	movs	r4, #0
  while (client->connected() && (timeout >= 0)) {
   b441a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b441e:	6803      	ldr	r3, [r0, #0]
   b4420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4422:	4798      	blx	r3
   b4424:	b1d0      	cbz	r0, b445c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   b4426:	2d00      	cmp	r5, #0
   b4428:	db18      	blt.n	b445c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    while (client->available()) {
   b442a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b442e:	6803      	ldr	r3, [r0, #0]
   b4430:	691b      	ldr	r3, [r3, #16]
   b4432:	4798      	blx	r3
   b4434:	b160      	cbz	r0, b4450 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      char c = client->read();
   b4436:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b443a:	6803      	ldr	r3, [r0, #0]
   b443c:	695b      	ldr	r3, [r3, #20]
   b443e:	4798      	blx	r3
   b4440:	f808 0004 	strb.w	r0, [r8, r4]
      len++;
   b4444:	3401      	adds	r4, #1
   b4446:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   b4448:	454c      	cmp	r4, r9
   b444a:	d007      	beq.n	b445c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
      timeout = t;  // reset the timeout
   b444c:	463d      	mov	r5, r7
   b444e:	e7ec      	b.n	b442a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b4450:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b4452:	200a      	movs	r0, #10
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b4454:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b4456:	f000 ff49 	bl	b52ec <delay>
  while (client->connected() && (timeout >= 0)) {
   b445a:	e7de      	b.n	b441a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
}
   b445c:	4620      	mov	r0, r4
   b445e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4462 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
bool Adafruit_MQTT_SPARK::connectServer(){
   b4462:	b570      	push	{r4, r5, r6, lr}
   b4464:	4604      	mov	r4, r0
  memset(buffer, 0, sizeof(buffer));
   b4466:	f100 0522 	add.w	r5, r0, #34	; 0x22
   b446a:	2296      	movs	r2, #150	; 0x96
   b446c:	2100      	movs	r1, #0
   b446e:	4628      	mov	r0, r5
   b4470:	f002 fc10 	bl	b6c94 <memset>
  strcpy((char *)buffer, servername);
   b4474:	6861      	ldr	r1, [r4, #4]
   b4476:	4628      	mov	r0, r5
   b4478:	f002 fc4c 	bl	b6d14 <strcpy>
  int r = client->connect((char *)buffer, portnum);
   b447c:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b4480:	8922      	ldrh	r2, [r4, #8]
   b4482:	6803      	ldr	r3, [r0, #0]
   b4484:	4629      	mov	r1, r5
   b4486:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   b4488:	2300      	movs	r3, #0
   b448a:	47b0      	blx	r6
}
   b448c:	3800      	subs	r0, #0
   b448e:	bf18      	it	ne
   b4490:	2001      	movne	r0, #1
   b4492:	bd70      	pop	{r4, r5, r6, pc}

000b4494 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   b4494:	b510      	push	{r4, lr}
   b4496:	21d4      	movs	r1, #212	; 0xd4
   b4498:	4604      	mov	r4, r0
   b449a:	f7ff fdfe 	bl	b409a <_ZdlPvj>
   b449e:	4620      	mov	r0, r4
   b44a0:	bd10      	pop	{r4, pc}

000b44a2 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:
bool Adafruit_MQTT_SPARK::disconnectServer() {
   b44a2:	b510      	push	{r4, lr}
   b44a4:	4604      	mov	r4, r0
  if (client->connected()) {
   b44a6:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b44aa:	6803      	ldr	r3, [r0, #0]
   b44ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b44ae:	4798      	blx	r3
   b44b0:	b120      	cbz	r0, b44bc <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   b44b2:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b44b6:	6803      	ldr	r3, [r0, #0]
   b44b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b44ba:	4798      	blx	r3
}
   b44bc:	2001      	movs	r0, #1
   b44be:	bd10      	pop	{r4, pc}

000b44c0 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
{
   b44c0:	b570      	push	{r4, r5, r6, lr}
    if (!connected())
   b44c2:	6803      	ldr	r3, [r0, #0]
   b44c4:	689b      	ldr	r3, [r3, #8]
{
   b44c6:	4604      	mov	r4, r0
    if (!connected())
   b44c8:	4798      	blx	r3
   b44ca:	b9c8      	cbnz	r0, b4500 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   b44cc:	4620      	mov	r0, r4
   b44ce:	f000 fa1e 	bl	b490e <_ZN13Adafruit_MQTT7connectEv>
   b44d2:	2504      	movs	r5, #4
   b44d4:	b170      	cbz	r0, b44f4 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   b44d6:	3d01      	subs	r5, #1
   b44d8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b44dc:	d00a      	beq.n	b44f4 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
            disconnect();
   b44de:	4620      	mov	r0, r4
   b44e0:	f000 f8b6 	bl	b4650 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   b44e4:	f241 3088 	movw	r0, #5000	; 0x1388
   b44e8:	f000 ff00 	bl	b52ec <delay>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   b44ec:	4620      	mov	r0, r4
   b44ee:	f000 fa0e 	bl	b490e <_ZN13Adafruit_MQTT7connectEv>
   b44f2:	e7ef      	b.n	b44d4 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
        if( connected() )
   b44f4:	6823      	ldr	r3, [r4, #0]
   b44f6:	4620      	mov	r0, r4
   b44f8:	689b      	ldr	r3, [r3, #8]
}
   b44fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if( connected() )
   b44fe:	4718      	bx	r3
}
   b4500:	bd70      	pop	{r4, r5, r6, pc}

000b4502 <_ZL11stringprintPhPKct.constprop.0>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   b4502:	b513      	push	{r0, r1, r4, lr}
   b4504:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   b4506:	4608      	mov	r0, r1
   b4508:	9101      	str	r1, [sp, #4]
   b450a:	f002 fc0b 	bl	b6d24 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   b450e:	f3c0 2307 	ubfx	r3, r0, #8, #8
   b4512:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   b4514:	7060      	strb	r0, [r4, #1]
   b4516:	1ca3      	adds	r3, r4, #2
  strncpy((char *)p, s, len);
   b4518:	b284      	uxth	r4, r0
   b451a:	9901      	ldr	r1, [sp, #4]
   b451c:	4622      	mov	r2, r4
   b451e:	4618      	mov	r0, r3
   b4520:	f002 fc08 	bl	b6d34 <strncpy>
  return p+len;
}
   b4524:	4420      	add	r0, r4
   b4526:	b002      	add	sp, #8
   b4528:	bd10      	pop	{r4, pc}
	...

000b452c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   b452c:	b530      	push	{r4, r5, lr}
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
   b452e:	8102      	strh	r2, [r0, #8]
  clientid = "";
   b4530:	4a0a      	ldr	r2, [pc, #40]	; (b455c <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x30>)
                             const char *pass) {
   b4532:	4d0b      	ldr	r5, [pc, #44]	; (b4560 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x34>)
  username = user;
   b4534:	e9c0 2303 	strd	r2, r3, [r0, #12]
  password = pass;
   b4538:	9b03      	ldr	r3, [sp, #12]
   b453a:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   b453c:	2300      	movs	r3, #0
  servername = server;
   b453e:	e9c0 5100 	strd	r5, r1, [r0]
    subscriptions[i] = 0;
   b4542:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
   b4546:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  }

  will_topic = 0;
  will_payload = 0;
   b454a:	e9c0 3306 	strd	r3, r3, [r0, #24]
    subscriptions[i] = 0;
   b454e:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  will_qos = 0;
   b4552:	8403      	strh	r3, [r0, #32]
  will_retain = 0;

  packet_id_counter = 0;
   b4554:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   b4558:	bd30      	pop	{r4, r5, pc}
   b455a:	bf00      	nop
   b455c:	000b6e53 	.word	0x000b6e53
   b4560:	000b716c 	.word	0x000b716c

000b4564 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b4564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4568:	4616      	mov	r6, r2
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   b456a:	6802      	ldr	r2, [r0, #0]
   b456c:	b21b      	sxth	r3, r3
   b456e:	6997      	ldr	r7, [r2, #24]
   b4570:	9301      	str	r3, [sp, #4]
   b4572:	2201      	movs	r2, #1
uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b4574:	4605      	mov	r5, r0
   b4576:	460c      	mov	r4, r1
  rlen = readPacket(pbuff, 1, timeout);
   b4578:	47b8      	blx	r7
  if (rlen != 1) return 0;
   b457a:	b2c7      	uxtb	r7, r0
   b457c:	2f01      	cmp	r7, #1
   b457e:	9b01      	ldr	r3, [sp, #4]
   b4580:	d003      	beq.n	b458a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x26>
   b4582:	2000      	movs	r0, #0
    rlen = readPacket(pbuff, value, timeout);
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
}
   b4584:	b003      	add	sp, #12
   b4586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pbuff++;
   b458a:	f104 0801 	add.w	r8, r4, #1
  uint32_t multiplier = 1;
   b458e:	f104 0a05 	add.w	sl, r4, #5
  uint32_t value = 0;
   b4592:	f04f 0900 	mov.w	r9, #0
    rlen = readPacket(pbuff, 1, timeout);
   b4596:	682a      	ldr	r2, [r5, #0]
   b4598:	9301      	str	r3, [sp, #4]
   b459a:	f8d2 b018 	ldr.w	fp, [r2, #24]
   b459e:	4641      	mov	r1, r8
   b45a0:	2201      	movs	r2, #1
   b45a2:	4628      	mov	r0, r5
   b45a4:	47d8      	blx	fp
    if (rlen != 1) return 0;
   b45a6:	b2c0      	uxtb	r0, r0
   b45a8:	2801      	cmp	r0, #1
   b45aa:	d1ea      	bne.n	b4582 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   b45ac:	f818 2b01 	ldrb.w	r2, [r8], #1
    uint32_t intermediate = encodedByte & 0x7F;
   b45b0:	f002 017f 	and.w	r1, r2, #127	; 0x7f
    if (multiplier > (128UL*128UL*128UL)) {
   b45b4:	45c2      	cmp	sl, r8
    value += intermediate;
   b45b6:	fb01 9907 	mla	r9, r1, r7, r9
    multiplier *= 128;
   b45ba:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   b45be:	d0e0      	beq.n	b4582 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
  } while (encodedByte & 0x80);
   b45c0:	f012 0f80 	tst.w	r2, #128	; 0x80
   b45c4:	9b01      	ldr	r3, [sp, #4]
   b45c6:	d1e6      	bne.n	b4596 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x32>
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b45c8:	eba8 0404 	sub.w	r4, r8, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b45cc:	b2a7      	uxth	r7, r4
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b45ce:	1b34      	subs	r4, r6, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b45d0:	682a      	ldr	r2, [r5, #0]
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b45d2:	3c01      	subs	r4, #1
   b45d4:	454c      	cmp	r4, r9
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b45d6:	f8d2 a018 	ldr.w	sl, [r2, #24]
   b45da:	bf3d      	ittte	cc
   b45dc:	f106 32ff 	addcc.w	r2, r6, #4294967295
   b45e0:	1bd2      	subcc	r2, r2, r7
   b45e2:	b292      	uxthcc	r2, r2
    rlen = readPacket(pbuff, value, timeout);
   b45e4:	fa1f f289 	uxthcs.w	r2, r9
   b45e8:	4641      	mov	r1, r8
   b45ea:	4628      	mov	r0, r5
   b45ec:	47d0      	blx	sl
   b45ee:	b2c0      	uxtb	r0, r0
  return ((pbuff - buffer)+rlen);
   b45f0:	4438      	add	r0, r7
   b45f2:	b280      	uxth	r0, r0
   b45f4:	e7c6      	b.n	b4584 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x20>
	...

000b45f8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b45f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      ERROR_PRINTLN(F("Dropped a packet"));
   b45fc:	f8df 8030 	ldr.w	r8, [pc, #48]	; b4630 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x38>
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b4600:	4605      	mov	r5, r0
   b4602:	460c      	mov	r4, r1
   b4604:	4616      	mov	r6, r2
   b4606:	461f      	mov	r7, r3
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b4608:	463b      	mov	r3, r7
   b460a:	2296      	movs	r2, #150	; 0x96
   b460c:	4621      	mov	r1, r4
   b460e:	4628      	mov	r0, r5
   b4610:	f7ff ffa8 	bl	b4564 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   b4614:	b148      	cbz	r0, b462a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
    if ((buffer[0] >> 4) == waitforpackettype) {
   b4616:	7823      	ldrb	r3, [r4, #0]
   b4618:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   b461c:	d005      	beq.n	b462a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
      ERROR_PRINTLN(F("Dropped a packet"));
   b461e:	f001 f811 	bl	b5644 <_Z16_fetch_usbserialv>
   b4622:	4641      	mov	r1, r8
   b4624:	f000 fdf7 	bl	b5216 <_ZN5Print7printlnEPKc>
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b4628:	e7ee      	b.n	b4608 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x10>
}
   b462a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b462e:	bf00      	nop
   b4630:	000b6f84 	.word	0x000b6f84

000b4634 <_ZN13Adafruit_MQTT18connectErrorStringEa>:

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   switch (code) {
   b4634:	3102      	adds	r1, #2
   b4636:	b2c9      	uxtb	r1, r1
   b4638:	2909      	cmp	r1, #9
   b463a:	bf9a      	itte	ls
   b463c:	4b02      	ldrls	r3, [pc, #8]	; (b4648 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   b463e:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   b4642:	4802      	ldrhi	r0, [pc, #8]	; (b464c <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   b4644:	4770      	bx	lr
   b4646:	bf00      	nop
   b4648:	000b7188 	.word	0x000b7188
   b464c:	000b6f95 	.word	0x000b6f95

000b4650 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   b4650:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   b4652:	23e0      	movs	r3, #224	; 0xe0
   b4654:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  uint8_t len = disconnectPacket(buffer);
   b4658:	4601      	mov	r1, r0
  packet[1] = 0;
   b465a:	2300      	movs	r3, #0
   b465c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
  if (! sendPacket(buffer, len))
   b4660:	f851 3b22 	ldr.w	r3, [r1], #34
bool Adafruit_MQTT::disconnect() {
   b4664:	4604      	mov	r4, r0
  if (! sendPacket(buffer, len))
   b4666:	695b      	ldr	r3, [r3, #20]
   b4668:	2202      	movs	r2, #2
   b466a:	4798      	blx	r3
  return disconnectServer();
   b466c:	6823      	ldr	r3, [r4, #0]
   b466e:	4620      	mov	r0, r4
   b4670:	691b      	ldr	r3, [r3, #16]
}
   b4672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return disconnectServer();
   b4676:	4718      	bx	r3

000b4678 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b4678:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   b467c:	b530      	push	{r4, r5, lr}
   b467e:	4613      	mov	r3, r2
   b4680:	f100 04d0 	add.w	r4, r0, #208	; 0xd0
    if (subscriptions[i] == sub) {
   b4684:	f853 5b04 	ldr.w	r5, [r3], #4
   b4688:	428d      	cmp	r5, r1
   b468a:	d009      	beq.n	b46a0 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x28>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b468c:	42a3      	cmp	r3, r4
   b468e:	d1f9      	bne.n	b4684 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   b4690:	2300      	movs	r3, #0
      if (subscriptions[i] == 0) {
   b4692:	f852 4b04 	ldr.w	r4, [r2], #4
   b4696:	b92c      	cbnz	r4, b46a4 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2c>
        subscriptions[i] = sub;
   b4698:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   b469c:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
      return true;
   b46a0:	2001      	movs	r0, #1
   b46a2:	e003      	b.n	b46ac <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b46a4:	3301      	adds	r3, #1
   b46a6:	2b05      	cmp	r3, #5
   b46a8:	d1f3      	bne.n	b4692 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
  return false;
   b46aa:	2000      	movs	r0, #0
}
   b46ac:	bd30      	pop	{r4, r5, pc}

000b46ae <_ZN13Adafruit_MQTT4pingEh>:
bool Adafruit_MQTT::ping(uint8_t num) {
   b46ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b46b2:	4604      	mov	r4, r0
   b46b4:	460d      	mov	r5, r1
   b46b6:	f04f 0800 	mov.w	r8, #0
    uint8_t len = pingPacket(buffer);
   b46ba:	f100 0722 	add.w	r7, r0, #34	; 0x22
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   b46be:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  while (num--) {
   b46c2:	b1e5      	cbz	r5, b46fe <_ZN13Adafruit_MQTT4pingEh+0x50>
    if (!sendPacket(buffer, len))
   b46c4:	6823      	ldr	r3, [r4, #0]
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   b46c6:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
  packet[1] = 0;
   b46ca:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
    if (!sendPacket(buffer, len))
   b46ce:	695b      	ldr	r3, [r3, #20]
   b46d0:	2202      	movs	r2, #2
   b46d2:	4639      	mov	r1, r7
   b46d4:	4620      	mov	r0, r4
   b46d6:	4798      	blx	r3
   b46d8:	4606      	mov	r6, r0
   b46da:	b168      	cbz	r0, b46f8 <_ZN13Adafruit_MQTT4pingEh+0x4a>
    len = processPacketsUntil(buffer, MQTT_CTRL_PINGRESP, PING_TIMEOUT_MS);
   b46dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b46e0:	220d      	movs	r2, #13
   b46e2:	4639      	mov	r1, r7
   b46e4:	4620      	mov	r0, r4
   b46e6:	f7ff ff87 	bl	b45f8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
    if (buffer[0] == (MQTT_CTRL_PINGRESP << 4))
   b46ea:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b46ee:	2bd0      	cmp	r3, #208	; 0xd0
   b46f0:	d102      	bne.n	b46f8 <_ZN13Adafruit_MQTT4pingEh+0x4a>
}
   b46f2:	4630      	mov	r0, r6
   b46f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b46f8:	3d01      	subs	r5, #1
   b46fa:	b2ed      	uxtb	r5, r5
   b46fc:	e7e1      	b.n	b46c2 <_ZN13Adafruit_MQTT4pingEh+0x14>
  return false;
   b46fe:	462e      	mov	r6, r5
   b4700:	e7f7      	b.n	b46f2 <_ZN13Adafruit_MQTT4pingEh+0x44>
	...

000b4704 <_ZN13Adafruit_MQTT13connectPacketEPh>:
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b4704:	b538      	push	{r3, r4, r5, lr}
   b4706:	4605      	mov	r5, r0
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   b4708:	4608      	mov	r0, r1
   b470a:	2310      	movs	r3, #16
   b470c:	f800 3b02 	strb.w	r3, [r0], #2
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b4710:	460c      	mov	r4, r1
    p = stringprint(p, "MQTT");
   b4712:	4929      	ldr	r1, [pc, #164]	; (b47b8 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   b4714:	f7ff fef5 	bl	b4502 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = MQTT_PROTOCOL_LEVEL;
   b4718:	2304      	movs	r3, #4
   b471a:	7003      	strb	r3, [r0, #0]
  p[0] = MQTT_CONN_CLEANSESSION;
   b471c:	2302      	movs	r3, #2
   b471e:	7043      	strb	r3, [r0, #1]
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b4720:	69ab      	ldr	r3, [r5, #24]
   b4722:	b18b      	cbz	r3, b4748 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
   b4724:	781b      	ldrb	r3, [r3, #0]
   b4726:	b17b      	cbz	r3, b4748 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
    p[0] |= MQTT_CONN_WILLFLAG;
   b4728:	2306      	movs	r3, #6
   b472a:	7043      	strb	r3, [r0, #1]
    if(will_qos == 1)
   b472c:	f895 3020 	ldrb.w	r3, [r5, #32]
   b4730:	2b01      	cmp	r3, #1
   b4732:	d139      	bne.n	b47a8 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa4>
      p[0] |= MQTT_CONN_WILLQOS_1;
   b4734:	230e      	movs	r3, #14
      p[0] |= MQTT_CONN_WILLQOS_2;
   b4736:	7043      	strb	r3, [r0, #1]
    if(will_retain == 1)
   b4738:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   b473c:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   b473e:	bf02      	ittt	eq
   b4740:	7843      	ldrbeq	r3, [r0, #1]
   b4742:	f043 0320 	orreq.w	r3, r3, #32
   b4746:	7043      	strbeq	r3, [r0, #1]
  if (pgm_read_byte(username) != 0)
   b4748:	692b      	ldr	r3, [r5, #16]
   b474a:	781b      	ldrb	r3, [r3, #0]
   b474c:	b11b      	cbz	r3, b4756 <_ZN13Adafruit_MQTT13connectPacketEPh+0x52>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   b474e:	7843      	ldrb	r3, [r0, #1]
   b4750:	f063 037f 	orn	r3, r3, #127	; 0x7f
   b4754:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   b4756:	696b      	ldr	r3, [r5, #20]
   b4758:	781b      	ldrb	r3, [r3, #0]
   b475a:	b11b      	cbz	r3, b4764 <_ZN13Adafruit_MQTT13connectPacketEPh+0x60>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   b475c:	7843      	ldrb	r3, [r0, #1]
   b475e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   b4762:	7043      	strb	r3, [r0, #1]
  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   b4764:	2301      	movs	r3, #1
   b4766:	7083      	strb	r3, [r0, #2]
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   b4768:	232c      	movs	r3, #44	; 0x2c
   b476a:	70c3      	strb	r3, [r0, #3]
    if (pgm_read_byte(clientid) != 0) {
   b476c:	68e9      	ldr	r1, [r5, #12]
   b476e:	780b      	ldrb	r3, [r1, #0]
   b4770:	b1f3      	cbz	r3, b47b0 <_ZN13Adafruit_MQTT13connectPacketEPh+0xac>
      p = stringprint(p, clientid);
   b4772:	3004      	adds	r0, #4
   b4774:	f7ff fec5 	bl	b4502 <_ZL11stringprintPhPKct.constprop.0>
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b4778:	69a9      	ldr	r1, [r5, #24]
   b477a:	b131      	cbz	r1, b478a <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
   b477c:	780b      	ldrb	r3, [r1, #0]
   b477e:	b123      	cbz	r3, b478a <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
    p = stringprint(p, will_topic);
   b4780:	f7ff febf 	bl	b4502 <_ZL11stringprintPhPKct.constprop.0>
    p = stringprint(p, will_payload);
   b4784:	69e9      	ldr	r1, [r5, #28]
   b4786:	f7ff febc 	bl	b4502 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(username) != 0) {
   b478a:	6929      	ldr	r1, [r5, #16]
   b478c:	780b      	ldrb	r3, [r1, #0]
   b478e:	b10b      	cbz	r3, b4794 <_ZN13Adafruit_MQTT13connectPacketEPh+0x90>
    p = stringprint(p, username);
   b4790:	f7ff feb7 	bl	b4502 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(password) != 0) {
   b4794:	6969      	ldr	r1, [r5, #20]
   b4796:	780b      	ldrb	r3, [r1, #0]
   b4798:	b10b      	cbz	r3, b479e <_ZN13Adafruit_MQTT13connectPacketEPh+0x9a>
    p = stringprint(p, password);
   b479a:	f7ff feb2 	bl	b4502 <_ZL11stringprintPhPKct.constprop.0>
  len = p - packet;
   b479e:	1b00      	subs	r0, r0, r4
  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   b47a0:	b2c0      	uxtb	r0, r0
   b47a2:	1e83      	subs	r3, r0, #2
   b47a4:	7063      	strb	r3, [r4, #1]
}
   b47a6:	bd38      	pop	{r3, r4, r5, pc}
    else if(will_qos == 2)
   b47a8:	2b02      	cmp	r3, #2
   b47aa:	d1c5      	bne.n	b4738 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_2;
   b47ac:	231e      	movs	r3, #30
   b47ae:	e7c2      	b.n	b4736 <_ZN13Adafruit_MQTT13connectPacketEPh+0x32>
      p[0] = 0x0;
   b47b0:	7103      	strb	r3, [r0, #4]
      p[0] = 0x0;
   b47b2:	7143      	strb	r3, [r0, #5]
      p++;
   b47b4:	3006      	adds	r0, #6
   b47b6:	e7df      	b.n	b4778 <_ZN13Adafruit_MQTT13connectPacketEPh+0x74>
   b47b8:	000b6fa3 	.word	0x000b6fa3

000b47bc <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b47bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b47c0:	4605      	mov	r5, r0
  len += strlen(topic); // topic length
   b47c2:	4610      	mov	r0, r2
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b47c4:	460e      	mov	r6, r1
   b47c6:	4698      	mov	r8, r3
  len += strlen(topic); // topic length
   b47c8:	9201      	str	r2, [sp, #4]
   b47ca:	f002 faab 	bl	b6d24 <strlen>
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b47ce:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b47d2:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
  if(qos > 0) { 
   b47d6:	9901      	ldr	r1, [sp, #4]
  len += strlen(topic); // topic length
   b47d8:	b284      	uxth	r4, r0
  if(qos > 0) { 
   b47da:	f1b9 0f00 	cmp.w	r9, #0
   b47de:	d135      	bne.n	b484c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x90>
  len += strlen(topic); // topic length
   b47e0:	3402      	adds	r4, #2
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b47e2:	ea4f 0349 	mov.w	r3, r9, lsl #1
   b47e6:	4630      	mov	r0, r6
    len += 2; // qos packet id
   b47e8:	b2a4      	uxth	r4, r4
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b47ea:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  len += bLen; // payload length
   b47ee:	443c      	add	r4, r7
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b47f0:	f800 3b01 	strb.w	r3, [r0], #1
  len += bLen; // payload length
   b47f4:	b2a4      	uxth	r4, r4
    uint8_t encodedByte = len % 128;
   b47f6:	4622      	mov	r2, r4
   b47f8:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    if ( len > 0 ) {
   b47fc:	2a7f      	cmp	r2, #127	; 0x7f
      encodedByte |= 0x80;
   b47fe:	bf88      	it	hi
   b4800:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
  } while ( len > 0 );
   b4804:	2a7f      	cmp	r2, #127	; 0x7f
    p[0] = encodedByte;
   b4806:	f800 3b01 	strb.w	r3, [r0], #1
    len /= 128;
   b480a:	ea4f 14d4 	mov.w	r4, r4, lsr #7
  } while ( len > 0 );
   b480e:	d8f2      	bhi.n	b47f6 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3a>
  p = stringprint(p, topic);
   b4810:	f7ff fe77 	bl	b4502 <_ZL11stringprintPhPKct.constprop.0>
   b4814:	4603      	mov	r3, r0
  if(qos > 0) {
   b4816:	f1b9 0f00 	cmp.w	r9, #0
   b481a:	d00c      	beq.n	b4836 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x7a>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   b481c:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b4820:	0a12      	lsrs	r2, r2, #8
   b4822:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   b4824:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b4828:	7042      	strb	r2, [r0, #1]
    packet_id_counter++;
   b482a:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b482e:	3201      	adds	r2, #1
    p+=2;
   b4830:	3302      	adds	r3, #2
    packet_id_counter++;
   b4832:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  memmove(p, data, bLen);
   b4836:	463a      	mov	r2, r7
   b4838:	4641      	mov	r1, r8
   b483a:	4618      	mov	r0, r3
   b483c:	f002 fa10 	bl	b6c60 <memmove>
  p+= bLen;
   b4840:	4438      	add	r0, r7
  len = p - packet;
   b4842:	1b80      	subs	r0, r0, r6
}
   b4844:	b280      	uxth	r0, r0
   b4846:	b003      	add	sp, #12
   b4848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    len += 2; // qos packet id
   b484c:	3404      	adds	r4, #4
   b484e:	e7c8      	b.n	b47e2 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>

000b4850 <_ZN13Adafruit_MQTT7publishEPKcPhth>:
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   b4850:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4852:	f89d 6018 	ldrb.w	r6, [sp, #24]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b4856:	f100 0522 	add.w	r5, r0, #34	; 0x22
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   b485a:	4604      	mov	r4, r0
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b485c:	e9cd 3600 	strd	r3, r6, [sp]
   b4860:	4613      	mov	r3, r2
   b4862:	460a      	mov	r2, r1
   b4864:	4629      	mov	r1, r5
   b4866:	f7ff ffa9 	bl	b47bc <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   b486a:	6823      	ldr	r3, [r4, #0]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b486c:	4602      	mov	r2, r0
  if (!sendPacket(buffer, len))
   b486e:	695b      	ldr	r3, [r3, #20]
   b4870:	4629      	mov	r1, r5
   b4872:	4620      	mov	r0, r4
   b4874:	4798      	blx	r3
   b4876:	b910      	cbnz	r0, b487e <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2e>
    return false;
   b4878:	2000      	movs	r0, #0
}
   b487a:	b002      	add	sp, #8
   b487c:	bd70      	pop	{r4, r5, r6, pc}
  if (qos > 0) {
   b487e:	2e00      	cmp	r6, #0
   b4880:	d0fb      	beq.n	b487a <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   b4882:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b4886:	2296      	movs	r2, #150	; 0x96
   b4888:	4629      	mov	r1, r5
   b488a:	4620      	mov	r0, r4
   b488c:	f7ff fe6a 	bl	b4564 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    if (len != 4)
   b4890:	2804      	cmp	r0, #4
   b4892:	d1f1      	bne.n	b4878 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   b4894:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4898:	091b      	lsrs	r3, r3, #4
   b489a:	2b04      	cmp	r3, #4
   b489c:	d1ec      	bne.n	b4878 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    packnum |= buffer[3];
   b489e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    if (packnum != packet_id_counter)
   b48a0:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   b48a4:	ba5b      	rev16	r3, r3
    packnum++;
   b48a6:	3301      	adds	r3, #1
    if (packnum != packet_id_counter)
   b48a8:	b29b      	uxth	r3, r3
   b48aa:	1ac3      	subs	r3, r0, r3
   b48ac:	4258      	negs	r0, r3
   b48ae:	4158      	adcs	r0, r3
   b48b0:	e7e3      	b.n	b487a <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>

000b48b2 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   b48b2:	b530      	push	{r4, r5, lr}
   b48b4:	b085      	sub	sp, #20
   b48b6:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   b48b8:	4610      	mov	r0, r2
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   b48ba:	461d      	mov	r5, r3
   b48bc:	9103      	str	r1, [sp, #12]
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   b48be:	9202      	str	r2, [sp, #8]
   b48c0:	f002 fa30 	bl	b6d24 <strlen>
   b48c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b48c8:	b283      	uxth	r3, r0
   b48ca:	9500      	str	r5, [sp, #0]
   b48cc:	4620      	mov	r0, r4
   b48ce:	f7ff ffbf 	bl	b4850 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   b48d2:	b005      	add	sp, #20
   b48d4:	bd30      	pop	{r4, r5, pc}

000b48d6 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
                                       uint8_t qos) {
   b48d6:	b538      	push	{r3, r4, r5, lr}
   b48d8:	461d      	mov	r5, r3
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   b48da:	2382      	movs	r3, #130	; 0x82
   b48dc:	700b      	strb	r3, [r1, #0]
  p[0] = (packet_id_counter >> 8) & 0xFF;
   b48de:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b48e2:	0a1b      	lsrs	r3, r3, #8
   b48e4:	708b      	strb	r3, [r1, #2]
  p[1] = packet_id_counter & 0xFF;
   b48e6:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b48ea:	70cb      	strb	r3, [r1, #3]
  packet_id_counter++;
   b48ec:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
                                       uint8_t qos) {
   b48f0:	460c      	mov	r4, r1
  packet_id_counter++;
   b48f2:	3301      	adds	r3, #1
   b48f4:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8
  p = stringprint(p, topic);
   b48f8:	4611      	mov	r1, r2
   b48fa:	1d20      	adds	r0, r4, #4
   b48fc:	f7ff fe01 	bl	b4502 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = qos;
   b4900:	f800 5b01 	strb.w	r5, [r0], #1
  len = p - packet;
   b4904:	1b00      	subs	r0, r0, r4
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   b4906:	b2c0      	uxtb	r0, r0
   b4908:	1e83      	subs	r3, r0, #2
   b490a:	7063      	strb	r3, [r4, #1]
}
   b490c:	bd38      	pop	{r3, r4, r5, pc}

000b490e <_ZN13Adafruit_MQTT7connectEv>:
int8_t Adafruit_MQTT::connect() {
   b490e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!connectServer())
   b4912:	6803      	ldr	r3, [r0, #0]
   b4914:	68db      	ldr	r3, [r3, #12]
int8_t Adafruit_MQTT::connect() {
   b4916:	4604      	mov	r4, r0
  if (!connectServer())
   b4918:	4798      	blx	r3
   b491a:	2800      	cmp	r0, #0
   b491c:	d04b      	beq.n	b49b6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  uint8_t len = connectPacket(buffer);
   b491e:	f104 0522 	add.w	r5, r4, #34	; 0x22
   b4922:	4629      	mov	r1, r5
   b4924:	4620      	mov	r0, r4
   b4926:	f7ff feed 	bl	b4704 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   b492a:	6823      	ldr	r3, [r4, #0]
   b492c:	b282      	uxth	r2, r0
   b492e:	695b      	ldr	r3, [r3, #20]
   b4930:	4629      	mov	r1, r5
   b4932:	4620      	mov	r0, r4
   b4934:	4798      	blx	r3
   b4936:	2800      	cmp	r0, #0
   b4938:	d03d      	beq.n	b49b6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   b493a:	f241 7370 	movw	r3, #6000	; 0x1770
   b493e:	2296      	movs	r2, #150	; 0x96
   b4940:	4629      	mov	r1, r5
   b4942:	4620      	mov	r0, r4
   b4944:	f7ff fe0e 	bl	b4564 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   b4948:	b2c0      	uxtb	r0, r0
   b494a:	2804      	cmp	r0, #4
   b494c:	d133      	bne.n	b49b6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   b494e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b4950:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   b4954:	d12f      	bne.n	b49b6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if (buffer[3] != 0)
   b4956:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   b495a:	b110      	cbz	r0, b4962 <_ZN13Adafruit_MQTT7connectEv+0x54>
    return buffer[3];
   b495c:	b240      	sxtb	r0, r0
}
   b495e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4962:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
   b4966:	f104 08d0 	add.w	r8, r4, #208	; 0xd0
    if (subscriptions[i] == 0) continue;
   b496a:	f857 3b04 	ldr.w	r3, [r7], #4
   b496e:	b1f3      	cbz	r3, b49ae <_ZN13Adafruit_MQTT7connectEv+0xa0>
   b4970:	2603      	movs	r6, #3
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   b4972:	f857 2c04 	ldr.w	r2, [r7, #-4]
   b4976:	4629      	mov	r1, r5
   b4978:	7913      	ldrb	r3, [r2, #4]
   b497a:	6812      	ldr	r2, [r2, #0]
   b497c:	4620      	mov	r0, r4
   b497e:	f7ff ffaa 	bl	b48d6 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   b4982:	6823      	ldr	r3, [r4, #0]
   b4984:	b282      	uxth	r2, r0
   b4986:	695b      	ldr	r3, [r3, #20]
   b4988:	4629      	mov	r1, r5
   b498a:	4620      	mov	r0, r4
   b498c:	4798      	blx	r3
   b498e:	b190      	cbz	r0, b49b6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   b4990:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b4994:	2209      	movs	r2, #9
   b4996:	4629      	mov	r1, r5
   b4998:	4620      	mov	r0, r4
   b499a:	f7ff fe2d 	bl	b45f8 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   b499e:	b930      	cbnz	r0, b49ae <_ZN13Adafruit_MQTT7connectEv+0xa0>
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   b49a0:	3e01      	subs	r6, #1
   b49a2:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   b49a6:	d1e4      	bne.n	b4972 <_ZN13Adafruit_MQTT7connectEv+0x64>
    if (! success) return -2; // failed to sub for some reason
   b49a8:	f06f 0001 	mvn.w	r0, #1
   b49ac:	e7d7      	b.n	b495e <_ZN13Adafruit_MQTT7connectEv+0x50>
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   b49ae:	45b8      	cmp	r8, r7
   b49b0:	d1db      	bne.n	b496a <_ZN13Adafruit_MQTT7connectEv+0x5c>
  return 0;
   b49b2:	2000      	movs	r0, #0
   b49b4:	e7d3      	b.n	b495e <_ZN13Adafruit_MQTT7connectEv+0x50>
    return -1;
   b49b6:	f04f 30ff 	mov.w	r0, #4294967295
   b49ba:	e7d0      	b.n	b495e <_ZN13Adafruit_MQTT7connectEv+0x50>

000b49bc <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   b49bc:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   b49be:	e9c0 1200 	strd	r1, r2, [r0]
  qos = q;
   b49c2:	7203      	strb	r3, [r0, #8]
}
   b49c4:	bd10      	pop	{r4, pc}

000b49c6 <_ZN21Adafruit_MQTT_Publish7publishEi>:

bool Adafruit_MQTT_Publish::publish(int i) {
   b49c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b49c8:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   b49ca:	220a      	movs	r2, #10
bool Adafruit_MQTT_Publish::publish(int i) {
   b49cc:	4608      	mov	r0, r1
  ltoa(i, payload, 10);
   b49ce:	a901      	add	r1, sp, #4
   b49d0:	f000 fb86 	bl	b50e0 <ltoa>
  return mqtt->publish(topic, payload, qos);
   b49d4:	e9d4 0100 	ldrd	r0, r1, [r4]
   b49d8:	7a23      	ldrb	r3, [r4, #8]
   b49da:	aa01      	add	r2, sp, #4
   b49dc:	f7ff ff69 	bl	b48b2 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   b49e0:	b004      	add	sp, #16
   b49e2:	bd10      	pop	{r4, pc}

000b49e4 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   b49e4:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   b49e6:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   b49e8:	2300      	movs	r3, #0
  callback_uint32t = 0;
  callback_buffer = 0;
  callback_double = 0;
   b49ea:	e9c0 3308 	strd	r3, r3, [r0, #32]
  callback_io = 0;
   b49ee:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  mqtt = mqttserver;
   b49f2:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   b49f4:	6002      	str	r2, [r0, #0]
  datalen = 0;
   b49f6:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   b49f8:	61c3      	str	r3, [r0, #28]
  io_feed = 0;
   b49fa:	6303      	str	r3, [r0, #48]	; 0x30
}
   b49fc:	bd10      	pop	{r4, pc}

000b49fe <_ZN5HX711D1Ev>:

HX711::HX711() {
}

HX711::~HX711() {
}
   b49fe:	4770      	bx	lr

000b4a00 <_ZN5HX711D0Ev>:
HX711::~HX711() {
   b4a00:	b510      	push	{r4, lr}
}
   b4a02:	2110      	movs	r1, #16
HX711::~HX711() {
   b4a04:	4604      	mov	r4, r0
}
   b4a06:	f7ff fb48 	bl	b409a <_ZdlPvj>
   b4a0a:	4620      	mov	r0, r4
   b4a0c:	bd10      	pop	{r4, pc}

000b4a0e <_ZN5HX7118is_readyEv>:
	pinMode(DOUT, INPUT);

	set_gain(gain);
}

bool HX711::is_ready() {
   b4a0e:	b508      	push	{r3, lr}
	return digitalRead(DOUT) == LOW;
   b4a10:	7940      	ldrb	r0, [r0, #5]
   b4a12:	f001 fafd 	bl	b6010 <digitalRead>
}
   b4a16:	fab0 f080 	clz	r0, r0
   b4a1a:	0940      	lsrs	r0, r0, #5
   b4a1c:	bd08      	pop	{r3, pc}

000b4a1e <_ZN5HX7114readEv>:

	digitalWrite(PD_SCK, LOW);
	read();
}

long HX711::read() {
   b4a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4a22:	4604      	mov	r4, r0
	// wait for the chip to become ready
	while (!is_ready()) {
   b4a24:	4620      	mov	r0, r4
   b4a26:	f7ff fff2 	bl	b4a0e <_ZN5HX7118is_readyEv>
   b4a2a:	b910      	cbnz	r0, b4a32 <_ZN5HX7114readEv+0x14>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   b4a2c:	f000 f90a 	bl	b4c44 <os_thread_yield>
#endif // PLATFORM_THREADING
}
   b4a30:	e7f8      	b.n	b4a24 <_ZN5HX7114readEv+0x6>
	unsigned long value = 0;
	uint8_t data[3] = { 0 };
	uint8_t filler = 0x00;

	// pulse the clock pin 24 times to read the data
	data[2] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4a32:	7921      	ldrb	r1, [r4, #4]
   b4a34:	7960      	ldrb	r0, [r4, #5]
   b4a36:	2201      	movs	r2, #1
   b4a38:	f001 fb14 	bl	b6064 <shiftIn>
	data[1] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4a3c:	7921      	ldrb	r1, [r4, #4]
   b4a3e:	2201      	movs	r2, #1
	data[2] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4a40:	4606      	mov	r6, r0
	data[1] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4a42:	7960      	ldrb	r0, [r4, #5]
   b4a44:	f001 fb0e 	bl	b6064 <shiftIn>
	data[0] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4a48:	7921      	ldrb	r1, [r4, #4]
	data[1] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4a4a:	4605      	mov	r5, r0
	data[0] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4a4c:	2201      	movs	r2, #1
   b4a4e:	7960      	ldrb	r0, [r4, #5]
   b4a50:	f001 fb08 	bl	b6064 <shiftIn>

	// set the channel and the gain factor for the next reading using the clock pin
	for (unsigned int i = 0; i < GAIN; i++) {
   b4a54:	f04f 0800 	mov.w	r8, #0
	data[0] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4a58:	4607      	mov	r7, r0
	for (unsigned int i = 0; i < GAIN; i++) {
   b4a5a:	79a3      	ldrb	r3, [r4, #6]
   b4a5c:	4543      	cmp	r3, r8
   b4a5e:	d90a      	bls.n	b4a76 <_ZN5HX7114readEv+0x58>
		digitalWrite(PD_SCK, HIGH);
   b4a60:	7920      	ldrb	r0, [r4, #4]
   b4a62:	2101      	movs	r1, #1
   b4a64:	f001 fabb 	bl	b5fde <digitalWrite>
		digitalWrite(PD_SCK, LOW);
   b4a68:	7920      	ldrb	r0, [r4, #4]
   b4a6a:	2100      	movs	r1, #0
   b4a6c:	f001 fab7 	bl	b5fde <digitalWrite>
	for (unsigned int i = 0; i < GAIN; i++) {
   b4a70:	f108 0801 	add.w	r8, r8, #1
   b4a74:	e7f1      	b.n	b4a5a <_ZN5HX7114readEv+0x3c>
	}

	// Construct a 32-bit signed integer
	value = ( static_cast<unsigned long>(filler) << 24
			| static_cast<unsigned long>(data[2]) << 16
			| static_cast<unsigned long>(data[1]) << 8
   b4a76:	022b      	lsls	r3, r5, #8
	value = ( static_cast<unsigned long>(filler) << 24
   b4a78:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b4a7c:	433b      	orrs	r3, r7
	if (data[2] & 0x80) {
   b4a7e:	f346 10c0 	sbfx	r0, r6, #7, #1
			| static_cast<unsigned long>(data[0]) );

	return static_cast<long>(value);
}
   b4a82:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b4a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4a8a <_ZN5HX7118set_gainEh>:
	switch (gain) {
   b4a8a:	2940      	cmp	r1, #64	; 0x40
void HX711::set_gain(byte gain) {
   b4a8c:	b510      	push	{r4, lr}
   b4a8e:	4604      	mov	r4, r0
	switch (gain) {
   b4a90:	d010      	beq.n	b4ab4 <_ZN5HX7118set_gainEh+0x2a>
   b4a92:	2980      	cmp	r1, #128	; 0x80
   b4a94:	d003      	beq.n	b4a9e <_ZN5HX7118set_gainEh+0x14>
   b4a96:	2920      	cmp	r1, #32
   b4a98:	d103      	bne.n	b4aa2 <_ZN5HX7118set_gainEh+0x18>
			GAIN = 2;
   b4a9a:	2302      	movs	r3, #2
   b4a9c:	e000      	b.n	b4aa0 <_ZN5HX7118set_gainEh+0x16>
			GAIN = 1;
   b4a9e:	2301      	movs	r3, #1
			GAIN = 2;
   b4aa0:	71a3      	strb	r3, [r4, #6]
	digitalWrite(PD_SCK, LOW);
   b4aa2:	7920      	ldrb	r0, [r4, #4]
   b4aa4:	2100      	movs	r1, #0
   b4aa6:	f001 fa9a 	bl	b5fde <digitalWrite>
	read();
   b4aaa:	4620      	mov	r0, r4
}
   b4aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	read();
   b4ab0:	f7ff bfb5 	b.w	b4a1e <_ZN5HX7114readEv>
			GAIN = 3;
   b4ab4:	2303      	movs	r3, #3
   b4ab6:	e7f3      	b.n	b4aa0 <_ZN5HX7118set_gainEh+0x16>

000b4ab8 <_ZN5HX7115beginEhhh>:
void HX711::begin(byte dout, byte pd_sck, byte gain) {
   b4ab8:	b538      	push	{r3, r4, r5, lr}
   b4aba:	4604      	mov	r4, r0
   b4abc:	4610      	mov	r0, r2
	PD_SCK = pd_sck;
   b4abe:	7122      	strb	r2, [r4, #4]
	DOUT = dout;
   b4ac0:	7161      	strb	r1, [r4, #5]
	pinMode(PD_SCK, OUTPUT);
   b4ac2:	2101      	movs	r1, #1
void HX711::begin(byte dout, byte pd_sck, byte gain) {
   b4ac4:	461d      	mov	r5, r3
	pinMode(PD_SCK, OUTPUT);
   b4ac6:	f001 fa79 	bl	b5fbc <pinMode>
	pinMode(DOUT, INPUT);
   b4aca:	7960      	ldrb	r0, [r4, #5]
   b4acc:	2100      	movs	r1, #0
   b4ace:	f001 fa75 	bl	b5fbc <pinMode>
	set_gain(gain);
   b4ad2:	4629      	mov	r1, r5
   b4ad4:	4620      	mov	r0, r4
}
   b4ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	set_gain(gain);
   b4ada:	f7ff bfd6 	b.w	b4a8a <_ZN5HX7118set_gainEh>
	...

000b4ae0 <_ZN5HX711C1Ehhh>:
HX711::HX711(byte dout, byte pd_sck, byte gain) {
   b4ae0:	b538      	push	{r3, r4, r5, lr}
   b4ae2:	4d06      	ldr	r5, [pc, #24]	; (b4afc <_ZN5HX711C1Ehhh+0x1c>)
   b4ae4:	6005      	str	r5, [r0, #0]
   b4ae6:	2500      	movs	r5, #0
   b4ae8:	6085      	str	r5, [r0, #8]
   b4aea:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
   b4aee:	4604      	mov	r4, r0
   b4af0:	60c5      	str	r5, [r0, #12]
	begin(dout, pd_sck, gain);
   b4af2:	f7ff ffe1 	bl	b4ab8 <_ZN5HX7115beginEhhh>
}
   b4af6:	4620      	mov	r0, r4
   b4af8:	bd38      	pop	{r3, r4, r5, pc}
   b4afa:	bf00      	nop
   b4afc:	000b71b8 	.word	0x000b71b8

000b4b00 <_ZN5HX71112read_averageEh>:

long HX711::read_average(byte times) {
   b4b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4b02:	2400      	movs	r4, #0
   b4b04:	4606      	mov	r6, r0
   b4b06:	460f      	mov	r7, r1
	long sum = 0;
   b4b08:	4625      	mov	r5, r4
	for (byte i = 0; i < times; i++) {
   b4b0a:	42bc      	cmp	r4, r7
   b4b0c:	d007      	beq.n	b4b1e <_ZN5HX71112read_averageEh+0x1e>
		sum += read();
   b4b0e:	4630      	mov	r0, r6
   b4b10:	f7ff ff85 	bl	b4a1e <_ZN5HX7114readEv>
   b4b14:	3401      	adds	r4, #1
   b4b16:	4405      	add	r5, r0
  os_thread_yield();
   b4b18:	f000 f894 	bl	b4c44 <os_thread_yield>
	for (byte i = 0; i < times; i++) {
   b4b1c:	e7f5      	b.n	b4b0a <_ZN5HX71112read_averageEh+0xa>
		yield();
	}
	return sum / times;
}
   b4b1e:	fb95 f0f4 	sdiv	r0, r5, r4
   b4b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4b24 <_ZN5HX7119get_valueEh>:

double HX711::get_value(byte times) {
   b4b24:	b510      	push	{r4, lr}
   b4b26:	4604      	mov	r4, r0
	return read_average(times) - OFFSET;
   b4b28:	f7ff ffea 	bl	b4b00 <_ZN5HX71112read_averageEh>
   b4b2c:	68a3      	ldr	r3, [r4, #8]
   b4b2e:	1ac0      	subs	r0, r0, r3
   b4b30:	f001 fda2 	bl	b6678 <__aeabi_i2d>
}
   b4b34:	ec41 0b10 	vmov	d0, r0, r1
   b4b38:	bd10      	pop	{r4, pc}

000b4b3a <_ZN5HX7119get_unitsEh>:

float HX711::get_units(byte times) {
   b4b3a:	b570      	push	{r4, r5, r6, lr}
   b4b3c:	4606      	mov	r6, r0
	return get_value(times) / SCALE;
   b4b3e:	f7ff fff1 	bl	b4b24 <_ZN5HX7119get_valueEh>
   b4b42:	68f0      	ldr	r0, [r6, #12]
   b4b44:	ec55 4b10 	vmov	r4, r5, d0
   b4b48:	f001 fda8 	bl	b669c <__aeabi_f2d>
   b4b4c:	4602      	mov	r2, r0
   b4b4e:	460b      	mov	r3, r1
   b4b50:	4620      	mov	r0, r4
   b4b52:	4629      	mov	r1, r5
   b4b54:	f001 ff24 	bl	b69a0 <__aeabi_ddiv>
   b4b58:	f002 f80a 	bl	b6b70 <__aeabi_d2f>
}
   b4b5c:	ee00 0a10 	vmov	s0, r0
   b4b60:	bd70      	pop	{r4, r5, r6, pc}

000b4b62 <_ZN5HX7114tareEh>:

void HX711::tare(byte times) {
   b4b62:	b510      	push	{r4, lr}
   b4b64:	4604      	mov	r4, r0
	double sum = read_average(times);
   b4b66:	f7ff ffcb 	bl	b4b00 <_ZN5HX71112read_averageEh>
float HX711::get_scale() {
	return SCALE;
}

void HX711::set_offset(long offset) {
	OFFSET = offset;
   b4b6a:	60a0      	str	r0, [r4, #8]
}
   b4b6c:	bd10      	pop	{r4, pc}

000b4b6e <_ZN5HX7119set_scaleEf>:
	SCALE = scale;
   b4b6e:	ed80 0a03 	vstr	s0, [r0, #12]
}
   b4b72:	4770      	bx	lr

000b4b74 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4b74:	b508      	push	{r3, lr}
   b4b76:	4b02      	ldr	r3, [pc, #8]	; (b4b80 <netdb_freeaddrinfo+0xc>)
   b4b78:	681b      	ldr	r3, [r3, #0]
   b4b7a:	689b      	ldr	r3, [r3, #8]
   b4b7c:	9301      	str	r3, [sp, #4]
   b4b7e:	bd08      	pop	{r3, pc}
   b4b80:	00030268 	.word	0x00030268

000b4b84 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4b84:	b508      	push	{r3, lr}
   b4b86:	4b02      	ldr	r3, [pc, #8]	; (b4b90 <netdb_getaddrinfo+0xc>)
   b4b88:	681b      	ldr	r3, [r3, #0]
   b4b8a:	68db      	ldr	r3, [r3, #12]
   b4b8c:	9301      	str	r3, [sp, #4]
   b4b8e:	bd08      	pop	{r3, pc}
   b4b90:	00030268 	.word	0x00030268

000b4b94 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4b94:	b508      	push	{r3, lr}
   b4b96:	4b02      	ldr	r3, [pc, #8]	; (b4ba0 <HAL_Validate_Pin_Function+0xc>)
   b4b98:	681b      	ldr	r3, [r3, #0]
   b4b9a:	685b      	ldr	r3, [r3, #4]
   b4b9c:	9301      	str	r3, [sp, #4]
   b4b9e:	bd08      	pop	{r3, pc}
   b4ba0:	0003022c 	.word	0x0003022c

000b4ba4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4ba4:	b508      	push	{r3, lr}
   b4ba6:	4b02      	ldr	r3, [pc, #8]	; (b4bb0 <HAL_Pin_Mode+0xc>)
   b4ba8:	681b      	ldr	r3, [r3, #0]
   b4baa:	689b      	ldr	r3, [r3, #8]
   b4bac:	9301      	str	r3, [sp, #4]
   b4bae:	bd08      	pop	{r3, pc}
   b4bb0:	0003022c 	.word	0x0003022c

000b4bb4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4bb4:	b508      	push	{r3, lr}
   b4bb6:	4b02      	ldr	r3, [pc, #8]	; (b4bc0 <HAL_Get_Pin_Mode+0xc>)
   b4bb8:	681b      	ldr	r3, [r3, #0]
   b4bba:	68db      	ldr	r3, [r3, #12]
   b4bbc:	9301      	str	r3, [sp, #4]
   b4bbe:	bd08      	pop	{r3, pc}
   b4bc0:	0003022c 	.word	0x0003022c

000b4bc4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4bc4:	b508      	push	{r3, lr}
   b4bc6:	4b02      	ldr	r3, [pc, #8]	; (b4bd0 <HAL_GPIO_Write+0xc>)
   b4bc8:	681b      	ldr	r3, [r3, #0]
   b4bca:	691b      	ldr	r3, [r3, #16]
   b4bcc:	9301      	str	r3, [sp, #4]
   b4bce:	bd08      	pop	{r3, pc}
   b4bd0:	0003022c 	.word	0x0003022c

000b4bd4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b4bd4:	b508      	push	{r3, lr}
   b4bd6:	4b02      	ldr	r3, [pc, #8]	; (b4be0 <HAL_GPIO_Read+0xc>)
   b4bd8:	681b      	ldr	r3, [r3, #0]
   b4bda:	695b      	ldr	r3, [r3, #20]
   b4bdc:	9301      	str	r3, [sp, #4]
   b4bde:	bd08      	pop	{r3, pc}
   b4be0:	0003022c 	.word	0x0003022c

000b4be4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4be4:	b508      	push	{r3, lr}
   b4be6:	4b02      	ldr	r3, [pc, #8]	; (b4bf0 <hal_adc_read+0xc>)
   b4be8:	681b      	ldr	r3, [r3, #0]
   b4bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4bec:	9301      	str	r3, [sp, #4]
   b4bee:	bd08      	pop	{r3, pc}
   b4bf0:	0003022c 	.word	0x0003022c

000b4bf4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4bf4:	b508      	push	{r3, lr}
   b4bf6:	4b02      	ldr	r3, [pc, #8]	; (b4c00 <if_index_to_name+0xc>)
   b4bf8:	681b      	ldr	r3, [r3, #0]
   b4bfa:	695b      	ldr	r3, [r3, #20]
   b4bfc:	9301      	str	r3, [sp, #4]
   b4bfe:	bd08      	pop	{r3, pc}
   b4c00:	0003026c 	.word	0x0003026c

000b4c04 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4c04:	b508      	push	{r3, lr}
   b4c06:	4b02      	ldr	r3, [pc, #8]	; (b4c10 <HAL_RNG_GetRandomNumber+0xc>)
   b4c08:	681b      	ldr	r3, [r3, #0]
   b4c0a:	685b      	ldr	r3, [r3, #4]
   b4c0c:	9301      	str	r3, [sp, #4]
   b4c0e:	bd08      	pop	{r3, pc}
   b4c10:	00030218 	.word	0x00030218

000b4c14 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4c14:	b508      	push	{r3, lr}
   b4c16:	4b02      	ldr	r3, [pc, #8]	; (b4c20 <HAL_Delay_Microseconds+0xc>)
   b4c18:	681b      	ldr	r3, [r3, #0]
   b4c1a:	68db      	ldr	r3, [r3, #12]
   b4c1c:	9301      	str	r3, [sp, #4]
   b4c1e:	bd08      	pop	{r3, pc}
   b4c20:	00030218 	.word	0x00030218

000b4c24 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4c24:	b508      	push	{r3, lr}
   b4c26:	4b02      	ldr	r3, [pc, #8]	; (b4c30 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4c28:	681b      	ldr	r3, [r3, #0]
   b4c2a:	695b      	ldr	r3, [r3, #20]
   b4c2c:	9301      	str	r3, [sp, #4]
   b4c2e:	bd08      	pop	{r3, pc}
   b4c30:	00030218 	.word	0x00030218

000b4c34 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b4c34:	b508      	push	{r3, lr}
   b4c36:	4b02      	ldr	r3, [pc, #8]	; (b4c40 <hal_timer_millis+0xc>)
   b4c38:	681b      	ldr	r3, [r3, #0]
   b4c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b4c3c:	9301      	str	r3, [sp, #4]
   b4c3e:	bd08      	pop	{r3, pc}
   b4c40:	00030218 	.word	0x00030218

000b4c44 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b4c44:	b508      	push	{r3, lr}
   b4c46:	4b02      	ldr	r3, [pc, #8]	; (b4c50 <os_thread_yield+0xc>)
   b4c48:	681b      	ldr	r3, [r3, #0]
   b4c4a:	68db      	ldr	r3, [r3, #12]
   b4c4c:	9301      	str	r3, [sp, #4]
   b4c4e:	bd08      	pop	{r3, pc}
   b4c50:	00030248 	.word	0x00030248

000b4c54 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4c54:	b508      	push	{r3, lr}
   b4c56:	4b02      	ldr	r3, [pc, #8]	; (b4c60 <os_mutex_recursive_create+0xc>)
   b4c58:	681b      	ldr	r3, [r3, #0]
   b4c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c5c:	9301      	str	r3, [sp, #4]
   b4c5e:	bd08      	pop	{r3, pc}
   b4c60:	00030248 	.word	0x00030248

000b4c64 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4c64:	b508      	push	{r3, lr}
   b4c66:	4b02      	ldr	r3, [pc, #8]	; (b4c70 <inet_inet_ntop+0xc>)
   b4c68:	681b      	ldr	r3, [r3, #0]
   b4c6a:	695b      	ldr	r3, [r3, #20]
   b4c6c:	9301      	str	r3, [sp, #4]
   b4c6e:	bd08      	pop	{r3, pc}
   b4c70:	00030264 	.word	0x00030264

000b4c74 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4c74:	b508      	push	{r3, lr}
   b4c76:	4b02      	ldr	r3, [pc, #8]	; (b4c80 <inet_htonl+0xc>)
   b4c78:	681b      	ldr	r3, [r3, #0]
   b4c7a:	6a1b      	ldr	r3, [r3, #32]
   b4c7c:	9301      	str	r3, [sp, #4]
   b4c7e:	bd08      	pop	{r3, pc}
   b4c80:	00030264 	.word	0x00030264

000b4c84 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4c84:	b508      	push	{r3, lr}
   b4c86:	4b02      	ldr	r3, [pc, #8]	; (b4c90 <inet_htons+0xc>)
   b4c88:	681b      	ldr	r3, [r3, #0]
   b4c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4c8c:	9301      	str	r3, [sp, #4]
   b4c8e:	bd08      	pop	{r3, pc}
   b4c90:	00030264 	.word	0x00030264

000b4c94 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4c94:	b508      	push	{r3, lr}
   b4c96:	4b02      	ldr	r3, [pc, #8]	; (b4ca0 <hal_usart_write+0xc>)
   b4c98:	681b      	ldr	r3, [r3, #0]
   b4c9a:	68db      	ldr	r3, [r3, #12]
   b4c9c:	9301      	str	r3, [sp, #4]
   b4c9e:	bd08      	pop	{r3, pc}
   b4ca0:	0003023c 	.word	0x0003023c

000b4ca4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4ca4:	b508      	push	{r3, lr}
   b4ca6:	4b02      	ldr	r3, [pc, #8]	; (b4cb0 <hal_usart_available+0xc>)
   b4ca8:	681b      	ldr	r3, [r3, #0]
   b4caa:	691b      	ldr	r3, [r3, #16]
   b4cac:	9301      	str	r3, [sp, #4]
   b4cae:	bd08      	pop	{r3, pc}
   b4cb0:	0003023c 	.word	0x0003023c

000b4cb4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4cb4:	b508      	push	{r3, lr}
   b4cb6:	4b02      	ldr	r3, [pc, #8]	; (b4cc0 <hal_usart_read+0xc>)
   b4cb8:	681b      	ldr	r3, [r3, #0]
   b4cba:	695b      	ldr	r3, [r3, #20]
   b4cbc:	9301      	str	r3, [sp, #4]
   b4cbe:	bd08      	pop	{r3, pc}
   b4cc0:	0003023c 	.word	0x0003023c

000b4cc4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4cc4:	b508      	push	{r3, lr}
   b4cc6:	4b02      	ldr	r3, [pc, #8]	; (b4cd0 <hal_usart_peek+0xc>)
   b4cc8:	681b      	ldr	r3, [r3, #0]
   b4cca:	699b      	ldr	r3, [r3, #24]
   b4ccc:	9301      	str	r3, [sp, #4]
   b4cce:	bd08      	pop	{r3, pc}
   b4cd0:	0003023c 	.word	0x0003023c

000b4cd4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4cd4:	b508      	push	{r3, lr}
   b4cd6:	4b02      	ldr	r3, [pc, #8]	; (b4ce0 <hal_usart_flush+0xc>)
   b4cd8:	681b      	ldr	r3, [r3, #0]
   b4cda:	69db      	ldr	r3, [r3, #28]
   b4cdc:	9301      	str	r3, [sp, #4]
   b4cde:	bd08      	pop	{r3, pc}
   b4ce0:	0003023c 	.word	0x0003023c

000b4ce4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4ce4:	b508      	push	{r3, lr}
   b4ce6:	4b02      	ldr	r3, [pc, #8]	; (b4cf0 <hal_usart_is_enabled+0xc>)
   b4ce8:	681b      	ldr	r3, [r3, #0]
   b4cea:	6a1b      	ldr	r3, [r3, #32]
   b4cec:	9301      	str	r3, [sp, #4]
   b4cee:	bd08      	pop	{r3, pc}
   b4cf0:	0003023c 	.word	0x0003023c

000b4cf4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4cf4:	b508      	push	{r3, lr}
   b4cf6:	4b02      	ldr	r3, [pc, #8]	; (b4d00 <hal_usart_available_data_for_write+0xc>)
   b4cf8:	681b      	ldr	r3, [r3, #0]
   b4cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4cfc:	9301      	str	r3, [sp, #4]
   b4cfe:	bd08      	pop	{r3, pc}
   b4d00:	0003023c 	.word	0x0003023c

000b4d04 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4d04:	b508      	push	{r3, lr}
   b4d06:	4b02      	ldr	r3, [pc, #8]	; (b4d10 <hal_usart_init_ex+0xc>)
   b4d08:	681b      	ldr	r3, [r3, #0]
   b4d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d0c:	9301      	str	r3, [sp, #4]
   b4d0e:	bd08      	pop	{r3, pc}
   b4d10:	0003023c 	.word	0x0003023c

000b4d14 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4d14:	b508      	push	{r3, lr}
   b4d16:	4b02      	ldr	r3, [pc, #8]	; (b4d20 <hal_i2c_write+0xc>)
   b4d18:	681b      	ldr	r3, [r3, #0]
   b4d1a:	6a1b      	ldr	r3, [r3, #32]
   b4d1c:	9301      	str	r3, [sp, #4]
   b4d1e:	bd08      	pop	{r3, pc}
   b4d20:	00030228 	.word	0x00030228

000b4d24 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4d24:	b508      	push	{r3, lr}
   b4d26:	4b02      	ldr	r3, [pc, #8]	; (b4d30 <hal_i2c_available+0xc>)
   b4d28:	681b      	ldr	r3, [r3, #0]
   b4d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4d2c:	9301      	str	r3, [sp, #4]
   b4d2e:	bd08      	pop	{r3, pc}
   b4d30:	00030228 	.word	0x00030228

000b4d34 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4d34:	b508      	push	{r3, lr}
   b4d36:	4b02      	ldr	r3, [pc, #8]	; (b4d40 <hal_i2c_read+0xc>)
   b4d38:	681b      	ldr	r3, [r3, #0]
   b4d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4d3c:	9301      	str	r3, [sp, #4]
   b4d3e:	bd08      	pop	{r3, pc}
   b4d40:	00030228 	.word	0x00030228

000b4d44 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4d44:	b508      	push	{r3, lr}
   b4d46:	4b02      	ldr	r3, [pc, #8]	; (b4d50 <hal_i2c_peek+0xc>)
   b4d48:	681b      	ldr	r3, [r3, #0]
   b4d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4d4c:	9301      	str	r3, [sp, #4]
   b4d4e:	bd08      	pop	{r3, pc}
   b4d50:	00030228 	.word	0x00030228

000b4d54 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4d54:	b508      	push	{r3, lr}
   b4d56:	4b02      	ldr	r3, [pc, #8]	; (b4d60 <hal_i2c_flush+0xc>)
   b4d58:	681b      	ldr	r3, [r3, #0]
   b4d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d5c:	9301      	str	r3, [sp, #4]
   b4d5e:	bd08      	pop	{r3, pc}
   b4d60:	00030228 	.word	0x00030228

000b4d64 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4d64:	b508      	push	{r3, lr}
   b4d66:	4b02      	ldr	r3, [pc, #8]	; (b4d70 <hal_i2c_is_enabled+0xc>)
   b4d68:	681b      	ldr	r3, [r3, #0]
   b4d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4d6c:	9301      	str	r3, [sp, #4]
   b4d6e:	bd08      	pop	{r3, pc}
   b4d70:	00030228 	.word	0x00030228

000b4d74 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4d74:	b508      	push	{r3, lr}
   b4d76:	4b02      	ldr	r3, [pc, #8]	; (b4d80 <hal_i2c_init+0xc>)
   b4d78:	681b      	ldr	r3, [r3, #0]
   b4d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d7c:	9301      	str	r3, [sp, #4]
   b4d7e:	bd08      	pop	{r3, pc}
   b4d80:	00030228 	.word	0x00030228

000b4d84 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4d84:	b508      	push	{r3, lr}
   b4d86:	4b02      	ldr	r3, [pc, #8]	; (b4d90 <sock_setsockopt+0xc>)
   b4d88:	681b      	ldr	r3, [r3, #0]
   b4d8a:	699b      	ldr	r3, [r3, #24]
   b4d8c:	9301      	str	r3, [sp, #4]
   b4d8e:	bd08      	pop	{r3, pc}
   b4d90:	00030238 	.word	0x00030238

000b4d94 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4d94:	b508      	push	{r3, lr}
   b4d96:	4b02      	ldr	r3, [pc, #8]	; (b4da0 <sock_close+0xc>)
   b4d98:	681b      	ldr	r3, [r3, #0]
   b4d9a:	69db      	ldr	r3, [r3, #28]
   b4d9c:	9301      	str	r3, [sp, #4]
   b4d9e:	bd08      	pop	{r3, pc}
   b4da0:	00030238 	.word	0x00030238

000b4da4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4da4:	b508      	push	{r3, lr}
   b4da6:	4b02      	ldr	r3, [pc, #8]	; (b4db0 <sock_connect+0xc>)
   b4da8:	681b      	ldr	r3, [r3, #0]
   b4daa:	6a1b      	ldr	r3, [r3, #32]
   b4dac:	9301      	str	r3, [sp, #4]
   b4dae:	bd08      	pop	{r3, pc}
   b4db0:	00030238 	.word	0x00030238

000b4db4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4db4:	b508      	push	{r3, lr}
   b4db6:	4b02      	ldr	r3, [pc, #8]	; (b4dc0 <sock_recv+0xc>)
   b4db8:	681b      	ldr	r3, [r3, #0]
   b4dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4dbc:	9301      	str	r3, [sp, #4]
   b4dbe:	bd08      	pop	{r3, pc}
   b4dc0:	00030238 	.word	0x00030238

000b4dc4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4dc4:	b508      	push	{r3, lr}
   b4dc6:	4b02      	ldr	r3, [pc, #8]	; (b4dd0 <sock_send+0xc>)
   b4dc8:	681b      	ldr	r3, [r3, #0]
   b4dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4dcc:	9301      	str	r3, [sp, #4]
   b4dce:	bd08      	pop	{r3, pc}
   b4dd0:	00030238 	.word	0x00030238

000b4dd4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4dd4:	b508      	push	{r3, lr}
   b4dd6:	4b02      	ldr	r3, [pc, #8]	; (b4de0 <sock_socket+0xc>)
   b4dd8:	681b      	ldr	r3, [r3, #0]
   b4dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4ddc:	9301      	str	r3, [sp, #4]
   b4dde:	bd08      	pop	{r3, pc}
   b4de0:	00030238 	.word	0x00030238

000b4de4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4de4:	b508      	push	{r3, lr}
   b4de6:	4b02      	ldr	r3, [pc, #8]	; (b4df0 <hal_spi_init+0xc>)
   b4de8:	681b      	ldr	r3, [r3, #0]
   b4dea:	69db      	ldr	r3, [r3, #28]
   b4dec:	9301      	str	r3, [sp, #4]
   b4dee:	bd08      	pop	{r3, pc}
   b4df0:	00030230 	.word	0x00030230

000b4df4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4df4:	b508      	push	{r3, lr}
   b4df6:	4b02      	ldr	r3, [pc, #8]	; (b4e00 <hal_spi_is_enabled+0xc>)
   b4df8:	681b      	ldr	r3, [r3, #0]
   b4dfa:	6a1b      	ldr	r3, [r3, #32]
   b4dfc:	9301      	str	r3, [sp, #4]
   b4dfe:	bd08      	pop	{r3, pc}
   b4e00:	00030230 	.word	0x00030230

000b4e04 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4e04:	b508      	push	{r3, lr}
   b4e06:	4b02      	ldr	r3, [pc, #8]	; (b4e10 <HAL_USB_USART_Init+0xc>)
   b4e08:	681b      	ldr	r3, [r3, #0]
   b4e0a:	681b      	ldr	r3, [r3, #0]
   b4e0c:	9301      	str	r3, [sp, #4]
   b4e0e:	bd08      	pop	{r3, pc}
   b4e10:	0003024c 	.word	0x0003024c

000b4e14 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4e14:	b508      	push	{r3, lr}
   b4e16:	4b02      	ldr	r3, [pc, #8]	; (b4e20 <HAL_USB_USART_Begin+0xc>)
   b4e18:	681b      	ldr	r3, [r3, #0]
   b4e1a:	685b      	ldr	r3, [r3, #4]
   b4e1c:	9301      	str	r3, [sp, #4]
   b4e1e:	bd08      	pop	{r3, pc}
   b4e20:	0003024c 	.word	0x0003024c

000b4e24 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4e24:	b508      	push	{r3, lr}
   b4e26:	4b02      	ldr	r3, [pc, #8]	; (b4e30 <HAL_USB_USART_Available_Data+0xc>)
   b4e28:	681b      	ldr	r3, [r3, #0]
   b4e2a:	691b      	ldr	r3, [r3, #16]
   b4e2c:	9301      	str	r3, [sp, #4]
   b4e2e:	bd08      	pop	{r3, pc}
   b4e30:	0003024c 	.word	0x0003024c

000b4e34 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4e34:	b508      	push	{r3, lr}
   b4e36:	4b02      	ldr	r3, [pc, #8]	; (b4e40 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4e38:	681b      	ldr	r3, [r3, #0]
   b4e3a:	695b      	ldr	r3, [r3, #20]
   b4e3c:	9301      	str	r3, [sp, #4]
   b4e3e:	bd08      	pop	{r3, pc}
   b4e40:	0003024c 	.word	0x0003024c

000b4e44 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e44:	b508      	push	{r3, lr}
   b4e46:	4b02      	ldr	r3, [pc, #8]	; (b4e50 <HAL_USB_USART_Receive_Data+0xc>)
   b4e48:	681b      	ldr	r3, [r3, #0]
   b4e4a:	699b      	ldr	r3, [r3, #24]
   b4e4c:	9301      	str	r3, [sp, #4]
   b4e4e:	bd08      	pop	{r3, pc}
   b4e50:	0003024c 	.word	0x0003024c

000b4e54 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e54:	b508      	push	{r3, lr}
   b4e56:	4b02      	ldr	r3, [pc, #8]	; (b4e60 <HAL_USB_USART_Send_Data+0xc>)
   b4e58:	681b      	ldr	r3, [r3, #0]
   b4e5a:	69db      	ldr	r3, [r3, #28]
   b4e5c:	9301      	str	r3, [sp, #4]
   b4e5e:	bd08      	pop	{r3, pc}
   b4e60:	0003024c 	.word	0x0003024c

000b4e64 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4e64:	b508      	push	{r3, lr}
   b4e66:	4b02      	ldr	r3, [pc, #8]	; (b4e70 <HAL_USB_USART_Flush_Data+0xc>)
   b4e68:	681b      	ldr	r3, [r3, #0]
   b4e6a:	6a1b      	ldr	r3, [r3, #32]
   b4e6c:	9301      	str	r3, [sp, #4]
   b4e6e:	bd08      	pop	{r3, pc}
   b4e70:	0003024c 	.word	0x0003024c

000b4e74 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4e74:	b508      	push	{r3, lr}
   b4e76:	4b02      	ldr	r3, [pc, #8]	; (b4e80 <HAL_USB_USART_Is_Connected+0xc>)
   b4e78:	681b      	ldr	r3, [r3, #0]
   b4e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4e7c:	9301      	str	r3, [sp, #4]
   b4e7e:	bd08      	pop	{r3, pc}
   b4e80:	0003024c 	.word	0x0003024c

000b4e84 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4e84:	b508      	push	{r3, lr}
   b4e86:	4b02      	ldr	r3, [pc, #8]	; (b4e90 <panic_+0xc>)
   b4e88:	681b      	ldr	r3, [r3, #0]
   b4e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4e8c:	9301      	str	r3, [sp, #4]
   b4e8e:	bd08      	pop	{r3, pc}
   b4e90:	00030260 	.word	0x00030260

000b4e94 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4e94:	b508      	push	{r3, lr}
   b4e96:	4b02      	ldr	r3, [pc, #8]	; (b4ea0 <log_message+0xc>)
   b4e98:	681b      	ldr	r3, [r3, #0]
   b4e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4e9c:	9301      	str	r3, [sp, #4]
   b4e9e:	bd08      	pop	{r3, pc}
   b4ea0:	00030260 	.word	0x00030260

000b4ea4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4ea4:	b508      	push	{r3, lr}
   b4ea6:	4b02      	ldr	r3, [pc, #8]	; (b4eb0 <set_system_mode+0xc>)
   b4ea8:	681b      	ldr	r3, [r3, #0]
   b4eaa:	685b      	ldr	r3, [r3, #4]
   b4eac:	9301      	str	r3, [sp, #4]
   b4eae:	bd08      	pop	{r3, pc}
   b4eb0:	00030220 	.word	0x00030220

000b4eb4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4eb4:	b508      	push	{r3, lr}
   b4eb6:	4b02      	ldr	r3, [pc, #8]	; (b4ec0 <system_delay_ms+0xc>)
   b4eb8:	681b      	ldr	r3, [r3, #0]
   b4eba:	695b      	ldr	r3, [r3, #20]
   b4ebc:	9301      	str	r3, [sp, #4]
   b4ebe:	bd08      	pop	{r3, pc}
   b4ec0:	00030220 	.word	0x00030220

000b4ec4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4ec4:	b508      	push	{r3, lr}
   b4ec6:	4b03      	ldr	r3, [pc, #12]	; (b4ed4 <system_ctrl_set_app_request_handler+0x10>)
   b4ec8:	681b      	ldr	r3, [r3, #0]
   b4eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4ece:	9301      	str	r3, [sp, #4]
   b4ed0:	bd08      	pop	{r3, pc}
   b4ed2:	0000      	.short	0x0000
   b4ed4:	00030220 	.word	0x00030220

000b4ed8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4ed8:	b508      	push	{r3, lr}
   b4eda:	4b03      	ldr	r3, [pc, #12]	; (b4ee8 <system_ctrl_set_result+0x10>)
   b4edc:	681b      	ldr	r3, [r3, #0]
   b4ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4ee2:	9301      	str	r3, [sp, #4]
   b4ee4:	bd08      	pop	{r3, pc}
   b4ee6:	0000      	.short	0x0000
   b4ee8:	00030220 	.word	0x00030220

000b4eec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4eec:	b508      	push	{r3, lr}
   b4eee:	4b02      	ldr	r3, [pc, #8]	; (b4ef8 <network_connect+0xc>)
   b4ef0:	681b      	ldr	r3, [r3, #0]
   b4ef2:	685b      	ldr	r3, [r3, #4]
   b4ef4:	9301      	str	r3, [sp, #4]
   b4ef6:	bd08      	pop	{r3, pc}
   b4ef8:	00030240 	.word	0x00030240

000b4efc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4efc:	b508      	push	{r3, lr}
   b4efe:	4b02      	ldr	r3, [pc, #8]	; (b4f08 <network_connecting+0xc>)
   b4f00:	681b      	ldr	r3, [r3, #0]
   b4f02:	689b      	ldr	r3, [r3, #8]
   b4f04:	9301      	str	r3, [sp, #4]
   b4f06:	bd08      	pop	{r3, pc}
   b4f08:	00030240 	.word	0x00030240

000b4f0c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4f0c:	b508      	push	{r3, lr}
   b4f0e:	4b02      	ldr	r3, [pc, #8]	; (b4f18 <network_disconnect+0xc>)
   b4f10:	681b      	ldr	r3, [r3, #0]
   b4f12:	68db      	ldr	r3, [r3, #12]
   b4f14:	9301      	str	r3, [sp, #4]
   b4f16:	bd08      	pop	{r3, pc}
   b4f18:	00030240 	.word	0x00030240

000b4f1c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4f1c:	b508      	push	{r3, lr}
   b4f1e:	4b02      	ldr	r3, [pc, #8]	; (b4f28 <network_ready+0xc>)
   b4f20:	681b      	ldr	r3, [r3, #0]
   b4f22:	691b      	ldr	r3, [r3, #16]
   b4f24:	9301      	str	r3, [sp, #4]
   b4f26:	bd08      	pop	{r3, pc}
   b4f28:	00030240 	.word	0x00030240

000b4f2c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f2c:	b508      	push	{r3, lr}
   b4f2e:	4b02      	ldr	r3, [pc, #8]	; (b4f38 <network_on+0xc>)
   b4f30:	681b      	ldr	r3, [r3, #0]
   b4f32:	695b      	ldr	r3, [r3, #20]
   b4f34:	9301      	str	r3, [sp, #4]
   b4f36:	bd08      	pop	{r3, pc}
   b4f38:	00030240 	.word	0x00030240

000b4f3c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f3c:	b508      	push	{r3, lr}
   b4f3e:	4b02      	ldr	r3, [pc, #8]	; (b4f48 <network_off+0xc>)
   b4f40:	681b      	ldr	r3, [r3, #0]
   b4f42:	699b      	ldr	r3, [r3, #24]
   b4f44:	9301      	str	r3, [sp, #4]
   b4f46:	bd08      	pop	{r3, pc}
   b4f48:	00030240 	.word	0x00030240

000b4f4c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4f4c:	b508      	push	{r3, lr}
   b4f4e:	4b02      	ldr	r3, [pc, #8]	; (b4f58 <network_listen+0xc>)
   b4f50:	681b      	ldr	r3, [r3, #0]
   b4f52:	69db      	ldr	r3, [r3, #28]
   b4f54:	9301      	str	r3, [sp, #4]
   b4f56:	bd08      	pop	{r3, pc}
   b4f58:	00030240 	.word	0x00030240

000b4f5c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4f5c:	b508      	push	{r3, lr}
   b4f5e:	4b02      	ldr	r3, [pc, #8]	; (b4f68 <network_listening+0xc>)
   b4f60:	681b      	ldr	r3, [r3, #0]
   b4f62:	6a1b      	ldr	r3, [r3, #32]
   b4f64:	9301      	str	r3, [sp, #4]
   b4f66:	bd08      	pop	{r3, pc}
   b4f68:	00030240 	.word	0x00030240

000b4f6c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4f6c:	b508      	push	{r3, lr}
   b4f6e:	4b02      	ldr	r3, [pc, #8]	; (b4f78 <network_set_listen_timeout+0xc>)
   b4f70:	681b      	ldr	r3, [r3, #0]
   b4f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4f74:	9301      	str	r3, [sp, #4]
   b4f76:	bd08      	pop	{r3, pc}
   b4f78:	00030240 	.word	0x00030240

000b4f7c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4f7c:	b508      	push	{r3, lr}
   b4f7e:	4b02      	ldr	r3, [pc, #8]	; (b4f88 <network_get_listen_timeout+0xc>)
   b4f80:	681b      	ldr	r3, [r3, #0]
   b4f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4f84:	9301      	str	r3, [sp, #4]
   b4f86:	bd08      	pop	{r3, pc}
   b4f88:	00030240 	.word	0x00030240

000b4f8c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4f8c:	b508      	push	{r3, lr}
   b4f8e:	4b02      	ldr	r3, [pc, #8]	; (b4f98 <network_is_on+0xc>)
   b4f90:	681b      	ldr	r3, [r3, #0]
   b4f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f94:	9301      	str	r3, [sp, #4]
   b4f96:	bd08      	pop	{r3, pc}
   b4f98:	00030240 	.word	0x00030240

000b4f9c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4f9c:	b508      	push	{r3, lr}
   b4f9e:	4b02      	ldr	r3, [pc, #8]	; (b4fa8 <network_is_off+0xc>)
   b4fa0:	681b      	ldr	r3, [r3, #0]
   b4fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4fa4:	9301      	str	r3, [sp, #4]
   b4fa6:	bd08      	pop	{r3, pc}
   b4fa8:	00030240 	.word	0x00030240

000b4fac <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b4fac:	b508      	push	{r3, lr}
   b4fae:	4b02      	ldr	r3, [pc, #8]	; (b4fb8 <spark_process+0xc>)
   b4fb0:	681b      	ldr	r3, [r3, #0]
   b4fb2:	689b      	ldr	r3, [r3, #8]
   b4fb4:	9301      	str	r3, [sp, #4]
   b4fb6:	bd08      	pop	{r3, pc}
   b4fb8:	00030244 	.word	0x00030244

000b4fbc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4fbc:	b508      	push	{r3, lr}
   b4fbe:	4b02      	ldr	r3, [pc, #8]	; (b4fc8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4fc0:	681b      	ldr	r3, [r3, #0]
   b4fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4fc4:	9301      	str	r3, [sp, #4]
   b4fc6:	bd08      	pop	{r3, pc}
   b4fc8:	00030244 	.word	0x00030244

000b4fcc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4fcc:	b508      	push	{r3, lr}
   b4fce:	4b02      	ldr	r3, [pc, #8]	; (b4fd8 <malloc+0xc>)
   b4fd0:	681b      	ldr	r3, [r3, #0]
   b4fd2:	681b      	ldr	r3, [r3, #0]
   b4fd4:	9301      	str	r3, [sp, #4]
   b4fd6:	bd08      	pop	{r3, pc}
   b4fd8:	0003021c 	.word	0x0003021c

000b4fdc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4fdc:	b508      	push	{r3, lr}
   b4fde:	4b02      	ldr	r3, [pc, #8]	; (b4fe8 <free+0xc>)
   b4fe0:	681b      	ldr	r3, [r3, #0]
   b4fe2:	685b      	ldr	r3, [r3, #4]
   b4fe4:	9301      	str	r3, [sp, #4]
   b4fe6:	bd08      	pop	{r3, pc}
   b4fe8:	0003021c 	.word	0x0003021c

000b4fec <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4fec:	b508      	push	{r3, lr}
   b4fee:	4b02      	ldr	r3, [pc, #8]	; (b4ff8 <vsnprintf+0xc>)
   b4ff0:	681b      	ldr	r3, [r3, #0]
   b4ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4ff4:	9301      	str	r3, [sp, #4]
   b4ff6:	bd08      	pop	{r3, pc}
   b4ff8:	0003021c 	.word	0x0003021c

000b4ffc <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4ffc:	b508      	push	{r3, lr}
   b4ffe:	4b02      	ldr	r3, [pc, #8]	; (b5008 <__errno+0xc>)
   b5000:	681b      	ldr	r3, [r3, #0]
   b5002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5004:	9301      	str	r3, [sp, #4]
   b5006:	bd08      	pop	{r3, pc}
   b5008:	0003021c 	.word	0x0003021c

000b500c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b500c:	b508      	push	{r3, lr}
   b500e:	4b02      	ldr	r3, [pc, #8]	; (b5018 <__assert_func+0xc>)
   b5010:	681b      	ldr	r3, [r3, #0]
   b5012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5014:	9301      	str	r3, [sp, #4]
   b5016:	bd08      	pop	{r3, pc}
   b5018:	0003021c 	.word	0x0003021c

000b501c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b501c:	b508      	push	{r3, lr}
   b501e:	4b02      	ldr	r3, [pc, #8]	; (b5028 <newlib_impure_ptr_callback+0xc>)
   b5020:	681b      	ldr	r3, [r3, #0]
   b5022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5024:	9301      	str	r3, [sp, #4]
   b5026:	bd08      	pop	{r3, pc}
   b5028:	0003021c 	.word	0x0003021c

000b502c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b502c:	2200      	movs	r2, #0
   b502e:	6840      	ldr	r0, [r0, #4]
   b5030:	4611      	mov	r1, r2
   b5032:	f7ff bf93 	b.w	b4f5c <network_listening>

000b5036 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5036:	2200      	movs	r2, #0
   b5038:	6840      	ldr	r0, [r0, #4]
   b503a:	4611      	mov	r1, r2
   b503c:	f7ff bf9e 	b.w	b4f7c <network_get_listen_timeout>

000b5040 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5040:	6840      	ldr	r0, [r0, #4]
   b5042:	2200      	movs	r2, #0
   b5044:	f7ff bf92 	b.w	b4f6c <network_set_listen_timeout>

000b5048 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5048:	6840      	ldr	r0, [r0, #4]
   b504a:	2200      	movs	r2, #0
   b504c:	f081 0101 	eor.w	r1, r1, #1
   b5050:	f7ff bf7c 	b.w	b4f4c <network_listen>

000b5054 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5054:	2300      	movs	r3, #0
   b5056:	6840      	ldr	r0, [r0, #4]
   b5058:	461a      	mov	r2, r3
   b505a:	4619      	mov	r1, r3
   b505c:	f7ff bf6e 	b.w	b4f3c <network_off>

000b5060 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5060:	2300      	movs	r3, #0
   b5062:	6840      	ldr	r0, [r0, #4]
   b5064:	461a      	mov	r2, r3
   b5066:	4619      	mov	r1, r3
   b5068:	f7ff bf60 	b.w	b4f2c <network_on>

000b506c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b506c:	2200      	movs	r2, #0
   b506e:	6840      	ldr	r0, [r0, #4]
   b5070:	4611      	mov	r1, r2
   b5072:	f7ff bf53 	b.w	b4f1c <network_ready>

000b5076 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5076:	2200      	movs	r2, #0
   b5078:	6840      	ldr	r0, [r0, #4]
   b507a:	4611      	mov	r1, r2
   b507c:	f7ff bf3e 	b.w	b4efc <network_connecting>

000b5080 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5080:	6840      	ldr	r0, [r0, #4]
   b5082:	2200      	movs	r2, #0
   b5084:	2102      	movs	r1, #2
   b5086:	f7ff bf41 	b.w	b4f0c <network_disconnect>

000b508a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b508a:	2300      	movs	r3, #0
   b508c:	6840      	ldr	r0, [r0, #4]
   b508e:	461a      	mov	r2, r3
   b5090:	f7ff bf2c 	b.w	b4eec <network_connect>

000b5094 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5094:	4b02      	ldr	r3, [pc, #8]	; (b50a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5096:	2203      	movs	r2, #3
   b5098:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b509a:	4a02      	ldr	r2, [pc, #8]	; (b50a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b509c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b509e:	4770      	bx	lr
   b50a0:	2003e6b8 	.word	0x2003e6b8
   b50a4:	000b71c8 	.word	0x000b71c8

000b50a8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b50a8:	b510      	push	{r4, lr}
   b50aa:	4604      	mov	r4, r0
   b50ac:	4608      	mov	r0, r1
{
    _spi = spi;
   b50ae:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b50b0:	f7ff fe98 	bl	b4de4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b50b4:	2300      	movs	r3, #0
   b50b6:	6063      	str	r3, [r4, #4]
}
   b50b8:	4620      	mov	r0, r4
   b50ba:	bd10      	pop	{r4, pc}

000b50bc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b50bc:	4b05      	ldr	r3, [pc, #20]	; (b50d4 <_GLOBAL__sub_I_System+0x18>)
   b50be:	2202      	movs	r2, #2
   b50c0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b50c2:	4b05      	ldr	r3, [pc, #20]	; (b50d8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b50c4:	4a05      	ldr	r2, [pc, #20]	; (b50dc <_GLOBAL__sub_I_System+0x20>)
   b50c6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b50c8:	2000      	movs	r0, #0
   b50ca:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b50ce:	f7ff bee9 	b.w	b4ea4 <set_system_mode>
   b50d2:	bf00      	nop
   b50d4:	2003e6cc 	.word	0x2003e6cc
   b50d8:	2003e6c0 	.word	0x2003e6c0
   b50dc:	ffff0000 	.word	0xffff0000

000b50e0 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b50e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b50e4:	1e93      	subs	r3, r2, #2
{
   b50e6:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b50e8:	2b22      	cmp	r3, #34	; 0x22
   b50ea:	f04f 0300 	mov.w	r3, #0
{
   b50ee:	460d      	mov	r5, r1
   b50f0:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b50f2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b50f6:	d927      	bls.n	b5148 <ltoa+0x68>

      if (10 == base && N < 0L)
   b50f8:	2800      	cmp	r0, #0
   b50fa:	da2a      	bge.n	b5152 <ltoa+0x72>
      {
            *head++ = '-';
   b50fc:	462e      	mov	r6, r5
   b50fe:	232d      	movs	r3, #45	; 0x2d
   b5100:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b5104:	4240      	negs	r0, r0
   b5106:	240a      	movs	r4, #10
      *tail-- = '\0';
   b5108:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b510c:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b5110:	4622      	mov	r2, r4
   b5112:	4601      	mov	r1, r0
   b5114:	a801      	add	r0, sp, #4
   b5116:	f001 fd81 	bl	b6c1c <ldiv>
   b511a:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b511c:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b511e:	2b09      	cmp	r3, #9
   b5120:	bfcc      	ite	gt
   b5122:	2237      	movgt	r2, #55	; 0x37
   b5124:	2230      	movle	r2, #48	; 0x30
   b5126:	fa52 f383 	uxtab	r3, r2, r3
   b512a:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b512e:	f108 0801 	add.w	r8, r8, #1
   b5132:	2800      	cmp	r0, #0
   b5134:	d1ec      	bne.n	b5110 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b5136:	4642      	mov	r2, r8
   b5138:	1c79      	adds	r1, r7, #1
   b513a:	4630      	mov	r0, r6
   b513c:	f001 fd82 	bl	b6c44 <memcpy>
      return str;
}
   b5140:	4628      	mov	r0, r5
   b5142:	b00c      	add	sp, #48	; 0x30
   b5144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b5148:	2a0a      	cmp	r2, #10
   b514a:	d0d5      	beq.n	b50f8 <ltoa+0x18>
      if (uarg)
   b514c:	b118      	cbz	r0, b5156 <ltoa+0x76>
   b514e:	462e      	mov	r6, r5
   b5150:	e7da      	b.n	b5108 <ltoa+0x28>
   b5152:	240a      	movs	r4, #10
   b5154:	e7fa      	b.n	b514c <ltoa+0x6c>
      else  *tail-- = '0';
   b5156:	2330      	movs	r3, #48	; 0x30
   b5158:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b515c:	462e      	mov	r6, r5
   b515e:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b5162:	f04f 0802 	mov.w	r8, #2
   b5166:	e7e6      	b.n	b5136 <ltoa+0x56>

000b5168 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b5168:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b516a:	6843      	ldr	r3, [r0, #4]
   b516c:	3b01      	subs	r3, #1
    {
   b516e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5170:	6043      	str	r3, [r0, #4]
   b5172:	b963      	cbnz	r3, b518e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b5174:	6803      	ldr	r3, [r0, #0]
   b5176:	689b      	ldr	r3, [r3, #8]
   b5178:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b517a:	68a3      	ldr	r3, [r4, #8]
   b517c:	3b01      	subs	r3, #1
   b517e:	60a3      	str	r3, [r4, #8]
   b5180:	b92b      	cbnz	r3, b518e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5182:	6823      	ldr	r3, [r4, #0]
   b5184:	4620      	mov	r0, r4
   b5186:	68db      	ldr	r3, [r3, #12]
        }
    }
   b5188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b518c:	4718      	bx	r3
    }
   b518e:	bd10      	pop	{r4, pc}

000b5190 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5190:	4802      	ldr	r0, [pc, #8]	; (b519c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5192:	2300      	movs	r3, #0
   b5194:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5196:	f7ff bd5d 	b.w	b4c54 <os_mutex_recursive_create>
   b519a:	bf00      	nop
   b519c:	2003e6d0 	.word	0x2003e6d0

000b51a0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b51a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b51a2:	4606      	mov	r6, r0
   b51a4:	460d      	mov	r5, r1
  size_t n = 0;
   b51a6:	188f      	adds	r7, r1, r2
   b51a8:	2400      	movs	r4, #0
  while (size--) {
   b51aa:	42bd      	cmp	r5, r7
   b51ac:	d00c      	beq.n	b51c8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b51ae:	6833      	ldr	r3, [r6, #0]
   b51b0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b51b4:	689b      	ldr	r3, [r3, #8]
   b51b6:	4630      	mov	r0, r6
   b51b8:	4798      	blx	r3
     if (chunk>=0)
   b51ba:	1e03      	subs	r3, r0, #0
   b51bc:	db01      	blt.n	b51c2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b51be:	441c      	add	r4, r3
  while (size--) {
   b51c0:	e7f3      	b.n	b51aa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b51c2:	2c00      	cmp	r4, #0
   b51c4:	bf08      	it	eq
   b51c6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b51c8:	4620      	mov	r0, r4
   b51ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b51cc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b51cc:	b513      	push	{r0, r1, r4, lr}
   b51ce:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b51d0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b51d2:	b159      	cbz	r1, b51ec <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b51d4:	9101      	str	r1, [sp, #4]
   b51d6:	f001 fda5 	bl	b6d24 <strlen>
   b51da:	6823      	ldr	r3, [r4, #0]
   b51dc:	9901      	ldr	r1, [sp, #4]
   b51de:	68db      	ldr	r3, [r3, #12]
   b51e0:	4602      	mov	r2, r0
   b51e2:	4620      	mov	r0, r4
    }
   b51e4:	b002      	add	sp, #8
   b51e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b51ea:	4718      	bx	r3
    }
   b51ec:	b002      	add	sp, #8
   b51ee:	bd10      	pop	{r4, pc}

000b51f0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b51f0:	b508      	push	{r3, lr}
  return write(str);
   b51f2:	f7ff ffeb 	bl	b51cc <_ZN5Print5writeEPKc>
}
   b51f6:	bd08      	pop	{r3, pc}

000b51f8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b51f8:	6803      	ldr	r3, [r0, #0]
   b51fa:	689b      	ldr	r3, [r3, #8]
   b51fc:	4718      	bx	r3

000b51fe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b51fe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5200:	210d      	movs	r1, #13
{
   b5202:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5204:	f7ff fff8 	bl	b51f8 <_ZN5Print5printEc>
  n += print('\n');
   b5208:	210a      	movs	r1, #10
  size_t n = print('\r');
   b520a:	4604      	mov	r4, r0
  n += print('\n');
   b520c:	4628      	mov	r0, r5
   b520e:	f7ff fff3 	bl	b51f8 <_ZN5Print5printEc>
  return n;
}
   b5212:	4420      	add	r0, r4
   b5214:	bd38      	pop	{r3, r4, r5, pc}

000b5216 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5216:	b538      	push	{r3, r4, r5, lr}
   b5218:	4605      	mov	r5, r0
  return write(str);
   b521a:	f7ff ffd7 	bl	b51cc <_ZN5Print5writeEPKc>
   b521e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5220:	4628      	mov	r0, r5
   b5222:	f7ff ffec 	bl	b51fe <_ZN5Print7printlnEv>
  return n;
}
   b5226:	4420      	add	r0, r4
   b5228:	bd38      	pop	{r3, r4, r5, pc}

000b522a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b522a:	b530      	push	{r4, r5, lr}
   b522c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b522e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5230:	2a01      	cmp	r2, #1
  *str = '\0';
   b5232:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5236:	bf98      	it	ls
   b5238:	220a      	movls	r2, #10
   b523a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b523c:	460d      	mov	r5, r1
   b523e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5242:	fb01 5312 	mls	r3, r1, r2, r5
   b5246:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b524a:	2b09      	cmp	r3, #9
   b524c:	bf94      	ite	ls
   b524e:	3330      	addls	r3, #48	; 0x30
   b5250:	3337      	addhi	r3, #55	; 0x37
   b5252:	b2db      	uxtb	r3, r3
  } while(n);
   b5254:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5256:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b525a:	d9ef      	bls.n	b523c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b525c:	4621      	mov	r1, r4
   b525e:	f7ff ffb5 	bl	b51cc <_ZN5Print5writeEPKc>
}
   b5262:	b00b      	add	sp, #44	; 0x2c
   b5264:	bd30      	pop	{r4, r5, pc}

000b5266 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b526a:	b086      	sub	sp, #24
   b526c:	af00      	add	r7, sp, #0
   b526e:	4605      	mov	r5, r0
   b5270:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5272:	1d38      	adds	r0, r7, #4
   b5274:	2114      	movs	r1, #20
{
   b5276:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5278:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b527a:	f7ff feb7 	bl	b4fec <vsnprintf>

    if (n<bufsize)
   b527e:	2813      	cmp	r0, #19
   b5280:	d80e      	bhi.n	b52a0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5282:	1d39      	adds	r1, r7, #4
   b5284:	4628      	mov	r0, r5
   b5286:	f7ff ffa1 	bl	b51cc <_ZN5Print5writeEPKc>
   b528a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b528c:	b11e      	cbz	r6, b5296 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b528e:	4628      	mov	r0, r5
   b5290:	f7ff ffb5 	bl	b51fe <_ZN5Print7printlnEv>
   b5294:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5296:	4620      	mov	r0, r4
   b5298:	3718      	adds	r7, #24
   b529a:	46bd      	mov	sp, r7
   b529c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b52a0:	f100 0308 	add.w	r3, r0, #8
   b52a4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b52a8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b52aa:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b52ae:	4622      	mov	r2, r4
   b52b0:	1c41      	adds	r1, r0, #1
   b52b2:	683b      	ldr	r3, [r7, #0]
   b52b4:	4668      	mov	r0, sp
   b52b6:	f7ff fe99 	bl	b4fec <vsnprintf>
  return write(str);
   b52ba:	4669      	mov	r1, sp
   b52bc:	4628      	mov	r0, r5
   b52be:	f7ff ff85 	bl	b51cc <_ZN5Print5writeEPKc>
   b52c2:	4604      	mov	r4, r0
   b52c4:	46c5      	mov	sp, r8
   b52c6:	e7e1      	b.n	b528c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b52c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b52c8:	4b01      	ldr	r3, [pc, #4]	; (b52d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b52ca:	4a02      	ldr	r2, [pc, #8]	; (b52d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b52cc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b52ce:	4770      	bx	lr
   b52d0:	2003e6d4 	.word	0x2003e6d4
   b52d4:	000b7204 	.word	0x000b7204

000b52d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b52d8:	4b02      	ldr	r3, [pc, #8]	; (b52e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b52da:	681a      	ldr	r2, [r3, #0]
   b52dc:	4b02      	ldr	r3, [pc, #8]	; (b52e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b52de:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b52e0:	4770      	bx	lr
   b52e2:	bf00      	nop
   b52e4:	2003e4f0 	.word	0x2003e4f0
   b52e8:	2003e6d8 	.word	0x2003e6d8

000b52ec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b52ec:	2100      	movs	r1, #0
   b52ee:	f7ff bde1 	b.w	b4eb4 <system_delay_ms>
	...

000b52f4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b52f4:	b510      	push	{r4, lr}
   b52f6:	4b04      	ldr	r3, [pc, #16]	; (b5308 <_ZN9TCPClientD1Ev+0x14>)
   b52f8:	6003      	str	r3, [r0, #0]
   b52fa:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b52fc:	6980      	ldr	r0, [r0, #24]
   b52fe:	b108      	cbz	r0, b5304 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b5300:	f7ff ff32 	bl	b5168 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b5304:	4620      	mov	r0, r4
   b5306:	bd10      	pop	{r4, pc}
   b5308:	000b72fc 	.word	0x000b72fc

000b530c <_ZN9TCPClientD0Ev>:
   b530c:	b510      	push	{r4, lr}
   b530e:	4604      	mov	r4, r0
   b5310:	f7ff fff0 	bl	b52f4 <_ZN9TCPClientD1Ev>
   b5314:	4620      	mov	r0, r4
   b5316:	211c      	movs	r1, #28
   b5318:	f7fe febf 	bl	b409a <_ZdlPvj>
   b531c:	4620      	mov	r0, r4
   b531e:	bd10      	pop	{r4, pc}

000b5320 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5320:	4b01      	ldr	r3, [pc, #4]	; (b5328 <_GLOBAL__sub_I_RGB+0x8>)
   b5322:	2200      	movs	r2, #0
   b5324:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5326:	4770      	bx	lr
   b5328:	2003e6dc 	.word	0x2003e6dc

000b532c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b532c:	4b01      	ldr	r3, [pc, #4]	; (b5334 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b532e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5330:	4770      	bx	lr
   b5332:	bf00      	nop
   b5334:	2003e4f4 	.word	0x2003e4f4

000b5338 <serialEventRun>:
{
   b5338:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b533a:	4b0b      	ldr	r3, [pc, #44]	; (b5368 <serialEventRun+0x30>)
   b533c:	b143      	cbz	r3, b5350 <serialEventRun+0x18>
   b533e:	f000 f981 	bl	b5644 <_Z16_fetch_usbserialv>
   b5342:	6803      	ldr	r3, [r0, #0]
   b5344:	691b      	ldr	r3, [r3, #16]
   b5346:	4798      	blx	r3
   b5348:	2800      	cmp	r0, #0
   b534a:	dd01      	ble.n	b5350 <serialEventRun+0x18>
        serialEvent();
   b534c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5350:	4b06      	ldr	r3, [pc, #24]	; (b536c <serialEventRun+0x34>)
   b5352:	b143      	cbz	r3, b5366 <serialEventRun+0x2e>
   b5354:	f000 fec6 	bl	b60e4 <_Z22__fetch_global_Serial1v>
   b5358:	6803      	ldr	r3, [r0, #0]
   b535a:	691b      	ldr	r3, [r3, #16]
   b535c:	4798      	blx	r3
   b535e:	2800      	cmp	r0, #0
   b5360:	dd01      	ble.n	b5366 <serialEventRun+0x2e>
        serialEvent1();
   b5362:	f3af 8000 	nop.w
}
   b5366:	bd08      	pop	{r3, pc}
	...

000b5370 <_post_loop>:
{
   b5370:	b508      	push	{r3, lr}
	serialEventRun();
   b5372:	f7ff ffe1 	bl	b5338 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5376:	f7ff fc55 	bl	b4c24 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b537a:	4b01      	ldr	r3, [pc, #4]	; (b5380 <_post_loop+0x10>)
   b537c:	6018      	str	r0, [r3, #0]
}
   b537e:	bd08      	pop	{r3, pc}
   b5380:	2003e740 	.word	0x2003e740

000b5384 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5384:	4805      	ldr	r0, [pc, #20]	; (b539c <_Z33system_initialize_user_backup_ramv+0x18>)
   b5386:	4a06      	ldr	r2, [pc, #24]	; (b53a0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5388:	4906      	ldr	r1, [pc, #24]	; (b53a4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b538a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b538c:	1a12      	subs	r2, r2, r0
   b538e:	f001 fc59 	bl	b6c44 <memcpy>
    __backup_sram_signature = signature;
   b5392:	4b05      	ldr	r3, [pc, #20]	; (b53a8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5394:	4a05      	ldr	r2, [pc, #20]	; (b53ac <_Z33system_initialize_user_backup_ramv+0x28>)
   b5396:	601a      	str	r2, [r3, #0]
}
   b5398:	bd08      	pop	{r3, pc}
   b539a:	bf00      	nop
   b539c:	2003f400 	.word	0x2003f400
   b53a0:	2003f404 	.word	0x2003f404
   b53a4:	000b7594 	.word	0x000b7594
   b53a8:	2003f400 	.word	0x2003f400
   b53ac:	9a271c1e 	.word	0x9a271c1e

000b53b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b53b0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b53b2:	2300      	movs	r3, #0
   b53b4:	9300      	str	r3, [sp, #0]
   b53b6:	461a      	mov	r2, r3
   b53b8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b53bc:	f7ff fd8c 	bl	b4ed8 <system_ctrl_set_result>
}
   b53c0:	b003      	add	sp, #12
   b53c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b53c8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b53c8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b53ca:	8843      	ldrh	r3, [r0, #2]
   b53cc:	2b0a      	cmp	r3, #10
   b53ce:	d008      	beq.n	b53e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b53d0:	2b50      	cmp	r3, #80	; 0x50
   b53d2:	d10b      	bne.n	b53ec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b53d4:	4b09      	ldr	r3, [pc, #36]	; (b53fc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b53d6:	681b      	ldr	r3, [r3, #0]
   b53d8:	b14b      	cbz	r3, b53ee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b53da:	b003      	add	sp, #12
   b53dc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b53e0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b53e2:	f7ff ffe5 	bl	b53b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b53e6:	b003      	add	sp, #12
   b53e8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b53ec:	2300      	movs	r3, #0
   b53ee:	9300      	str	r3, [sp, #0]
   b53f0:	461a      	mov	r2, r3
   b53f2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b53f6:	f7ff fd6f 	bl	b4ed8 <system_ctrl_set_result>
}
   b53fa:	e7f4      	b.n	b53e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b53fc:	2003e6f0 	.word	0x2003e6f0

000b5400 <module_user_init_hook>:
{
   b5400:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5402:	4812      	ldr	r0, [pc, #72]	; (b544c <module_user_init_hook+0x4c>)
   b5404:	2100      	movs	r1, #0
   b5406:	f7ff fe09 	bl	b501c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b540a:	4b11      	ldr	r3, [pc, #68]	; (b5450 <module_user_init_hook+0x50>)
   b540c:	681a      	ldr	r2, [r3, #0]
   b540e:	4b11      	ldr	r3, [pc, #68]	; (b5454 <module_user_init_hook+0x54>)
   b5410:	429a      	cmp	r2, r3
   b5412:	4b11      	ldr	r3, [pc, #68]	; (b5458 <module_user_init_hook+0x58>)
   b5414:	bf0c      	ite	eq
   b5416:	2201      	moveq	r2, #1
   b5418:	2200      	movne	r2, #0
   b541a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b541c:	d001      	beq.n	b5422 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b541e:	f7ff ffb1 	bl	b5384 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5422:	f7ff fbef 	bl	b4c04 <HAL_RNG_GetRandomNumber>
   b5426:	4604      	mov	r4, r0
    srand(seed);
   b5428:	f001 fc3c 	bl	b6ca4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b542c:	4b0b      	ldr	r3, [pc, #44]	; (b545c <module_user_init_hook+0x5c>)
   b542e:	b113      	cbz	r3, b5436 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5430:	4620      	mov	r0, r4
   b5432:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5436:	2100      	movs	r1, #0
   b5438:	4808      	ldr	r0, [pc, #32]	; (b545c <module_user_init_hook+0x5c>)
   b543a:	f7ff fdbf 	bl	b4fbc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b543e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5442:	4807      	ldr	r0, [pc, #28]	; (b5460 <module_user_init_hook+0x60>)
   b5444:	2100      	movs	r1, #0
   b5446:	f7ff bd3d 	b.w	b4ec4 <system_ctrl_set_app_request_handler>
   b544a:	bf00      	nop
   b544c:	000b532d 	.word	0x000b532d
   b5450:	2003f400 	.word	0x2003f400
   b5454:	9a271c1e 	.word	0x9a271c1e
   b5458:	2003e6ec 	.word	0x2003e6ec
   b545c:	00000000 	.word	0x00000000
   b5460:	000b53c9 	.word	0x000b53c9

000b5464 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5464:	4770      	bx	lr

000b5466 <_ZN9IPAddressD0Ev>:
   b5466:	b510      	push	{r4, lr}
   b5468:	2118      	movs	r1, #24
   b546a:	4604      	mov	r4, r0
   b546c:	f7fe fe15 	bl	b409a <_ZdlPvj>
   b5470:	4620      	mov	r0, r4
   b5472:	bd10      	pop	{r4, pc}

000b5474 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5474:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5476:	7d03      	ldrb	r3, [r0, #20]
   b5478:	2b06      	cmp	r3, #6
{
   b547a:	b08d      	sub	sp, #52	; 0x34
   b547c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b547e:	f100 0704 	add.w	r7, r0, #4
   b5482:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5486:	d012      	beq.n	b54ae <_ZNK9IPAddress7printToER5Print+0x3a>
   b5488:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b548c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5490:	220a      	movs	r2, #10
   b5492:	4630      	mov	r0, r6
   b5494:	f7ff fec9 	bl	b522a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5498:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b549a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b549c:	d019      	beq.n	b54d2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b549e:	2c00      	cmp	r4, #0
   b54a0:	d0f4      	beq.n	b548c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b54a2:	212e      	movs	r1, #46	; 0x2e
   b54a4:	4630      	mov	r0, r6
   b54a6:	f7ff fea7 	bl	b51f8 <_ZN5Print5printEc>
   b54aa:	4404      	add	r4, r0
   b54ac:	e7ee      	b.n	b548c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b54ae:	232f      	movs	r3, #47	; 0x2f
   b54b0:	466a      	mov	r2, sp
   b54b2:	4639      	mov	r1, r7
   b54b4:	200a      	movs	r0, #10
		buf[0] = 0;
   b54b6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b54ba:	f7ff fbd3 	bl	b4c64 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b54be:	4668      	mov	r0, sp
   b54c0:	f001 fc30 	bl	b6d24 <strlen>
   b54c4:	6833      	ldr	r3, [r6, #0]
   b54c6:	4602      	mov	r2, r0
   b54c8:	68db      	ldr	r3, [r3, #12]
   b54ca:	4669      	mov	r1, sp
   b54cc:	4630      	mov	r0, r6
   b54ce:	4798      	blx	r3
   b54d0:	4604      	mov	r4, r0
    }
    return n;
}
   b54d2:	4620      	mov	r0, r4
   b54d4:	b00d      	add	sp, #52	; 0x34
   b54d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b54d8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b54d8:	b510      	push	{r4, lr}
   b54da:	4b05      	ldr	r3, [pc, #20]	; (b54f0 <_ZN9IPAddressC1Ev+0x18>)
   b54dc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b54de:	2211      	movs	r2, #17
   b54e0:	f840 3b04 	str.w	r3, [r0], #4
   b54e4:	2100      	movs	r1, #0
   b54e6:	f001 fbd5 	bl	b6c94 <memset>
}
   b54ea:	4620      	mov	r0, r4
   b54ec:	bd10      	pop	{r4, pc}
   b54ee:	bf00      	nop
   b54f0:	000b722c 	.word	0x000b722c

000b54f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b54f4:	4603      	mov	r3, r0
   b54f6:	4a07      	ldr	r2, [pc, #28]	; (b5514 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b54f8:	b510      	push	{r4, lr}
   b54fa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b54fe:	f101 0210 	add.w	r2, r1, #16
   b5502:	f851 4b04 	ldr.w	r4, [r1], #4
   b5506:	f843 4b04 	str.w	r4, [r3], #4
   b550a:	4291      	cmp	r1, r2
   b550c:	d1f9      	bne.n	b5502 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b550e:	780a      	ldrb	r2, [r1, #0]
   b5510:	701a      	strb	r2, [r3, #0]
}
   b5512:	bd10      	pop	{r4, pc}
   b5514:	000b722c 	.word	0x000b722c

000b5518 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b5518:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b551a:	2b04      	cmp	r3, #4
   b551c:	d104      	bne.n	b5528 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b551e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5520:	3800      	subs	r0, #0
   b5522:	bf18      	it	ne
   b5524:	2001      	movne	r0, #1
   b5526:	4770      	bx	lr
    } else if (version() == 6) {
   b5528:	2b06      	cmp	r3, #6
   b552a:	d107      	bne.n	b553c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b552c:	6843      	ldr	r3, [r0, #4]
   b552e:	b93b      	cbnz	r3, b5540 <_ZNK9IPAddresscvbEv+0x28>
   b5530:	6883      	ldr	r3, [r0, #8]
   b5532:	b92b      	cbnz	r3, b5540 <_ZNK9IPAddresscvbEv+0x28>
   b5534:	68c3      	ldr	r3, [r0, #12]
   b5536:	b91b      	cbnz	r3, b5540 <_ZNK9IPAddresscvbEv+0x28>
   b5538:	6900      	ldr	r0, [r0, #16]
   b553a:	e7f1      	b.n	b5520 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b553c:	2000      	movs	r0, #0
   b553e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5540:	2001      	movs	r0, #1
}
   b5542:	4770      	bx	lr

000b5544 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5544:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5546:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b554a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b554e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5552:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5556:	2304      	movs	r3, #4
   b5558:	6041      	str	r1, [r0, #4]
   b555a:	7503      	strb	r3, [r0, #20]
}
   b555c:	bd10      	pop	{r4, pc}
	...

000b5560 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5560:	b507      	push	{r0, r1, r2, lr}
   b5562:	4b06      	ldr	r3, [pc, #24]	; (b557c <_ZN9IPAddressC1EPKh+0x1c>)
   b5564:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5566:	78cb      	ldrb	r3, [r1, #3]
   b5568:	9300      	str	r3, [sp, #0]
   b556a:	788b      	ldrb	r3, [r1, #2]
   b556c:	784a      	ldrb	r2, [r1, #1]
   b556e:	7809      	ldrb	r1, [r1, #0]
   b5570:	f7ff ffe8 	bl	b5544 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5574:	b003      	add	sp, #12
   b5576:	f85d fb04 	ldr.w	pc, [sp], #4
   b557a:	bf00      	nop
   b557c:	000b722c 	.word	0x000b722c

000b5580 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5580:	7441      	strb	r1, [r0, #17]
}
   b5582:	4770      	bx	lr

000b5584 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5584:	4770      	bx	lr

000b5586 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5586:	4770      	bx	lr

000b5588 <_ZN9USBSerial4readEv>:
{
   b5588:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b558a:	2100      	movs	r1, #0
   b558c:	7c00      	ldrb	r0, [r0, #16]
   b558e:	f7ff fc59 	bl	b4e44 <HAL_USB_USART_Receive_Data>
}
   b5592:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5596:	bd08      	pop	{r3, pc}

000b5598 <_ZN9USBSerial4peekEv>:
{
   b5598:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b559a:	2101      	movs	r1, #1
   b559c:	7c00      	ldrb	r0, [r0, #16]
   b559e:	f7ff fc51 	bl	b4e44 <HAL_USB_USART_Receive_Data>
}
   b55a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b55a6:	bd08      	pop	{r3, pc}

000b55a8 <_ZN9USBSerial17availableForWriteEv>:
{
   b55a8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b55aa:	7c00      	ldrb	r0, [r0, #16]
   b55ac:	f7ff fc42 	bl	b4e34 <HAL_USB_USART_Available_Data_For_Write>
}
   b55b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b55b4:	bd08      	pop	{r3, pc}

000b55b6 <_ZN9USBSerial9availableEv>:
{
   b55b6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b55b8:	7c00      	ldrb	r0, [r0, #16]
   b55ba:	f7ff fc33 	bl	b4e24 <HAL_USB_USART_Available_Data>
}
   b55be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b55c2:	bd08      	pop	{r3, pc}

000b55c4 <_ZN9USBSerial5writeEh>:
{
   b55c4:	b513      	push	{r0, r1, r4, lr}
   b55c6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b55c8:	7c00      	ldrb	r0, [r0, #16]
{
   b55ca:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b55cc:	f7ff fc32 	bl	b4e34 <HAL_USB_USART_Available_Data_For_Write>
   b55d0:	2800      	cmp	r0, #0
   b55d2:	9901      	ldr	r1, [sp, #4]
   b55d4:	dc01      	bgt.n	b55da <_ZN9USBSerial5writeEh+0x16>
   b55d6:	7c60      	ldrb	r0, [r4, #17]
   b55d8:	b120      	cbz	r0, b55e4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b55da:	7c20      	ldrb	r0, [r4, #16]
   b55dc:	f7ff fc3a 	bl	b4e54 <HAL_USB_USART_Send_Data>
   b55e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b55e4:	b002      	add	sp, #8
   b55e6:	bd10      	pop	{r4, pc}

000b55e8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b55e8:	7c00      	ldrb	r0, [r0, #16]
   b55ea:	f7ff bc3b 	b.w	b4e64 <HAL_USB_USART_Flush_Data>

000b55ee <_ZN9USBSerialD0Ev>:
   b55ee:	b510      	push	{r4, lr}
   b55f0:	2114      	movs	r1, #20
   b55f2:	4604      	mov	r4, r0
   b55f4:	f7fe fd51 	bl	b409a <_ZdlPvj>
   b55f8:	4620      	mov	r0, r4
   b55fa:	bd10      	pop	{r4, pc}

000b55fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b55fc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b55fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5602:	4604      	mov	r4, r0
   b5604:	4608      	mov	r0, r1
   b5606:	2100      	movs	r1, #0
   b5608:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b560c:	4b04      	ldr	r3, [pc, #16]	; (b5620 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b560e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5610:	2301      	movs	r3, #1
  _serial = serial;
   b5612:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5614:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5616:	4611      	mov	r1, r2
   b5618:	f7ff fbf4 	bl	b4e04 <HAL_USB_USART_Init>
}
   b561c:	4620      	mov	r0, r4
   b561e:	bd10      	pop	{r4, pc}
   b5620:	000b7240 	.word	0x000b7240

000b5624 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5624:	7c00      	ldrb	r0, [r0, #16]
   b5626:	2200      	movs	r2, #0
   b5628:	f7ff bbf4 	b.w	b4e14 <HAL_USB_USART_Begin>

000b562c <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b562c:	7c00      	ldrb	r0, [r0, #16]
   b562e:	f7ff bc21 	b.w	b4e74 <HAL_USB_USART_Is_Connected>

000b5632 <_Z19acquireSerialBufferv>:
{
   b5632:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5634:	2214      	movs	r2, #20
{
   b5636:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5638:	2100      	movs	r1, #0
   b563a:	f001 fb2b 	bl	b6c94 <memset>
}
   b563e:	4620      	mov	r0, r4
   b5640:	bd10      	pop	{r4, pc}
	...

000b5644 <_Z16_fetch_usbserialv>:
{
   b5644:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5646:	4c0f      	ldr	r4, [pc, #60]	; (b5684 <_Z16_fetch_usbserialv+0x40>)
{
   b5648:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b564a:	a803      	add	r0, sp, #12
   b564c:	f7ff fff1 	bl	b5632 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5650:	7821      	ldrb	r1, [r4, #0]
   b5652:	f3bf 8f5b 	dmb	ish
   b5656:	f011 0101 	ands.w	r1, r1, #1
   b565a:	d10f      	bne.n	b567c <_Z16_fetch_usbserialv+0x38>
   b565c:	4620      	mov	r0, r4
   b565e:	9101      	str	r1, [sp, #4]
   b5660:	f7fe fd2a 	bl	b40b8 <__cxa_guard_acquire>
   b5664:	9901      	ldr	r1, [sp, #4]
   b5666:	b148      	cbz	r0, b567c <_Z16_fetch_usbserialv+0x38>
   b5668:	aa03      	add	r2, sp, #12
   b566a:	4807      	ldr	r0, [pc, #28]	; (b5688 <_Z16_fetch_usbserialv+0x44>)
   b566c:	f7ff ffc6 	bl	b55fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5670:	4620      	mov	r0, r4
   b5672:	f7fe fd26 	bl	b40c2 <__cxa_guard_release>
   b5676:	4805      	ldr	r0, [pc, #20]	; (b568c <_Z16_fetch_usbserialv+0x48>)
   b5678:	f001 faca 	bl	b6c10 <atexit>
	return _usbserial;
}
   b567c:	4802      	ldr	r0, [pc, #8]	; (b5688 <_Z16_fetch_usbserialv+0x44>)
   b567e:	b008      	add	sp, #32
   b5680:	bd10      	pop	{r4, pc}
   b5682:	bf00      	nop
   b5684:	2003e6f4 	.word	0x2003e6f4
   b5688:	2003e6f8 	.word	0x2003e6f8
   b568c:	000b5585 	.word	0x000b5585

000b5690 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5690:	4770      	bx	lr

000b5692 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5692:	7441      	strb	r1, [r0, #17]
}
   b5694:	4770      	bx	lr

000b5696 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5696:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5698:	7c00      	ldrb	r0, [r0, #16]
   b569a:	f7ff fb2b 	bl	b4cf4 <hal_usart_available_data_for_write>
}
   b569e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b56a2:	bd08      	pop	{r3, pc}

000b56a4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b56a4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b56a6:	7c00      	ldrb	r0, [r0, #16]
   b56a8:	f7ff fafc 	bl	b4ca4 <hal_usart_available>
}
   b56ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b56b0:	bd08      	pop	{r3, pc}

000b56b2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b56b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b56b4:	7c00      	ldrb	r0, [r0, #16]
   b56b6:	f7ff fb05 	bl	b4cc4 <hal_usart_peek>
}
   b56ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b56be:	bd08      	pop	{r3, pc}

000b56c0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b56c0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b56c2:	7c00      	ldrb	r0, [r0, #16]
   b56c4:	f7ff faf6 	bl	b4cb4 <hal_usart_read>
}
   b56c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b56cc:	bd08      	pop	{r3, pc}

000b56ce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b56ce:	7c00      	ldrb	r0, [r0, #16]
   b56d0:	f7ff bb00 	b.w	b4cd4 <hal_usart_flush>

000b56d4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b56d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b56d6:	7c45      	ldrb	r5, [r0, #17]
{
   b56d8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b56da:	b12d      	cbz	r5, b56e8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b56dc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b56de:	b003      	add	sp, #12
   b56e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b56e4:	f7ff bad6 	b.w	b4c94 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b56e8:	7c00      	ldrb	r0, [r0, #16]
   b56ea:	9101      	str	r1, [sp, #4]
   b56ec:	f7ff fb02 	bl	b4cf4 <hal_usart_available_data_for_write>
   b56f0:	2800      	cmp	r0, #0
   b56f2:	9901      	ldr	r1, [sp, #4]
   b56f4:	dcf2      	bgt.n	b56dc <_ZN11USARTSerial5writeEh+0x8>
}
   b56f6:	4628      	mov	r0, r5
   b56f8:	b003      	add	sp, #12
   b56fa:	bd30      	pop	{r4, r5, pc}

000b56fc <_ZN11USARTSerialD0Ev>:
   b56fc:	b510      	push	{r4, lr}
   b56fe:	2114      	movs	r1, #20
   b5700:	4604      	mov	r4, r0
   b5702:	f7fe fcca 	bl	b409a <_ZdlPvj>
   b5706:	4620      	mov	r0, r4
   b5708:	bd10      	pop	{r4, pc}
	...

000b570c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b570c:	b510      	push	{r4, lr}
   b570e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5712:	4604      	mov	r4, r0
   b5714:	4608      	mov	r0, r1
   b5716:	4611      	mov	r1, r2
   b5718:	2200      	movs	r2, #0
   b571a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b571e:	4b04      	ldr	r3, [pc, #16]	; (b5730 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5720:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5722:	2301      	movs	r3, #1
  _serial = serial;
   b5724:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5726:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5728:	f7ff faec 	bl	b4d04 <hal_usart_init_ex>
}
   b572c:	4620      	mov	r0, r4
   b572e:	bd10      	pop	{r4, pc}
   b5730:	000b7270 	.word	0x000b7270

000b5734 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5734:	4770      	bx	lr

000b5736 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5738:	4606      	mov	r6, r0
   b573a:	4615      	mov	r5, r2
   b573c:	460c      	mov	r4, r1
   b573e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5740:	42bc      	cmp	r4, r7
   b5742:	d006      	beq.n	b5752 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5744:	6833      	ldr	r3, [r6, #0]
   b5746:	f814 1b01 	ldrb.w	r1, [r4], #1
   b574a:	689b      	ldr	r3, [r3, #8]
   b574c:	4630      	mov	r0, r6
   b574e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5750:	e7f6      	b.n	b5740 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5752:	4628      	mov	r0, r5
   b5754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5756 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5756:	7c00      	ldrb	r0, [r0, #16]
   b5758:	2200      	movs	r2, #0
   b575a:	f7ff badb 	b.w	b4d14 <hal_i2c_write>

000b575e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b575e:	7c00      	ldrb	r0, [r0, #16]
   b5760:	2100      	movs	r1, #0
   b5762:	f7ff badf 	b.w	b4d24 <hal_i2c_available>

000b5766 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5766:	7c00      	ldrb	r0, [r0, #16]
   b5768:	2100      	movs	r1, #0
   b576a:	f7ff bae3 	b.w	b4d34 <hal_i2c_read>

000b576e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b576e:	7c00      	ldrb	r0, [r0, #16]
   b5770:	2100      	movs	r1, #0
   b5772:	f7ff bae7 	b.w	b4d44 <hal_i2c_peek>

000b5776 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5776:	7c00      	ldrb	r0, [r0, #16]
   b5778:	2100      	movs	r1, #0
   b577a:	f7ff baeb 	b.w	b4d54 <hal_i2c_flush>

000b577e <_ZN7TwoWireD0Ev>:
   b577e:	b510      	push	{r4, lr}
   b5780:	2114      	movs	r1, #20
   b5782:	4604      	mov	r4, r0
   b5784:	f7fe fc89 	bl	b409a <_ZdlPvj>
   b5788:	4620      	mov	r0, r4
   b578a:	bd10      	pop	{r4, pc}

000b578c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b578c:	b538      	push	{r3, r4, r5, lr}
   b578e:	4604      	mov	r4, r0
   b5790:	4615      	mov	r5, r2
   b5792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5796:	2200      	movs	r2, #0
   b5798:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b579c:	4b09      	ldr	r3, [pc, #36]	; (b57c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b579e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b57a0:	4608      	mov	r0, r1
   b57a2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b57a4:	4629      	mov	r1, r5
   b57a6:	f7ff fae5 	bl	b4d74 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b57aa:	30bf      	adds	r0, #191	; 0xbf
   b57ac:	d108      	bne.n	b57c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b57ae:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b57b0:	07db      	lsls	r3, r3, #31
   b57b2:	d505      	bpl.n	b57c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b57b4:	6868      	ldr	r0, [r5, #4]
   b57b6:	f7ff fc11 	bl	b4fdc <free>
    free(conf.tx_buffer);
   b57ba:	68e8      	ldr	r0, [r5, #12]
   b57bc:	f7ff fc0e 	bl	b4fdc <free>
}
   b57c0:	4620      	mov	r0, r4
   b57c2:	bd38      	pop	{r3, r4, r5, pc}
   b57c4:	000b72a0 	.word	0x000b72a0

000b57c8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b57c8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b57ca:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b57cc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b57d0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b57d2:	2201      	movs	r2, #1
   b57d4:	f04f 33ff 	mov.w	r3, #4294967295
   b57d8:	f10d 0107 	add.w	r1, sp, #7
   b57dc:	47a0      	blx	r4
}
   b57de:	b002      	add	sp, #8
   b57e0:	bd10      	pop	{r4, pc}

000b57e2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b57e2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b57e4:	6803      	ldr	r3, [r0, #0]
   b57e6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b57e8:	f04f 33ff 	mov.w	r3, #4294967295
   b57ec:	46a4      	mov	ip, r4
}
   b57ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b57f2:	4760      	bx	ip

000b57f4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b57f4:	b513      	push	{r0, r1, r4, lr}
   b57f6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b57f8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b57fa:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b57fe:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5800:	f10d 0107 	add.w	r1, sp, #7
   b5804:	2201      	movs	r2, #1
   b5806:	47a0      	blx	r4
}
   b5808:	b002      	add	sp, #8
   b580a:	bd10      	pop	{r4, pc}

000b580c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b580c:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b580e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5810:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5814:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5818:	429a      	cmp	r2, r3
int TCPClient::read() {
   b581a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b581c:	d008      	beq.n	b5830 <_ZN9TCPClient4readEv+0x24>
   b581e:	6963      	ldr	r3, [r4, #20]
   b5820:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5824:	1c51      	adds	r1, r2, #1
   b5826:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b582a:	4413      	add	r3, r2
   b582c:	7918      	ldrb	r0, [r3, #4]
}
   b582e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5830:	6803      	ldr	r3, [r0, #0]
   b5832:	691b      	ldr	r3, [r3, #16]
   b5834:	4798      	blx	r3
   b5836:	2800      	cmp	r0, #0
   b5838:	d1f1      	bne.n	b581e <_ZN9TCPClient4readEv+0x12>
   b583a:	f04f 30ff 	mov.w	r0, #4294967295
   b583e:	e7f6      	b.n	b582e <_ZN9TCPClient4readEv+0x22>

000b5840 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b5840:	4770      	bx	lr

000b5842 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b5842:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b5844:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b5846:	43c0      	mvns	r0, r0
   b5848:	0fc0      	lsrs	r0, r0, #31
   b584a:	4770      	bx	lr

000b584c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b584c:	4770      	bx	lr
	...

000b5850 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5850:	4b06      	ldr	r3, [pc, #24]	; (b586c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5852:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5854:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5856:	f100 040c 	add.w	r4, r0, #12
	    ||
   b585a:	d005      	beq.n	b5868 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b585c:	4608      	mov	r0, r1
   b585e:	f000 fca7 	bl	b61b0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5862:	2800      	cmp	r0, #0
   b5864:	bf08      	it	eq
   b5866:	2400      	moveq	r4, #0
      }
   b5868:	4620      	mov	r0, r4
   b586a:	bd10      	pop	{r4, pc}
   b586c:	000b71fc 	.word	0x000b71fc

000b5870 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5870:	b510      	push	{r4, lr}
   b5872:	21ac      	movs	r1, #172	; 0xac
   b5874:	4604      	mov	r4, r0
   b5876:	f7fe fc10 	bl	b409a <_ZdlPvj>
   b587a:	4620      	mov	r0, r4
   b587c:	bd10      	pop	{r4, pc}

000b587e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b587e:	21ac      	movs	r1, #172	; 0xac
   b5880:	f7fe bc0b 	b.w	b409a <_ZdlPvj>

000b5884 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b5888:	f04f 0800 	mov.w	r8, #0
   b588c:	b086      	sub	sp, #24
   b588e:	461c      	mov	r4, r3
   b5890:	f8c0 8004 	str.w	r8, [r0, #4]
   b5894:	4605      	mov	r5, r0
   b5896:	460e      	mov	r6, r1
   b5898:	4617      	mov	r7, r2
    struct timeval tv = {};
   b589a:	4641      	mov	r1, r8
   b589c:	2210      	movs	r2, #16
   b589e:	a802      	add	r0, sp, #8
   b58a0:	f001 f9f8 	bl	b6c94 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b58a4:	1c63      	adds	r3, r4, #1
   b58a6:	d009      	beq.n	b58bc <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b58a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b58ac:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b58b0:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b58b4:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b58b8:	435c      	muls	r4, r3
   b58ba:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b58bc:	6968      	ldr	r0, [r5, #20]
   b58be:	2310      	movs	r3, #16
   b58c0:	9300      	str	r3, [sp, #0]
   b58c2:	6800      	ldr	r0, [r0, #0]
   b58c4:	ab02      	add	r3, sp, #8
   b58c6:	f241 0205 	movw	r2, #4101	; 0x1005
   b58ca:	f640 71ff 	movw	r1, #4095	; 0xfff
   b58ce:	f7ff fa59 	bl	b4d84 <sock_setsockopt>
    if (ret < 0) {
   b58d2:	2800      	cmp	r0, #0
   b58d4:	da07      	bge.n	b58e6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b58d6:	f7ff fb91 	bl	b4ffc <__errno>
   b58da:	6803      	ldr	r3, [r0, #0]
   b58dc:	606b      	str	r3, [r5, #4]
        return 0;
   b58de:	2000      	movs	r0, #0
}
   b58e0:	b006      	add	sp, #24
   b58e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b58e6:	6968      	ldr	r0, [r5, #20]
   b58e8:	2300      	movs	r3, #0
   b58ea:	6800      	ldr	r0, [r0, #0]
   b58ec:	463a      	mov	r2, r7
   b58ee:	4631      	mov	r1, r6
   b58f0:	f7ff fa68 	bl	b4dc4 <sock_send>
    if (ret < 0) {
   b58f4:	1e03      	subs	r3, r0, #0
   b58f6:	dbee      	blt.n	b58d6 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b58f8:	4618      	mov	r0, r3
   b58fa:	e7f1      	b.n	b58e0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b58fc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b58fc:	b530      	push	{r4, r5, lr}
   b58fe:	b087      	sub	sp, #28
   b5900:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5902:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5904:	4668      	mov	r0, sp
   b5906:	f7ff fe2b 	bl	b5560 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b590a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b590c:	3404      	adds	r4, #4
   b590e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5910:	682b      	ldr	r3, [r5, #0]
   b5912:	7023      	strb	r3, [r4, #0]
    }
   b5914:	b007      	add	sp, #28
   b5916:	bd30      	pop	{r4, r5, pc}

000b5918 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b5918:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b591a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b591c:	4b05      	ldr	r3, [pc, #20]	; (b5934 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b591e:	4604      	mov	r4, r0
   b5920:	358c      	adds	r5, #140	; 0x8c
   b5922:	f844 3b04 	str.w	r3, [r4], #4
   b5926:	4606      	mov	r6, r0
   b5928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b592a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b592c:	682b      	ldr	r3, [r5, #0]
   b592e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5930:	4630      	mov	r0, r6
   b5932:	bd70      	pop	{r4, r5, r6, pc}
   b5934:	000b722c 	.word	0x000b722c

000b5938 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b593c:	4698      	mov	r8, r3
    stop();
   b593e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5940:	b093      	sub	sp, #76	; 0x4c
   b5942:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b5944:	2400      	movs	r4, #0
    stop();
   b5946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5948:	4606      	mov	r6, r0
   b594a:	4617      	mov	r7, r2
    stop();
   b594c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b594e:	4628      	mov	r0, r5
   b5950:	466b      	mov	r3, sp
   b5952:	4622      	mov	r2, r4
   b5954:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b5956:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5958:	f7ff f914 	bl	b4b84 <netdb_getaddrinfo>
   b595c:	4605      	mov	r5, r0
   b595e:	2800      	cmp	r0, #0
   b5960:	d163      	bne.n	b5a2a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b5962:	9b00      	ldr	r3, [sp, #0]
   b5964:	2b00      	cmp	r3, #0
   b5966:	d04b      	beq.n	b5a00 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5968:	695b      	ldr	r3, [r3, #20]
   b596a:	2b00      	cmp	r3, #0
   b596c:	d048      	beq.n	b5a00 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b596e:	a806      	add	r0, sp, #24
   b5970:	f7ff fdb2 	bl	b54d8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b5974:	9b00      	ldr	r3, [sp, #0]
   b5976:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b5978:	7863      	ldrb	r3, [r4, #1]
   b597a:	2b02      	cmp	r3, #2
   b597c:	d104      	bne.n	b5988 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b597e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b5980:	a806      	add	r0, sp, #24
   b5982:	f7ff ffbb 	bl	b58fc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b5986:	e026      	b.n	b59d6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b5988:	2b0a      	cmp	r3, #10
   b598a:	d124      	bne.n	b59d6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b598c:	2211      	movs	r2, #17
   b598e:	4629      	mov	r1, r5
   b5990:	a801      	add	r0, sp, #4
   b5992:	f001 f97f 	bl	b6c94 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5996:	68a3      	ldr	r3, [r4, #8]
   b5998:	2b00      	cmp	r3, #0
   b599a:	d038      	beq.n	b5a0e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b599c:	f104 0308 	add.w	r3, r4, #8
   b59a0:	f10d 0c04 	add.w	ip, sp, #4
   b59a4:	3418      	adds	r4, #24
   b59a6:	6818      	ldr	r0, [r3, #0]
   b59a8:	6859      	ldr	r1, [r3, #4]
   b59aa:	4662      	mov	r2, ip
   b59ac:	c203      	stmia	r2!, {r0, r1}
   b59ae:	3308      	adds	r3, #8
   b59b0:	42a3      	cmp	r3, r4
   b59b2:	4694      	mov	ip, r2
   b59b4:	d1f7      	bne.n	b59a6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b59b6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b59b8:	a901      	add	r1, sp, #4
   b59ba:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b59bc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b59c0:	f7ff fd98 	bl	b54f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b59c4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b59c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b59cc:	ac07      	add	r4, sp, #28
   b59ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b59d0:	f8dc 3000 	ldr.w	r3, [ip]
   b59d4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b59d6:	a806      	add	r0, sp, #24
   b59d8:	f7ff fd9e 	bl	b5518 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b59dc:	b180      	cbz	r0, b5a00 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b59de:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b59e0:	ad07      	add	r5, sp, #28
   b59e2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b59e6:	4b12      	ldr	r3, [pc, #72]	; (b5a30 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b59e8:	930c      	str	r3, [sp, #48]	; 0x30
   b59ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b59ec:	ac0d      	add	r4, sp, #52	; 0x34
   b59ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b59f0:	682b      	ldr	r3, [r5, #0]
   b59f2:	7023      	strb	r3, [r4, #0]
   b59f4:	463a      	mov	r2, r7
   b59f6:	4643      	mov	r3, r8
   b59f8:	a90c      	add	r1, sp, #48	; 0x30
   b59fa:	4630      	mov	r0, r6
   b59fc:	47c8      	blx	r9
   b59fe:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b5a00:	9800      	ldr	r0, [sp, #0]
   b5a02:	f7ff f8b7 	bl	b4b74 <netdb_freeaddrinfo>
}
   b5a06:	4628      	mov	r0, r5
   b5a08:	b013      	add	sp, #76	; 0x4c
   b5a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5a0e:	68e3      	ldr	r3, [r4, #12]
   b5a10:	2b00      	cmp	r3, #0
   b5a12:	d1c3      	bne.n	b599c <_ZN9TCPClient7connectEPKctm+0x64>
   b5a14:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5a18:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b5a1c:	f7ff f92a 	bl	b4c74 <inet_htonl>
   b5a20:	4581      	cmp	r9, r0
   b5a22:	d1bb      	bne.n	b599c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b5a24:	f104 0114 	add.w	r1, r4, #20
   b5a28:	e7aa      	b.n	b5980 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5a2a:	4625      	mov	r5, r4
   b5a2c:	e7e8      	b.n	b5a00 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5a2e:	bf00      	nop
   b5a30:	000b722c 	.word	0x000b722c

000b5a34 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b5a34:	b538      	push	{r3, r4, r5, lr}
   b5a36:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b5a38:	681a      	ldr	r2, [r3, #0]
   b5a3a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b5a3c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b5a3e:	da10      	bge.n	b5a62 <_ZN9TCPClient9connectedEv+0x2e>
   b5a40:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5a44:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5a48:	429a      	cmp	r2, r3
   b5a4a:	d10a      	bne.n	b5a62 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b5a4c:	6803      	ldr	r3, [r0, #0]
   b5a4e:	691b      	ldr	r3, [r3, #16]
   b5a50:	4798      	blx	r3
        if (!rv) {
   b5a52:	4604      	mov	r4, r0
   b5a54:	b928      	cbnz	r0, b5a62 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b5a56:	682b      	ldr	r3, [r5, #0]
   b5a58:	4628      	mov	r0, r5
   b5a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5a5c:	4798      	blx	r3
        rv = available();
   b5a5e:	4620      	mov	r0, r4
}
   b5a60:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b5a62:	2001      	movs	r0, #1
   b5a64:	e7fc      	b.n	b5a60 <_ZN9TCPClient9connectedEv+0x2c>

000b5a66 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b5a66:	b510      	push	{r4, lr}
   b5a68:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5a6a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5a6e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5a72:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b5a74:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5a76:	d005      	beq.n	b5a84 <_ZN9TCPClient4peekEv+0x1e>
   b5a78:	6963      	ldr	r3, [r4, #20]
   b5a7a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5a7e:	4413      	add	r3, r2
   b5a80:	7918      	ldrb	r0, [r3, #4]
}
   b5a82:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5a84:	6803      	ldr	r3, [r0, #0]
   b5a86:	691b      	ldr	r3, [r3, #16]
   b5a88:	4798      	blx	r3
   b5a8a:	2800      	cmp	r0, #0
   b5a8c:	d1f4      	bne.n	b5a78 <_ZN9TCPClient4peekEv+0x12>
   b5a8e:	f04f 30ff 	mov.w	r0, #4294967295
   b5a92:	e7f6      	b.n	b5a82 <_ZN9TCPClient4peekEv+0x1c>

000b5a94 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5a96:	6943      	ldr	r3, [r0, #20]
   b5a98:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b5a9a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5a9e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5aa2:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5aa4:	4605      	mov	r5, r0
   b5aa6:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5aa8:	d016      	beq.n	b5ad8 <_ZN9TCPClient4readEPhj+0x44>
   b5aaa:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b5aac:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b5ab0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5ab4:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5ab6:	42bc      	cmp	r4, r7
   b5ab8:	bf28      	it	cs
   b5aba:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5abc:	3304      	adds	r3, #4
   b5abe:	4622      	mov	r2, r4
   b5ac0:	4419      	add	r1, r3
   b5ac2:	4630      	mov	r0, r6
   b5ac4:	f001 f8be 	bl	b6c44 <memcpy>
   b5ac8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b5aca:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b5ace:	4423      	add	r3, r4
   b5ad0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5ad4:	4620      	mov	r0, r4
   b5ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5ad8:	6803      	ldr	r3, [r0, #0]
   b5ada:	691b      	ldr	r3, [r3, #16]
   b5adc:	4798      	blx	r3
   b5ade:	2800      	cmp	r0, #0
   b5ae0:	d1e3      	bne.n	b5aaa <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b5ae2:	f04f 34ff 	mov.w	r4, #4294967295
   b5ae6:	e7f5      	b.n	b5ad4 <_ZN9TCPClient4readEPhj+0x40>

000b5ae8 <_ZN9TCPClient12flush_bufferEv>:
   b5ae8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b5aea:	2300      	movs	r3, #0
   b5aec:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b5af0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b5af2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b5af6:	4770      	bx	lr

000b5af8 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5afc:	461f      	mov	r7, r3
    stop();
   b5afe:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5b00:	460c      	mov	r4, r1
    stop();
   b5b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5b04:	b08a      	sub	sp, #40	; 0x28
   b5b06:	4605      	mov	r5, r0
   b5b08:	4616      	mov	r6, r2
    stop();
   b5b0a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b5b0c:	7d23      	ldrb	r3, [r4, #20]
   b5b0e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b5b12:	2b04      	cmp	r3, #4
   b5b14:	bf0c      	ite	eq
   b5b16:	2002      	moveq	r0, #2
   b5b18:	200a      	movne	r0, #10
   b5b1a:	2206      	movs	r2, #6
   b5b1c:	2101      	movs	r1, #1
   b5b1e:	f7ff f959 	bl	b4dd4 <sock_socket>
   b5b22:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b5b26:	696b      	ldr	r3, [r5, #20]
   b5b28:	681b      	ldr	r3, [r3, #0]
   b5b2a:	2b00      	cmp	r3, #0
   b5b2c:	da08      	bge.n	b5b40 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b5b2e:	682b      	ldr	r3, [r5, #0]
   b5b30:	4628      	mov	r0, r5
   b5b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5b34:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b5b36:	4798      	blx	r3
}
   b5b38:	4620      	mov	r0, r4
   b5b3a:	b00a      	add	sp, #40	; 0x28
   b5b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5b40:	4628      	mov	r0, r5
   b5b42:	f7ff ffd1 	bl	b5ae8 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b5b46:	b1b7      	cbz	r7, b5b76 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5b48:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5b4a:	a903      	add	r1, sp, #12
   b5b4c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b5b4e:	9303      	str	r3, [sp, #12]
   b5b50:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5b54:	f7ff f84e 	bl	b4bf4 <if_index_to_name>
   b5b58:	2800      	cmp	r0, #0
   b5b5a:	d1e8      	bne.n	b5b2e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5b5c:	6968      	ldr	r0, [r5, #20]
   b5b5e:	2306      	movs	r3, #6
   b5b60:	9300      	str	r3, [sp, #0]
   b5b62:	6800      	ldr	r0, [r0, #0]
   b5b64:	ab03      	add	r3, sp, #12
   b5b66:	f241 020b 	movw	r2, #4107	; 0x100b
   b5b6a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5b6e:	f7ff f909 	bl	b4d84 <sock_setsockopt>
   b5b72:	2800      	cmp	r0, #0
   b5b74:	d1db      	bne.n	b5b2e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b5b76:	221c      	movs	r2, #28
   b5b78:	2100      	movs	r1, #0
   b5b7a:	a803      	add	r0, sp, #12
   b5b7c:	f001 f88a 	bl	b6c94 <memset>
    if (ip.version() == 4) {
   b5b80:	7d23      	ldrb	r3, [r4, #20]
   b5b82:	2b04      	cmp	r3, #4
   b5b84:	d11d      	bne.n	b5bc2 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b5b86:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5b8a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5b8c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5b90:	f7ff f878 	bl	b4c84 <inet_htons>
   b5b94:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5b98:	6860      	ldr	r0, [r4, #4]
   b5b9a:	f7ff f86b 	bl	b4c74 <inet_htonl>
   b5b9e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5ba0:	696b      	ldr	r3, [r5, #20]
   b5ba2:	221c      	movs	r2, #28
   b5ba4:	6818      	ldr	r0, [r3, #0]
   b5ba6:	a903      	add	r1, sp, #12
   b5ba8:	f7ff f8fc 	bl	b4da4 <sock_connect>
   b5bac:	2800      	cmp	r0, #0
   b5bae:	d1be      	bne.n	b5b2e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b5bb0:	3404      	adds	r4, #4
   b5bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5bb4:	696d      	ldr	r5, [r5, #20]
   b5bb6:	358c      	adds	r5, #140	; 0x8c
   b5bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5bba:	6823      	ldr	r3, [r4, #0]
   b5bbc:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b5bbe:	2401      	movs	r4, #1
   b5bc0:	e7ba      	b.n	b5b38 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b5bc2:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5bc6:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5bc8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b5bcc:	f7ff f85a 	bl	b4c84 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5bd0:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b5bd2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5bd6:	1d23      	adds	r3, r4, #4
   b5bd8:	f104 0714 	add.w	r7, r4, #20
   b5bdc:	6818      	ldr	r0, [r3, #0]
   b5bde:	6859      	ldr	r1, [r3, #4]
   b5be0:	4632      	mov	r2, r6
   b5be2:	c203      	stmia	r2!, {r0, r1}
   b5be4:	3308      	adds	r3, #8
   b5be6:	42bb      	cmp	r3, r7
   b5be8:	4616      	mov	r6, r2
   b5bea:	d1f7      	bne.n	b5bdc <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b5bec:	e7d8      	b.n	b5ba0 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b5bf0 <_ZN9TCPClient9availableEv>:
{
   b5bf0:	b530      	push	{r4, r5, lr}
   b5bf2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b5bf4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b5bf8:	b08b      	sub	sp, #44	; 0x2c
   b5bfa:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b5bfc:	b12b      	cbz	r3, b5c0a <_ZN9TCPClient9availableEv+0x1a>
   b5bfe:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b5c02:	429a      	cmp	r2, r3
   b5c04:	d101      	bne.n	b5c0a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b5c06:	f7ff ff6f 	bl	b5ae8 <_ZN9TCPClient12flush_bufferEv>
   b5c0a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b5c0c:	6808      	ldr	r0, [r1, #0]
   b5c0e:	2800      	cmp	r0, #0
   b5c10:	db18      	blt.n	b5c44 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b5c12:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b5c16:	2d7f      	cmp	r5, #127	; 0x7f
   b5c18:	d814      	bhi.n	b5c44 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b5c1a:	3104      	adds	r1, #4
   b5c1c:	2308      	movs	r3, #8
   b5c1e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b5c22:	4429      	add	r1, r5
   b5c24:	f7ff f8c6 	bl	b4db4 <sock_recv>
            if (ret > 0) {
   b5c28:	2800      	cmp	r0, #0
   b5c2a:	dd13      	ble.n	b5c54 <_ZN9TCPClient9availableEv+0x64>
   b5c2c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b5c2e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5c32:	b90a      	cbnz	r2, b5c38 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b5c34:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b5c38:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b5c3a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5c3e:	4410      	add	r0, r2
   b5c40:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b5c44:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b5c46:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b5c4a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b5c4e:	1ac0      	subs	r0, r0, r3
   b5c50:	b00b      	add	sp, #44	; 0x2c
   b5c52:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b5c54:	f7ff f9d2 	bl	b4ffc <__errno>
   b5c58:	6803      	ldr	r3, [r0, #0]
   b5c5a:	2b0b      	cmp	r3, #11
   b5c5c:	d0f2      	beq.n	b5c44 <_ZN9TCPClient9availableEv+0x54>
   b5c5e:	f7ff f9cd 	bl	b4ffc <__errno>
   b5c62:	6803      	ldr	r3, [r0, #0]
   b5c64:	2b0b      	cmp	r3, #11
   b5c66:	d0ed      	beq.n	b5c44 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5c68:	2320      	movs	r3, #32
   b5c6a:	2500      	movs	r5, #0
   b5c6c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b5c70:	f7ff f9c4 	bl	b4ffc <__errno>
   b5c74:	6803      	ldr	r3, [r0, #0]
   b5c76:	9301      	str	r3, [sp, #4]
   b5c78:	4b08      	ldr	r3, [pc, #32]	; (b5c9c <_ZN9TCPClient9availableEv+0xac>)
   b5c7a:	4909      	ldr	r1, [pc, #36]	; (b5ca0 <_ZN9TCPClient9availableEv+0xb0>)
   b5c7c:	9300      	str	r3, [sp, #0]
   b5c7e:	aa02      	add	r2, sp, #8
   b5c80:	462b      	mov	r3, r5
   b5c82:	2032      	movs	r0, #50	; 0x32
   b5c84:	f7ff f906 	bl	b4e94 <log_message>
                    sock_close(d_->sock);
   b5c88:	6963      	ldr	r3, [r4, #20]
   b5c8a:	6818      	ldr	r0, [r3, #0]
   b5c8c:	f7ff f882 	bl	b4d94 <sock_close>
   b5c90:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b5c92:	f04f 32ff 	mov.w	r2, #4294967295
   b5c96:	601a      	str	r2, [r3, #0]
   b5c98:	e7d4      	b.n	b5c44 <_ZN9TCPClient9availableEv+0x54>
   b5c9a:	bf00      	nop
   b5c9c:	000b72c7 	.word	0x000b72c7
   b5ca0:	000b72c0 	.word	0x000b72c0

000b5ca4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5ca4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b5ca6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5ca8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b5caa:	6818      	ldr	r0, [r3, #0]
   b5cac:	2800      	cmp	r0, #0
   b5cae:	db01      	blt.n	b5cb4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b5cb0:	f7ff f870 	bl	b4d94 <sock_close>
   b5cb4:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5cb6:	f04f 32ff 	mov.w	r2, #4294967295
   b5cba:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5cbc:	6960      	ldr	r0, [r4, #20]
   b5cbe:	2211      	movs	r2, #17
   b5cc0:	2100      	movs	r1, #0
   b5cc2:	308c      	adds	r0, #140	; 0x8c
   b5cc4:	f000 ffe6 	bl	b6c94 <memset>
    flush_buffer();
   b5cc8:	4620      	mov	r0, r4
}
   b5cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b5cce:	f7ff bf0b 	b.w	b5ae8 <_ZN9TCPClient12flush_bufferEv>

000b5cd2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b5cd2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5cd4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5cd6:	4604      	mov	r4, r0
          total(0) {
   b5cd8:	6001      	str	r1, [r0, #0]
   b5cda:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b5cde:	3088      	adds	r0, #136	; 0x88
   b5ce0:	f7ff fbfa 	bl	b54d8 <_ZN9IPAddressC1Ev>
}
   b5ce4:	4620      	mov	r0, r4
   b5ce6:	bd10      	pop	{r4, pc}

000b5ce8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b5ce8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5cea:	2300      	movs	r3, #0
   b5cec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5cf0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b5cf4:	4a0e      	ldr	r2, [pc, #56]	; (b5d30 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b5cf6:	6103      	str	r3, [r0, #16]
   b5cf8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5cfa:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b5cfc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5cfe:	20ac      	movs	r0, #172	; 0xac
   b5d00:	9101      	str	r1, [sp, #4]
   b5d02:	f7fe f9c6 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5d06:	1e05      	subs	r5, r0, #0
   b5d08:	f105 060c 	add.w	r6, r5, #12
   b5d0c:	d008      	beq.n	b5d20 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b5d0e:	2301      	movs	r3, #1
   b5d10:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5d14:	4b07      	ldr	r3, [pc, #28]	; (b5d34 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5d16:	9901      	ldr	r1, [sp, #4]
   b5d18:	602b      	str	r3, [r5, #0]
   b5d1a:	4630      	mov	r0, r6
   b5d1c:	f7ff ffd9 	bl	b5cd2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b5d20:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b5d22:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b5d26:	f7ff fedf 	bl	b5ae8 <_ZN9TCPClient12flush_bufferEv>
}
   b5d2a:	b002      	add	sp, #8
   b5d2c:	bd70      	pop	{r4, r5, r6, pc}
   b5d2e:	bf00      	nop
   b5d30:	000b72fc 	.word	0x000b72fc
   b5d34:	000b72e0 	.word	0x000b72e0

000b5d38 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b5d38:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b5d3a:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b5d3e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b5d40:	f7ff ffd2 	bl	b5ce8 <_ZN9TCPClientC1Ei>
}
   b5d44:	4620      	mov	r0, r4
   b5d46:	bd10      	pop	{r4, pc}

000b5d48 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b5d48:	b510      	push	{r4, lr}
   b5d4a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b5d4c:	6800      	ldr	r0, [r0, #0]
   b5d4e:	2800      	cmp	r0, #0
   b5d50:	db01      	blt.n	b5d56 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b5d52:	f7ff f81f 	bl	b4d94 <sock_close>
    }
}
   b5d56:	4620      	mov	r0, r4
   b5d58:	bd10      	pop	{r4, pc}

000b5d5a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b5d5a:	300c      	adds	r0, #12
   b5d5c:	f7ff bff4 	b.w	b5d48 <_ZN9TCPClient4DataD1Ev>

000b5d60 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5d60:	2200      	movs	r2, #0
   b5d62:	6840      	ldr	r0, [r0, #4]
   b5d64:	4611      	mov	r1, r2
   b5d66:	f7ff b8d9 	b.w	b4f1c <network_ready>

000b5d6a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5d6a:	2200      	movs	r2, #0
   b5d6c:	6840      	ldr	r0, [r0, #4]
   b5d6e:	4611      	mov	r1, r2
   b5d70:	f7ff b8f4 	b.w	b4f5c <network_listening>

000b5d74 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5d74:	2200      	movs	r2, #0
   b5d76:	6840      	ldr	r0, [r0, #4]
   b5d78:	4611      	mov	r1, r2
   b5d7a:	f7ff b8ff 	b.w	b4f7c <network_get_listen_timeout>

000b5d7e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5d7e:	6840      	ldr	r0, [r0, #4]
   b5d80:	2200      	movs	r2, #0
   b5d82:	f7ff b8f3 	b.w	b4f6c <network_set_listen_timeout>

000b5d86 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5d86:	6840      	ldr	r0, [r0, #4]
   b5d88:	2200      	movs	r2, #0
   b5d8a:	f081 0101 	eor.w	r1, r1, #1
   b5d8e:	f7ff b8dd 	b.w	b4f4c <network_listen>

000b5d92 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5d92:	2300      	movs	r3, #0
   b5d94:	6840      	ldr	r0, [r0, #4]
   b5d96:	461a      	mov	r2, r3
   b5d98:	4619      	mov	r1, r3
   b5d9a:	f7ff b8cf 	b.w	b4f3c <network_off>

000b5d9e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5d9e:	2300      	movs	r3, #0
   b5da0:	6840      	ldr	r0, [r0, #4]
   b5da2:	461a      	mov	r2, r3
   b5da4:	4619      	mov	r1, r3
   b5da6:	f7ff b8c1 	b.w	b4f2c <network_on>

000b5daa <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5daa:	2200      	movs	r2, #0
   b5dac:	6840      	ldr	r0, [r0, #4]
   b5dae:	4611      	mov	r1, r2
   b5db0:	f7ff b8a4 	b.w	b4efc <network_connecting>

000b5db4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5db4:	6840      	ldr	r0, [r0, #4]
   b5db6:	2200      	movs	r2, #0
   b5db8:	2102      	movs	r1, #2
   b5dba:	f7ff b8a7 	b.w	b4f0c <network_disconnect>

000b5dbe <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5dbe:	2300      	movs	r3, #0
   b5dc0:	6840      	ldr	r0, [r0, #4]
   b5dc2:	461a      	mov	r2, r3
   b5dc4:	f7ff b892 	b.w	b4eec <network_connect>

000b5dc8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5dc8:	4b02      	ldr	r3, [pc, #8]	; (b5dd4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5dca:	2204      	movs	r2, #4
   b5dcc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5dce:	4a02      	ldr	r2, [pc, #8]	; (b5dd8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5dd0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5dd2:	4770      	bx	lr
   b5dd4:	2003e70c 	.word	0x2003e70c
   b5dd8:	000b7348 	.word	0x000b7348

000b5ddc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5ddc:	2300      	movs	r3, #0
   b5dde:	6840      	ldr	r0, [r0, #4]
   b5de0:	461a      	mov	r2, r3
   b5de2:	f7ff b883 	b.w	b4eec <network_connect>

000b5de6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5de6:	6840      	ldr	r0, [r0, #4]
   b5de8:	2200      	movs	r2, #0
   b5dea:	2102      	movs	r1, #2
   b5dec:	f7ff b88e 	b.w	b4f0c <network_disconnect>

000b5df0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5df0:	2200      	movs	r2, #0
   b5df2:	6840      	ldr	r0, [r0, #4]
   b5df4:	4611      	mov	r1, r2
   b5df6:	f7ff b881 	b.w	b4efc <network_connecting>

000b5dfa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5dfa:	2200      	movs	r2, #0
   b5dfc:	6840      	ldr	r0, [r0, #4]
   b5dfe:	4611      	mov	r1, r2
   b5e00:	f7ff b88c 	b.w	b4f1c <network_ready>

000b5e04 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5e04:	2300      	movs	r3, #0
   b5e06:	6840      	ldr	r0, [r0, #4]
   b5e08:	461a      	mov	r2, r3
   b5e0a:	4619      	mov	r1, r3
   b5e0c:	f7ff b88e 	b.w	b4f2c <network_on>

000b5e10 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5e10:	2300      	movs	r3, #0
   b5e12:	6840      	ldr	r0, [r0, #4]
   b5e14:	461a      	mov	r2, r3
   b5e16:	4619      	mov	r1, r3
   b5e18:	f7ff b890 	b.w	b4f3c <network_off>

000b5e1c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5e1c:	6840      	ldr	r0, [r0, #4]
   b5e1e:	2100      	movs	r1, #0
   b5e20:	f7ff b8b4 	b.w	b4f8c <network_is_on>

000b5e24 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5e24:	6840      	ldr	r0, [r0, #4]
   b5e26:	2100      	movs	r1, #0
   b5e28:	f7ff b8b8 	b.w	b4f9c <network_is_off>

000b5e2c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5e2c:	6840      	ldr	r0, [r0, #4]
   b5e2e:	2200      	movs	r2, #0
   b5e30:	f081 0101 	eor.w	r1, r1, #1
   b5e34:	f7ff b88a 	b.w	b4f4c <network_listen>

000b5e38 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5e38:	6840      	ldr	r0, [r0, #4]
   b5e3a:	2200      	movs	r2, #0
   b5e3c:	f7ff b896 	b.w	b4f6c <network_set_listen_timeout>

000b5e40 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5e40:	2200      	movs	r2, #0
   b5e42:	6840      	ldr	r0, [r0, #4]
   b5e44:	4611      	mov	r1, r2
   b5e46:	f7ff b899 	b.w	b4f7c <network_get_listen_timeout>

000b5e4a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5e4a:	2200      	movs	r2, #0
   b5e4c:	6840      	ldr	r0, [r0, #4]
   b5e4e:	4611      	mov	r1, r2
   b5e50:	f7ff b884 	b.w	b4f5c <network_listening>

000b5e54 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5e58:	b095      	sub	sp, #84	; 0x54
   b5e5a:	4614      	mov	r4, r2
   b5e5c:	460d      	mov	r5, r1
   b5e5e:	4607      	mov	r7, r0
    IPAddress addr;
   b5e60:	f7ff fb3a 	bl	b54d8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5e64:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5e66:	221c      	movs	r2, #28
   b5e68:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5e6a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5e6c:	f000 ff12 	bl	b6c94 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5e70:	2340      	movs	r3, #64	; 0x40
   b5e72:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5e74:	4620      	mov	r0, r4
   b5e76:	466b      	mov	r3, sp
   b5e78:	aa0c      	add	r2, sp, #48	; 0x30
   b5e7a:	2100      	movs	r1, #0
   b5e7c:	f7fe fe82 	bl	b4b84 <netdb_getaddrinfo>
    if (!r) {
   b5e80:	4604      	mov	r4, r0
   b5e82:	2800      	cmp	r0, #0
   b5e84:	d14b      	bne.n	b5f1e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5e86:	4602      	mov	r2, r0
   b5e88:	2101      	movs	r1, #1
   b5e8a:	6868      	ldr	r0, [r5, #4]
   b5e8c:	f7ff f846 	bl	b4f1c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5e90:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5e92:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5e94:	4622      	mov	r2, r4
   b5e96:	6868      	ldr	r0, [r5, #4]
   b5e98:	f7ff f840 	bl	b4f1c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5e9c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5e9e:	4681      	mov	r9, r0
        bool ok = false;
   b5ea0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5ea2:	2e00      	cmp	r6, #0
   b5ea4:	d03b      	beq.n	b5f1e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5ea6:	2900      	cmp	r1, #0
   b5ea8:	d139      	bne.n	b5f1e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5eaa:	6873      	ldr	r3, [r6, #4]
   b5eac:	2b02      	cmp	r3, #2
   b5eae:	d003      	beq.n	b5eb8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5eb0:	2b0a      	cmp	r3, #10
   b5eb2:	d011      	beq.n	b5ed8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5eb4:	69f6      	ldr	r6, [r6, #28]
   b5eb6:	e7f4      	b.n	b5ea2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5eb8:	f1b8 0f00 	cmp.w	r8, #0
   b5ebc:	d0fa      	beq.n	b5eb4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5ebe:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5ec0:	a806      	add	r0, sp, #24
   b5ec2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5ec4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5ec6:	f7ff fb4b 	bl	b5560 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ecc:	1d3c      	adds	r4, r7, #4
   b5ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ed0:	682b      	ldr	r3, [r5, #0]
   b5ed2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5ed4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5ed6:	e7ed      	b.n	b5eb4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5ed8:	f1b9 0f00 	cmp.w	r9, #0
   b5edc:	d0ea      	beq.n	b5eb4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5ede:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5ee0:	2210      	movs	r2, #16
   b5ee2:	a801      	add	r0, sp, #4
   b5ee4:	f000 fed6 	bl	b6c94 <memset>
                    a.v = 6;
   b5ee8:	2306      	movs	r3, #6
   b5eea:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5eee:	ad01      	add	r5, sp, #4
   b5ef0:	f104 0308 	add.w	r3, r4, #8
   b5ef4:	3418      	adds	r4, #24
   b5ef6:	6818      	ldr	r0, [r3, #0]
   b5ef8:	6859      	ldr	r1, [r3, #4]
   b5efa:	462a      	mov	r2, r5
   b5efc:	c203      	stmia	r2!, {r0, r1}
   b5efe:	3308      	adds	r3, #8
   b5f00:	42a3      	cmp	r3, r4
   b5f02:	4615      	mov	r5, r2
   b5f04:	d1f7      	bne.n	b5ef6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5f06:	a901      	add	r1, sp, #4
   b5f08:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5f0a:	ad07      	add	r5, sp, #28
   b5f0c:	f7ff faf2 	bl	b54f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5f12:	1d3c      	adds	r4, r7, #4
   b5f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5f16:	682b      	ldr	r3, [r5, #0]
   b5f18:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5f1a:	4649      	mov	r1, r9
   b5f1c:	e7ca      	b.n	b5eb4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5f1e:	9800      	ldr	r0, [sp, #0]
   b5f20:	f7fe fe28 	bl	b4b74 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5f24:	4638      	mov	r0, r7
   b5f26:	b015      	add	sp, #84	; 0x54
   b5f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5f2c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5f2c:	4b02      	ldr	r3, [pc, #8]	; (b5f38 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5f2e:	4a03      	ldr	r2, [pc, #12]	; (b5f3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5f30:	601a      	str	r2, [r3, #0]
   b5f32:	2200      	movs	r2, #0
   b5f34:	605a      	str	r2, [r3, #4]

} // spark
   b5f36:	4770      	bx	lr
   b5f38:	2003e714 	.word	0x2003e714
   b5f3c:	000b7384 	.word	0x000b7384

000b5f40 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5f40:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5f42:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5f44:	d902      	bls.n	b5f4c <pinAvailable+0xc>
    return false;
   b5f46:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5f48:	b002      	add	sp, #8
   b5f4a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5f4c:	f1a0 030b 	sub.w	r3, r0, #11
   b5f50:	2b02      	cmp	r3, #2
   b5f52:	d81a      	bhi.n	b5f8a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5f54:	4c17      	ldr	r4, [pc, #92]	; (b5fb4 <pinAvailable+0x74>)
   b5f56:	7821      	ldrb	r1, [r4, #0]
   b5f58:	f3bf 8f5b 	dmb	ish
   b5f5c:	f011 0101 	ands.w	r1, r1, #1
   b5f60:	d10b      	bne.n	b5f7a <pinAvailable+0x3a>
   b5f62:	4620      	mov	r0, r4
   b5f64:	9101      	str	r1, [sp, #4]
   b5f66:	f7fe f8a7 	bl	b40b8 <__cxa_guard_acquire>
   b5f6a:	9901      	ldr	r1, [sp, #4]
   b5f6c:	b128      	cbz	r0, b5f7a <pinAvailable+0x3a>
   b5f6e:	4812      	ldr	r0, [pc, #72]	; (b5fb8 <pinAvailable+0x78>)
   b5f70:	f7ff f89a 	bl	b50a8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5f74:	4620      	mov	r0, r4
   b5f76:	f7fe f8a4 	bl	b40c2 <__cxa_guard_release>
   b5f7a:	4b0f      	ldr	r3, [pc, #60]	; (b5fb8 <pinAvailable+0x78>)
   b5f7c:	7818      	ldrb	r0, [r3, #0]
   b5f7e:	f7fe ff39 	bl	b4df4 <hal_spi_is_enabled>
   b5f82:	2800      	cmp	r0, #0
   b5f84:	d1df      	bne.n	b5f46 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5f86:	2001      	movs	r0, #1
   b5f88:	e7de      	b.n	b5f48 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5f8a:	2801      	cmp	r0, #1
   b5f8c:	d809      	bhi.n	b5fa2 <pinAvailable+0x62>
   b5f8e:	f000 f8e9 	bl	b6164 <_Z19__fetch_global_Wirev>
   b5f92:	2100      	movs	r1, #0
   b5f94:	7c00      	ldrb	r0, [r0, #16]
   b5f96:	f7fe fee5 	bl	b4d64 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5f9a:	f080 0001 	eor.w	r0, r0, #1
   b5f9e:	b2c0      	uxtb	r0, r0
   b5fa0:	e7d2      	b.n	b5f48 <pinAvailable+0x8>
   b5fa2:	3809      	subs	r0, #9
   b5fa4:	2801      	cmp	r0, #1
   b5fa6:	d8ee      	bhi.n	b5f86 <pinAvailable+0x46>
   b5fa8:	f000 f89c 	bl	b60e4 <_Z22__fetch_global_Serial1v>
   b5fac:	7c00      	ldrb	r0, [r0, #16]
   b5fae:	f7fe fe99 	bl	b4ce4 <hal_usart_is_enabled>
   b5fb2:	e7f2      	b.n	b5f9a <pinAvailable+0x5a>
   b5fb4:	2003e71c 	.word	0x2003e71c
   b5fb8:	2003e720 	.word	0x2003e720

000b5fbc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5fbc:	2823      	cmp	r0, #35	; 0x23
{
   b5fbe:	b538      	push	{r3, r4, r5, lr}
   b5fc0:	4604      	mov	r4, r0
   b5fc2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5fc4:	d80a      	bhi.n	b5fdc <pinMode+0x20>
   b5fc6:	29ff      	cmp	r1, #255	; 0xff
   b5fc8:	d008      	beq.n	b5fdc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5fca:	f7ff ffb9 	bl	b5f40 <pinAvailable>
   b5fce:	b128      	cbz	r0, b5fdc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5fd0:	4629      	mov	r1, r5
   b5fd2:	4620      	mov	r0, r4
}
   b5fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5fd8:	f7fe bde4 	b.w	b4ba4 <HAL_Pin_Mode>
}
   b5fdc:	bd38      	pop	{r3, r4, r5, pc}

000b5fde <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5fde:	b538      	push	{r3, r4, r5, lr}
   b5fe0:	4604      	mov	r4, r0
   b5fe2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5fe4:	f7fe fde6 	bl	b4bb4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5fe8:	28ff      	cmp	r0, #255	; 0xff
   b5fea:	d010      	beq.n	b600e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5fec:	2806      	cmp	r0, #6
   b5fee:	d804      	bhi.n	b5ffa <digitalWrite+0x1c>
   b5ff0:	234d      	movs	r3, #77	; 0x4d
   b5ff2:	fa23 f000 	lsr.w	r0, r3, r0
   b5ff6:	07c3      	lsls	r3, r0, #31
   b5ff8:	d409      	bmi.n	b600e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5ffa:	4620      	mov	r0, r4
   b5ffc:	f7ff ffa0 	bl	b5f40 <pinAvailable>
   b6000:	b128      	cbz	r0, b600e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b6002:	4629      	mov	r1, r5
   b6004:	4620      	mov	r0, r4
}
   b6006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b600a:	f7fe bddb 	b.w	b4bc4 <HAL_GPIO_Write>
}
   b600e:	bd38      	pop	{r3, r4, r5, pc}

000b6010 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b6010:	b510      	push	{r4, lr}
   b6012:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6014:	f7fe fdce 	bl	b4bb4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6018:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b601a:	b2db      	uxtb	r3, r3
   b601c:	2b01      	cmp	r3, #1
   b601e:	d908      	bls.n	b6032 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6020:	4620      	mov	r0, r4
   b6022:	f7ff ff8d 	bl	b5f40 <pinAvailable>
   b6026:	b120      	cbz	r0, b6032 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b6028:	4620      	mov	r0, r4
}
   b602a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b602e:	f7fe bdd1 	b.w	b4bd4 <HAL_GPIO_Read>
}
   b6032:	2000      	movs	r0, #0
   b6034:	bd10      	pop	{r4, pc}

000b6036 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b6036:	280d      	cmp	r0, #13
{
   b6038:	b510      	push	{r4, lr}
   b603a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b603c:	bf9c      	itt	ls
   b603e:	340e      	addls	r4, #14
   b6040:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b6042:	4620      	mov	r0, r4
   b6044:	f7ff ff7c 	bl	b5f40 <pinAvailable>
   b6048:	b150      	cbz	r0, b6060 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b604a:	2103      	movs	r1, #3
   b604c:	4620      	mov	r0, r4
   b604e:	f7fe fda1 	bl	b4b94 <HAL_Validate_Pin_Function>
   b6052:	2803      	cmp	r0, #3
   b6054:	d104      	bne.n	b6060 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b6056:	4620      	mov	r0, r4
}
   b6058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b605c:	f7fe bdc2 	b.w	b4be4 <hal_adc_read>
}
   b6060:	2000      	movs	r0, #0
   b6062:	bd10      	pop	{r4, pc}

000b6064 <shiftIn>:
  }

  return hal_pwm_get_max_frequency(pin);
}

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
   b6064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6068:	4690      	mov	r8, r2
   b606a:	2507      	movs	r5, #7
  uint8_t value = 0;
   b606c:	2400      	movs	r4, #0
  uint8_t i;

  for (i = 0; i < 8; ++i) {
    digitalWrite(clockPin, HIGH);
   b606e:	460e      	mov	r6, r1
    if (bitOrder == LSBFIRST)
      value |= digitalRead(dataPin) << i;
   b6070:	4607      	mov	r7, r0
    digitalWrite(clockPin, HIGH);
   b6072:	4630      	mov	r0, r6
   b6074:	2101      	movs	r1, #1
   b6076:	f7ff ffb2 	bl	b5fde <digitalWrite>
    if (bitOrder == LSBFIRST)
   b607a:	f1c5 0907 	rsb	r9, r5, #7
      value |= digitalRead(dataPin) << i;
   b607e:	b264      	sxtb	r4, r4
   b6080:	4638      	mov	r0, r7
    if (bitOrder == LSBFIRST)
   b6082:	f1b8 0f00 	cmp.w	r8, #0
   b6086:	d10e      	bne.n	b60a6 <shiftIn+0x42>
      value |= digitalRead(dataPin) << i;
   b6088:	f7ff ffc2 	bl	b6010 <digitalRead>
   b608c:	fa00 f009 	lsl.w	r0, r0, r9
    else
      value |= digitalRead(dataPin) << (7 - i);
   b6090:	4304      	orrs	r4, r0
    digitalWrite(clockPin, LOW);
   b6092:	2100      	movs	r1, #0
   b6094:	4630      	mov	r0, r6
   b6096:	f7ff ffa2 	bl	b5fde <digitalWrite>
  for (i = 0; i < 8; ++i) {
   b609a:	3d01      	subs	r5, #1
      value |= digitalRead(dataPin) << (7 - i);
   b609c:	b2e4      	uxtb	r4, r4
  for (i = 0; i < 8; ++i) {
   b609e:	d2e8      	bcs.n	b6072 <shiftIn+0xe>
  }
  return value;
}
   b60a0:	4620      	mov	r0, r4
   b60a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      value |= digitalRead(dataPin) << (7 - i);
   b60a6:	f7ff ffb3 	bl	b6010 <digitalRead>
   b60aa:	40a8      	lsls	r0, r5
   b60ac:	e7f0      	b.n	b6090 <shiftIn+0x2c>

000b60ae <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b60ae:	4770      	bx	lr

000b60b0 <_Z20acquireSerial1Bufferv>:
{
   b60b0:	b538      	push	{r3, r4, r5, lr}
   b60b2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b60b4:	2514      	movs	r5, #20
   b60b6:	462a      	mov	r2, r5
   b60b8:	2100      	movs	r1, #0
   b60ba:	f000 fdeb 	bl	b6c94 <memset>
   b60be:	8025      	strh	r5, [r4, #0]
   b60c0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b60c2:	4907      	ldr	r1, [pc, #28]	; (b60e0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b60c4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b60c6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b60c8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b60ca:	f000 f86f 	bl	b61ac <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b60ce:	4904      	ldr	r1, [pc, #16]	; (b60e0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b60d0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b60d2:	4628      	mov	r0, r5
   b60d4:	f000 f86a 	bl	b61ac <_ZnajRKSt9nothrow_t>
    };
   b60d8:	60e0      	str	r0, [r4, #12]
}
   b60da:	4620      	mov	r0, r4
   b60dc:	bd38      	pop	{r3, r4, r5, pc}
   b60de:	bf00      	nop
   b60e0:	000b73b8 	.word	0x000b73b8

000b60e4 <_Z22__fetch_global_Serial1v>:
{
   b60e4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b60e6:	4d0e      	ldr	r5, [pc, #56]	; (b6120 <_Z22__fetch_global_Serial1v+0x3c>)
   b60e8:	7829      	ldrb	r1, [r5, #0]
   b60ea:	f3bf 8f5b 	dmb	ish
   b60ee:	f011 0401 	ands.w	r4, r1, #1
{
   b60f2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b60f4:	d111      	bne.n	b611a <_Z22__fetch_global_Serial1v+0x36>
   b60f6:	4628      	mov	r0, r5
   b60f8:	f7fd ffde 	bl	b40b8 <__cxa_guard_acquire>
   b60fc:	b168      	cbz	r0, b611a <_Z22__fetch_global_Serial1v+0x36>
   b60fe:	a801      	add	r0, sp, #4
   b6100:	f7ff ffd6 	bl	b60b0 <_Z20acquireSerial1Bufferv>
   b6104:	aa01      	add	r2, sp, #4
   b6106:	4621      	mov	r1, r4
   b6108:	4806      	ldr	r0, [pc, #24]	; (b6124 <_Z22__fetch_global_Serial1v+0x40>)
   b610a:	f7ff faff 	bl	b570c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b610e:	4628      	mov	r0, r5
   b6110:	f7fd ffd7 	bl	b40c2 <__cxa_guard_release>
   b6114:	4804      	ldr	r0, [pc, #16]	; (b6128 <_Z22__fetch_global_Serial1v+0x44>)
   b6116:	f000 fd7b 	bl	b6c10 <atexit>
    return serial1;
}
   b611a:	4802      	ldr	r0, [pc, #8]	; (b6124 <_Z22__fetch_global_Serial1v+0x40>)
   b611c:	b007      	add	sp, #28
   b611e:	bd30      	pop	{r4, r5, pc}
   b6120:	2003e728 	.word	0x2003e728
   b6124:	2003e72c 	.word	0x2003e72c
   b6128:	000b60af 	.word	0x000b60af

000b612c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b612c:	4770      	bx	lr
	...

000b6130 <_Z17acquireWireBufferv>:
{
   b6130:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6132:	4b0a      	ldr	r3, [pc, #40]	; (b615c <_Z17acquireWireBufferv+0x2c>)
   b6134:	6003      	str	r3, [r0, #0]
   b6136:	2301      	movs	r3, #1
{
   b6138:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b613a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b613c:	4908      	ldr	r1, [pc, #32]	; (b6160 <_Z17acquireWireBufferv+0x30>)
   b613e:	2020      	movs	r0, #32
   b6140:	f000 f834 	bl	b61ac <_ZnajRKSt9nothrow_t>
	};
   b6144:	2520      	movs	r5, #32
   b6146:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6148:	4905      	ldr	r1, [pc, #20]	; (b6160 <_Z17acquireWireBufferv+0x30>)
	};
   b614a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b614c:	4628      	mov	r0, r5
   b614e:	f000 f82d 	bl	b61ac <_ZnajRKSt9nothrow_t>
	};
   b6152:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b6156:	4620      	mov	r0, r4
   b6158:	bd38      	pop	{r3, r4, r5, pc}
   b615a:	bf00      	nop
   b615c:	00010018 	.word	0x00010018
   b6160:	000b73b8 	.word	0x000b73b8

000b6164 <_Z19__fetch_global_Wirev>:
{
   b6164:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6166:	4d0e      	ldr	r5, [pc, #56]	; (b61a0 <_Z19__fetch_global_Wirev+0x3c>)
   b6168:	7829      	ldrb	r1, [r5, #0]
   b616a:	f3bf 8f5b 	dmb	ish
   b616e:	f011 0401 	ands.w	r4, r1, #1
{
   b6172:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6174:	d111      	bne.n	b619a <_Z19__fetch_global_Wirev+0x36>
   b6176:	4628      	mov	r0, r5
   b6178:	f7fd ff9e 	bl	b40b8 <__cxa_guard_acquire>
   b617c:	b168      	cbz	r0, b619a <_Z19__fetch_global_Wirev+0x36>
   b617e:	4668      	mov	r0, sp
   b6180:	f7ff ffd6 	bl	b6130 <_Z17acquireWireBufferv>
   b6184:	466a      	mov	r2, sp
   b6186:	4621      	mov	r1, r4
   b6188:	4806      	ldr	r0, [pc, #24]	; (b61a4 <_Z19__fetch_global_Wirev+0x40>)
   b618a:	f7ff faff 	bl	b578c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b618e:	4628      	mov	r0, r5
   b6190:	f7fd ff97 	bl	b40c2 <__cxa_guard_release>
   b6194:	4804      	ldr	r0, [pc, #16]	; (b61a8 <_Z19__fetch_global_Wirev+0x44>)
   b6196:	f000 fd3b 	bl	b6c10 <atexit>
	return wire;
}
   b619a:	4802      	ldr	r0, [pc, #8]	; (b61a4 <_Z19__fetch_global_Wirev+0x40>)
   b619c:	b007      	add	sp, #28
   b619e:	bd30      	pop	{r4, r5, pc}
   b61a0:	2003e744 	.word	0x2003e744
   b61a4:	2003e748 	.word	0x2003e748
   b61a8:	000b612d 	.word	0x000b612d

000b61ac <_ZnajRKSt9nothrow_t>:
   b61ac:	f7fd bf73 	b.w	b4096 <_Znaj>

000b61b0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b61b0:	4901      	ldr	r1, [pc, #4]	; (b61b8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b61b2:	f000 b8f9 	b.w	b63a8 <_ZNKSt9type_infoeqERKS_>
   b61b6:	bf00      	nop
   b61b8:	000b73d4 	.word	0x000b73d4

000b61bc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b61bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b61be:	2400      	movs	r4, #0
   b61c0:	2310      	movs	r3, #16
   b61c2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b61c6:	6803      	ldr	r3, [r0, #0]
   b61c8:	4615      	mov	r5, r2
   b61ca:	699e      	ldr	r6, [r3, #24]
   b61cc:	6812      	ldr	r2, [r2, #0]
   b61ce:	466b      	mov	r3, sp
   b61d0:	e9cd 4400 	strd	r4, r4, [sp]
   b61d4:	47b0      	blx	r6
   b61d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b61da:	f003 0306 	and.w	r3, r3, #6
   b61de:	2b06      	cmp	r3, #6
   b61e0:	bf03      	ittte	eq
   b61e2:	9b00      	ldreq	r3, [sp, #0]
   b61e4:	602b      	streq	r3, [r5, #0]
   b61e6:	2001      	moveq	r0, #1
   b61e8:	4620      	movne	r0, r4
   b61ea:	b004      	add	sp, #16
   b61ec:	bd70      	pop	{r4, r5, r6, pc}

000b61ee <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b61ee:	9800      	ldr	r0, [sp, #0]
   b61f0:	4290      	cmp	r0, r2
   b61f2:	bf14      	ite	ne
   b61f4:	2001      	movne	r0, #1
   b61f6:	2006      	moveq	r0, #6
   b61f8:	4770      	bx	lr
	...

000b61fc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b61fc:	b510      	push	{r4, lr}
   b61fe:	4b03      	ldr	r3, [pc, #12]	; (b620c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6200:	6003      	str	r3, [r0, #0]
   b6202:	4604      	mov	r4, r0
   b6204:	f000 f8cd 	bl	b63a2 <_ZNSt9type_infoD1Ev>
   b6208:	4620      	mov	r0, r4
   b620a:	bd10      	pop	{r4, pc}
   b620c:	000b7414 	.word	0x000b7414

000b6210 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6210:	b510      	push	{r4, lr}
   b6212:	4604      	mov	r4, r0
   b6214:	f7ff fff2 	bl	b61fc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6218:	4620      	mov	r0, r4
   b621a:	2108      	movs	r1, #8
   b621c:	f7fd ff3d 	bl	b409a <_ZdlPvj>
   b6220:	4620      	mov	r0, r4
   b6222:	bd10      	pop	{r4, pc}

000b6224 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6228:	461f      	mov	r7, r3
   b622a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b622e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6232:	4598      	cmp	r8, r3
   b6234:	4606      	mov	r6, r0
   b6236:	4615      	mov	r5, r2
   b6238:	d107      	bne.n	b624a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b623a:	9907      	ldr	r1, [sp, #28]
   b623c:	f000 f8b4 	bl	b63a8 <_ZNKSt9type_infoeqERKS_>
   b6240:	b118      	cbz	r0, b624a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6242:	7165      	strb	r5, [r4, #5]
   b6244:	2000      	movs	r0, #0
   b6246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b624a:	4639      	mov	r1, r7
   b624c:	4630      	mov	r0, r6
   b624e:	f000 f8ab 	bl	b63a8 <_ZNKSt9type_infoeqERKS_>
   b6252:	2800      	cmp	r0, #0
   b6254:	d0f6      	beq.n	b6244 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b6256:	2301      	movs	r3, #1
   b6258:	f8c4 8000 	str.w	r8, [r4]
   b625c:	7125      	strb	r5, [r4, #4]
   b625e:	71a3      	strb	r3, [r4, #6]
   b6260:	e7f0      	b.n	b6244 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6262 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6262:	b538      	push	{r3, r4, r5, lr}
   b6264:	4615      	mov	r5, r2
   b6266:	461c      	mov	r4, r3
   b6268:	f000 f89e 	bl	b63a8 <_ZNKSt9type_infoeqERKS_>
   b626c:	b120      	cbz	r0, b6278 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b626e:	2308      	movs	r3, #8
   b6270:	60e3      	str	r3, [r4, #12]
   b6272:	2306      	movs	r3, #6
   b6274:	6025      	str	r5, [r4, #0]
   b6276:	7123      	strb	r3, [r4, #4]
   b6278:	bd38      	pop	{r3, r4, r5, pc}

000b627a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b627a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b627c:	4605      	mov	r5, r0
   b627e:	460c      	mov	r4, r1
   b6280:	9201      	str	r2, [sp, #4]
   b6282:	461e      	mov	r6, r3
   b6284:	f000 f890 	bl	b63a8 <_ZNKSt9type_infoeqERKS_>
   b6288:	b950      	cbnz	r0, b62a0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b628a:	2e03      	cmp	r6, #3
   b628c:	d808      	bhi.n	b62a0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b628e:	6823      	ldr	r3, [r4, #0]
   b6290:	9a01      	ldr	r2, [sp, #4]
   b6292:	695b      	ldr	r3, [r3, #20]
   b6294:	4629      	mov	r1, r5
   b6296:	4620      	mov	r0, r4
   b6298:	b002      	add	sp, #8
   b629a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b629e:	4718      	bx	r3
   b62a0:	b002      	add	sp, #8
   b62a2:	bd70      	pop	{r4, r5, r6, pc}

000b62a4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b62a4:	b510      	push	{r4, lr}
   b62a6:	4b03      	ldr	r3, [pc, #12]	; (b62b4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b62a8:	6003      	str	r3, [r0, #0]
   b62aa:	4604      	mov	r4, r0
   b62ac:	f7ff ffa6 	bl	b61fc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b62b0:	4620      	mov	r0, r4
   b62b2:	bd10      	pop	{r4, pc}
   b62b4:	000b7474 	.word	0x000b7474

000b62b8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b62b8:	b510      	push	{r4, lr}
   b62ba:	4604      	mov	r4, r0
   b62bc:	f7ff fff2 	bl	b62a4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b62c0:	4620      	mov	r0, r4
   b62c2:	210c      	movs	r1, #12
   b62c4:	f7fd fee9 	bl	b409a <_ZdlPvj>
   b62c8:	4620      	mov	r0, r4
   b62ca:	bd10      	pop	{r4, pc}

000b62cc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b62cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b62ce:	9f08      	ldr	r7, [sp, #32]
   b62d0:	4297      	cmp	r7, r2
   b62d2:	4605      	mov	r5, r0
   b62d4:	460e      	mov	r6, r1
   b62d6:	4614      	mov	r4, r2
   b62d8:	d00a      	beq.n	b62f0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b62da:	68a8      	ldr	r0, [r5, #8]
   b62dc:	6802      	ldr	r2, [r0, #0]
   b62de:	9708      	str	r7, [sp, #32]
   b62e0:	6a15      	ldr	r5, [r2, #32]
   b62e2:	4631      	mov	r1, r6
   b62e4:	4622      	mov	r2, r4
   b62e6:	46ac      	mov	ip, r5
   b62e8:	b003      	add	sp, #12
   b62ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b62ee:	4760      	bx	ip
   b62f0:	4619      	mov	r1, r3
   b62f2:	9301      	str	r3, [sp, #4]
   b62f4:	f000 f858 	bl	b63a8 <_ZNKSt9type_infoeqERKS_>
   b62f8:	9b01      	ldr	r3, [sp, #4]
   b62fa:	2800      	cmp	r0, #0
   b62fc:	d0ed      	beq.n	b62da <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b62fe:	2006      	movs	r0, #6
   b6300:	b003      	add	sp, #12
   b6302:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6304 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6304:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6308:	460d      	mov	r5, r1
   b630a:	4619      	mov	r1, r3
   b630c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6310:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6314:	4681      	mov	r9, r0
   b6316:	4617      	mov	r7, r2
   b6318:	4698      	mov	r8, r3
   b631a:	f000 f845 	bl	b63a8 <_ZNKSt9type_infoeqERKS_>
   b631e:	b190      	cbz	r0, b6346 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6320:	2d00      	cmp	r5, #0
   b6322:	6034      	str	r4, [r6, #0]
   b6324:	7137      	strb	r7, [r6, #4]
   b6326:	db09      	blt.n	b633c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6328:	1961      	adds	r1, r4, r5
   b632a:	458a      	cmp	sl, r1
   b632c:	bf0c      	ite	eq
   b632e:	2106      	moveq	r1, #6
   b6330:	2101      	movne	r1, #1
   b6332:	71b1      	strb	r1, [r6, #6]
   b6334:	2000      	movs	r0, #0
   b6336:	b001      	add	sp, #4
   b6338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b633c:	3502      	adds	r5, #2
   b633e:	d1f9      	bne.n	b6334 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6340:	2301      	movs	r3, #1
   b6342:	71b3      	strb	r3, [r6, #6]
   b6344:	e7f6      	b.n	b6334 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6346:	4554      	cmp	r4, sl
   b6348:	d106      	bne.n	b6358 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b634a:	4659      	mov	r1, fp
   b634c:	4648      	mov	r0, r9
   b634e:	f000 f82b 	bl	b63a8 <_ZNKSt9type_infoeqERKS_>
   b6352:	b108      	cbz	r0, b6358 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6354:	7177      	strb	r7, [r6, #5]
   b6356:	e7ed      	b.n	b6334 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6358:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b635c:	6803      	ldr	r3, [r0, #0]
   b635e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b6362:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b6366:	69dc      	ldr	r4, [r3, #28]
   b6368:	463a      	mov	r2, r7
   b636a:	4643      	mov	r3, r8
   b636c:	4629      	mov	r1, r5
   b636e:	46a4      	mov	ip, r4
   b6370:	b001      	add	sp, #4
   b6372:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6376:	4760      	bx	ip

000b6378 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b6378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b637c:	4607      	mov	r7, r0
   b637e:	460c      	mov	r4, r1
   b6380:	4615      	mov	r5, r2
   b6382:	461e      	mov	r6, r3
   b6384:	f7ff ff6d 	bl	b6262 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b6388:	b948      	cbnz	r0, b639e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b638a:	68b8      	ldr	r0, [r7, #8]
   b638c:	6803      	ldr	r3, [r0, #0]
   b638e:	699f      	ldr	r7, [r3, #24]
   b6390:	462a      	mov	r2, r5
   b6392:	4633      	mov	r3, r6
   b6394:	4621      	mov	r1, r4
   b6396:	46bc      	mov	ip, r7
   b6398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b639c:	4760      	bx	ip
   b639e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b63a2 <_ZNSt9type_infoD1Ev>:
   b63a2:	4770      	bx	lr

000b63a4 <_ZNKSt9type_info14__is_pointer_pEv>:
   b63a4:	2000      	movs	r0, #0
   b63a6:	4770      	bx	lr

000b63a8 <_ZNKSt9type_infoeqERKS_>:
   b63a8:	4281      	cmp	r1, r0
   b63aa:	b508      	push	{r3, lr}
   b63ac:	d00e      	beq.n	b63cc <_ZNKSt9type_infoeqERKS_+0x24>
   b63ae:	6840      	ldr	r0, [r0, #4]
   b63b0:	7803      	ldrb	r3, [r0, #0]
   b63b2:	2b2a      	cmp	r3, #42	; 0x2a
   b63b4:	d00c      	beq.n	b63d0 <_ZNKSt9type_infoeqERKS_+0x28>
   b63b6:	6849      	ldr	r1, [r1, #4]
   b63b8:	780b      	ldrb	r3, [r1, #0]
   b63ba:	2b2a      	cmp	r3, #42	; 0x2a
   b63bc:	bf08      	it	eq
   b63be:	3101      	addeq	r1, #1
   b63c0:	f000 fc9e 	bl	b6d00 <strcmp>
   b63c4:	fab0 f080 	clz	r0, r0
   b63c8:	0940      	lsrs	r0, r0, #5
   b63ca:	bd08      	pop	{r3, pc}
   b63cc:	2001      	movs	r0, #1
   b63ce:	e7fc      	b.n	b63ca <_ZNKSt9type_infoeqERKS_+0x22>
   b63d0:	2000      	movs	r0, #0
   b63d2:	e7fa      	b.n	b63ca <_ZNKSt9type_infoeqERKS_+0x22>

000b63d4 <__aeabi_drsub>:
   b63d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b63d8:	e002      	b.n	b63e0 <__adddf3>
   b63da:	bf00      	nop

000b63dc <__aeabi_dsub>:
   b63dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b63e0 <__adddf3>:
   b63e0:	b530      	push	{r4, r5, lr}
   b63e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b63e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b63ea:	ea94 0f05 	teq	r4, r5
   b63ee:	bf08      	it	eq
   b63f0:	ea90 0f02 	teqeq	r0, r2
   b63f4:	bf1f      	itttt	ne
   b63f6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b63fa:	ea55 0c02 	orrsne.w	ip, r5, r2
   b63fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6402:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6406:	f000 80e2 	beq.w	b65ce <__adddf3+0x1ee>
   b640a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b640e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6412:	bfb8      	it	lt
   b6414:	426d      	neglt	r5, r5
   b6416:	dd0c      	ble.n	b6432 <__adddf3+0x52>
   b6418:	442c      	add	r4, r5
   b641a:	ea80 0202 	eor.w	r2, r0, r2
   b641e:	ea81 0303 	eor.w	r3, r1, r3
   b6422:	ea82 0000 	eor.w	r0, r2, r0
   b6426:	ea83 0101 	eor.w	r1, r3, r1
   b642a:	ea80 0202 	eor.w	r2, r0, r2
   b642e:	ea81 0303 	eor.w	r3, r1, r3
   b6432:	2d36      	cmp	r5, #54	; 0x36
   b6434:	bf88      	it	hi
   b6436:	bd30      	pophi	{r4, r5, pc}
   b6438:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b643c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6440:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6444:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6448:	d002      	beq.n	b6450 <__adddf3+0x70>
   b644a:	4240      	negs	r0, r0
   b644c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6450:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6454:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6458:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b645c:	d002      	beq.n	b6464 <__adddf3+0x84>
   b645e:	4252      	negs	r2, r2
   b6460:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6464:	ea94 0f05 	teq	r4, r5
   b6468:	f000 80a7 	beq.w	b65ba <__adddf3+0x1da>
   b646c:	f1a4 0401 	sub.w	r4, r4, #1
   b6470:	f1d5 0e20 	rsbs	lr, r5, #32
   b6474:	db0d      	blt.n	b6492 <__adddf3+0xb2>
   b6476:	fa02 fc0e 	lsl.w	ip, r2, lr
   b647a:	fa22 f205 	lsr.w	r2, r2, r5
   b647e:	1880      	adds	r0, r0, r2
   b6480:	f141 0100 	adc.w	r1, r1, #0
   b6484:	fa03 f20e 	lsl.w	r2, r3, lr
   b6488:	1880      	adds	r0, r0, r2
   b648a:	fa43 f305 	asr.w	r3, r3, r5
   b648e:	4159      	adcs	r1, r3
   b6490:	e00e      	b.n	b64b0 <__adddf3+0xd0>
   b6492:	f1a5 0520 	sub.w	r5, r5, #32
   b6496:	f10e 0e20 	add.w	lr, lr, #32
   b649a:	2a01      	cmp	r2, #1
   b649c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b64a0:	bf28      	it	cs
   b64a2:	f04c 0c02 	orrcs.w	ip, ip, #2
   b64a6:	fa43 f305 	asr.w	r3, r3, r5
   b64aa:	18c0      	adds	r0, r0, r3
   b64ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b64b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b64b4:	d507      	bpl.n	b64c6 <__adddf3+0xe6>
   b64b6:	f04f 0e00 	mov.w	lr, #0
   b64ba:	f1dc 0c00 	rsbs	ip, ip, #0
   b64be:	eb7e 0000 	sbcs.w	r0, lr, r0
   b64c2:	eb6e 0101 	sbc.w	r1, lr, r1
   b64c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b64ca:	d31b      	bcc.n	b6504 <__adddf3+0x124>
   b64cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b64d0:	d30c      	bcc.n	b64ec <__adddf3+0x10c>
   b64d2:	0849      	lsrs	r1, r1, #1
   b64d4:	ea5f 0030 	movs.w	r0, r0, rrx
   b64d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b64dc:	f104 0401 	add.w	r4, r4, #1
   b64e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b64e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b64e8:	f080 809a 	bcs.w	b6620 <__adddf3+0x240>
   b64ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b64f0:	bf08      	it	eq
   b64f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b64f6:	f150 0000 	adcs.w	r0, r0, #0
   b64fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b64fe:	ea41 0105 	orr.w	r1, r1, r5
   b6502:	bd30      	pop	{r4, r5, pc}
   b6504:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6508:	4140      	adcs	r0, r0
   b650a:	eb41 0101 	adc.w	r1, r1, r1
   b650e:	3c01      	subs	r4, #1
   b6510:	bf28      	it	cs
   b6512:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6516:	d2e9      	bcs.n	b64ec <__adddf3+0x10c>
   b6518:	f091 0f00 	teq	r1, #0
   b651c:	bf04      	itt	eq
   b651e:	4601      	moveq	r1, r0
   b6520:	2000      	moveq	r0, #0
   b6522:	fab1 f381 	clz	r3, r1
   b6526:	bf08      	it	eq
   b6528:	3320      	addeq	r3, #32
   b652a:	f1a3 030b 	sub.w	r3, r3, #11
   b652e:	f1b3 0220 	subs.w	r2, r3, #32
   b6532:	da0c      	bge.n	b654e <__adddf3+0x16e>
   b6534:	320c      	adds	r2, #12
   b6536:	dd08      	ble.n	b654a <__adddf3+0x16a>
   b6538:	f102 0c14 	add.w	ip, r2, #20
   b653c:	f1c2 020c 	rsb	r2, r2, #12
   b6540:	fa01 f00c 	lsl.w	r0, r1, ip
   b6544:	fa21 f102 	lsr.w	r1, r1, r2
   b6548:	e00c      	b.n	b6564 <__adddf3+0x184>
   b654a:	f102 0214 	add.w	r2, r2, #20
   b654e:	bfd8      	it	le
   b6550:	f1c2 0c20 	rsble	ip, r2, #32
   b6554:	fa01 f102 	lsl.w	r1, r1, r2
   b6558:	fa20 fc0c 	lsr.w	ip, r0, ip
   b655c:	bfdc      	itt	le
   b655e:	ea41 010c 	orrle.w	r1, r1, ip
   b6562:	4090      	lslle	r0, r2
   b6564:	1ae4      	subs	r4, r4, r3
   b6566:	bfa2      	ittt	ge
   b6568:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b656c:	4329      	orrge	r1, r5
   b656e:	bd30      	popge	{r4, r5, pc}
   b6570:	ea6f 0404 	mvn.w	r4, r4
   b6574:	3c1f      	subs	r4, #31
   b6576:	da1c      	bge.n	b65b2 <__adddf3+0x1d2>
   b6578:	340c      	adds	r4, #12
   b657a:	dc0e      	bgt.n	b659a <__adddf3+0x1ba>
   b657c:	f104 0414 	add.w	r4, r4, #20
   b6580:	f1c4 0220 	rsb	r2, r4, #32
   b6584:	fa20 f004 	lsr.w	r0, r0, r4
   b6588:	fa01 f302 	lsl.w	r3, r1, r2
   b658c:	ea40 0003 	orr.w	r0, r0, r3
   b6590:	fa21 f304 	lsr.w	r3, r1, r4
   b6594:	ea45 0103 	orr.w	r1, r5, r3
   b6598:	bd30      	pop	{r4, r5, pc}
   b659a:	f1c4 040c 	rsb	r4, r4, #12
   b659e:	f1c4 0220 	rsb	r2, r4, #32
   b65a2:	fa20 f002 	lsr.w	r0, r0, r2
   b65a6:	fa01 f304 	lsl.w	r3, r1, r4
   b65aa:	ea40 0003 	orr.w	r0, r0, r3
   b65ae:	4629      	mov	r1, r5
   b65b0:	bd30      	pop	{r4, r5, pc}
   b65b2:	fa21 f004 	lsr.w	r0, r1, r4
   b65b6:	4629      	mov	r1, r5
   b65b8:	bd30      	pop	{r4, r5, pc}
   b65ba:	f094 0f00 	teq	r4, #0
   b65be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b65c2:	bf06      	itte	eq
   b65c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b65c8:	3401      	addeq	r4, #1
   b65ca:	3d01      	subne	r5, #1
   b65cc:	e74e      	b.n	b646c <__adddf3+0x8c>
   b65ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b65d2:	bf18      	it	ne
   b65d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b65d8:	d029      	beq.n	b662e <__adddf3+0x24e>
   b65da:	ea94 0f05 	teq	r4, r5
   b65de:	bf08      	it	eq
   b65e0:	ea90 0f02 	teqeq	r0, r2
   b65e4:	d005      	beq.n	b65f2 <__adddf3+0x212>
   b65e6:	ea54 0c00 	orrs.w	ip, r4, r0
   b65ea:	bf04      	itt	eq
   b65ec:	4619      	moveq	r1, r3
   b65ee:	4610      	moveq	r0, r2
   b65f0:	bd30      	pop	{r4, r5, pc}
   b65f2:	ea91 0f03 	teq	r1, r3
   b65f6:	bf1e      	ittt	ne
   b65f8:	2100      	movne	r1, #0
   b65fa:	2000      	movne	r0, #0
   b65fc:	bd30      	popne	{r4, r5, pc}
   b65fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6602:	d105      	bne.n	b6610 <__adddf3+0x230>
   b6604:	0040      	lsls	r0, r0, #1
   b6606:	4149      	adcs	r1, r1
   b6608:	bf28      	it	cs
   b660a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b660e:	bd30      	pop	{r4, r5, pc}
   b6610:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6614:	bf3c      	itt	cc
   b6616:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b661a:	bd30      	popcc	{r4, r5, pc}
   b661c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6620:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6624:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6628:	f04f 0000 	mov.w	r0, #0
   b662c:	bd30      	pop	{r4, r5, pc}
   b662e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6632:	bf1a      	itte	ne
   b6634:	4619      	movne	r1, r3
   b6636:	4610      	movne	r0, r2
   b6638:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b663c:	bf1c      	itt	ne
   b663e:	460b      	movne	r3, r1
   b6640:	4602      	movne	r2, r0
   b6642:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6646:	bf06      	itte	eq
   b6648:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b664c:	ea91 0f03 	teqeq	r1, r3
   b6650:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6654:	bd30      	pop	{r4, r5, pc}
   b6656:	bf00      	nop

000b6658 <__aeabi_ui2d>:
   b6658:	f090 0f00 	teq	r0, #0
   b665c:	bf04      	itt	eq
   b665e:	2100      	moveq	r1, #0
   b6660:	4770      	bxeq	lr
   b6662:	b530      	push	{r4, r5, lr}
   b6664:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6668:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b666c:	f04f 0500 	mov.w	r5, #0
   b6670:	f04f 0100 	mov.w	r1, #0
   b6674:	e750      	b.n	b6518 <__adddf3+0x138>
   b6676:	bf00      	nop

000b6678 <__aeabi_i2d>:
   b6678:	f090 0f00 	teq	r0, #0
   b667c:	bf04      	itt	eq
   b667e:	2100      	moveq	r1, #0
   b6680:	4770      	bxeq	lr
   b6682:	b530      	push	{r4, r5, lr}
   b6684:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6688:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b668c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6690:	bf48      	it	mi
   b6692:	4240      	negmi	r0, r0
   b6694:	f04f 0100 	mov.w	r1, #0
   b6698:	e73e      	b.n	b6518 <__adddf3+0x138>
   b669a:	bf00      	nop

000b669c <__aeabi_f2d>:
   b669c:	0042      	lsls	r2, r0, #1
   b669e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b66a2:	ea4f 0131 	mov.w	r1, r1, rrx
   b66a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b66aa:	bf1f      	itttt	ne
   b66ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b66b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b66b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b66b8:	4770      	bxne	lr
   b66ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b66be:	bf08      	it	eq
   b66c0:	4770      	bxeq	lr
   b66c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b66c6:	bf04      	itt	eq
   b66c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b66cc:	4770      	bxeq	lr
   b66ce:	b530      	push	{r4, r5, lr}
   b66d0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b66d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b66d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b66dc:	e71c      	b.n	b6518 <__adddf3+0x138>
   b66de:	bf00      	nop

000b66e0 <__aeabi_ul2d>:
   b66e0:	ea50 0201 	orrs.w	r2, r0, r1
   b66e4:	bf08      	it	eq
   b66e6:	4770      	bxeq	lr
   b66e8:	b530      	push	{r4, r5, lr}
   b66ea:	f04f 0500 	mov.w	r5, #0
   b66ee:	e00a      	b.n	b6706 <__aeabi_l2d+0x16>

000b66f0 <__aeabi_l2d>:
   b66f0:	ea50 0201 	orrs.w	r2, r0, r1
   b66f4:	bf08      	it	eq
   b66f6:	4770      	bxeq	lr
   b66f8:	b530      	push	{r4, r5, lr}
   b66fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b66fe:	d502      	bpl.n	b6706 <__aeabi_l2d+0x16>
   b6700:	4240      	negs	r0, r0
   b6702:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6706:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b670a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b670e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6712:	f43f aed8 	beq.w	b64c6 <__adddf3+0xe6>
   b6716:	f04f 0203 	mov.w	r2, #3
   b671a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b671e:	bf18      	it	ne
   b6720:	3203      	addne	r2, #3
   b6722:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6726:	bf18      	it	ne
   b6728:	3203      	addne	r2, #3
   b672a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b672e:	f1c2 0320 	rsb	r3, r2, #32
   b6732:	fa00 fc03 	lsl.w	ip, r0, r3
   b6736:	fa20 f002 	lsr.w	r0, r0, r2
   b673a:	fa01 fe03 	lsl.w	lr, r1, r3
   b673e:	ea40 000e 	orr.w	r0, r0, lr
   b6742:	fa21 f102 	lsr.w	r1, r1, r2
   b6746:	4414      	add	r4, r2
   b6748:	e6bd      	b.n	b64c6 <__adddf3+0xe6>
   b674a:	bf00      	nop

000b674c <__aeabi_dmul>:
   b674c:	b570      	push	{r4, r5, r6, lr}
   b674e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b675a:	bf1d      	ittte	ne
   b675c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6760:	ea94 0f0c 	teqne	r4, ip
   b6764:	ea95 0f0c 	teqne	r5, ip
   b6768:	f000 f8de 	bleq	b6928 <__aeabi_dmul+0x1dc>
   b676c:	442c      	add	r4, r5
   b676e:	ea81 0603 	eor.w	r6, r1, r3
   b6772:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6776:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b677a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b677e:	bf18      	it	ne
   b6780:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6784:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6788:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b678c:	d038      	beq.n	b6800 <__aeabi_dmul+0xb4>
   b678e:	fba0 ce02 	umull	ip, lr, r0, r2
   b6792:	f04f 0500 	mov.w	r5, #0
   b6796:	fbe1 e502 	umlal	lr, r5, r1, r2
   b679a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b679e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b67a2:	f04f 0600 	mov.w	r6, #0
   b67a6:	fbe1 5603 	umlal	r5, r6, r1, r3
   b67aa:	f09c 0f00 	teq	ip, #0
   b67ae:	bf18      	it	ne
   b67b0:	f04e 0e01 	orrne.w	lr, lr, #1
   b67b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b67b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b67bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b67c0:	d204      	bcs.n	b67cc <__aeabi_dmul+0x80>
   b67c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b67c6:	416d      	adcs	r5, r5
   b67c8:	eb46 0606 	adc.w	r6, r6, r6
   b67cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b67d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b67d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b67d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b67dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b67e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b67e4:	bf88      	it	hi
   b67e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b67ea:	d81e      	bhi.n	b682a <__aeabi_dmul+0xde>
   b67ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b67f0:	bf08      	it	eq
   b67f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b67f6:	f150 0000 	adcs.w	r0, r0, #0
   b67fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b67fe:	bd70      	pop	{r4, r5, r6, pc}
   b6800:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6804:	ea46 0101 	orr.w	r1, r6, r1
   b6808:	ea40 0002 	orr.w	r0, r0, r2
   b680c:	ea81 0103 	eor.w	r1, r1, r3
   b6810:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6814:	bfc2      	ittt	gt
   b6816:	ebd4 050c 	rsbsgt	r5, r4, ip
   b681a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b681e:	bd70      	popgt	{r4, r5, r6, pc}
   b6820:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6824:	f04f 0e00 	mov.w	lr, #0
   b6828:	3c01      	subs	r4, #1
   b682a:	f300 80ab 	bgt.w	b6984 <__aeabi_dmul+0x238>
   b682e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6832:	bfde      	ittt	le
   b6834:	2000      	movle	r0, #0
   b6836:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b683a:	bd70      	pople	{r4, r5, r6, pc}
   b683c:	f1c4 0400 	rsb	r4, r4, #0
   b6840:	3c20      	subs	r4, #32
   b6842:	da35      	bge.n	b68b0 <__aeabi_dmul+0x164>
   b6844:	340c      	adds	r4, #12
   b6846:	dc1b      	bgt.n	b6880 <__aeabi_dmul+0x134>
   b6848:	f104 0414 	add.w	r4, r4, #20
   b684c:	f1c4 0520 	rsb	r5, r4, #32
   b6850:	fa00 f305 	lsl.w	r3, r0, r5
   b6854:	fa20 f004 	lsr.w	r0, r0, r4
   b6858:	fa01 f205 	lsl.w	r2, r1, r5
   b685c:	ea40 0002 	orr.w	r0, r0, r2
   b6860:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6864:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b686c:	fa21 f604 	lsr.w	r6, r1, r4
   b6870:	eb42 0106 	adc.w	r1, r2, r6
   b6874:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6878:	bf08      	it	eq
   b687a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b687e:	bd70      	pop	{r4, r5, r6, pc}
   b6880:	f1c4 040c 	rsb	r4, r4, #12
   b6884:	f1c4 0520 	rsb	r5, r4, #32
   b6888:	fa00 f304 	lsl.w	r3, r0, r4
   b688c:	fa20 f005 	lsr.w	r0, r0, r5
   b6890:	fa01 f204 	lsl.w	r2, r1, r4
   b6894:	ea40 0002 	orr.w	r0, r0, r2
   b6898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b689c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b68a0:	f141 0100 	adc.w	r1, r1, #0
   b68a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b68a8:	bf08      	it	eq
   b68aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b68ae:	bd70      	pop	{r4, r5, r6, pc}
   b68b0:	f1c4 0520 	rsb	r5, r4, #32
   b68b4:	fa00 f205 	lsl.w	r2, r0, r5
   b68b8:	ea4e 0e02 	orr.w	lr, lr, r2
   b68bc:	fa20 f304 	lsr.w	r3, r0, r4
   b68c0:	fa01 f205 	lsl.w	r2, r1, r5
   b68c4:	ea43 0302 	orr.w	r3, r3, r2
   b68c8:	fa21 f004 	lsr.w	r0, r1, r4
   b68cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b68d0:	fa21 f204 	lsr.w	r2, r1, r4
   b68d4:	ea20 0002 	bic.w	r0, r0, r2
   b68d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b68dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b68e0:	bf08      	it	eq
   b68e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b68e6:	bd70      	pop	{r4, r5, r6, pc}
   b68e8:	f094 0f00 	teq	r4, #0
   b68ec:	d10f      	bne.n	b690e <__aeabi_dmul+0x1c2>
   b68ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b68f2:	0040      	lsls	r0, r0, #1
   b68f4:	eb41 0101 	adc.w	r1, r1, r1
   b68f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b68fc:	bf08      	it	eq
   b68fe:	3c01      	subeq	r4, #1
   b6900:	d0f7      	beq.n	b68f2 <__aeabi_dmul+0x1a6>
   b6902:	ea41 0106 	orr.w	r1, r1, r6
   b6906:	f095 0f00 	teq	r5, #0
   b690a:	bf18      	it	ne
   b690c:	4770      	bxne	lr
   b690e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6912:	0052      	lsls	r2, r2, #1
   b6914:	eb43 0303 	adc.w	r3, r3, r3
   b6918:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b691c:	bf08      	it	eq
   b691e:	3d01      	subeq	r5, #1
   b6920:	d0f7      	beq.n	b6912 <__aeabi_dmul+0x1c6>
   b6922:	ea43 0306 	orr.w	r3, r3, r6
   b6926:	4770      	bx	lr
   b6928:	ea94 0f0c 	teq	r4, ip
   b692c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6930:	bf18      	it	ne
   b6932:	ea95 0f0c 	teqne	r5, ip
   b6936:	d00c      	beq.n	b6952 <__aeabi_dmul+0x206>
   b6938:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b693c:	bf18      	it	ne
   b693e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6942:	d1d1      	bne.n	b68e8 <__aeabi_dmul+0x19c>
   b6944:	ea81 0103 	eor.w	r1, r1, r3
   b6948:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b694c:	f04f 0000 	mov.w	r0, #0
   b6950:	bd70      	pop	{r4, r5, r6, pc}
   b6952:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6956:	bf06      	itte	eq
   b6958:	4610      	moveq	r0, r2
   b695a:	4619      	moveq	r1, r3
   b695c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6960:	d019      	beq.n	b6996 <__aeabi_dmul+0x24a>
   b6962:	ea94 0f0c 	teq	r4, ip
   b6966:	d102      	bne.n	b696e <__aeabi_dmul+0x222>
   b6968:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b696c:	d113      	bne.n	b6996 <__aeabi_dmul+0x24a>
   b696e:	ea95 0f0c 	teq	r5, ip
   b6972:	d105      	bne.n	b6980 <__aeabi_dmul+0x234>
   b6974:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6978:	bf1c      	itt	ne
   b697a:	4610      	movne	r0, r2
   b697c:	4619      	movne	r1, r3
   b697e:	d10a      	bne.n	b6996 <__aeabi_dmul+0x24a>
   b6980:	ea81 0103 	eor.w	r1, r1, r3
   b6984:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6988:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b698c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6990:	f04f 0000 	mov.w	r0, #0
   b6994:	bd70      	pop	{r4, r5, r6, pc}
   b6996:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b699a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b699e:	bd70      	pop	{r4, r5, r6, pc}

000b69a0 <__aeabi_ddiv>:
   b69a0:	b570      	push	{r4, r5, r6, lr}
   b69a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b69a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b69aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b69ae:	bf1d      	ittte	ne
   b69b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b69b4:	ea94 0f0c 	teqne	r4, ip
   b69b8:	ea95 0f0c 	teqne	r5, ip
   b69bc:	f000 f8a7 	bleq	b6b0e <__aeabi_ddiv+0x16e>
   b69c0:	eba4 0405 	sub.w	r4, r4, r5
   b69c4:	ea81 0e03 	eor.w	lr, r1, r3
   b69c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b69cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b69d0:	f000 8088 	beq.w	b6ae4 <__aeabi_ddiv+0x144>
   b69d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b69d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b69dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b69e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b69e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b69e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b69ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b69f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b69f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b69f8:	429d      	cmp	r5, r3
   b69fa:	bf08      	it	eq
   b69fc:	4296      	cmpeq	r6, r2
   b69fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6a02:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6a06:	d202      	bcs.n	b6a0e <__aeabi_ddiv+0x6e>
   b6a08:	085b      	lsrs	r3, r3, #1
   b6a0a:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a0e:	1ab6      	subs	r6, r6, r2
   b6a10:	eb65 0503 	sbc.w	r5, r5, r3
   b6a14:	085b      	lsrs	r3, r3, #1
   b6a16:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6a1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6a22:	ebb6 0e02 	subs.w	lr, r6, r2
   b6a26:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6a2a:	bf22      	ittt	cs
   b6a2c:	1ab6      	subcs	r6, r6, r2
   b6a2e:	4675      	movcs	r5, lr
   b6a30:	ea40 000c 	orrcs.w	r0, r0, ip
   b6a34:	085b      	lsrs	r3, r3, #1
   b6a36:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a3a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6a3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6a42:	bf22      	ittt	cs
   b6a44:	1ab6      	subcs	r6, r6, r2
   b6a46:	4675      	movcs	r5, lr
   b6a48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6a4c:	085b      	lsrs	r3, r3, #1
   b6a4e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a52:	ebb6 0e02 	subs.w	lr, r6, r2
   b6a56:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6a5a:	bf22      	ittt	cs
   b6a5c:	1ab6      	subcs	r6, r6, r2
   b6a5e:	4675      	movcs	r5, lr
   b6a60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6a64:	085b      	lsrs	r3, r3, #1
   b6a66:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a6a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6a6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6a72:	bf22      	ittt	cs
   b6a74:	1ab6      	subcs	r6, r6, r2
   b6a76:	4675      	movcs	r5, lr
   b6a78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6a7c:	ea55 0e06 	orrs.w	lr, r5, r6
   b6a80:	d018      	beq.n	b6ab4 <__aeabi_ddiv+0x114>
   b6a82:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b6a86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6a8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6a8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b6a92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b6a96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6a9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6a9e:	d1c0      	bne.n	b6a22 <__aeabi_ddiv+0x82>
   b6aa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6aa4:	d10b      	bne.n	b6abe <__aeabi_ddiv+0x11e>
   b6aa6:	ea41 0100 	orr.w	r1, r1, r0
   b6aaa:	f04f 0000 	mov.w	r0, #0
   b6aae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6ab2:	e7b6      	b.n	b6a22 <__aeabi_ddiv+0x82>
   b6ab4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6ab8:	bf04      	itt	eq
   b6aba:	4301      	orreq	r1, r0
   b6abc:	2000      	moveq	r0, #0
   b6abe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6ac2:	bf88      	it	hi
   b6ac4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6ac8:	f63f aeaf 	bhi.w	b682a <__aeabi_dmul+0xde>
   b6acc:	ebb5 0c03 	subs.w	ip, r5, r3
   b6ad0:	bf04      	itt	eq
   b6ad2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6ad6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6ada:	f150 0000 	adcs.w	r0, r0, #0
   b6ade:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6ae2:	bd70      	pop	{r4, r5, r6, pc}
   b6ae4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6ae8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6aec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6af0:	bfc2      	ittt	gt
   b6af2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6af6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6afa:	bd70      	popgt	{r4, r5, r6, pc}
   b6afc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6b00:	f04f 0e00 	mov.w	lr, #0
   b6b04:	3c01      	subs	r4, #1
   b6b06:	e690      	b.n	b682a <__aeabi_dmul+0xde>
   b6b08:	ea45 0e06 	orr.w	lr, r5, r6
   b6b0c:	e68d      	b.n	b682a <__aeabi_dmul+0xde>
   b6b0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6b12:	ea94 0f0c 	teq	r4, ip
   b6b16:	bf08      	it	eq
   b6b18:	ea95 0f0c 	teqeq	r5, ip
   b6b1c:	f43f af3b 	beq.w	b6996 <__aeabi_dmul+0x24a>
   b6b20:	ea94 0f0c 	teq	r4, ip
   b6b24:	d10a      	bne.n	b6b3c <__aeabi_ddiv+0x19c>
   b6b26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6b2a:	f47f af34 	bne.w	b6996 <__aeabi_dmul+0x24a>
   b6b2e:	ea95 0f0c 	teq	r5, ip
   b6b32:	f47f af25 	bne.w	b6980 <__aeabi_dmul+0x234>
   b6b36:	4610      	mov	r0, r2
   b6b38:	4619      	mov	r1, r3
   b6b3a:	e72c      	b.n	b6996 <__aeabi_dmul+0x24a>
   b6b3c:	ea95 0f0c 	teq	r5, ip
   b6b40:	d106      	bne.n	b6b50 <__aeabi_ddiv+0x1b0>
   b6b42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6b46:	f43f aefd 	beq.w	b6944 <__aeabi_dmul+0x1f8>
   b6b4a:	4610      	mov	r0, r2
   b6b4c:	4619      	mov	r1, r3
   b6b4e:	e722      	b.n	b6996 <__aeabi_dmul+0x24a>
   b6b50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6b54:	bf18      	it	ne
   b6b56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6b5a:	f47f aec5 	bne.w	b68e8 <__aeabi_dmul+0x19c>
   b6b5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b6b62:	f47f af0d 	bne.w	b6980 <__aeabi_dmul+0x234>
   b6b66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6b6a:	f47f aeeb 	bne.w	b6944 <__aeabi_dmul+0x1f8>
   b6b6e:	e712      	b.n	b6996 <__aeabi_dmul+0x24a>

000b6b70 <__aeabi_d2f>:
   b6b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b6b78:	bf24      	itt	cs
   b6b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b6b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b6b82:	d90d      	bls.n	b6ba0 <__aeabi_d2f+0x30>
   b6b84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b6b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b6b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b6b90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b6b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b6b98:	bf08      	it	eq
   b6b9a:	f020 0001 	biceq.w	r0, r0, #1
   b6b9e:	4770      	bx	lr
   b6ba0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b6ba4:	d121      	bne.n	b6bea <__aeabi_d2f+0x7a>
   b6ba6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b6baa:	bfbc      	itt	lt
   b6bac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b6bb0:	4770      	bxlt	lr
   b6bb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b6bba:	f1c2 0218 	rsb	r2, r2, #24
   b6bbe:	f1c2 0c20 	rsb	ip, r2, #32
   b6bc2:	fa10 f30c 	lsls.w	r3, r0, ip
   b6bc6:	fa20 f002 	lsr.w	r0, r0, r2
   b6bca:	bf18      	it	ne
   b6bcc:	f040 0001 	orrne.w	r0, r0, #1
   b6bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b6bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
   b6bdc:	ea40 000c 	orr.w	r0, r0, ip
   b6be0:	fa23 f302 	lsr.w	r3, r3, r2
   b6be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b6be8:	e7cc      	b.n	b6b84 <__aeabi_d2f+0x14>
   b6bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b6bee:	d107      	bne.n	b6c00 <__aeabi_d2f+0x90>
   b6bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b6bf4:	bf1e      	ittt	ne
   b6bf6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b6bfa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b6bfe:	4770      	bxne	lr
   b6c00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b6c04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b6c08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b6c0c:	4770      	bx	lr
   b6c0e:	bf00      	nop

000b6c10 <atexit>:
   b6c10:	2300      	movs	r3, #0
   b6c12:	4601      	mov	r1, r0
   b6c14:	461a      	mov	r2, r3
   b6c16:	4618      	mov	r0, r3
   b6c18:	f000 b8a0 	b.w	b6d5c <__register_exitproc>

000b6c1c <ldiv>:
   b6c1c:	2900      	cmp	r1, #0
   b6c1e:	b510      	push	{r4, lr}
   b6c20:	fb91 f4f2 	sdiv	r4, r1, r2
   b6c24:	fb02 1314 	mls	r3, r2, r4, r1
   b6c28:	db06      	blt.n	b6c38 <ldiv+0x1c>
   b6c2a:	2b00      	cmp	r3, #0
   b6c2c:	da01      	bge.n	b6c32 <ldiv+0x16>
   b6c2e:	3401      	adds	r4, #1
   b6c30:	1a9b      	subs	r3, r3, r2
   b6c32:	e9c0 4300 	strd	r4, r3, [r0]
   b6c36:	bd10      	pop	{r4, pc}
   b6c38:	2b00      	cmp	r3, #0
   b6c3a:	bfc4      	itt	gt
   b6c3c:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b6c40:	189b      	addgt	r3, r3, r2
   b6c42:	e7f6      	b.n	b6c32 <ldiv+0x16>

000b6c44 <memcpy>:
   b6c44:	440a      	add	r2, r1
   b6c46:	4291      	cmp	r1, r2
   b6c48:	f100 33ff 	add.w	r3, r0, #4294967295
   b6c4c:	d100      	bne.n	b6c50 <memcpy+0xc>
   b6c4e:	4770      	bx	lr
   b6c50:	b510      	push	{r4, lr}
   b6c52:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6c56:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6c5a:	4291      	cmp	r1, r2
   b6c5c:	d1f9      	bne.n	b6c52 <memcpy+0xe>
   b6c5e:	bd10      	pop	{r4, pc}

000b6c60 <memmove>:
   b6c60:	4288      	cmp	r0, r1
   b6c62:	b510      	push	{r4, lr}
   b6c64:	eb01 0402 	add.w	r4, r1, r2
   b6c68:	d902      	bls.n	b6c70 <memmove+0x10>
   b6c6a:	4284      	cmp	r4, r0
   b6c6c:	4623      	mov	r3, r4
   b6c6e:	d807      	bhi.n	b6c80 <memmove+0x20>
   b6c70:	1e43      	subs	r3, r0, #1
   b6c72:	42a1      	cmp	r1, r4
   b6c74:	d008      	beq.n	b6c88 <memmove+0x28>
   b6c76:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
   b6c7e:	e7f8      	b.n	b6c72 <memmove+0x12>
   b6c80:	4402      	add	r2, r0
   b6c82:	4601      	mov	r1, r0
   b6c84:	428a      	cmp	r2, r1
   b6c86:	d100      	bne.n	b6c8a <memmove+0x2a>
   b6c88:	bd10      	pop	{r4, pc}
   b6c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b6c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b6c92:	e7f7      	b.n	b6c84 <memmove+0x24>

000b6c94 <memset>:
   b6c94:	4402      	add	r2, r0
   b6c96:	4603      	mov	r3, r0
   b6c98:	4293      	cmp	r3, r2
   b6c9a:	d100      	bne.n	b6c9e <memset+0xa>
   b6c9c:	4770      	bx	lr
   b6c9e:	f803 1b01 	strb.w	r1, [r3], #1
   b6ca2:	e7f9      	b.n	b6c98 <memset+0x4>

000b6ca4 <srand>:
   b6ca4:	b538      	push	{r3, r4, r5, lr}
   b6ca6:	4b10      	ldr	r3, [pc, #64]	; (b6ce8 <srand+0x44>)
   b6ca8:	681d      	ldr	r5, [r3, #0]
   b6caa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6cac:	4604      	mov	r4, r0
   b6cae:	b9b3      	cbnz	r3, b6cde <srand+0x3a>
   b6cb0:	2018      	movs	r0, #24
   b6cb2:	f7fe f98b 	bl	b4fcc <malloc>
   b6cb6:	4602      	mov	r2, r0
   b6cb8:	63a8      	str	r0, [r5, #56]	; 0x38
   b6cba:	b920      	cbnz	r0, b6cc6 <srand+0x22>
   b6cbc:	4b0b      	ldr	r3, [pc, #44]	; (b6cec <srand+0x48>)
   b6cbe:	480c      	ldr	r0, [pc, #48]	; (b6cf0 <srand+0x4c>)
   b6cc0:	2142      	movs	r1, #66	; 0x42
   b6cc2:	f7fe f9a3 	bl	b500c <__assert_func>
   b6cc6:	490b      	ldr	r1, [pc, #44]	; (b6cf4 <srand+0x50>)
   b6cc8:	4b0b      	ldr	r3, [pc, #44]	; (b6cf8 <srand+0x54>)
   b6cca:	e9c0 1300 	strd	r1, r3, [r0]
   b6cce:	4b0b      	ldr	r3, [pc, #44]	; (b6cfc <srand+0x58>)
   b6cd0:	6083      	str	r3, [r0, #8]
   b6cd2:	230b      	movs	r3, #11
   b6cd4:	8183      	strh	r3, [r0, #12]
   b6cd6:	2100      	movs	r1, #0
   b6cd8:	2001      	movs	r0, #1
   b6cda:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6cde:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6ce0:	2200      	movs	r2, #0
   b6ce2:	611c      	str	r4, [r3, #16]
   b6ce4:	615a      	str	r2, [r3, #20]
   b6ce6:	bd38      	pop	{r3, r4, r5, pc}
   b6ce8:	2003e4f4 	.word	0x2003e4f4
   b6cec:	000b74ad 	.word	0x000b74ad
   b6cf0:	000b74c4 	.word	0x000b74c4
   b6cf4:	abcd330e 	.word	0xabcd330e
   b6cf8:	e66d1234 	.word	0xe66d1234
   b6cfc:	0005deec 	.word	0x0005deec

000b6d00 <strcmp>:
   b6d00:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6d04:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6d08:	2a01      	cmp	r2, #1
   b6d0a:	bf28      	it	cs
   b6d0c:	429a      	cmpcs	r2, r3
   b6d0e:	d0f7      	beq.n	b6d00 <strcmp>
   b6d10:	1ad0      	subs	r0, r2, r3
   b6d12:	4770      	bx	lr

000b6d14 <strcpy>:
   b6d14:	4603      	mov	r3, r0
   b6d16:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6d1a:	f803 2b01 	strb.w	r2, [r3], #1
   b6d1e:	2a00      	cmp	r2, #0
   b6d20:	d1f9      	bne.n	b6d16 <strcpy+0x2>
   b6d22:	4770      	bx	lr

000b6d24 <strlen>:
   b6d24:	4603      	mov	r3, r0
   b6d26:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6d2a:	2a00      	cmp	r2, #0
   b6d2c:	d1fb      	bne.n	b6d26 <strlen+0x2>
   b6d2e:	1a18      	subs	r0, r3, r0
   b6d30:	3801      	subs	r0, #1
   b6d32:	4770      	bx	lr

000b6d34 <strncpy>:
   b6d34:	b510      	push	{r4, lr}
   b6d36:	3901      	subs	r1, #1
   b6d38:	4603      	mov	r3, r0
   b6d3a:	b132      	cbz	r2, b6d4a <strncpy+0x16>
   b6d3c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b6d40:	f803 4b01 	strb.w	r4, [r3], #1
   b6d44:	3a01      	subs	r2, #1
   b6d46:	2c00      	cmp	r4, #0
   b6d48:	d1f7      	bne.n	b6d3a <strncpy+0x6>
   b6d4a:	441a      	add	r2, r3
   b6d4c:	2100      	movs	r1, #0
   b6d4e:	4293      	cmp	r3, r2
   b6d50:	d100      	bne.n	b6d54 <strncpy+0x20>
   b6d52:	bd10      	pop	{r4, pc}
   b6d54:	f803 1b01 	strb.w	r1, [r3], #1
   b6d58:	e7f9      	b.n	b6d4e <strncpy+0x1a>
	...

000b6d5c <__register_exitproc>:
   b6d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6d60:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6e1c <__register_exitproc+0xc0>
   b6d64:	4606      	mov	r6, r0
   b6d66:	f8d8 0000 	ldr.w	r0, [r8]
   b6d6a:	461f      	mov	r7, r3
   b6d6c:	460d      	mov	r5, r1
   b6d6e:	4691      	mov	r9, r2
   b6d70:	f000 f856 	bl	b6e20 <__retarget_lock_acquire_recursive>
   b6d74:	4b25      	ldr	r3, [pc, #148]	; (b6e0c <__register_exitproc+0xb0>)
   b6d76:	681c      	ldr	r4, [r3, #0]
   b6d78:	b934      	cbnz	r4, b6d88 <__register_exitproc+0x2c>
   b6d7a:	4c25      	ldr	r4, [pc, #148]	; (b6e10 <__register_exitproc+0xb4>)
   b6d7c:	601c      	str	r4, [r3, #0]
   b6d7e:	4b25      	ldr	r3, [pc, #148]	; (b6e14 <__register_exitproc+0xb8>)
   b6d80:	b113      	cbz	r3, b6d88 <__register_exitproc+0x2c>
   b6d82:	681b      	ldr	r3, [r3, #0]
   b6d84:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6d88:	6863      	ldr	r3, [r4, #4]
   b6d8a:	2b1f      	cmp	r3, #31
   b6d8c:	dd07      	ble.n	b6d9e <__register_exitproc+0x42>
   b6d8e:	f8d8 0000 	ldr.w	r0, [r8]
   b6d92:	f000 f847 	bl	b6e24 <__retarget_lock_release_recursive>
   b6d96:	f04f 30ff 	mov.w	r0, #4294967295
   b6d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6d9e:	b34e      	cbz	r6, b6df4 <__register_exitproc+0x98>
   b6da0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6da4:	b988      	cbnz	r0, b6dca <__register_exitproc+0x6e>
   b6da6:	4b1c      	ldr	r3, [pc, #112]	; (b6e18 <__register_exitproc+0xbc>)
   b6da8:	b923      	cbnz	r3, b6db4 <__register_exitproc+0x58>
   b6daa:	f8d8 0000 	ldr.w	r0, [r8]
   b6dae:	f000 f838 	bl	b6e22 <__retarget_lock_release>
   b6db2:	e7f0      	b.n	b6d96 <__register_exitproc+0x3a>
   b6db4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6db8:	f7fe f908 	bl	b4fcc <malloc>
   b6dbc:	2800      	cmp	r0, #0
   b6dbe:	d0f4      	beq.n	b6daa <__register_exitproc+0x4e>
   b6dc0:	2300      	movs	r3, #0
   b6dc2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6dc6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6dca:	6863      	ldr	r3, [r4, #4]
   b6dcc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6dd0:	2201      	movs	r2, #1
   b6dd2:	409a      	lsls	r2, r3
   b6dd4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6dd8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6ddc:	4313      	orrs	r3, r2
   b6dde:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6de2:	2e02      	cmp	r6, #2
   b6de4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6de8:	bf02      	ittt	eq
   b6dea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6dee:	4313      	orreq	r3, r2
   b6df0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6df4:	6863      	ldr	r3, [r4, #4]
   b6df6:	f8d8 0000 	ldr.w	r0, [r8]
   b6dfa:	1c5a      	adds	r2, r3, #1
   b6dfc:	3302      	adds	r3, #2
   b6dfe:	6062      	str	r2, [r4, #4]
   b6e00:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6e04:	f000 f80e 	bl	b6e24 <__retarget_lock_release_recursive>
   b6e08:	2000      	movs	r0, #0
   b6e0a:	e7c6      	b.n	b6d9a <__register_exitproc+0x3e>
   b6e0c:	2003e7e8 	.word	0x2003e7e8
   b6e10:	2003e75c 	.word	0x2003e75c
   b6e14:	00000000 	.word	0x00000000
   b6e18:	000b4fcd 	.word	0x000b4fcd
   b6e1c:	2003e558 	.word	0x2003e558

000b6e20 <__retarget_lock_acquire_recursive>:
   b6e20:	4770      	bx	lr

000b6e22 <__retarget_lock_release>:
   b6e22:	4770      	bx	lr

000b6e24 <__retarget_lock_release_recursive>:
   b6e24:	4770      	bx	lr

000b6e26 <link_code_end>:
	...

000b6e28 <dynalib_user>:
   b6e28:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6e38:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b6e48:	7620 7269 7574 6c61 0a00 000a 6f43 6e6e      virtual....Conn
   b6e58:	6365 6974 676e 7420 206f 514d 5454 2e2e     ecting to MQTT..
   b6e68:	202e 4500 7272 726f 4320 646f 2065 7325     . .Error Code %s
   b6e78:	000a 6552 7274 6979 676e 4d20 5451 2054     ..Retrying MQTT 
   b6e88:	6f63 6e6e 6365 6974 6e6f 6920 206e 2035     connection in 5 
   b6e98:	6573 6f63 646e 2e73 2e2e 000a 514d 5454     seconds.....MQTT
   b6ea8:	4320 6e6f 656e 7463 6465 0a21 5000 6e69      Connected!..Pin
   b6eb8:	6967 676e 4d20 5451 2054 000a 6944 6373     ging MQTT ..Disc
   b6ec8:	6e6f 656e 7463 6e69 2067 000a 6f4d 7369     onnecting ..Mois
   b6ed8:	7574 6572 7220 6165 6964 676e 6920 2073     ture reading is 
   b6ee8:	6925 0a20 7300 6e61 6574 3764 6900 2e6f     %i ..santed7.io.
   b6ef8:	6461 6661 7572 7469 632e 6d6f 6100 6f69     adafruit.com.aio
   b6f08:	665f 574f 3765 7236 474c 724a 4377 674e     _fOWe76rLGJrwCNg
   b6f18:	6a4b 6d64 4258 7a59 7478 7056 0057 6173     KjdmXBYzxtVpW.sa
   b6f28:	746e 6465 2f37 6566 6465 2f73 7573 6176     nted7/feeds/suva
   b6f38:	7562 7474 6e6f 6e6f 666f 0066 6173 746e     buttononoff.sant
   b6f48:	6465 2f37 6566 6465 2f73 6f73 6c69 6e65     ed7/feeds/soilen
   b6f58:	4774 6572 6e65 0000                         tGreen..

000b6f60 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   b6f68:	4409 000b 4495 000b 43b5 000b 4463 000b     .D...D...C..cD..
   b6f78:	44a3 000b 43c9 000b 440b 000b 7244 706f     .D...C...D..Drop
   b6f88:	6570 2064 2061 6170 6b63 7465 5500 6b6e     ped a packet.Unk
   b6f98:	6f6e 6e77 6520 7272 726f 4d00 5451 0054     nown error.MQTT.
   b6fa8:	6146 6c69 6465 7420 206f 7573 7362 7263     Failed to subscr
   b6fb8:	6269 0065 6f43 6e6e 6365 6974 6e6f 6620     ibe.Connection f
   b6fc8:	6961 656c 0064 6854 2065 6553 7672 7265     ailed.The Server
   b6fd8:	6420 656f 2073 6f6e 2074 7573 7070 726f      does not suppor
   b6fe8:	2074 6874 2065 656c 6576 206c 666f 7420     t the level of t
   b6ff8:	6568 4d20 5451 2054 7270 746f 636f 6c6f     he MQTT protocol
   b7008:	7220 7165 6575 7473 6465 5400 6568 4320      requested.The C
   b7018:	696c 6e65 2074 6469 6e65 6974 6966 7265     lient identifier
   b7028:	6920 2073 6f63 7272 6365 2074 5455 2d46      is correct UTF-
   b7038:	2038 7562 2074 6f6e 2074 6c61 6f6c 6577     8 but not allowe
   b7048:	2064 7962 7420 6568 5320 7265 6576 0072     d by the Server.
   b7058:	6854 2065 514d 5454 7320 7265 6976 6563     The MQTT service
   b7068:	6920 2073 6e75 7661 6961 616c 6c62 0065      is unavailable.
   b7078:	6854 2065 6164 6174 6920 206e 6874 2065     The data in the 
   b7088:	7375 7265 6e20 6d61 2065 726f 7020 7361     user name or pas
   b7098:	7773 726f 2064 7369 6d20 6c61 6f66 6d72     sword is malform
   b70a8:	6465 4e00 746f 6120 7475 6f68 6972 657a     ed.Not authorize
   b70b8:	2064 6f74 6320 6e6f 656e 7463 4500 6378     d to connect.Exc
   b70c8:	6565 6564 2064 6572 6f63 6e6e 6365 2074     eeded reconnect 
   b70d8:	6172 6574 6c20 6d69 7469 202e 6c50 6165     rate limit. Plea
   b70e8:	6573 7420 7972 6120 6167 6e69 6c20 7461     se try again lat
   b70f8:	7265 002e 6f59 2075 6168 6576 6220 6565     er..You have bee
   b7108:	206e 6162 6e6e 6465 6620 6f72 206d 6f63     n banned from co
   b7118:	6e6e 6365 6974 676e 202e 6c50 6165 6573     nnecting. Please
   b7128:	6320 6e6f 6174 7463 7420 6568 4d20 5451      contact the MQT
   b7138:	2054 6573 7672 7265 6120 6d64 6e69 7369     T server adminis
   b7148:	7274 7461 726f 6620 726f 6d20 726f 2065     trator for more 
   b7158:	6564 6174 6c69 2e73 0000 0000               details.....

000b7164 <_ZTV13Adafruit_MQTT>:
	...
   b7174:	40a1 000b 40a1 000b 40a1 000b 40a1 000b     .@...@...@...@..
   b7184:	40a1 000b                                   .@..

000b7188 <CSWTCH.45>:
   b7188:	6fa8 000b 6fbc 000b 6f95 000b 6fce 000b     .o...o...o...o..
   b7198:	7013 000b 7058 000b 7078 000b 70ab 000b     .p..Xp..xp...p..
   b71a8:	70c5 000b 70fc 000b                         .p...p..

000b71b0 <_ZTV5HX711>:
	...
   b71b8:	49ff 000b 4a01 000b                         .I...J..

000b71c0 <_ZTVN5spark13EthernetClassE>:
	...
   b71c8:	508b 000b 5081 000b 5077 000b 506d 000b     .P...P..wP..mP..
   b71d8:	5061 000b 5055 000b 5e1d 000b 5e25 000b     aP..UP...^..%^..
   b71e8:	5049 000b 5041 000b 5037 000b 502d 000b     IP..AP..7P..-P..
   b71f8:	5e55 000b                                   U^..

000b71fc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b7204:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b7214:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b7224 <_ZTV9IPAddress>:
	...
   b722c:	5475 000b 5465 000b 5467 000b               uT..eT..gT..

000b7238 <_ZTV9USBSerial>:
	...
   b7240:	5587 000b 55ef 000b 55c5 000b 51a1 000b     .U...U...U...Q..
   b7250:	55b7 000b 5589 000b 5599 000b 55e9 000b     .U...U...U...U..
   b7260:	55a9 000b 5581 000b                         .U...U..

000b7268 <_ZTV11USARTSerial>:
	...
   b7270:	5691 000b 56fd 000b 56d5 000b 51a1 000b     .V...V...V...Q..
   b7280:	56a5 000b 56c1 000b 56b3 000b 56cf 000b     .V...V...V...V..
   b7290:	5693 000b 5697 000b                         .V...V..

000b7298 <_ZTV7TwoWire>:
	...
   b72a0:	5735 000b 577f 000b 5757 000b 5737 000b     5W...W..WW..7W..
   b72b0:	575f 000b 5767 000b 576f 000b 5777 000b     _W..gW..oW..wW..
   b72c0:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b72d0:	2072 203d 6425 0000                         r = %d..

000b72d8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b72e0:	584d 000b 5871 000b 5d5b 000b 587f 000b     MX..qX..[]...X..
   b72f0:	5851 000b                                   QX..

000b72f4 <_ZTV9TCPClient>:
	...
   b72fc:	52f5 000b 530d 000b 57c9 000b 57e3 000b     .R...S...W...W..
   b730c:	5bf1 000b 580d 000b 5a67 000b 5841 000b     .[...X..gZ..AX..
   b731c:	5af9 000b 5939 000b 5a95 000b 5ca5 000b     .Z..9Y...Z...\..
   b732c:	5a35 000b 5843 000b 57f5 000b 5885 000b     5Z..CX...W...X..
   b733c:	5919 000b                                   .Y..

000b7340 <_ZTVN5spark9WiFiClassE>:
	...
   b7348:	5dbf 000b 5db5 000b 5dab 000b 5d61 000b     .]...]...]..a]..
   b7358:	5d9f 000b 5d93 000b 5e1d 000b 5e25 000b     .]...]...^..%^..
   b7368:	5d87 000b 5d7f 000b 5d75 000b 5d6b 000b     .]...]..u]..k]..
   b7378:	5e55 000b                                   U^..

000b737c <_ZTVN5spark12NetworkClassE>:
	...
   b7384:	5ddd 000b 5de7 000b 5df1 000b 5dfb 000b     .]...]...]...]..
   b7394:	5e05 000b 5e11 000b 5e1d 000b 5e25 000b     .^...^...^..%^..
   b73a4:	5e2d 000b 5e39 000b 5e41 000b 5e4b 000b     -^..9^..A^..K^..
   b73b4:	5e55 000b                                   U^..

000b73b8 <_ZSt7nothrow>:
	...

000b73b9 <_ZTSSt19_Sp_make_shared_tag>:
   b73b9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b73c9:	6572 5f64 6174 0067 0000                     red_tag....

000b73d4 <_ZTISt19_Sp_make_shared_tag>:
   b73d4:	7414 000b 73b9 000b                         .t...s..

000b73dc <_ZTIN10__cxxabiv117__class_type_infoE>:
   b73dc:	7474 000b 73e8 000b 7498 000b               tt...s...t..

000b73e8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b73e8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b73f8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b7408:	0045 0000                                   E...

000b740c <_ZTVN10__cxxabiv117__class_type_infoE>:
   b740c:	0000 0000 73dc 000b 61fd 000b 6211 000b     .....s...a...b..
   b741c:	63a5 000b 63a5 000b 627b 000b 61bd 000b     .c...c..{b...a..
   b742c:	6263 000b 6225 000b 61ef 000b               cb..%b...a..

000b7438 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b7438:	7474 000b 7444 000b 73dc 000b               tt..Dt...s..

000b7444 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b7444:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b7454:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b7464:	666e 456f 0000 0000                         nfoE....

000b746c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b746c:	0000 0000 7438 000b 62a5 000b 62b9 000b     ....8t...b...b..
   b747c:	63a5 000b 63a5 000b 627b 000b 61bd 000b     .c...c..{b...a..
   b748c:	6379 000b 6305 000b 62cd 000b               yc...c...b..

000b7498 <_ZTISt9type_info>:
   b7498:	7414 000b 74a0 000b                         .t...t..

000b74a0 <_ZTSSt9type_info>:
   b74a0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b74b0:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b74c0:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b74d0:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b74e0:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b74f0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7500:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7510:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b7520:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7530:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7541 <link_const_variable_data_end>:
   b7541:	00          	.byte	0x00
	...

000b7544 <link_constructors_location>:
   b7544:	000b4321 	.word	0x000b4321
   b7548:	000b5095 	.word	0x000b5095
   b754c:	000b50bd 	.word	0x000b50bd
   b7550:	000b5191 	.word	0x000b5191
   b7554:	000b52c9 	.word	0x000b52c9
   b7558:	000b52d9 	.word	0x000b52d9
   b755c:	000b5321 	.word	0x000b5321
   b7560:	000b5dc9 	.word	0x000b5dc9
   b7564:	000b5f2d 	.word	0x000b5f2d

000b7568 <link_constructors_end>:
	...
