
c:/Users/vcox/Documents/IoT/SuvaSmartRoom/Midterm2/Midterm2v1/target/4.0.2/argon/Midterm2v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003584  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b75a0  000b75a0  000075a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b75c4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003e4ec  000b75c8  0001e4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000294  2003e55c  2003e55c  0002e55c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7638  000b7638  00027638  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b7660  000b7660  00027660  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00120e9f  00000000  00000000  00027664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00014170  00000000  00000000  00148503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00037213  00000000  00000000  0015c673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002d70  00000000  00000000  00193886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a1a8  00000000  00000000  001965f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d89b  00000000  00000000  001a079e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000429f3  00000000  00000000  001de039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136f63  00000000  00000000  00220a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007f70  00000000  00000000  00357990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fe25 	bl	b6c7c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fe47 	bl	b6ccc <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e4ec 	.word	0x2003e4ec
   b4048:	000b75c8 	.word	0x000b75c8
   b404c:	2003e55c 	.word	0x2003e55c
   b4050:	2003e55c 	.word	0x2003e55c
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 f9eb 	bl	b5438 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b757c 	.word	0x000b757c
   b407c:	000b75a0 	.word	0x000b75a0

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b830 	b.w	b40e4 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f929 	bl	b42dc <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 b98b 	b.w	b53a8 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bfb7 	b.w	b5004 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bfb5 	b.w	b5004 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bfbb 	b.w	b5014 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f000 ff08 	bl	b4ebc <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b4c4d 	.word	0x000b4c4d
   b40b4:	000b6e74 	.word	0x000b6e74

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c8:	b40e      	push	{r1, r2, r3}
   b40ca:	b503      	push	{r0, r1, lr}
   b40cc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ce:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40d6:	f001 f8e2 	bl	b529e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40da:	b002      	add	sp, #8
   b40dc:	f85d eb04 	ldr.w	lr, [sp], #4
   b40e0:	b003      	add	sp, #12
   b40e2:	4770      	bx	lr

000b40e4 <setup>:
//srand(unsigned int seed_value);
//int random = rand();

SYSTEM_MODE(SEMI_AUTOMATIC);

 void setup() {
   b40e4:	b570      	push	{r4, r5, r6, lr}
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b40e6:	4d3f      	ldr	r5, [pc, #252]	; (b41e4 <setup+0x100>)
   // Connect to Internet but not Particle Cloud
  WiFi.on();
  WiFi.connect();
  while(WiFi.connecting()) {
    Serial.printf(".");
   b40e8:	4e3f      	ldr	r6, [pc, #252]	; (b41e8 <setup+0x104>)
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b40ea:	6868      	ldr	r0, [r5, #4]
   b40ec:	2300      	movs	r3, #0
   b40ee:	461a      	mov	r2, r3
   b40f0:	4619      	mov	r1, r3
   b40f2:	f000 ff37 	bl	b4f64 <network_on>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b40f6:	2300      	movs	r3, #0
   b40f8:	6868      	ldr	r0, [r5, #4]
   b40fa:	461a      	mov	r2, r3
   b40fc:	4619      	mov	r1, r3
   b40fe:	f000 ff11 	bl	b4f24 <network_connect>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   b4102:	2200      	movs	r2, #0
   b4104:	6868      	ldr	r0, [r5, #4]
   b4106:	4611      	mov	r1, r2
   b4108:	f000 ff14 	bl	b4f34 <network_connecting>
  while(WiFi.connecting()) {
   b410c:	4604      	mov	r4, r0
   b410e:	b128      	cbz	r0, b411c <setup+0x38>
    Serial.printf(".");
   b4110:	f001 fab4 	bl	b567c <_Z16_fetch_usbserialv>
   b4114:	4631      	mov	r1, r6
   b4116:	f7ff ffd7 	bl	b40c8 <_ZN5Print6printfEPKcz>
  while(WiFi.connecting()) {
   b411a:	e7f2      	b.n	b4102 <setup+0x1e>
  }
  Serial.printf("\n\n");
   b411c:	f001 faae 	bl	b567c <_Z16_fetch_usbserialv>
   b4120:	4932      	ldr	r1, [pc, #200]	; (b41ec <setup+0x108>)
   b4122:	f7ff ffd1 	bl	b40c8 <_ZN5Print6printfEPKcz>
  pinMode(soilentGreen, INPUT);
   b4126:	4b32      	ldr	r3, [pc, #200]	; (b41f0 <setup+0x10c>)
   b4128:	4621      	mov	r1, r4
   b412a:	8818      	ldrh	r0, [r3, #0]
   b412c:	f001 ff62 	bl	b5ff4 <pinMode>
  pinMode(pumpPIN, OUTPUT);
   b4130:	2101      	movs	r1, #1
   b4132:	200b      	movs	r0, #11
   b4134:	f001 ff5e 	bl	b5ff4 <pinMode>
  Serial.begin(9600);
   b4138:	f001 faa0 	bl	b567c <_Z16_fetch_usbserialv>
   b413c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4140:	f001 fa8c 	bl	b565c <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b4144:	4620      	mov	r0, r4
   b4146:	f000 fd91 	bl	b4c6c <hal_timer_millis>
        while (_while() && !_condition()) {
   b414a:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b414e:	4604      	mov	r4, r0
   b4150:	2000      	movs	r0, #0
   b4152:	f000 fd8b 	bl	b4c6c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4156:	1b00      	subs	r0, r0, r4
   b4158:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b415c:	42a8      	cmp	r0, r5
   b415e:	f171 0300 	sbcs.w	r3, r1, #0
   b4162:	d207      	bcs.n	b4174 <setup+0x90>
  waitFor(Serial.isConnected,10000);
   b4164:	f001 fa8a 	bl	b567c <_Z16_fetch_usbserialv>
   b4168:	f001 fa7c 	bl	b5664 <_ZN9USBSerial11isConnectedEv>
   b416c:	b910      	cbnz	r0, b4174 <setup+0x90>
            spark_process();
   b416e:	f000 ff39 	bl	b4fe4 <spark_process>
        while (_while() && !_condition()) {
   b4172:	e7ed      	b.n	b4150 <setup+0x6c>
   b4174:	f001 fa82 	bl	b567c <_Z16_fetch_usbserialv>
   b4178:	f001 fa74 	bl	b5664 <_ZN9USBSerial11isConnectedEv>
  //Serial.print("Ready to Go");
  digitalWrite(pumpPIN,HIGH);
   b417c:	2101      	movs	r1, #1
   b417e:	200b      	movs	r0, #11
   b4180:	f001 ff49 	bl	b6016 <digitalWrite>
  delay(6000);
   b4184:	f241 7070 	movw	r0, #6000	; 0x1770
   b4188:	f001 f8cc 	bl	b5324 <delay>
  digitalWrite(pumpPIN,LOW);
   b418c:	2100      	movs	r1, #0
   b418e:	200b      	movs	r0, #11
   b4190:	f001 ff41 	bl	b6016 <digitalWrite>
  delay(6000);
   b4194:	f241 7070 	movw	r0, #6000	; 0x1770
   b4198:	f001 f8c4 	bl	b5324 <delay>
  digitalWrite(pumpPIN,HIGH);
   b419c:	2101      	movs	r1, #1
   b419e:	200b      	movs	r0, #11
   b41a0:	f001 ff39 	bl	b6016 <digitalWrite>
  delay(6000);
   b41a4:	f241 7070 	movw	r0, #6000	; 0x1770
   b41a8:	f001 f8bc 	bl	b5324 <delay>
  digitalWrite(pumpPIN,LOW);
   b41ac:	2100      	movs	r1, #0
   b41ae:	200b      	movs	r0, #11
   b41b0:	f001 ff31 	bl	b6016 <digitalWrite>



  // Setup MQTT subscription
  mqtt.subscribe(&subFeed);//must tell Argon to subscribe
   b41b4:	490f      	ldr	r1, [pc, #60]	; (b41f4 <setup+0x110>)
   b41b6:	4810      	ldr	r0, [pc, #64]	; (b41f8 <setup+0x114>)
   b41b8:	f000 fa7a 	bl	b46b0 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>

  
 myScale.set_scale(); // initialize loadcell
   b41bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   b41c0:	480e      	ldr	r0, [pc, #56]	; (b41fc <setup+0x118>)
   b41c2:	f000 fcf0 	bl	b4ba6 <_ZN5HX7119set_scaleEf>
 delay(5000); // this is time for the loadcell settle
   b41c6:	f241 3088 	movw	r0, #5000	; 0x1388
   b41ca:	f001 f8ab 	bl	b5324 <delay>
 myScale.tare(29.25); // set the tare weight (or zero )
   b41ce:	480b      	ldr	r0, [pc, #44]	; (b41fc <setup+0x118>)
   b41d0:	211d      	movs	r1, #29
   b41d2:	f000 fce2 	bl	b4b9a <_ZN5HX7114tareEh>
 myScale.set_scale(CAL_FACTOR); // adjust when calibrating scale to desired units
 
 
 }
   b41d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 myScale.set_scale(CAL_FACTOR); // adjust when calibrating scale to desired units
   b41da:	ed9f 0a09 	vldr	s0, [pc, #36]	; b4200 <setup+0x11c>
   b41de:	4807      	ldr	r0, [pc, #28]	; (b41fc <setup+0x118>)
   b41e0:	f000 bce1 	b.w	b4ba6 <_ZN5HX7119set_scaleEf>
   b41e4:	2003e70c 	.word	0x2003e70c
   b41e8:	000b7132 	.word	0x000b7132
   b41ec:	000b6e89 	.word	0x000b6e89
   b41f0:	2003e4ec 	.word	0x2003e4ec
   b41f4:	2003e67c 	.word	0x2003e67c
   b41f8:	2003e58c 	.word	0x2003e58c
   b41fc:	2003e660 	.word	0x2003e660
   b4200:	42be0000 	.word	0x42be0000

000b4204 <_Z12MQTT_connectv>:
  }
}

// Function to connect and reconnect as necessary to the MQTT server.
// Should be called in the loop function and it will take care if connecting.
void MQTT_connect() {
   b4204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int8_t ret;
 
  // Return if already connected.
  if (mqtt.connected()) {
   b4208:	4818      	ldr	r0, [pc, #96]	; (b426c <_Z12MQTT_connectv+0x68>)
   b420a:	f000 f8ef 	bl	b43ec <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   b420e:	bb58      	cbnz	r0, b4268 <_Z12MQTT_connectv+0x64>
    return;
  }
 
  Serial.print("Connecting to MQTT... ");
   b4210:	f001 fa34 	bl	b567c <_Z16_fetch_usbserialv>
   b4214:	4916      	ldr	r1, [pc, #88]	; (b4270 <_Z12MQTT_connectv+0x6c>)
 
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b4216:	4e15      	ldr	r6, [pc, #84]	; (b426c <_Z12MQTT_connectv+0x68>)
       Serial.printf("Error Code %s\n",mqtt.connectErrorString(ret));
   b4218:	f8df 8060 	ldr.w	r8, [pc, #96]	; b427c <_Z12MQTT_connectv+0x78>
       Serial.printf("Retrying MQTT connection in 5 seconds...\n");
   b421c:	4f15      	ldr	r7, [pc, #84]	; (b4274 <_Z12MQTT_connectv+0x70>)
  Serial.print("Connecting to MQTT... ");
   b421e:	f001 f803 	bl	b5228 <_ZN5Print5printEPKc>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b4222:	4812      	ldr	r0, [pc, #72]	; (b426c <_Z12MQTT_connectv+0x68>)
   b4224:	f000 fb8f 	bl	b4946 <_ZN13Adafruit_MQTT7connectEv>
   b4228:	4604      	mov	r4, r0
   b422a:	b1c0      	cbz	r0, b425e <_Z12MQTT_connectv+0x5a>
       Serial.printf("Error Code %s\n",mqtt.connectErrorString(ret));
   b422c:	f001 fa26 	bl	b567c <_Z16_fetch_usbserialv>
   b4230:	4621      	mov	r1, r4
   b4232:	4605      	mov	r5, r0
   b4234:	4630      	mov	r0, r6
   b4236:	f000 fa19 	bl	b466c <_ZN13Adafruit_MQTT18connectErrorStringEa>
   b423a:	4641      	mov	r1, r8
   b423c:	4602      	mov	r2, r0
   b423e:	4628      	mov	r0, r5
   b4240:	f7ff ff42 	bl	b40c8 <_ZN5Print6printfEPKcz>
       Serial.printf("Retrying MQTT connection in 5 seconds...\n");
   b4244:	f001 fa1a 	bl	b567c <_Z16_fetch_usbserialv>
   b4248:	4639      	mov	r1, r7
   b424a:	f7ff ff3d 	bl	b40c8 <_ZN5Print6printfEPKcz>
       mqtt.disconnect();
   b424e:	4630      	mov	r0, r6
   b4250:	f000 fa1a 	bl	b4688 <_ZN13Adafruit_MQTT10disconnectEv>
       delay(5000);  // wait 5 seconds and try again
   b4254:	f241 3088 	movw	r0, #5000	; 0x1388
   b4258:	f001 f864 	bl	b5324 <delay>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b425c:	e7e1      	b.n	b4222 <_Z12MQTT_connectv+0x1e>
  }
  Serial.printf("MQTT Connected!\n");
   b425e:	f001 fa0d 	bl	b567c <_Z16_fetch_usbserialv>
   b4262:	4905      	ldr	r1, [pc, #20]	; (b4278 <_Z12MQTT_connectv+0x74>)
   b4264:	f7ff ff30 	bl	b40c8 <_ZN5Print6printfEPKcz>
}
   b4268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b426c:	2003e58c 	.word	0x2003e58c
   b4270:	000b6e8c 	.word	0x000b6e8c
   b4274:	000b6eb2 	.word	0x000b6eb2
   b4278:	000b6edc 	.word	0x000b6edc
   b427c:	000b6ea3 	.word	0x000b6ea3

000b4280 <_Z9MQTT_pingv>:

bool MQTT_ping() {
   b4280:	b538      	push	{r3, r4, r5, lr}
  static unsigned int last;
  bool pingStatus;

  //keep the connection alive

  if ((millis()-last)>120000) {
   b4282:	4d11      	ldr	r5, [pc, #68]	; (b42c8 <_Z9MQTT_pingv+0x48>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4284:	f000 fcea 	bl	b4c5c <HAL_Timer_Get_Milli_Seconds>
   b4288:	682b      	ldr	r3, [r5, #0]
   b428a:	1ac0      	subs	r0, r0, r3
   b428c:	4b0f      	ldr	r3, [pc, #60]	; (b42cc <_Z9MQTT_pingv+0x4c>)
   b428e:	4298      	cmp	r0, r3
bool MQTT_ping() {
   b4290:	f04f 0400 	mov.w	r4, #0
  if ((millis()-last)>120000) {
   b4294:	d915      	bls.n	b42c2 <_Z9MQTT_pingv+0x42>
      Serial.printf("Pinging MQTT \n");
   b4296:	f001 f9f1 	bl	b567c <_Z16_fetch_usbserialv>
   b429a:	490d      	ldr	r1, [pc, #52]	; (b42d0 <_Z9MQTT_pingv+0x50>)
   b429c:	f7ff ff14 	bl	b40c8 <_ZN5Print6printfEPKcz>
      pingStatus = mqtt.ping();
   b42a0:	480c      	ldr	r0, [pc, #48]	; (b42d4 <_Z9MQTT_pingv+0x54>)
   b42a2:	2101      	movs	r1, #1
   b42a4:	f000 fa1f 	bl	b46e6 <_ZN13Adafruit_MQTT4pingEh>
      if(!pingStatus) {
   b42a8:	4604      	mov	r4, r0
   b42aa:	b938      	cbnz	r0, b42bc <_Z9MQTT_pingv+0x3c>
        Serial.printf("Disconnecting \n");
   b42ac:	f001 f9e6 	bl	b567c <_Z16_fetch_usbserialv>
   b42b0:	4909      	ldr	r1, [pc, #36]	; (b42d8 <_Z9MQTT_pingv+0x58>)
   b42b2:	f7ff ff09 	bl	b40c8 <_ZN5Print6printfEPKcz>
        mqtt.disconnect();
   b42b6:	4807      	ldr	r0, [pc, #28]	; (b42d4 <_Z9MQTT_pingv+0x54>)
   b42b8:	f000 f9e6 	bl	b4688 <_ZN13Adafruit_MQTT10disconnectEv>
   b42bc:	f000 fcce 	bl	b4c5c <HAL_Timer_Get_Milli_Seconds>
      }
      last = millis();
   b42c0:	6028      	str	r0, [r5, #0]
  }
  return pingStatus;
}
   b42c2:	4620      	mov	r0, r4
   b42c4:	bd38      	pop	{r3, r4, r5, pc}
   b42c6:	bf00      	nop
   b42c8:	2003e584 	.word	0x2003e584
   b42cc:	0001d4c0 	.word	0x0001d4c0
   b42d0:	000b6eed 	.word	0x000b6eed
   b42d4:	2003e58c 	.word	0x2003e58c
   b42d8:	000b6efc 	.word	0x000b6efc

000b42dc <loop>:
 void loop () {
   b42dc:	b538      	push	{r3, r4, r5, lr}
  soilentGreen=analogRead(soilentGreen);
   b42de:	4c17      	ldr	r4, [pc, #92]	; (b433c <loop+0x60>)
  if((millis()-lastTime > 6000)) {
   b42e0:	4d17      	ldr	r5, [pc, #92]	; (b4340 <loop+0x64>)
  soilentGreen=analogRead(soilentGreen);
   b42e2:	8820      	ldrh	r0, [r4, #0]
   b42e4:	f001 fec3 	bl	b606e <analogRead>
   b42e8:	6020      	str	r0, [r4, #0]
  MQTT_connect();
   b42ea:	f7ff ff8b 	bl	b4204 <_Z12MQTT_connectv>
  MQTT_ping();
   b42ee:	f7ff ffc7 	bl	b4280 <_Z9MQTT_pingv>
 weight = myScale.get_units(SAMPLES); // return weight in units set by set_scale ();
   b42f2:	210a      	movs	r1, #10
   b42f4:	4813      	ldr	r0, [pc, #76]	; (b4344 <loop+0x68>)
   b42f6:	f000 fc3c 	bl	b4b72 <_ZN5HX7119get_unitsEh>
   b42fa:	4b13      	ldr	r3, [pc, #76]	; (b4348 <loop+0x6c>)
 delay(5000); // gonna wait between readings
   b42fc:	f241 3088 	movw	r0, #5000	; 0x1388
 weight = myScale.get_units(SAMPLES); // return weight in units set by set_scale ();
   b4300:	ed83 0a00 	vstr	s0, [r3]
 delay(5000); // gonna wait between readings
   b4304:	f001 f80e 	bl	b5324 <delay>
   b4308:	f000 fca8 	bl	b4c5c <HAL_Timer_Get_Milli_Seconds>
  if((millis()-lastTime > 6000)) {
   b430c:	682b      	ldr	r3, [r5, #0]
   b430e:	1ac0      	subs	r0, r0, r3
   b4310:	f241 7370 	movw	r3, #6000	; 0x1770
   b4314:	4298      	cmp	r0, r3
   b4316:	d910      	bls.n	b433a <loop+0x5e>
    if(mqtt.Update()) {
   b4318:	480c      	ldr	r0, [pc, #48]	; (b434c <loop+0x70>)
   b431a:	f000 f8ed 	bl	b44f8 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   b431e:	b118      	cbz	r0, b4328 <loop+0x4c>
      pubFeed.publish(soilentGreen);
   b4320:	6821      	ldr	r1, [r4, #0]
   b4322:	480b      	ldr	r0, [pc, #44]	; (b4350 <loop+0x74>)
   b4324:	f000 fb6b 	bl	b49fe <_ZN21Adafruit_MQTT_Publish7publishEi>
      Serial.printf("Moisture reading is %i \n",soilentGreen); 
   b4328:	f001 f9a8 	bl	b567c <_Z16_fetch_usbserialv>
   b432c:	6822      	ldr	r2, [r4, #0]
   b432e:	4909      	ldr	r1, [pc, #36]	; (b4354 <loop+0x78>)
   b4330:	f7ff feca 	bl	b40c8 <_ZN5Print6printfEPKcz>
   b4334:	f000 fc92 	bl	b4c5c <HAL_Timer_Get_Milli_Seconds>
    lastTime = millis();
   b4338:	6028      	str	r0, [r5, #0]
}
   b433a:	bd38      	pop	{r3, r4, r5, pc}
   b433c:	2003e4ec 	.word	0x2003e4ec
   b4340:	2003e588 	.word	0x2003e588
   b4344:	2003e660 	.word	0x2003e660
   b4348:	2003e6b4 	.word	0x2003e6b4
   b434c:	2003e58c 	.word	0x2003e58c
   b4350:	2003e670 	.word	0x2003e670
   b4354:	000b6f0c 	.word	0x000b6f0c

000b4358 <_GLOBAL__sub_I_myScale>:
}
   b4358:	b537      	push	{r0, r1, r2, r4, r5, lr}
TCPClient TheClient; 
   b435a:	4d18      	ldr	r5, [pc, #96]	; (b43bc <_GLOBAL__sub_I_myScale+0x64>)
 HX711 myScale (14, 17); // my (2) digital pins [2 are needed]
   b435c:	4818      	ldr	r0, [pc, #96]	; (b43c0 <_GLOBAL__sub_I_myScale+0x68>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   b435e:	4c19      	ldr	r4, [pc, #100]	; (b43c4 <_GLOBAL__sub_I_myScale+0x6c>)
   b4360:	2380      	movs	r3, #128	; 0x80
   b4362:	2211      	movs	r2, #17
   b4364:	210e      	movs	r1, #14
   b4366:	f000 fbd7 	bl	b4b18 <_ZN5HX711C1Ehhh>
TCPClient TheClient; 
   b436a:	4628      	mov	r0, r5
   b436c:	f001 fd00 	bl	b5d70 <_ZN9TCPClientC1Ev>
   b4370:	4b15      	ldr	r3, [pc, #84]	; (b43c8 <_GLOBAL__sub_I_myScale+0x70>)
   b4372:	9300      	str	r3, [sp, #0]
   b4374:	4915      	ldr	r1, [pc, #84]	; (b43cc <_GLOBAL__sub_I_myScale+0x74>)
   b4376:	4b16      	ldr	r3, [pc, #88]	; (b43d0 <_GLOBAL__sub_I_myScale+0x78>)
   b4378:	f240 725b 	movw	r2, #1883	; 0x75b
   b437c:	4620      	mov	r0, r4
   b437e:	f000 f8f1 	bl	b4564 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   b4382:	4b14      	ldr	r3, [pc, #80]	; (b43d4 <_GLOBAL__sub_I_myScale+0x7c>)
   b4384:	6023      	str	r3, [r4, #0]
Adafruit_MQTT_Subscribe subFeed = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/suvabuttononoff"); 
   b4386:	4621      	mov	r1, r4
   b4388:	4a13      	ldr	r2, [pc, #76]	; (b43d8 <_GLOBAL__sub_I_myScale+0x80>)
   b438a:	4814      	ldr	r0, [pc, #80]	; (b43dc <_GLOBAL__sub_I_myScale+0x84>)
   b438c:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
   b4390:	2300      	movs	r3, #0
   b4392:	f000 fb43 	bl	b4a1c <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish pubFeed = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/soilentGreen");
   b4396:	4a12      	ldr	r2, [pc, #72]	; (b43e0 <_GLOBAL__sub_I_myScale+0x88>)
   b4398:	4812      	ldr	r0, [pc, #72]	; (b43e4 <_GLOBAL__sub_I_myScale+0x8c>)
   b439a:	2300      	movs	r3, #0
   b439c:	4621      	mov	r1, r4
   b439e:	f000 fb29 	bl	b49f4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
              error_(SYSTEM_ERROR_NONE) {
   b43a2:	4b11      	ldr	r3, [pc, #68]	; (b43e8 <_GLOBAL__sub_I_myScale+0x90>)
   b43a4:	2200      	movs	r2, #0
   b43a6:	e9c3 2200 	strd	r2, r2, [r3]
        set_system_mode(mode);
   b43aa:	2002      	movs	r0, #2
    SleepResult() {}
   b43ac:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b43b0:	609a      	str	r2, [r3, #8]
}
   b43b2:	b003      	add	sp, #12
   b43b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        set_system_mode(mode);
   b43b8:	f000 bd90 	b.w	b4edc <set_system_mode>
   b43bc:	2003e568 	.word	0x2003e568
   b43c0:	2003e660 	.word	0x2003e660
   b43c4:	2003e58c 	.word	0x2003e58c
   b43c8:	000b6f3d 	.word	0x000b6f3d
   b43cc:	000b6f2d 	.word	0x000b6f2d
   b43d0:	000b6f25 	.word	0x000b6f25
   b43d4:	000b6fa0 	.word	0x000b6fa0
   b43d8:	000b6f5e 	.word	0x000b6f5e
   b43dc:	2003e67c 	.word	0x2003e67c
   b43e0:	000b6f7c 	.word	0x000b6f7c
   b43e4:	2003e670 	.word	0x2003e670
   b43e8:	2003e55c 	.word	0x2003e55c

000b43ec <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   b43ec:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   b43ee:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b43f2:	6803      	ldr	r3, [r0, #0]
   b43f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b43f6:	4798      	blx	r3
}
   b43f8:	3800      	subs	r0, #0
   b43fa:	bf18      	it	ne
   b43fc:	2001      	movne	r0, #1
   b43fe:	bd08      	pop	{r3, pc}

000b4400 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   b4400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4402:	4606      	mov	r6, r0
   b4404:	460f      	mov	r7, r1
   b4406:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   b4408:	b1c4      	cbz	r4, b443c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   b440a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b440e:	6803      	ldr	r3, [r0, #0]
   b4410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4412:	4798      	blx	r3
   b4414:	b908      	cbnz	r0, b441a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   b4416:	2000      	movs	r0, #0
    }
  }
  return true;
}
   b4418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret = client->write(buffer, sendlen);
   b441a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   b441e:	2cfa      	cmp	r4, #250	; 0xfa
   b4420:	6803      	ldr	r3, [r0, #0]
   b4422:	4625      	mov	r5, r4
   b4424:	bfa8      	it	ge
   b4426:	25fa      	movge	r5, #250	; 0xfa
   b4428:	68db      	ldr	r3, [r3, #12]
   b442a:	462a      	mov	r2, r5
   b442c:	4639      	mov	r1, r7
   b442e:	4798      	blx	r3
   b4430:	b283      	uxth	r3, r0
      len -= ret;
   b4432:	1ae4      	subs	r4, r4, r3
      if (ret != sendlen) {
   b4434:	429d      	cmp	r5, r3
      len -= ret;
   b4436:	b2a4      	uxth	r4, r4
      if (ret != sendlen) {
   b4438:	d0e6      	beq.n	b4408 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   b443a:	e7ec      	b.n	b4416 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
  return true;
   b443c:	2001      	movs	r0, #1
   b443e:	e7eb      	b.n	b4418 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x18>

000b4440 <_ZN19Adafruit_MQTT_SPARKD1Ev>:
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   b4440:	4770      	bx	lr

000b4442 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
                                          int16_t timeout) {
   b4442:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4446:	4606      	mov	r6, r0
   b4448:	4688      	mov	r8, r1
   b444a:	4691      	mov	r9, r2
   b444c:	461f      	mov	r7, r3
   b444e:	461d      	mov	r5, r3
  uint16_t len = 0;
   b4450:	2400      	movs	r4, #0
  while (client->connected() && (timeout >= 0)) {
   b4452:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b4456:	6803      	ldr	r3, [r0, #0]
   b4458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b445a:	4798      	blx	r3
   b445c:	b1d0      	cbz	r0, b4494 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   b445e:	2d00      	cmp	r5, #0
   b4460:	db18      	blt.n	b4494 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    while (client->available()) {
   b4462:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b4466:	6803      	ldr	r3, [r0, #0]
   b4468:	691b      	ldr	r3, [r3, #16]
   b446a:	4798      	blx	r3
   b446c:	b160      	cbz	r0, b4488 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      char c = client->read();
   b446e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b4472:	6803      	ldr	r3, [r0, #0]
   b4474:	695b      	ldr	r3, [r3, #20]
   b4476:	4798      	blx	r3
   b4478:	f808 0004 	strb.w	r0, [r8, r4]
      len++;
   b447c:	3401      	adds	r4, #1
   b447e:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   b4480:	454c      	cmp	r4, r9
   b4482:	d007      	beq.n	b4494 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
      timeout = t;  // reset the timeout
   b4484:	463d      	mov	r5, r7
   b4486:	e7ec      	b.n	b4462 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b4488:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b448a:	200a      	movs	r0, #10
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b448c:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b448e:	f000 ff49 	bl	b5324 <delay>
  while (client->connected() && (timeout >= 0)) {
   b4492:	e7de      	b.n	b4452 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
}
   b4494:	4620      	mov	r0, r4
   b4496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b449a <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
bool Adafruit_MQTT_SPARK::connectServer(){
   b449a:	b570      	push	{r4, r5, r6, lr}
   b449c:	4604      	mov	r4, r0
  memset(buffer, 0, sizeof(buffer));
   b449e:	f100 0522 	add.w	r5, r0, #34	; 0x22
   b44a2:	2296      	movs	r2, #150	; 0x96
   b44a4:	2100      	movs	r1, #0
   b44a6:	4628      	mov	r0, r5
   b44a8:	f002 fc10 	bl	b6ccc <memset>
  strcpy((char *)buffer, servername);
   b44ac:	6861      	ldr	r1, [r4, #4]
   b44ae:	4628      	mov	r0, r5
   b44b0:	f002 fc4c 	bl	b6d4c <strcpy>
  int r = client->connect((char *)buffer, portnum);
   b44b4:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b44b8:	8922      	ldrh	r2, [r4, #8]
   b44ba:	6803      	ldr	r3, [r0, #0]
   b44bc:	4629      	mov	r1, r5
   b44be:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   b44c0:	2300      	movs	r3, #0
   b44c2:	47b0      	blx	r6
}
   b44c4:	3800      	subs	r0, #0
   b44c6:	bf18      	it	ne
   b44c8:	2001      	movne	r0, #1
   b44ca:	bd70      	pop	{r4, r5, r6, pc}

000b44cc <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   b44cc:	b510      	push	{r4, lr}
   b44ce:	21d4      	movs	r1, #212	; 0xd4
   b44d0:	4604      	mov	r4, r0
   b44d2:	f7ff fde2 	bl	b409a <_ZdlPvj>
   b44d6:	4620      	mov	r0, r4
   b44d8:	bd10      	pop	{r4, pc}

000b44da <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:
bool Adafruit_MQTT_SPARK::disconnectServer() {
   b44da:	b510      	push	{r4, lr}
   b44dc:	4604      	mov	r4, r0
  if (client->connected()) {
   b44de:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b44e2:	6803      	ldr	r3, [r0, #0]
   b44e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b44e6:	4798      	blx	r3
   b44e8:	b120      	cbz	r0, b44f4 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   b44ea:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b44ee:	6803      	ldr	r3, [r0, #0]
   b44f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b44f2:	4798      	blx	r3
}
   b44f4:	2001      	movs	r0, #1
   b44f6:	bd10      	pop	{r4, pc}

000b44f8 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
{
   b44f8:	b570      	push	{r4, r5, r6, lr}
    if (!connected())
   b44fa:	6803      	ldr	r3, [r0, #0]
   b44fc:	689b      	ldr	r3, [r3, #8]
{
   b44fe:	4604      	mov	r4, r0
    if (!connected())
   b4500:	4798      	blx	r3
   b4502:	b9c8      	cbnz	r0, b4538 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   b4504:	4620      	mov	r0, r4
   b4506:	f000 fa1e 	bl	b4946 <_ZN13Adafruit_MQTT7connectEv>
   b450a:	2504      	movs	r5, #4
   b450c:	b170      	cbz	r0, b452c <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   b450e:	3d01      	subs	r5, #1
   b4510:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b4514:	d00a      	beq.n	b452c <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
            disconnect();
   b4516:	4620      	mov	r0, r4
   b4518:	f000 f8b6 	bl	b4688 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   b451c:	f241 3088 	movw	r0, #5000	; 0x1388
   b4520:	f000 ff00 	bl	b5324 <delay>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   b4524:	4620      	mov	r0, r4
   b4526:	f000 fa0e 	bl	b4946 <_ZN13Adafruit_MQTT7connectEv>
   b452a:	e7ef      	b.n	b450c <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
        if( connected() )
   b452c:	6823      	ldr	r3, [r4, #0]
   b452e:	4620      	mov	r0, r4
   b4530:	689b      	ldr	r3, [r3, #8]
}
   b4532:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if( connected() )
   b4536:	4718      	bx	r3
}
   b4538:	bd70      	pop	{r4, r5, r6, pc}

000b453a <_ZL11stringprintPhPKct.constprop.0>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   b453a:	b513      	push	{r0, r1, r4, lr}
   b453c:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   b453e:	4608      	mov	r0, r1
   b4540:	9101      	str	r1, [sp, #4]
   b4542:	f002 fc0b 	bl	b6d5c <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   b4546:	f3c0 2307 	ubfx	r3, r0, #8, #8
   b454a:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   b454c:	7060      	strb	r0, [r4, #1]
   b454e:	1ca3      	adds	r3, r4, #2
  strncpy((char *)p, s, len);
   b4550:	b284      	uxth	r4, r0
   b4552:	9901      	ldr	r1, [sp, #4]
   b4554:	4622      	mov	r2, r4
   b4556:	4618      	mov	r0, r3
   b4558:	f002 fc08 	bl	b6d6c <strncpy>
  return p+len;
}
   b455c:	4420      	add	r0, r4
   b455e:	b002      	add	sp, #8
   b4560:	bd10      	pop	{r4, pc}
	...

000b4564 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   b4564:	b530      	push	{r4, r5, lr}
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
   b4566:	8102      	strh	r2, [r0, #8]
  clientid = "";
   b4568:	4a0a      	ldr	r2, [pc, #40]	; (b4594 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x30>)
                             const char *pass) {
   b456a:	4d0b      	ldr	r5, [pc, #44]	; (b4598 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x34>)
  username = user;
   b456c:	e9c0 2303 	strd	r2, r3, [r0, #12]
  password = pass;
   b4570:	9b03      	ldr	r3, [sp, #12]
   b4572:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   b4574:	2300      	movs	r3, #0
  servername = server;
   b4576:	e9c0 5100 	strd	r5, r1, [r0]
    subscriptions[i] = 0;
   b457a:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
   b457e:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  }

  will_topic = 0;
  will_payload = 0;
   b4582:	e9c0 3306 	strd	r3, r3, [r0, #24]
    subscriptions[i] = 0;
   b4586:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  will_qos = 0;
   b458a:	8403      	strh	r3, [r0, #32]
  will_retain = 0;

  packet_id_counter = 0;
   b458c:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   b4590:	bd30      	pop	{r4, r5, pc}
   b4592:	bf00      	nop
   b4594:	000b6e8b 	.word	0x000b6e8b
   b4598:	000b71a4 	.word	0x000b71a4

000b459c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b459c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b45a0:	4616      	mov	r6, r2
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   b45a2:	6802      	ldr	r2, [r0, #0]
   b45a4:	b21b      	sxth	r3, r3
   b45a6:	6997      	ldr	r7, [r2, #24]
   b45a8:	9301      	str	r3, [sp, #4]
   b45aa:	2201      	movs	r2, #1
uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b45ac:	4605      	mov	r5, r0
   b45ae:	460c      	mov	r4, r1
  rlen = readPacket(pbuff, 1, timeout);
   b45b0:	47b8      	blx	r7
  if (rlen != 1) return 0;
   b45b2:	b2c7      	uxtb	r7, r0
   b45b4:	2f01      	cmp	r7, #1
   b45b6:	9b01      	ldr	r3, [sp, #4]
   b45b8:	d003      	beq.n	b45c2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x26>
   b45ba:	2000      	movs	r0, #0
    rlen = readPacket(pbuff, value, timeout);
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
}
   b45bc:	b003      	add	sp, #12
   b45be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pbuff++;
   b45c2:	f104 0801 	add.w	r8, r4, #1
  uint32_t multiplier = 1;
   b45c6:	f104 0a05 	add.w	sl, r4, #5
  uint32_t value = 0;
   b45ca:	f04f 0900 	mov.w	r9, #0
    rlen = readPacket(pbuff, 1, timeout);
   b45ce:	682a      	ldr	r2, [r5, #0]
   b45d0:	9301      	str	r3, [sp, #4]
   b45d2:	f8d2 b018 	ldr.w	fp, [r2, #24]
   b45d6:	4641      	mov	r1, r8
   b45d8:	2201      	movs	r2, #1
   b45da:	4628      	mov	r0, r5
   b45dc:	47d8      	blx	fp
    if (rlen != 1) return 0;
   b45de:	b2c0      	uxtb	r0, r0
   b45e0:	2801      	cmp	r0, #1
   b45e2:	d1ea      	bne.n	b45ba <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   b45e4:	f818 2b01 	ldrb.w	r2, [r8], #1
    uint32_t intermediate = encodedByte & 0x7F;
   b45e8:	f002 017f 	and.w	r1, r2, #127	; 0x7f
    if (multiplier > (128UL*128UL*128UL)) {
   b45ec:	45c2      	cmp	sl, r8
    value += intermediate;
   b45ee:	fb01 9907 	mla	r9, r1, r7, r9
    multiplier *= 128;
   b45f2:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   b45f6:	d0e0      	beq.n	b45ba <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
  } while (encodedByte & 0x80);
   b45f8:	f012 0f80 	tst.w	r2, #128	; 0x80
   b45fc:	9b01      	ldr	r3, [sp, #4]
   b45fe:	d1e6      	bne.n	b45ce <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x32>
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b4600:	eba8 0404 	sub.w	r4, r8, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b4604:	b2a7      	uxth	r7, r4
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b4606:	1b34      	subs	r4, r6, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b4608:	682a      	ldr	r2, [r5, #0]
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b460a:	3c01      	subs	r4, #1
   b460c:	454c      	cmp	r4, r9
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b460e:	f8d2 a018 	ldr.w	sl, [r2, #24]
   b4612:	bf3d      	ittte	cc
   b4614:	f106 32ff 	addcc.w	r2, r6, #4294967295
   b4618:	1bd2      	subcc	r2, r2, r7
   b461a:	b292      	uxthcc	r2, r2
    rlen = readPacket(pbuff, value, timeout);
   b461c:	fa1f f289 	uxthcs.w	r2, r9
   b4620:	4641      	mov	r1, r8
   b4622:	4628      	mov	r0, r5
   b4624:	47d0      	blx	sl
   b4626:	b2c0      	uxtb	r0, r0
  return ((pbuff - buffer)+rlen);
   b4628:	4438      	add	r0, r7
   b462a:	b280      	uxth	r0, r0
   b462c:	e7c6      	b.n	b45bc <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x20>
	...

000b4630 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b4630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      ERROR_PRINTLN(F("Dropped a packet"));
   b4634:	f8df 8030 	ldr.w	r8, [pc, #48]	; b4668 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x38>
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b4638:	4605      	mov	r5, r0
   b463a:	460c      	mov	r4, r1
   b463c:	4616      	mov	r6, r2
   b463e:	461f      	mov	r7, r3
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b4640:	463b      	mov	r3, r7
   b4642:	2296      	movs	r2, #150	; 0x96
   b4644:	4621      	mov	r1, r4
   b4646:	4628      	mov	r0, r5
   b4648:	f7ff ffa8 	bl	b459c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   b464c:	b148      	cbz	r0, b4662 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
    if ((buffer[0] >> 4) == waitforpackettype) {
   b464e:	7823      	ldrb	r3, [r4, #0]
   b4650:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   b4654:	d005      	beq.n	b4662 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
      ERROR_PRINTLN(F("Dropped a packet"));
   b4656:	f001 f811 	bl	b567c <_Z16_fetch_usbserialv>
   b465a:	4641      	mov	r1, r8
   b465c:	f000 fdf7 	bl	b524e <_ZN5Print7printlnEPKc>
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b4660:	e7ee      	b.n	b4640 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x10>
}
   b4662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4666:	bf00      	nop
   b4668:	000b6fbc 	.word	0x000b6fbc

000b466c <_ZN13Adafruit_MQTT18connectErrorStringEa>:

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   switch (code) {
   b466c:	3102      	adds	r1, #2
   b466e:	b2c9      	uxtb	r1, r1
   b4670:	2909      	cmp	r1, #9
   b4672:	bf9a      	itte	ls
   b4674:	4b02      	ldrls	r3, [pc, #8]	; (b4680 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   b4676:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   b467a:	4802      	ldrhi	r0, [pc, #8]	; (b4684 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   b467c:	4770      	bx	lr
   b467e:	bf00      	nop
   b4680:	000b71c0 	.word	0x000b71c0
   b4684:	000b6fcd 	.word	0x000b6fcd

000b4688 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   b4688:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   b468a:	23e0      	movs	r3, #224	; 0xe0
   b468c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  uint8_t len = disconnectPacket(buffer);
   b4690:	4601      	mov	r1, r0
  packet[1] = 0;
   b4692:	2300      	movs	r3, #0
   b4694:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
  if (! sendPacket(buffer, len))
   b4698:	f851 3b22 	ldr.w	r3, [r1], #34
bool Adafruit_MQTT::disconnect() {
   b469c:	4604      	mov	r4, r0
  if (! sendPacket(buffer, len))
   b469e:	695b      	ldr	r3, [r3, #20]
   b46a0:	2202      	movs	r2, #2
   b46a2:	4798      	blx	r3
  return disconnectServer();
   b46a4:	6823      	ldr	r3, [r4, #0]
   b46a6:	4620      	mov	r0, r4
   b46a8:	691b      	ldr	r3, [r3, #16]
}
   b46aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return disconnectServer();
   b46ae:	4718      	bx	r3

000b46b0 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b46b0:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   b46b4:	b530      	push	{r4, r5, lr}
   b46b6:	4613      	mov	r3, r2
   b46b8:	f100 04d0 	add.w	r4, r0, #208	; 0xd0
    if (subscriptions[i] == sub) {
   b46bc:	f853 5b04 	ldr.w	r5, [r3], #4
   b46c0:	428d      	cmp	r5, r1
   b46c2:	d009      	beq.n	b46d8 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x28>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b46c4:	42a3      	cmp	r3, r4
   b46c6:	d1f9      	bne.n	b46bc <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   b46c8:	2300      	movs	r3, #0
      if (subscriptions[i] == 0) {
   b46ca:	f852 4b04 	ldr.w	r4, [r2], #4
   b46ce:	b92c      	cbnz	r4, b46dc <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2c>
        subscriptions[i] = sub;
   b46d0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   b46d4:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
      return true;
   b46d8:	2001      	movs	r0, #1
   b46da:	e003      	b.n	b46e4 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b46dc:	3301      	adds	r3, #1
   b46de:	2b05      	cmp	r3, #5
   b46e0:	d1f3      	bne.n	b46ca <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
  return false;
   b46e2:	2000      	movs	r0, #0
}
   b46e4:	bd30      	pop	{r4, r5, pc}

000b46e6 <_ZN13Adafruit_MQTT4pingEh>:
bool Adafruit_MQTT::ping(uint8_t num) {
   b46e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b46ea:	4604      	mov	r4, r0
   b46ec:	460d      	mov	r5, r1
   b46ee:	f04f 0800 	mov.w	r8, #0
    uint8_t len = pingPacket(buffer);
   b46f2:	f100 0722 	add.w	r7, r0, #34	; 0x22
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   b46f6:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  while (num--) {
   b46fa:	b1e5      	cbz	r5, b4736 <_ZN13Adafruit_MQTT4pingEh+0x50>
    if (!sendPacket(buffer, len))
   b46fc:	6823      	ldr	r3, [r4, #0]
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   b46fe:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
  packet[1] = 0;
   b4702:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
    if (!sendPacket(buffer, len))
   b4706:	695b      	ldr	r3, [r3, #20]
   b4708:	2202      	movs	r2, #2
   b470a:	4639      	mov	r1, r7
   b470c:	4620      	mov	r0, r4
   b470e:	4798      	blx	r3
   b4710:	4606      	mov	r6, r0
   b4712:	b168      	cbz	r0, b4730 <_ZN13Adafruit_MQTT4pingEh+0x4a>
    len = processPacketsUntil(buffer, MQTT_CTRL_PINGRESP, PING_TIMEOUT_MS);
   b4714:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b4718:	220d      	movs	r2, #13
   b471a:	4639      	mov	r1, r7
   b471c:	4620      	mov	r0, r4
   b471e:	f7ff ff87 	bl	b4630 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
    if (buffer[0] == (MQTT_CTRL_PINGRESP << 4))
   b4722:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4726:	2bd0      	cmp	r3, #208	; 0xd0
   b4728:	d102      	bne.n	b4730 <_ZN13Adafruit_MQTT4pingEh+0x4a>
}
   b472a:	4630      	mov	r0, r6
   b472c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4730:	3d01      	subs	r5, #1
   b4732:	b2ed      	uxtb	r5, r5
   b4734:	e7e1      	b.n	b46fa <_ZN13Adafruit_MQTT4pingEh+0x14>
  return false;
   b4736:	462e      	mov	r6, r5
   b4738:	e7f7      	b.n	b472a <_ZN13Adafruit_MQTT4pingEh+0x44>
	...

000b473c <_ZN13Adafruit_MQTT13connectPacketEPh>:
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b473c:	b538      	push	{r3, r4, r5, lr}
   b473e:	4605      	mov	r5, r0
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   b4740:	4608      	mov	r0, r1
   b4742:	2310      	movs	r3, #16
   b4744:	f800 3b02 	strb.w	r3, [r0], #2
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b4748:	460c      	mov	r4, r1
    p = stringprint(p, "MQTT");
   b474a:	4929      	ldr	r1, [pc, #164]	; (b47f0 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   b474c:	f7ff fef5 	bl	b453a <_ZL11stringprintPhPKct.constprop.0>
  p[0] = MQTT_PROTOCOL_LEVEL;
   b4750:	2304      	movs	r3, #4
   b4752:	7003      	strb	r3, [r0, #0]
  p[0] = MQTT_CONN_CLEANSESSION;
   b4754:	2302      	movs	r3, #2
   b4756:	7043      	strb	r3, [r0, #1]
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b4758:	69ab      	ldr	r3, [r5, #24]
   b475a:	b18b      	cbz	r3, b4780 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
   b475c:	781b      	ldrb	r3, [r3, #0]
   b475e:	b17b      	cbz	r3, b4780 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
    p[0] |= MQTT_CONN_WILLFLAG;
   b4760:	2306      	movs	r3, #6
   b4762:	7043      	strb	r3, [r0, #1]
    if(will_qos == 1)
   b4764:	f895 3020 	ldrb.w	r3, [r5, #32]
   b4768:	2b01      	cmp	r3, #1
   b476a:	d139      	bne.n	b47e0 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa4>
      p[0] |= MQTT_CONN_WILLQOS_1;
   b476c:	230e      	movs	r3, #14
      p[0] |= MQTT_CONN_WILLQOS_2;
   b476e:	7043      	strb	r3, [r0, #1]
    if(will_retain == 1)
   b4770:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   b4774:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   b4776:	bf02      	ittt	eq
   b4778:	7843      	ldrbeq	r3, [r0, #1]
   b477a:	f043 0320 	orreq.w	r3, r3, #32
   b477e:	7043      	strbeq	r3, [r0, #1]
  if (pgm_read_byte(username) != 0)
   b4780:	692b      	ldr	r3, [r5, #16]
   b4782:	781b      	ldrb	r3, [r3, #0]
   b4784:	b11b      	cbz	r3, b478e <_ZN13Adafruit_MQTT13connectPacketEPh+0x52>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   b4786:	7843      	ldrb	r3, [r0, #1]
   b4788:	f063 037f 	orn	r3, r3, #127	; 0x7f
   b478c:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   b478e:	696b      	ldr	r3, [r5, #20]
   b4790:	781b      	ldrb	r3, [r3, #0]
   b4792:	b11b      	cbz	r3, b479c <_ZN13Adafruit_MQTT13connectPacketEPh+0x60>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   b4794:	7843      	ldrb	r3, [r0, #1]
   b4796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   b479a:	7043      	strb	r3, [r0, #1]
  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   b479c:	2301      	movs	r3, #1
   b479e:	7083      	strb	r3, [r0, #2]
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   b47a0:	232c      	movs	r3, #44	; 0x2c
   b47a2:	70c3      	strb	r3, [r0, #3]
    if (pgm_read_byte(clientid) != 0) {
   b47a4:	68e9      	ldr	r1, [r5, #12]
   b47a6:	780b      	ldrb	r3, [r1, #0]
   b47a8:	b1f3      	cbz	r3, b47e8 <_ZN13Adafruit_MQTT13connectPacketEPh+0xac>
      p = stringprint(p, clientid);
   b47aa:	3004      	adds	r0, #4
   b47ac:	f7ff fec5 	bl	b453a <_ZL11stringprintPhPKct.constprop.0>
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b47b0:	69a9      	ldr	r1, [r5, #24]
   b47b2:	b131      	cbz	r1, b47c2 <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
   b47b4:	780b      	ldrb	r3, [r1, #0]
   b47b6:	b123      	cbz	r3, b47c2 <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
    p = stringprint(p, will_topic);
   b47b8:	f7ff febf 	bl	b453a <_ZL11stringprintPhPKct.constprop.0>
    p = stringprint(p, will_payload);
   b47bc:	69e9      	ldr	r1, [r5, #28]
   b47be:	f7ff febc 	bl	b453a <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(username) != 0) {
   b47c2:	6929      	ldr	r1, [r5, #16]
   b47c4:	780b      	ldrb	r3, [r1, #0]
   b47c6:	b10b      	cbz	r3, b47cc <_ZN13Adafruit_MQTT13connectPacketEPh+0x90>
    p = stringprint(p, username);
   b47c8:	f7ff feb7 	bl	b453a <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(password) != 0) {
   b47cc:	6969      	ldr	r1, [r5, #20]
   b47ce:	780b      	ldrb	r3, [r1, #0]
   b47d0:	b10b      	cbz	r3, b47d6 <_ZN13Adafruit_MQTT13connectPacketEPh+0x9a>
    p = stringprint(p, password);
   b47d2:	f7ff feb2 	bl	b453a <_ZL11stringprintPhPKct.constprop.0>
  len = p - packet;
   b47d6:	1b00      	subs	r0, r0, r4
  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   b47d8:	b2c0      	uxtb	r0, r0
   b47da:	1e83      	subs	r3, r0, #2
   b47dc:	7063      	strb	r3, [r4, #1]
}
   b47de:	bd38      	pop	{r3, r4, r5, pc}
    else if(will_qos == 2)
   b47e0:	2b02      	cmp	r3, #2
   b47e2:	d1c5      	bne.n	b4770 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_2;
   b47e4:	231e      	movs	r3, #30
   b47e6:	e7c2      	b.n	b476e <_ZN13Adafruit_MQTT13connectPacketEPh+0x32>
      p[0] = 0x0;
   b47e8:	7103      	strb	r3, [r0, #4]
      p[0] = 0x0;
   b47ea:	7143      	strb	r3, [r0, #5]
      p++;
   b47ec:	3006      	adds	r0, #6
   b47ee:	e7df      	b.n	b47b0 <_ZN13Adafruit_MQTT13connectPacketEPh+0x74>
   b47f0:	000b6fdb 	.word	0x000b6fdb

000b47f4 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b47f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b47f8:	4605      	mov	r5, r0
  len += strlen(topic); // topic length
   b47fa:	4610      	mov	r0, r2
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b47fc:	460e      	mov	r6, r1
   b47fe:	4698      	mov	r8, r3
  len += strlen(topic); // topic length
   b4800:	9201      	str	r2, [sp, #4]
   b4802:	f002 faab 	bl	b6d5c <strlen>
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b4806:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b480a:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
  if(qos > 0) { 
   b480e:	9901      	ldr	r1, [sp, #4]
  len += strlen(topic); // topic length
   b4810:	b284      	uxth	r4, r0
  if(qos > 0) { 
   b4812:	f1b9 0f00 	cmp.w	r9, #0
   b4816:	d135      	bne.n	b4884 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x90>
  len += strlen(topic); // topic length
   b4818:	3402      	adds	r4, #2
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b481a:	ea4f 0349 	mov.w	r3, r9, lsl #1
   b481e:	4630      	mov	r0, r6
    len += 2; // qos packet id
   b4820:	b2a4      	uxth	r4, r4
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b4822:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  len += bLen; // payload length
   b4826:	443c      	add	r4, r7
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b4828:	f800 3b01 	strb.w	r3, [r0], #1
  len += bLen; // payload length
   b482c:	b2a4      	uxth	r4, r4
    uint8_t encodedByte = len % 128;
   b482e:	4622      	mov	r2, r4
   b4830:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    if ( len > 0 ) {
   b4834:	2a7f      	cmp	r2, #127	; 0x7f
      encodedByte |= 0x80;
   b4836:	bf88      	it	hi
   b4838:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
  } while ( len > 0 );
   b483c:	2a7f      	cmp	r2, #127	; 0x7f
    p[0] = encodedByte;
   b483e:	f800 3b01 	strb.w	r3, [r0], #1
    len /= 128;
   b4842:	ea4f 14d4 	mov.w	r4, r4, lsr #7
  } while ( len > 0 );
   b4846:	d8f2      	bhi.n	b482e <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3a>
  p = stringprint(p, topic);
   b4848:	f7ff fe77 	bl	b453a <_ZL11stringprintPhPKct.constprop.0>
   b484c:	4603      	mov	r3, r0
  if(qos > 0) {
   b484e:	f1b9 0f00 	cmp.w	r9, #0
   b4852:	d00c      	beq.n	b486e <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x7a>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   b4854:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b4858:	0a12      	lsrs	r2, r2, #8
   b485a:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   b485c:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b4860:	7042      	strb	r2, [r0, #1]
    packet_id_counter++;
   b4862:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b4866:	3201      	adds	r2, #1
    p+=2;
   b4868:	3302      	adds	r3, #2
    packet_id_counter++;
   b486a:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  memmove(p, data, bLen);
   b486e:	463a      	mov	r2, r7
   b4870:	4641      	mov	r1, r8
   b4872:	4618      	mov	r0, r3
   b4874:	f002 fa10 	bl	b6c98 <memmove>
  p+= bLen;
   b4878:	4438      	add	r0, r7
  len = p - packet;
   b487a:	1b80      	subs	r0, r0, r6
}
   b487c:	b280      	uxth	r0, r0
   b487e:	b003      	add	sp, #12
   b4880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    len += 2; // qos packet id
   b4884:	3404      	adds	r4, #4
   b4886:	e7c8      	b.n	b481a <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>

000b4888 <_ZN13Adafruit_MQTT7publishEPKcPhth>:
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   b4888:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b488a:	f89d 6018 	ldrb.w	r6, [sp, #24]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b488e:	f100 0522 	add.w	r5, r0, #34	; 0x22
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   b4892:	4604      	mov	r4, r0
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b4894:	e9cd 3600 	strd	r3, r6, [sp]
   b4898:	4613      	mov	r3, r2
   b489a:	460a      	mov	r2, r1
   b489c:	4629      	mov	r1, r5
   b489e:	f7ff ffa9 	bl	b47f4 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   b48a2:	6823      	ldr	r3, [r4, #0]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b48a4:	4602      	mov	r2, r0
  if (!sendPacket(buffer, len))
   b48a6:	695b      	ldr	r3, [r3, #20]
   b48a8:	4629      	mov	r1, r5
   b48aa:	4620      	mov	r0, r4
   b48ac:	4798      	blx	r3
   b48ae:	b910      	cbnz	r0, b48b6 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2e>
    return false;
   b48b0:	2000      	movs	r0, #0
}
   b48b2:	b002      	add	sp, #8
   b48b4:	bd70      	pop	{r4, r5, r6, pc}
  if (qos > 0) {
   b48b6:	2e00      	cmp	r6, #0
   b48b8:	d0fb      	beq.n	b48b2 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   b48ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b48be:	2296      	movs	r2, #150	; 0x96
   b48c0:	4629      	mov	r1, r5
   b48c2:	4620      	mov	r0, r4
   b48c4:	f7ff fe6a 	bl	b459c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    if (len != 4)
   b48c8:	2804      	cmp	r0, #4
   b48ca:	d1f1      	bne.n	b48b0 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   b48cc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b48d0:	091b      	lsrs	r3, r3, #4
   b48d2:	2b04      	cmp	r3, #4
   b48d4:	d1ec      	bne.n	b48b0 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    packnum |= buffer[3];
   b48d6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    if (packnum != packet_id_counter)
   b48d8:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   b48dc:	ba5b      	rev16	r3, r3
    packnum++;
   b48de:	3301      	adds	r3, #1
    if (packnum != packet_id_counter)
   b48e0:	b29b      	uxth	r3, r3
   b48e2:	1ac3      	subs	r3, r0, r3
   b48e4:	4258      	negs	r0, r3
   b48e6:	4158      	adcs	r0, r3
   b48e8:	e7e3      	b.n	b48b2 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>

000b48ea <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   b48ea:	b530      	push	{r4, r5, lr}
   b48ec:	b085      	sub	sp, #20
   b48ee:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   b48f0:	4610      	mov	r0, r2
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   b48f2:	461d      	mov	r5, r3
   b48f4:	9103      	str	r1, [sp, #12]
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   b48f6:	9202      	str	r2, [sp, #8]
   b48f8:	f002 fa30 	bl	b6d5c <strlen>
   b48fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b4900:	b283      	uxth	r3, r0
   b4902:	9500      	str	r5, [sp, #0]
   b4904:	4620      	mov	r0, r4
   b4906:	f7ff ffbf 	bl	b4888 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   b490a:	b005      	add	sp, #20
   b490c:	bd30      	pop	{r4, r5, pc}

000b490e <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
                                       uint8_t qos) {
   b490e:	b538      	push	{r3, r4, r5, lr}
   b4910:	461d      	mov	r5, r3
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   b4912:	2382      	movs	r3, #130	; 0x82
   b4914:	700b      	strb	r3, [r1, #0]
  p[0] = (packet_id_counter >> 8) & 0xFF;
   b4916:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b491a:	0a1b      	lsrs	r3, r3, #8
   b491c:	708b      	strb	r3, [r1, #2]
  p[1] = packet_id_counter & 0xFF;
   b491e:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b4922:	70cb      	strb	r3, [r1, #3]
  packet_id_counter++;
   b4924:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
                                       uint8_t qos) {
   b4928:	460c      	mov	r4, r1
  packet_id_counter++;
   b492a:	3301      	adds	r3, #1
   b492c:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8
  p = stringprint(p, topic);
   b4930:	4611      	mov	r1, r2
   b4932:	1d20      	adds	r0, r4, #4
   b4934:	f7ff fe01 	bl	b453a <_ZL11stringprintPhPKct.constprop.0>
  p[0] = qos;
   b4938:	f800 5b01 	strb.w	r5, [r0], #1
  len = p - packet;
   b493c:	1b00      	subs	r0, r0, r4
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   b493e:	b2c0      	uxtb	r0, r0
   b4940:	1e83      	subs	r3, r0, #2
   b4942:	7063      	strb	r3, [r4, #1]
}
   b4944:	bd38      	pop	{r3, r4, r5, pc}

000b4946 <_ZN13Adafruit_MQTT7connectEv>:
int8_t Adafruit_MQTT::connect() {
   b4946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!connectServer())
   b494a:	6803      	ldr	r3, [r0, #0]
   b494c:	68db      	ldr	r3, [r3, #12]
int8_t Adafruit_MQTT::connect() {
   b494e:	4604      	mov	r4, r0
  if (!connectServer())
   b4950:	4798      	blx	r3
   b4952:	2800      	cmp	r0, #0
   b4954:	d04b      	beq.n	b49ee <_ZN13Adafruit_MQTT7connectEv+0xa8>
  uint8_t len = connectPacket(buffer);
   b4956:	f104 0522 	add.w	r5, r4, #34	; 0x22
   b495a:	4629      	mov	r1, r5
   b495c:	4620      	mov	r0, r4
   b495e:	f7ff feed 	bl	b473c <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   b4962:	6823      	ldr	r3, [r4, #0]
   b4964:	b282      	uxth	r2, r0
   b4966:	695b      	ldr	r3, [r3, #20]
   b4968:	4629      	mov	r1, r5
   b496a:	4620      	mov	r0, r4
   b496c:	4798      	blx	r3
   b496e:	2800      	cmp	r0, #0
   b4970:	d03d      	beq.n	b49ee <_ZN13Adafruit_MQTT7connectEv+0xa8>
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   b4972:	f241 7370 	movw	r3, #6000	; 0x1770
   b4976:	2296      	movs	r2, #150	; 0x96
   b4978:	4629      	mov	r1, r5
   b497a:	4620      	mov	r0, r4
   b497c:	f7ff fe0e 	bl	b459c <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   b4980:	b2c0      	uxtb	r0, r0
   b4982:	2804      	cmp	r0, #4
   b4984:	d133      	bne.n	b49ee <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   b4986:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b4988:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   b498c:	d12f      	bne.n	b49ee <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if (buffer[3] != 0)
   b498e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   b4992:	b110      	cbz	r0, b499a <_ZN13Adafruit_MQTT7connectEv+0x54>
    return buffer[3];
   b4994:	b240      	sxtb	r0, r0
}
   b4996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b499a:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
   b499e:	f104 08d0 	add.w	r8, r4, #208	; 0xd0
    if (subscriptions[i] == 0) continue;
   b49a2:	f857 3b04 	ldr.w	r3, [r7], #4
   b49a6:	b1f3      	cbz	r3, b49e6 <_ZN13Adafruit_MQTT7connectEv+0xa0>
   b49a8:	2603      	movs	r6, #3
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   b49aa:	f857 2c04 	ldr.w	r2, [r7, #-4]
   b49ae:	4629      	mov	r1, r5
   b49b0:	7913      	ldrb	r3, [r2, #4]
   b49b2:	6812      	ldr	r2, [r2, #0]
   b49b4:	4620      	mov	r0, r4
   b49b6:	f7ff ffaa 	bl	b490e <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   b49ba:	6823      	ldr	r3, [r4, #0]
   b49bc:	b282      	uxth	r2, r0
   b49be:	695b      	ldr	r3, [r3, #20]
   b49c0:	4629      	mov	r1, r5
   b49c2:	4620      	mov	r0, r4
   b49c4:	4798      	blx	r3
   b49c6:	b190      	cbz	r0, b49ee <_ZN13Adafruit_MQTT7connectEv+0xa8>
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   b49c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b49cc:	2209      	movs	r2, #9
   b49ce:	4629      	mov	r1, r5
   b49d0:	4620      	mov	r0, r4
   b49d2:	f7ff fe2d 	bl	b4630 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   b49d6:	b930      	cbnz	r0, b49e6 <_ZN13Adafruit_MQTT7connectEv+0xa0>
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   b49d8:	3e01      	subs	r6, #1
   b49da:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   b49de:	d1e4      	bne.n	b49aa <_ZN13Adafruit_MQTT7connectEv+0x64>
    if (! success) return -2; // failed to sub for some reason
   b49e0:	f06f 0001 	mvn.w	r0, #1
   b49e4:	e7d7      	b.n	b4996 <_ZN13Adafruit_MQTT7connectEv+0x50>
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   b49e6:	45b8      	cmp	r8, r7
   b49e8:	d1db      	bne.n	b49a2 <_ZN13Adafruit_MQTT7connectEv+0x5c>
  return 0;
   b49ea:	2000      	movs	r0, #0
   b49ec:	e7d3      	b.n	b4996 <_ZN13Adafruit_MQTT7connectEv+0x50>
    return -1;
   b49ee:	f04f 30ff 	mov.w	r0, #4294967295
   b49f2:	e7d0      	b.n	b4996 <_ZN13Adafruit_MQTT7connectEv+0x50>

000b49f4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   b49f4:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   b49f6:	e9c0 1200 	strd	r1, r2, [r0]
  qos = q;
   b49fa:	7203      	strb	r3, [r0, #8]
}
   b49fc:	bd10      	pop	{r4, pc}

000b49fe <_ZN21Adafruit_MQTT_Publish7publishEi>:

bool Adafruit_MQTT_Publish::publish(int i) {
   b49fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b4a00:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   b4a02:	220a      	movs	r2, #10
bool Adafruit_MQTT_Publish::publish(int i) {
   b4a04:	4608      	mov	r0, r1
  ltoa(i, payload, 10);
   b4a06:	a901      	add	r1, sp, #4
   b4a08:	f000 fb86 	bl	b5118 <ltoa>
  return mqtt->publish(topic, payload, qos);
   b4a0c:	e9d4 0100 	ldrd	r0, r1, [r4]
   b4a10:	7a23      	ldrb	r3, [r4, #8]
   b4a12:	aa01      	add	r2, sp, #4
   b4a14:	f7ff ff69 	bl	b48ea <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   b4a18:	b004      	add	sp, #16
   b4a1a:	bd10      	pop	{r4, pc}

000b4a1c <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   b4a1c:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   b4a1e:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   b4a20:	2300      	movs	r3, #0
  callback_uint32t = 0;
  callback_buffer = 0;
  callback_double = 0;
   b4a22:	e9c0 3308 	strd	r3, r3, [r0, #32]
  callback_io = 0;
   b4a26:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  mqtt = mqttserver;
   b4a2a:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   b4a2c:	6002      	str	r2, [r0, #0]
  datalen = 0;
   b4a2e:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   b4a30:	61c3      	str	r3, [r0, #28]
  io_feed = 0;
   b4a32:	6303      	str	r3, [r0, #48]	; 0x30
}
   b4a34:	bd10      	pop	{r4, pc}

000b4a36 <_ZN5HX711D1Ev>:

HX711::HX711() {
}

HX711::~HX711() {
}
   b4a36:	4770      	bx	lr

000b4a38 <_ZN5HX711D0Ev>:
HX711::~HX711() {
   b4a38:	b510      	push	{r4, lr}
}
   b4a3a:	2110      	movs	r1, #16
HX711::~HX711() {
   b4a3c:	4604      	mov	r4, r0
}
   b4a3e:	f7ff fb2c 	bl	b409a <_ZdlPvj>
   b4a42:	4620      	mov	r0, r4
   b4a44:	bd10      	pop	{r4, pc}

000b4a46 <_ZN5HX7118is_readyEv>:
	pinMode(DOUT, INPUT);

	set_gain(gain);
}

bool HX711::is_ready() {
   b4a46:	b508      	push	{r3, lr}
	return digitalRead(DOUT) == LOW;
   b4a48:	7940      	ldrb	r0, [r0, #5]
   b4a4a:	f001 fafd 	bl	b6048 <digitalRead>
}
   b4a4e:	fab0 f080 	clz	r0, r0
   b4a52:	0940      	lsrs	r0, r0, #5
   b4a54:	bd08      	pop	{r3, pc}

000b4a56 <_ZN5HX7114readEv>:

	digitalWrite(PD_SCK, LOW);
	read();
}

long HX711::read() {
   b4a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4a5a:	4604      	mov	r4, r0
	// wait for the chip to become ready
	while (!is_ready()) {
   b4a5c:	4620      	mov	r0, r4
   b4a5e:	f7ff fff2 	bl	b4a46 <_ZN5HX7118is_readyEv>
   b4a62:	b910      	cbnz	r0, b4a6a <_ZN5HX7114readEv+0x14>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   b4a64:	f000 f90a 	bl	b4c7c <os_thread_yield>
#endif // PLATFORM_THREADING
}
   b4a68:	e7f8      	b.n	b4a5c <_ZN5HX7114readEv+0x6>
	unsigned long value = 0;
	uint8_t data[3] = { 0 };
	uint8_t filler = 0x00;

	// pulse the clock pin 24 times to read the data
	data[2] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4a6a:	7921      	ldrb	r1, [r4, #4]
   b4a6c:	7960      	ldrb	r0, [r4, #5]
   b4a6e:	2201      	movs	r2, #1
   b4a70:	f001 fb14 	bl	b609c <shiftIn>
	data[1] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4a74:	7921      	ldrb	r1, [r4, #4]
   b4a76:	2201      	movs	r2, #1
	data[2] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4a78:	4606      	mov	r6, r0
	data[1] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4a7a:	7960      	ldrb	r0, [r4, #5]
   b4a7c:	f001 fb0e 	bl	b609c <shiftIn>
	data[0] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4a80:	7921      	ldrb	r1, [r4, #4]
	data[1] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4a82:	4605      	mov	r5, r0
	data[0] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4a84:	2201      	movs	r2, #1
   b4a86:	7960      	ldrb	r0, [r4, #5]
   b4a88:	f001 fb08 	bl	b609c <shiftIn>

	// set the channel and the gain factor for the next reading using the clock pin
	for (unsigned int i = 0; i < GAIN; i++) {
   b4a8c:	f04f 0800 	mov.w	r8, #0
	data[0] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4a90:	4607      	mov	r7, r0
	for (unsigned int i = 0; i < GAIN; i++) {
   b4a92:	79a3      	ldrb	r3, [r4, #6]
   b4a94:	4543      	cmp	r3, r8
   b4a96:	d90a      	bls.n	b4aae <_ZN5HX7114readEv+0x58>
		digitalWrite(PD_SCK, HIGH);
   b4a98:	7920      	ldrb	r0, [r4, #4]
   b4a9a:	2101      	movs	r1, #1
   b4a9c:	f001 fabb 	bl	b6016 <digitalWrite>
		digitalWrite(PD_SCK, LOW);
   b4aa0:	7920      	ldrb	r0, [r4, #4]
   b4aa2:	2100      	movs	r1, #0
   b4aa4:	f001 fab7 	bl	b6016 <digitalWrite>
	for (unsigned int i = 0; i < GAIN; i++) {
   b4aa8:	f108 0801 	add.w	r8, r8, #1
   b4aac:	e7f1      	b.n	b4a92 <_ZN5HX7114readEv+0x3c>
	}

	// Construct a 32-bit signed integer
	value = ( static_cast<unsigned long>(filler) << 24
			| static_cast<unsigned long>(data[2]) << 16
			| static_cast<unsigned long>(data[1]) << 8
   b4aae:	022b      	lsls	r3, r5, #8
	value = ( static_cast<unsigned long>(filler) << 24
   b4ab0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b4ab4:	433b      	orrs	r3, r7
	if (data[2] & 0x80) {
   b4ab6:	f346 10c0 	sbfx	r0, r6, #7, #1
			| static_cast<unsigned long>(data[0]) );

	return static_cast<long>(value);
}
   b4aba:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b4abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4ac2 <_ZN5HX7118set_gainEh>:
	switch (gain) {
   b4ac2:	2940      	cmp	r1, #64	; 0x40
void HX711::set_gain(byte gain) {
   b4ac4:	b510      	push	{r4, lr}
   b4ac6:	4604      	mov	r4, r0
	switch (gain) {
   b4ac8:	d010      	beq.n	b4aec <_ZN5HX7118set_gainEh+0x2a>
   b4aca:	2980      	cmp	r1, #128	; 0x80
   b4acc:	d003      	beq.n	b4ad6 <_ZN5HX7118set_gainEh+0x14>
   b4ace:	2920      	cmp	r1, #32
   b4ad0:	d103      	bne.n	b4ada <_ZN5HX7118set_gainEh+0x18>
			GAIN = 2;
   b4ad2:	2302      	movs	r3, #2
   b4ad4:	e000      	b.n	b4ad8 <_ZN5HX7118set_gainEh+0x16>
			GAIN = 1;
   b4ad6:	2301      	movs	r3, #1
			GAIN = 2;
   b4ad8:	71a3      	strb	r3, [r4, #6]
	digitalWrite(PD_SCK, LOW);
   b4ada:	7920      	ldrb	r0, [r4, #4]
   b4adc:	2100      	movs	r1, #0
   b4ade:	f001 fa9a 	bl	b6016 <digitalWrite>
	read();
   b4ae2:	4620      	mov	r0, r4
}
   b4ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	read();
   b4ae8:	f7ff bfb5 	b.w	b4a56 <_ZN5HX7114readEv>
			GAIN = 3;
   b4aec:	2303      	movs	r3, #3
   b4aee:	e7f3      	b.n	b4ad8 <_ZN5HX7118set_gainEh+0x16>

000b4af0 <_ZN5HX7115beginEhhh>:
void HX711::begin(byte dout, byte pd_sck, byte gain) {
   b4af0:	b538      	push	{r3, r4, r5, lr}
   b4af2:	4604      	mov	r4, r0
   b4af4:	4610      	mov	r0, r2
	PD_SCK = pd_sck;
   b4af6:	7122      	strb	r2, [r4, #4]
	DOUT = dout;
   b4af8:	7161      	strb	r1, [r4, #5]
	pinMode(PD_SCK, OUTPUT);
   b4afa:	2101      	movs	r1, #1
void HX711::begin(byte dout, byte pd_sck, byte gain) {
   b4afc:	461d      	mov	r5, r3
	pinMode(PD_SCK, OUTPUT);
   b4afe:	f001 fa79 	bl	b5ff4 <pinMode>
	pinMode(DOUT, INPUT);
   b4b02:	7960      	ldrb	r0, [r4, #5]
   b4b04:	2100      	movs	r1, #0
   b4b06:	f001 fa75 	bl	b5ff4 <pinMode>
	set_gain(gain);
   b4b0a:	4629      	mov	r1, r5
   b4b0c:	4620      	mov	r0, r4
}
   b4b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	set_gain(gain);
   b4b12:	f7ff bfd6 	b.w	b4ac2 <_ZN5HX7118set_gainEh>
	...

000b4b18 <_ZN5HX711C1Ehhh>:
HX711::HX711(byte dout, byte pd_sck, byte gain) {
   b4b18:	b538      	push	{r3, r4, r5, lr}
   b4b1a:	4d06      	ldr	r5, [pc, #24]	; (b4b34 <_ZN5HX711C1Ehhh+0x1c>)
   b4b1c:	6005      	str	r5, [r0, #0]
   b4b1e:	2500      	movs	r5, #0
   b4b20:	6085      	str	r5, [r0, #8]
   b4b22:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
   b4b26:	4604      	mov	r4, r0
   b4b28:	60c5      	str	r5, [r0, #12]
	begin(dout, pd_sck, gain);
   b4b2a:	f7ff ffe1 	bl	b4af0 <_ZN5HX7115beginEhhh>
}
   b4b2e:	4620      	mov	r0, r4
   b4b30:	bd38      	pop	{r3, r4, r5, pc}
   b4b32:	bf00      	nop
   b4b34:	000b71f0 	.word	0x000b71f0

000b4b38 <_ZN5HX71112read_averageEh>:

long HX711::read_average(byte times) {
   b4b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4b3a:	2400      	movs	r4, #0
   b4b3c:	4606      	mov	r6, r0
   b4b3e:	460f      	mov	r7, r1
	long sum = 0;
   b4b40:	4625      	mov	r5, r4
	for (byte i = 0; i < times; i++) {
   b4b42:	42bc      	cmp	r4, r7
   b4b44:	d007      	beq.n	b4b56 <_ZN5HX71112read_averageEh+0x1e>
		sum += read();
   b4b46:	4630      	mov	r0, r6
   b4b48:	f7ff ff85 	bl	b4a56 <_ZN5HX7114readEv>
   b4b4c:	3401      	adds	r4, #1
   b4b4e:	4405      	add	r5, r0
  os_thread_yield();
   b4b50:	f000 f894 	bl	b4c7c <os_thread_yield>
	for (byte i = 0; i < times; i++) {
   b4b54:	e7f5      	b.n	b4b42 <_ZN5HX71112read_averageEh+0xa>
		yield();
	}
	return sum / times;
}
   b4b56:	fb95 f0f4 	sdiv	r0, r5, r4
   b4b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4b5c <_ZN5HX7119get_valueEh>:

double HX711::get_value(byte times) {
   b4b5c:	b510      	push	{r4, lr}
   b4b5e:	4604      	mov	r4, r0
	return read_average(times) - OFFSET;
   b4b60:	f7ff ffea 	bl	b4b38 <_ZN5HX71112read_averageEh>
   b4b64:	68a3      	ldr	r3, [r4, #8]
   b4b66:	1ac0      	subs	r0, r0, r3
   b4b68:	f001 fda2 	bl	b66b0 <__aeabi_i2d>
}
   b4b6c:	ec41 0b10 	vmov	d0, r0, r1
   b4b70:	bd10      	pop	{r4, pc}

000b4b72 <_ZN5HX7119get_unitsEh>:

float HX711::get_units(byte times) {
   b4b72:	b570      	push	{r4, r5, r6, lr}
   b4b74:	4606      	mov	r6, r0
	return get_value(times) / SCALE;
   b4b76:	f7ff fff1 	bl	b4b5c <_ZN5HX7119get_valueEh>
   b4b7a:	68f0      	ldr	r0, [r6, #12]
   b4b7c:	ec55 4b10 	vmov	r4, r5, d0
   b4b80:	f001 fda8 	bl	b66d4 <__aeabi_f2d>
   b4b84:	4602      	mov	r2, r0
   b4b86:	460b      	mov	r3, r1
   b4b88:	4620      	mov	r0, r4
   b4b8a:	4629      	mov	r1, r5
   b4b8c:	f001 ff24 	bl	b69d8 <__aeabi_ddiv>
   b4b90:	f002 f80a 	bl	b6ba8 <__aeabi_d2f>
}
   b4b94:	ee00 0a10 	vmov	s0, r0
   b4b98:	bd70      	pop	{r4, r5, r6, pc}

000b4b9a <_ZN5HX7114tareEh>:

void HX711::tare(byte times) {
   b4b9a:	b510      	push	{r4, lr}
   b4b9c:	4604      	mov	r4, r0
	double sum = read_average(times);
   b4b9e:	f7ff ffcb 	bl	b4b38 <_ZN5HX71112read_averageEh>
float HX711::get_scale() {
	return SCALE;
}

void HX711::set_offset(long offset) {
	OFFSET = offset;
   b4ba2:	60a0      	str	r0, [r4, #8]
}
   b4ba4:	bd10      	pop	{r4, pc}

000b4ba6 <_ZN5HX7119set_scaleEf>:
	SCALE = scale;
   b4ba6:	ed80 0a03 	vstr	s0, [r0, #12]
}
   b4baa:	4770      	bx	lr

000b4bac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4bac:	b508      	push	{r3, lr}
   b4bae:	4b02      	ldr	r3, [pc, #8]	; (b4bb8 <netdb_freeaddrinfo+0xc>)
   b4bb0:	681b      	ldr	r3, [r3, #0]
   b4bb2:	689b      	ldr	r3, [r3, #8]
   b4bb4:	9301      	str	r3, [sp, #4]
   b4bb6:	bd08      	pop	{r3, pc}
   b4bb8:	00030268 	.word	0x00030268

000b4bbc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4bbc:	b508      	push	{r3, lr}
   b4bbe:	4b02      	ldr	r3, [pc, #8]	; (b4bc8 <netdb_getaddrinfo+0xc>)
   b4bc0:	681b      	ldr	r3, [r3, #0]
   b4bc2:	68db      	ldr	r3, [r3, #12]
   b4bc4:	9301      	str	r3, [sp, #4]
   b4bc6:	bd08      	pop	{r3, pc}
   b4bc8:	00030268 	.word	0x00030268

000b4bcc <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4bcc:	b508      	push	{r3, lr}
   b4bce:	4b02      	ldr	r3, [pc, #8]	; (b4bd8 <HAL_Validate_Pin_Function+0xc>)
   b4bd0:	681b      	ldr	r3, [r3, #0]
   b4bd2:	685b      	ldr	r3, [r3, #4]
   b4bd4:	9301      	str	r3, [sp, #4]
   b4bd6:	bd08      	pop	{r3, pc}
   b4bd8:	0003022c 	.word	0x0003022c

000b4bdc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4bdc:	b508      	push	{r3, lr}
   b4bde:	4b02      	ldr	r3, [pc, #8]	; (b4be8 <HAL_Pin_Mode+0xc>)
   b4be0:	681b      	ldr	r3, [r3, #0]
   b4be2:	689b      	ldr	r3, [r3, #8]
   b4be4:	9301      	str	r3, [sp, #4]
   b4be6:	bd08      	pop	{r3, pc}
   b4be8:	0003022c 	.word	0x0003022c

000b4bec <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4bec:	b508      	push	{r3, lr}
   b4bee:	4b02      	ldr	r3, [pc, #8]	; (b4bf8 <HAL_Get_Pin_Mode+0xc>)
   b4bf0:	681b      	ldr	r3, [r3, #0]
   b4bf2:	68db      	ldr	r3, [r3, #12]
   b4bf4:	9301      	str	r3, [sp, #4]
   b4bf6:	bd08      	pop	{r3, pc}
   b4bf8:	0003022c 	.word	0x0003022c

000b4bfc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4bfc:	b508      	push	{r3, lr}
   b4bfe:	4b02      	ldr	r3, [pc, #8]	; (b4c08 <HAL_GPIO_Write+0xc>)
   b4c00:	681b      	ldr	r3, [r3, #0]
   b4c02:	691b      	ldr	r3, [r3, #16]
   b4c04:	9301      	str	r3, [sp, #4]
   b4c06:	bd08      	pop	{r3, pc}
   b4c08:	0003022c 	.word	0x0003022c

000b4c0c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b4c0c:	b508      	push	{r3, lr}
   b4c0e:	4b02      	ldr	r3, [pc, #8]	; (b4c18 <HAL_GPIO_Read+0xc>)
   b4c10:	681b      	ldr	r3, [r3, #0]
   b4c12:	695b      	ldr	r3, [r3, #20]
   b4c14:	9301      	str	r3, [sp, #4]
   b4c16:	bd08      	pop	{r3, pc}
   b4c18:	0003022c 	.word	0x0003022c

000b4c1c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4c1c:	b508      	push	{r3, lr}
   b4c1e:	4b02      	ldr	r3, [pc, #8]	; (b4c28 <hal_adc_read+0xc>)
   b4c20:	681b      	ldr	r3, [r3, #0]
   b4c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c24:	9301      	str	r3, [sp, #4]
   b4c26:	bd08      	pop	{r3, pc}
   b4c28:	0003022c 	.word	0x0003022c

000b4c2c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4c2c:	b508      	push	{r3, lr}
   b4c2e:	4b02      	ldr	r3, [pc, #8]	; (b4c38 <if_index_to_name+0xc>)
   b4c30:	681b      	ldr	r3, [r3, #0]
   b4c32:	695b      	ldr	r3, [r3, #20]
   b4c34:	9301      	str	r3, [sp, #4]
   b4c36:	bd08      	pop	{r3, pc}
   b4c38:	0003026c 	.word	0x0003026c

000b4c3c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4c3c:	b508      	push	{r3, lr}
   b4c3e:	4b02      	ldr	r3, [pc, #8]	; (b4c48 <HAL_RNG_GetRandomNumber+0xc>)
   b4c40:	681b      	ldr	r3, [r3, #0]
   b4c42:	685b      	ldr	r3, [r3, #4]
   b4c44:	9301      	str	r3, [sp, #4]
   b4c46:	bd08      	pop	{r3, pc}
   b4c48:	00030218 	.word	0x00030218

000b4c4c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4c4c:	b508      	push	{r3, lr}
   b4c4e:	4b02      	ldr	r3, [pc, #8]	; (b4c58 <HAL_Delay_Microseconds+0xc>)
   b4c50:	681b      	ldr	r3, [r3, #0]
   b4c52:	68db      	ldr	r3, [r3, #12]
   b4c54:	9301      	str	r3, [sp, #4]
   b4c56:	bd08      	pop	{r3, pc}
   b4c58:	00030218 	.word	0x00030218

000b4c5c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4c5c:	b508      	push	{r3, lr}
   b4c5e:	4b02      	ldr	r3, [pc, #8]	; (b4c68 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4c60:	681b      	ldr	r3, [r3, #0]
   b4c62:	695b      	ldr	r3, [r3, #20]
   b4c64:	9301      	str	r3, [sp, #4]
   b4c66:	bd08      	pop	{r3, pc}
   b4c68:	00030218 	.word	0x00030218

000b4c6c <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b4c6c:	b508      	push	{r3, lr}
   b4c6e:	4b02      	ldr	r3, [pc, #8]	; (b4c78 <hal_timer_millis+0xc>)
   b4c70:	681b      	ldr	r3, [r3, #0]
   b4c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b4c74:	9301      	str	r3, [sp, #4]
   b4c76:	bd08      	pop	{r3, pc}
   b4c78:	00030218 	.word	0x00030218

000b4c7c <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b4c7c:	b508      	push	{r3, lr}
   b4c7e:	4b02      	ldr	r3, [pc, #8]	; (b4c88 <os_thread_yield+0xc>)
   b4c80:	681b      	ldr	r3, [r3, #0]
   b4c82:	68db      	ldr	r3, [r3, #12]
   b4c84:	9301      	str	r3, [sp, #4]
   b4c86:	bd08      	pop	{r3, pc}
   b4c88:	00030248 	.word	0x00030248

000b4c8c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4c8c:	b508      	push	{r3, lr}
   b4c8e:	4b02      	ldr	r3, [pc, #8]	; (b4c98 <os_mutex_recursive_create+0xc>)
   b4c90:	681b      	ldr	r3, [r3, #0]
   b4c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c94:	9301      	str	r3, [sp, #4]
   b4c96:	bd08      	pop	{r3, pc}
   b4c98:	00030248 	.word	0x00030248

000b4c9c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4c9c:	b508      	push	{r3, lr}
   b4c9e:	4b02      	ldr	r3, [pc, #8]	; (b4ca8 <inet_inet_ntop+0xc>)
   b4ca0:	681b      	ldr	r3, [r3, #0]
   b4ca2:	695b      	ldr	r3, [r3, #20]
   b4ca4:	9301      	str	r3, [sp, #4]
   b4ca6:	bd08      	pop	{r3, pc}
   b4ca8:	00030264 	.word	0x00030264

000b4cac <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4cac:	b508      	push	{r3, lr}
   b4cae:	4b02      	ldr	r3, [pc, #8]	; (b4cb8 <inet_htonl+0xc>)
   b4cb0:	681b      	ldr	r3, [r3, #0]
   b4cb2:	6a1b      	ldr	r3, [r3, #32]
   b4cb4:	9301      	str	r3, [sp, #4]
   b4cb6:	bd08      	pop	{r3, pc}
   b4cb8:	00030264 	.word	0x00030264

000b4cbc <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4cbc:	b508      	push	{r3, lr}
   b4cbe:	4b02      	ldr	r3, [pc, #8]	; (b4cc8 <inet_htons+0xc>)
   b4cc0:	681b      	ldr	r3, [r3, #0]
   b4cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4cc4:	9301      	str	r3, [sp, #4]
   b4cc6:	bd08      	pop	{r3, pc}
   b4cc8:	00030264 	.word	0x00030264

000b4ccc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4ccc:	b508      	push	{r3, lr}
   b4cce:	4b02      	ldr	r3, [pc, #8]	; (b4cd8 <hal_usart_write+0xc>)
   b4cd0:	681b      	ldr	r3, [r3, #0]
   b4cd2:	68db      	ldr	r3, [r3, #12]
   b4cd4:	9301      	str	r3, [sp, #4]
   b4cd6:	bd08      	pop	{r3, pc}
   b4cd8:	0003023c 	.word	0x0003023c

000b4cdc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4cdc:	b508      	push	{r3, lr}
   b4cde:	4b02      	ldr	r3, [pc, #8]	; (b4ce8 <hal_usart_available+0xc>)
   b4ce0:	681b      	ldr	r3, [r3, #0]
   b4ce2:	691b      	ldr	r3, [r3, #16]
   b4ce4:	9301      	str	r3, [sp, #4]
   b4ce6:	bd08      	pop	{r3, pc}
   b4ce8:	0003023c 	.word	0x0003023c

000b4cec <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4cec:	b508      	push	{r3, lr}
   b4cee:	4b02      	ldr	r3, [pc, #8]	; (b4cf8 <hal_usart_read+0xc>)
   b4cf0:	681b      	ldr	r3, [r3, #0]
   b4cf2:	695b      	ldr	r3, [r3, #20]
   b4cf4:	9301      	str	r3, [sp, #4]
   b4cf6:	bd08      	pop	{r3, pc}
   b4cf8:	0003023c 	.word	0x0003023c

000b4cfc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4cfc:	b508      	push	{r3, lr}
   b4cfe:	4b02      	ldr	r3, [pc, #8]	; (b4d08 <hal_usart_peek+0xc>)
   b4d00:	681b      	ldr	r3, [r3, #0]
   b4d02:	699b      	ldr	r3, [r3, #24]
   b4d04:	9301      	str	r3, [sp, #4]
   b4d06:	bd08      	pop	{r3, pc}
   b4d08:	0003023c 	.word	0x0003023c

000b4d0c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4d0c:	b508      	push	{r3, lr}
   b4d0e:	4b02      	ldr	r3, [pc, #8]	; (b4d18 <hal_usart_flush+0xc>)
   b4d10:	681b      	ldr	r3, [r3, #0]
   b4d12:	69db      	ldr	r3, [r3, #28]
   b4d14:	9301      	str	r3, [sp, #4]
   b4d16:	bd08      	pop	{r3, pc}
   b4d18:	0003023c 	.word	0x0003023c

000b4d1c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4d1c:	b508      	push	{r3, lr}
   b4d1e:	4b02      	ldr	r3, [pc, #8]	; (b4d28 <hal_usart_is_enabled+0xc>)
   b4d20:	681b      	ldr	r3, [r3, #0]
   b4d22:	6a1b      	ldr	r3, [r3, #32]
   b4d24:	9301      	str	r3, [sp, #4]
   b4d26:	bd08      	pop	{r3, pc}
   b4d28:	0003023c 	.word	0x0003023c

000b4d2c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4d2c:	b508      	push	{r3, lr}
   b4d2e:	4b02      	ldr	r3, [pc, #8]	; (b4d38 <hal_usart_available_data_for_write+0xc>)
   b4d30:	681b      	ldr	r3, [r3, #0]
   b4d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4d34:	9301      	str	r3, [sp, #4]
   b4d36:	bd08      	pop	{r3, pc}
   b4d38:	0003023c 	.word	0x0003023c

000b4d3c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4d3c:	b508      	push	{r3, lr}
   b4d3e:	4b02      	ldr	r3, [pc, #8]	; (b4d48 <hal_usart_init_ex+0xc>)
   b4d40:	681b      	ldr	r3, [r3, #0]
   b4d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d44:	9301      	str	r3, [sp, #4]
   b4d46:	bd08      	pop	{r3, pc}
   b4d48:	0003023c 	.word	0x0003023c

000b4d4c <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4d4c:	b508      	push	{r3, lr}
   b4d4e:	4b02      	ldr	r3, [pc, #8]	; (b4d58 <hal_i2c_write+0xc>)
   b4d50:	681b      	ldr	r3, [r3, #0]
   b4d52:	6a1b      	ldr	r3, [r3, #32]
   b4d54:	9301      	str	r3, [sp, #4]
   b4d56:	bd08      	pop	{r3, pc}
   b4d58:	00030228 	.word	0x00030228

000b4d5c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4d5c:	b508      	push	{r3, lr}
   b4d5e:	4b02      	ldr	r3, [pc, #8]	; (b4d68 <hal_i2c_available+0xc>)
   b4d60:	681b      	ldr	r3, [r3, #0]
   b4d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4d64:	9301      	str	r3, [sp, #4]
   b4d66:	bd08      	pop	{r3, pc}
   b4d68:	00030228 	.word	0x00030228

000b4d6c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4d6c:	b508      	push	{r3, lr}
   b4d6e:	4b02      	ldr	r3, [pc, #8]	; (b4d78 <hal_i2c_read+0xc>)
   b4d70:	681b      	ldr	r3, [r3, #0]
   b4d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4d74:	9301      	str	r3, [sp, #4]
   b4d76:	bd08      	pop	{r3, pc}
   b4d78:	00030228 	.word	0x00030228

000b4d7c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4d7c:	b508      	push	{r3, lr}
   b4d7e:	4b02      	ldr	r3, [pc, #8]	; (b4d88 <hal_i2c_peek+0xc>)
   b4d80:	681b      	ldr	r3, [r3, #0]
   b4d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4d84:	9301      	str	r3, [sp, #4]
   b4d86:	bd08      	pop	{r3, pc}
   b4d88:	00030228 	.word	0x00030228

000b4d8c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4d8c:	b508      	push	{r3, lr}
   b4d8e:	4b02      	ldr	r3, [pc, #8]	; (b4d98 <hal_i2c_flush+0xc>)
   b4d90:	681b      	ldr	r3, [r3, #0]
   b4d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d94:	9301      	str	r3, [sp, #4]
   b4d96:	bd08      	pop	{r3, pc}
   b4d98:	00030228 	.word	0x00030228

000b4d9c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4d9c:	b508      	push	{r3, lr}
   b4d9e:	4b02      	ldr	r3, [pc, #8]	; (b4da8 <hal_i2c_is_enabled+0xc>)
   b4da0:	681b      	ldr	r3, [r3, #0]
   b4da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4da4:	9301      	str	r3, [sp, #4]
   b4da6:	bd08      	pop	{r3, pc}
   b4da8:	00030228 	.word	0x00030228

000b4dac <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4dac:	b508      	push	{r3, lr}
   b4dae:	4b02      	ldr	r3, [pc, #8]	; (b4db8 <hal_i2c_init+0xc>)
   b4db0:	681b      	ldr	r3, [r3, #0]
   b4db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4db4:	9301      	str	r3, [sp, #4]
   b4db6:	bd08      	pop	{r3, pc}
   b4db8:	00030228 	.word	0x00030228

000b4dbc <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4dbc:	b508      	push	{r3, lr}
   b4dbe:	4b02      	ldr	r3, [pc, #8]	; (b4dc8 <sock_setsockopt+0xc>)
   b4dc0:	681b      	ldr	r3, [r3, #0]
   b4dc2:	699b      	ldr	r3, [r3, #24]
   b4dc4:	9301      	str	r3, [sp, #4]
   b4dc6:	bd08      	pop	{r3, pc}
   b4dc8:	00030238 	.word	0x00030238

000b4dcc <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4dcc:	b508      	push	{r3, lr}
   b4dce:	4b02      	ldr	r3, [pc, #8]	; (b4dd8 <sock_close+0xc>)
   b4dd0:	681b      	ldr	r3, [r3, #0]
   b4dd2:	69db      	ldr	r3, [r3, #28]
   b4dd4:	9301      	str	r3, [sp, #4]
   b4dd6:	bd08      	pop	{r3, pc}
   b4dd8:	00030238 	.word	0x00030238

000b4ddc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4ddc:	b508      	push	{r3, lr}
   b4dde:	4b02      	ldr	r3, [pc, #8]	; (b4de8 <sock_connect+0xc>)
   b4de0:	681b      	ldr	r3, [r3, #0]
   b4de2:	6a1b      	ldr	r3, [r3, #32]
   b4de4:	9301      	str	r3, [sp, #4]
   b4de6:	bd08      	pop	{r3, pc}
   b4de8:	00030238 	.word	0x00030238

000b4dec <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4dec:	b508      	push	{r3, lr}
   b4dee:	4b02      	ldr	r3, [pc, #8]	; (b4df8 <sock_recv+0xc>)
   b4df0:	681b      	ldr	r3, [r3, #0]
   b4df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4df4:	9301      	str	r3, [sp, #4]
   b4df6:	bd08      	pop	{r3, pc}
   b4df8:	00030238 	.word	0x00030238

000b4dfc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4dfc:	b508      	push	{r3, lr}
   b4dfe:	4b02      	ldr	r3, [pc, #8]	; (b4e08 <sock_send+0xc>)
   b4e00:	681b      	ldr	r3, [r3, #0]
   b4e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4e04:	9301      	str	r3, [sp, #4]
   b4e06:	bd08      	pop	{r3, pc}
   b4e08:	00030238 	.word	0x00030238

000b4e0c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4e0c:	b508      	push	{r3, lr}
   b4e0e:	4b02      	ldr	r3, [pc, #8]	; (b4e18 <sock_socket+0xc>)
   b4e10:	681b      	ldr	r3, [r3, #0]
   b4e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4e14:	9301      	str	r3, [sp, #4]
   b4e16:	bd08      	pop	{r3, pc}
   b4e18:	00030238 	.word	0x00030238

000b4e1c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4e1c:	b508      	push	{r3, lr}
   b4e1e:	4b02      	ldr	r3, [pc, #8]	; (b4e28 <hal_spi_init+0xc>)
   b4e20:	681b      	ldr	r3, [r3, #0]
   b4e22:	69db      	ldr	r3, [r3, #28]
   b4e24:	9301      	str	r3, [sp, #4]
   b4e26:	bd08      	pop	{r3, pc}
   b4e28:	00030230 	.word	0x00030230

000b4e2c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4e2c:	b508      	push	{r3, lr}
   b4e2e:	4b02      	ldr	r3, [pc, #8]	; (b4e38 <hal_spi_is_enabled+0xc>)
   b4e30:	681b      	ldr	r3, [r3, #0]
   b4e32:	6a1b      	ldr	r3, [r3, #32]
   b4e34:	9301      	str	r3, [sp, #4]
   b4e36:	bd08      	pop	{r3, pc}
   b4e38:	00030230 	.word	0x00030230

000b4e3c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4e3c:	b508      	push	{r3, lr}
   b4e3e:	4b02      	ldr	r3, [pc, #8]	; (b4e48 <HAL_USB_USART_Init+0xc>)
   b4e40:	681b      	ldr	r3, [r3, #0]
   b4e42:	681b      	ldr	r3, [r3, #0]
   b4e44:	9301      	str	r3, [sp, #4]
   b4e46:	bd08      	pop	{r3, pc}
   b4e48:	0003024c 	.word	0x0003024c

000b4e4c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4e4c:	b508      	push	{r3, lr}
   b4e4e:	4b02      	ldr	r3, [pc, #8]	; (b4e58 <HAL_USB_USART_Begin+0xc>)
   b4e50:	681b      	ldr	r3, [r3, #0]
   b4e52:	685b      	ldr	r3, [r3, #4]
   b4e54:	9301      	str	r3, [sp, #4]
   b4e56:	bd08      	pop	{r3, pc}
   b4e58:	0003024c 	.word	0x0003024c

000b4e5c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4e5c:	b508      	push	{r3, lr}
   b4e5e:	4b02      	ldr	r3, [pc, #8]	; (b4e68 <HAL_USB_USART_Available_Data+0xc>)
   b4e60:	681b      	ldr	r3, [r3, #0]
   b4e62:	691b      	ldr	r3, [r3, #16]
   b4e64:	9301      	str	r3, [sp, #4]
   b4e66:	bd08      	pop	{r3, pc}
   b4e68:	0003024c 	.word	0x0003024c

000b4e6c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4e6c:	b508      	push	{r3, lr}
   b4e6e:	4b02      	ldr	r3, [pc, #8]	; (b4e78 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4e70:	681b      	ldr	r3, [r3, #0]
   b4e72:	695b      	ldr	r3, [r3, #20]
   b4e74:	9301      	str	r3, [sp, #4]
   b4e76:	bd08      	pop	{r3, pc}
   b4e78:	0003024c 	.word	0x0003024c

000b4e7c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e7c:	b508      	push	{r3, lr}
   b4e7e:	4b02      	ldr	r3, [pc, #8]	; (b4e88 <HAL_USB_USART_Receive_Data+0xc>)
   b4e80:	681b      	ldr	r3, [r3, #0]
   b4e82:	699b      	ldr	r3, [r3, #24]
   b4e84:	9301      	str	r3, [sp, #4]
   b4e86:	bd08      	pop	{r3, pc}
   b4e88:	0003024c 	.word	0x0003024c

000b4e8c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e8c:	b508      	push	{r3, lr}
   b4e8e:	4b02      	ldr	r3, [pc, #8]	; (b4e98 <HAL_USB_USART_Send_Data+0xc>)
   b4e90:	681b      	ldr	r3, [r3, #0]
   b4e92:	69db      	ldr	r3, [r3, #28]
   b4e94:	9301      	str	r3, [sp, #4]
   b4e96:	bd08      	pop	{r3, pc}
   b4e98:	0003024c 	.word	0x0003024c

000b4e9c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4e9c:	b508      	push	{r3, lr}
   b4e9e:	4b02      	ldr	r3, [pc, #8]	; (b4ea8 <HAL_USB_USART_Flush_Data+0xc>)
   b4ea0:	681b      	ldr	r3, [r3, #0]
   b4ea2:	6a1b      	ldr	r3, [r3, #32]
   b4ea4:	9301      	str	r3, [sp, #4]
   b4ea6:	bd08      	pop	{r3, pc}
   b4ea8:	0003024c 	.word	0x0003024c

000b4eac <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4eac:	b508      	push	{r3, lr}
   b4eae:	4b02      	ldr	r3, [pc, #8]	; (b4eb8 <HAL_USB_USART_Is_Connected+0xc>)
   b4eb0:	681b      	ldr	r3, [r3, #0]
   b4eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4eb4:	9301      	str	r3, [sp, #4]
   b4eb6:	bd08      	pop	{r3, pc}
   b4eb8:	0003024c 	.word	0x0003024c

000b4ebc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4ebc:	b508      	push	{r3, lr}
   b4ebe:	4b02      	ldr	r3, [pc, #8]	; (b4ec8 <panic_+0xc>)
   b4ec0:	681b      	ldr	r3, [r3, #0]
   b4ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4ec4:	9301      	str	r3, [sp, #4]
   b4ec6:	bd08      	pop	{r3, pc}
   b4ec8:	00030260 	.word	0x00030260

000b4ecc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4ecc:	b508      	push	{r3, lr}
   b4ece:	4b02      	ldr	r3, [pc, #8]	; (b4ed8 <log_message+0xc>)
   b4ed0:	681b      	ldr	r3, [r3, #0]
   b4ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4ed4:	9301      	str	r3, [sp, #4]
   b4ed6:	bd08      	pop	{r3, pc}
   b4ed8:	00030260 	.word	0x00030260

000b4edc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4edc:	b508      	push	{r3, lr}
   b4ede:	4b02      	ldr	r3, [pc, #8]	; (b4ee8 <set_system_mode+0xc>)
   b4ee0:	681b      	ldr	r3, [r3, #0]
   b4ee2:	685b      	ldr	r3, [r3, #4]
   b4ee4:	9301      	str	r3, [sp, #4]
   b4ee6:	bd08      	pop	{r3, pc}
   b4ee8:	00030220 	.word	0x00030220

000b4eec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4eec:	b508      	push	{r3, lr}
   b4eee:	4b02      	ldr	r3, [pc, #8]	; (b4ef8 <system_delay_ms+0xc>)
   b4ef0:	681b      	ldr	r3, [r3, #0]
   b4ef2:	695b      	ldr	r3, [r3, #20]
   b4ef4:	9301      	str	r3, [sp, #4]
   b4ef6:	bd08      	pop	{r3, pc}
   b4ef8:	00030220 	.word	0x00030220

000b4efc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4efc:	b508      	push	{r3, lr}
   b4efe:	4b03      	ldr	r3, [pc, #12]	; (b4f0c <system_ctrl_set_app_request_handler+0x10>)
   b4f00:	681b      	ldr	r3, [r3, #0]
   b4f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4f06:	9301      	str	r3, [sp, #4]
   b4f08:	bd08      	pop	{r3, pc}
   b4f0a:	0000      	.short	0x0000
   b4f0c:	00030220 	.word	0x00030220

000b4f10 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4f10:	b508      	push	{r3, lr}
   b4f12:	4b03      	ldr	r3, [pc, #12]	; (b4f20 <system_ctrl_set_result+0x10>)
   b4f14:	681b      	ldr	r3, [r3, #0]
   b4f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4f1a:	9301      	str	r3, [sp, #4]
   b4f1c:	bd08      	pop	{r3, pc}
   b4f1e:	0000      	.short	0x0000
   b4f20:	00030220 	.word	0x00030220

000b4f24 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f24:	b508      	push	{r3, lr}
   b4f26:	4b02      	ldr	r3, [pc, #8]	; (b4f30 <network_connect+0xc>)
   b4f28:	681b      	ldr	r3, [r3, #0]
   b4f2a:	685b      	ldr	r3, [r3, #4]
   b4f2c:	9301      	str	r3, [sp, #4]
   b4f2e:	bd08      	pop	{r3, pc}
   b4f30:	00030240 	.word	0x00030240

000b4f34 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4f34:	b508      	push	{r3, lr}
   b4f36:	4b02      	ldr	r3, [pc, #8]	; (b4f40 <network_connecting+0xc>)
   b4f38:	681b      	ldr	r3, [r3, #0]
   b4f3a:	689b      	ldr	r3, [r3, #8]
   b4f3c:	9301      	str	r3, [sp, #4]
   b4f3e:	bd08      	pop	{r3, pc}
   b4f40:	00030240 	.word	0x00030240

000b4f44 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4f44:	b508      	push	{r3, lr}
   b4f46:	4b02      	ldr	r3, [pc, #8]	; (b4f50 <network_disconnect+0xc>)
   b4f48:	681b      	ldr	r3, [r3, #0]
   b4f4a:	68db      	ldr	r3, [r3, #12]
   b4f4c:	9301      	str	r3, [sp, #4]
   b4f4e:	bd08      	pop	{r3, pc}
   b4f50:	00030240 	.word	0x00030240

000b4f54 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b02      	ldr	r3, [pc, #8]	; (b4f60 <network_ready+0xc>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	691b      	ldr	r3, [r3, #16]
   b4f5c:	9301      	str	r3, [sp, #4]
   b4f5e:	bd08      	pop	{r3, pc}
   b4f60:	00030240 	.word	0x00030240

000b4f64 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f64:	b508      	push	{r3, lr}
   b4f66:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <network_on+0xc>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	695b      	ldr	r3, [r3, #20]
   b4f6c:	9301      	str	r3, [sp, #4]
   b4f6e:	bd08      	pop	{r3, pc}
   b4f70:	00030240 	.word	0x00030240

000b4f74 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f74:	b508      	push	{r3, lr}
   b4f76:	4b02      	ldr	r3, [pc, #8]	; (b4f80 <network_off+0xc>)
   b4f78:	681b      	ldr	r3, [r3, #0]
   b4f7a:	699b      	ldr	r3, [r3, #24]
   b4f7c:	9301      	str	r3, [sp, #4]
   b4f7e:	bd08      	pop	{r3, pc}
   b4f80:	00030240 	.word	0x00030240

000b4f84 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b02      	ldr	r3, [pc, #8]	; (b4f90 <network_listen+0xc>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	69db      	ldr	r3, [r3, #28]
   b4f8c:	9301      	str	r3, [sp, #4]
   b4f8e:	bd08      	pop	{r3, pc}
   b4f90:	00030240 	.word	0x00030240

000b4f94 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4f94:	b508      	push	{r3, lr}
   b4f96:	4b02      	ldr	r3, [pc, #8]	; (b4fa0 <network_listening+0xc>)
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	6a1b      	ldr	r3, [r3, #32]
   b4f9c:	9301      	str	r3, [sp, #4]
   b4f9e:	bd08      	pop	{r3, pc}
   b4fa0:	00030240 	.word	0x00030240

000b4fa4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4fa4:	b508      	push	{r3, lr}
   b4fa6:	4b02      	ldr	r3, [pc, #8]	; (b4fb0 <network_set_listen_timeout+0xc>)
   b4fa8:	681b      	ldr	r3, [r3, #0]
   b4faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4fac:	9301      	str	r3, [sp, #4]
   b4fae:	bd08      	pop	{r3, pc}
   b4fb0:	00030240 	.word	0x00030240

000b4fb4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4fb4:	b508      	push	{r3, lr}
   b4fb6:	4b02      	ldr	r3, [pc, #8]	; (b4fc0 <network_get_listen_timeout+0xc>)
   b4fb8:	681b      	ldr	r3, [r3, #0]
   b4fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4fbc:	9301      	str	r3, [sp, #4]
   b4fbe:	bd08      	pop	{r3, pc}
   b4fc0:	00030240 	.word	0x00030240

000b4fc4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4fc4:	b508      	push	{r3, lr}
   b4fc6:	4b02      	ldr	r3, [pc, #8]	; (b4fd0 <network_is_on+0xc>)
   b4fc8:	681b      	ldr	r3, [r3, #0]
   b4fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4fcc:	9301      	str	r3, [sp, #4]
   b4fce:	bd08      	pop	{r3, pc}
   b4fd0:	00030240 	.word	0x00030240

000b4fd4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4fd4:	b508      	push	{r3, lr}
   b4fd6:	4b02      	ldr	r3, [pc, #8]	; (b4fe0 <network_is_off+0xc>)
   b4fd8:	681b      	ldr	r3, [r3, #0]
   b4fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4fdc:	9301      	str	r3, [sp, #4]
   b4fde:	bd08      	pop	{r3, pc}
   b4fe0:	00030240 	.word	0x00030240

000b4fe4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b4fe4:	b508      	push	{r3, lr}
   b4fe6:	4b02      	ldr	r3, [pc, #8]	; (b4ff0 <spark_process+0xc>)
   b4fe8:	681b      	ldr	r3, [r3, #0]
   b4fea:	689b      	ldr	r3, [r3, #8]
   b4fec:	9301      	str	r3, [sp, #4]
   b4fee:	bd08      	pop	{r3, pc}
   b4ff0:	00030244 	.word	0x00030244

000b4ff4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4ff4:	b508      	push	{r3, lr}
   b4ff6:	4b02      	ldr	r3, [pc, #8]	; (b5000 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4ff8:	681b      	ldr	r3, [r3, #0]
   b4ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4ffc:	9301      	str	r3, [sp, #4]
   b4ffe:	bd08      	pop	{r3, pc}
   b5000:	00030244 	.word	0x00030244

000b5004 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5004:	b508      	push	{r3, lr}
   b5006:	4b02      	ldr	r3, [pc, #8]	; (b5010 <malloc+0xc>)
   b5008:	681b      	ldr	r3, [r3, #0]
   b500a:	681b      	ldr	r3, [r3, #0]
   b500c:	9301      	str	r3, [sp, #4]
   b500e:	bd08      	pop	{r3, pc}
   b5010:	0003021c 	.word	0x0003021c

000b5014 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5014:	b508      	push	{r3, lr}
   b5016:	4b02      	ldr	r3, [pc, #8]	; (b5020 <free+0xc>)
   b5018:	681b      	ldr	r3, [r3, #0]
   b501a:	685b      	ldr	r3, [r3, #4]
   b501c:	9301      	str	r3, [sp, #4]
   b501e:	bd08      	pop	{r3, pc}
   b5020:	0003021c 	.word	0x0003021c

000b5024 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5024:	b508      	push	{r3, lr}
   b5026:	4b02      	ldr	r3, [pc, #8]	; (b5030 <vsnprintf+0xc>)
   b5028:	681b      	ldr	r3, [r3, #0]
   b502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b502c:	9301      	str	r3, [sp, #4]
   b502e:	bd08      	pop	{r3, pc}
   b5030:	0003021c 	.word	0x0003021c

000b5034 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5034:	b508      	push	{r3, lr}
   b5036:	4b02      	ldr	r3, [pc, #8]	; (b5040 <__errno+0xc>)
   b5038:	681b      	ldr	r3, [r3, #0]
   b503a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b503c:	9301      	str	r3, [sp, #4]
   b503e:	bd08      	pop	{r3, pc}
   b5040:	0003021c 	.word	0x0003021c

000b5044 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5044:	b508      	push	{r3, lr}
   b5046:	4b02      	ldr	r3, [pc, #8]	; (b5050 <__assert_func+0xc>)
   b5048:	681b      	ldr	r3, [r3, #0]
   b504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b504c:	9301      	str	r3, [sp, #4]
   b504e:	bd08      	pop	{r3, pc}
   b5050:	0003021c 	.word	0x0003021c

000b5054 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5054:	b508      	push	{r3, lr}
   b5056:	4b02      	ldr	r3, [pc, #8]	; (b5060 <newlib_impure_ptr_callback+0xc>)
   b5058:	681b      	ldr	r3, [r3, #0]
   b505a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b505c:	9301      	str	r3, [sp, #4]
   b505e:	bd08      	pop	{r3, pc}
   b5060:	0003021c 	.word	0x0003021c

000b5064 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5064:	2200      	movs	r2, #0
   b5066:	6840      	ldr	r0, [r0, #4]
   b5068:	4611      	mov	r1, r2
   b506a:	f7ff bf93 	b.w	b4f94 <network_listening>

000b506e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b506e:	2200      	movs	r2, #0
   b5070:	6840      	ldr	r0, [r0, #4]
   b5072:	4611      	mov	r1, r2
   b5074:	f7ff bf9e 	b.w	b4fb4 <network_get_listen_timeout>

000b5078 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5078:	6840      	ldr	r0, [r0, #4]
   b507a:	2200      	movs	r2, #0
   b507c:	f7ff bf92 	b.w	b4fa4 <network_set_listen_timeout>

000b5080 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5080:	6840      	ldr	r0, [r0, #4]
   b5082:	2200      	movs	r2, #0
   b5084:	f081 0101 	eor.w	r1, r1, #1
   b5088:	f7ff bf7c 	b.w	b4f84 <network_listen>

000b508c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b508c:	2300      	movs	r3, #0
   b508e:	6840      	ldr	r0, [r0, #4]
   b5090:	461a      	mov	r2, r3
   b5092:	4619      	mov	r1, r3
   b5094:	f7ff bf6e 	b.w	b4f74 <network_off>

000b5098 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5098:	2300      	movs	r3, #0
   b509a:	6840      	ldr	r0, [r0, #4]
   b509c:	461a      	mov	r2, r3
   b509e:	4619      	mov	r1, r3
   b50a0:	f7ff bf60 	b.w	b4f64 <network_on>

000b50a4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b50a4:	2200      	movs	r2, #0
   b50a6:	6840      	ldr	r0, [r0, #4]
   b50a8:	4611      	mov	r1, r2
   b50aa:	f7ff bf53 	b.w	b4f54 <network_ready>

000b50ae <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b50ae:	2200      	movs	r2, #0
   b50b0:	6840      	ldr	r0, [r0, #4]
   b50b2:	4611      	mov	r1, r2
   b50b4:	f7ff bf3e 	b.w	b4f34 <network_connecting>

000b50b8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b50b8:	6840      	ldr	r0, [r0, #4]
   b50ba:	2200      	movs	r2, #0
   b50bc:	2102      	movs	r1, #2
   b50be:	f7ff bf41 	b.w	b4f44 <network_disconnect>

000b50c2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b50c2:	2300      	movs	r3, #0
   b50c4:	6840      	ldr	r0, [r0, #4]
   b50c6:	461a      	mov	r2, r3
   b50c8:	f7ff bf2c 	b.w	b4f24 <network_connect>

000b50cc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b50cc:	4b02      	ldr	r3, [pc, #8]	; (b50d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b50ce:	2203      	movs	r2, #3
   b50d0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b50d2:	4a02      	ldr	r2, [pc, #8]	; (b50dc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b50d4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b50d6:	4770      	bx	lr
   b50d8:	2003e6b8 	.word	0x2003e6b8
   b50dc:	000b7200 	.word	0x000b7200

000b50e0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b50e0:	b510      	push	{r4, lr}
   b50e2:	4604      	mov	r4, r0
   b50e4:	4608      	mov	r0, r1
{
    _spi = spi;
   b50e6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b50e8:	f7ff fe98 	bl	b4e1c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b50ec:	2300      	movs	r3, #0
   b50ee:	6063      	str	r3, [r4, #4]
}
   b50f0:	4620      	mov	r0, r4
   b50f2:	bd10      	pop	{r4, pc}

000b50f4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b50f4:	4b05      	ldr	r3, [pc, #20]	; (b510c <_GLOBAL__sub_I_System+0x18>)
   b50f6:	2202      	movs	r2, #2
   b50f8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b50fa:	4b05      	ldr	r3, [pc, #20]	; (b5110 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b50fc:	4a05      	ldr	r2, [pc, #20]	; (b5114 <_GLOBAL__sub_I_System+0x20>)
   b50fe:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5100:	2000      	movs	r0, #0
   b5102:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5106:	f7ff bee9 	b.w	b4edc <set_system_mode>
   b510a:	bf00      	nop
   b510c:	2003e6cc 	.word	0x2003e6cc
   b5110:	2003e6c0 	.word	0x2003e6c0
   b5114:	ffff0000 	.word	0xffff0000

000b5118 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b5118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b511c:	1e93      	subs	r3, r2, #2
{
   b511e:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b5120:	2b22      	cmp	r3, #34	; 0x22
   b5122:	f04f 0300 	mov.w	r3, #0
{
   b5126:	460d      	mov	r5, r1
   b5128:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b512a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b512e:	d927      	bls.n	b5180 <ltoa+0x68>

      if (10 == base && N < 0L)
   b5130:	2800      	cmp	r0, #0
   b5132:	da2a      	bge.n	b518a <ltoa+0x72>
      {
            *head++ = '-';
   b5134:	462e      	mov	r6, r5
   b5136:	232d      	movs	r3, #45	; 0x2d
   b5138:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b513c:	4240      	negs	r0, r0
   b513e:	240a      	movs	r4, #10
      *tail-- = '\0';
   b5140:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b5144:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b5148:	4622      	mov	r2, r4
   b514a:	4601      	mov	r1, r0
   b514c:	a801      	add	r0, sp, #4
   b514e:	f001 fd81 	bl	b6c54 <ldiv>
   b5152:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b5154:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b5156:	2b09      	cmp	r3, #9
   b5158:	bfcc      	ite	gt
   b515a:	2237      	movgt	r2, #55	; 0x37
   b515c:	2230      	movle	r2, #48	; 0x30
   b515e:	fa52 f383 	uxtab	r3, r2, r3
   b5162:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b5166:	f108 0801 	add.w	r8, r8, #1
   b516a:	2800      	cmp	r0, #0
   b516c:	d1ec      	bne.n	b5148 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b516e:	4642      	mov	r2, r8
   b5170:	1c79      	adds	r1, r7, #1
   b5172:	4630      	mov	r0, r6
   b5174:	f001 fd82 	bl	b6c7c <memcpy>
      return str;
}
   b5178:	4628      	mov	r0, r5
   b517a:	b00c      	add	sp, #48	; 0x30
   b517c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b5180:	2a0a      	cmp	r2, #10
   b5182:	d0d5      	beq.n	b5130 <ltoa+0x18>
      if (uarg)
   b5184:	b118      	cbz	r0, b518e <ltoa+0x76>
   b5186:	462e      	mov	r6, r5
   b5188:	e7da      	b.n	b5140 <ltoa+0x28>
   b518a:	240a      	movs	r4, #10
   b518c:	e7fa      	b.n	b5184 <ltoa+0x6c>
      else  *tail-- = '0';
   b518e:	2330      	movs	r3, #48	; 0x30
   b5190:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b5194:	462e      	mov	r6, r5
   b5196:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b519a:	f04f 0802 	mov.w	r8, #2
   b519e:	e7e6      	b.n	b516e <ltoa+0x56>

000b51a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b51a0:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b51a2:	6843      	ldr	r3, [r0, #4]
   b51a4:	3b01      	subs	r3, #1
    {
   b51a6:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b51a8:	6043      	str	r3, [r0, #4]
   b51aa:	b963      	cbnz	r3, b51c6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b51ac:	6803      	ldr	r3, [r0, #0]
   b51ae:	689b      	ldr	r3, [r3, #8]
   b51b0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b51b2:	68a3      	ldr	r3, [r4, #8]
   b51b4:	3b01      	subs	r3, #1
   b51b6:	60a3      	str	r3, [r4, #8]
   b51b8:	b92b      	cbnz	r3, b51c6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b51ba:	6823      	ldr	r3, [r4, #0]
   b51bc:	4620      	mov	r0, r4
   b51be:	68db      	ldr	r3, [r3, #12]
        }
    }
   b51c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b51c4:	4718      	bx	r3
    }
   b51c6:	bd10      	pop	{r4, pc}

000b51c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b51c8:	4802      	ldr	r0, [pc, #8]	; (b51d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b51ca:	2300      	movs	r3, #0
   b51cc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b51ce:	f7ff bd5d 	b.w	b4c8c <os_mutex_recursive_create>
   b51d2:	bf00      	nop
   b51d4:	2003e6d0 	.word	0x2003e6d0

000b51d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b51d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b51da:	4606      	mov	r6, r0
   b51dc:	460d      	mov	r5, r1
  size_t n = 0;
   b51de:	188f      	adds	r7, r1, r2
   b51e0:	2400      	movs	r4, #0
  while (size--) {
   b51e2:	42bd      	cmp	r5, r7
   b51e4:	d00c      	beq.n	b5200 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b51e6:	6833      	ldr	r3, [r6, #0]
   b51e8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b51ec:	689b      	ldr	r3, [r3, #8]
   b51ee:	4630      	mov	r0, r6
   b51f0:	4798      	blx	r3
     if (chunk>=0)
   b51f2:	1e03      	subs	r3, r0, #0
   b51f4:	db01      	blt.n	b51fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b51f6:	441c      	add	r4, r3
  while (size--) {
   b51f8:	e7f3      	b.n	b51e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b51fa:	2c00      	cmp	r4, #0
   b51fc:	bf08      	it	eq
   b51fe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5200:	4620      	mov	r0, r4
   b5202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5204 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5204:	b513      	push	{r0, r1, r4, lr}
   b5206:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5208:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b520a:	b159      	cbz	r1, b5224 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b520c:	9101      	str	r1, [sp, #4]
   b520e:	f001 fda5 	bl	b6d5c <strlen>
   b5212:	6823      	ldr	r3, [r4, #0]
   b5214:	9901      	ldr	r1, [sp, #4]
   b5216:	68db      	ldr	r3, [r3, #12]
   b5218:	4602      	mov	r2, r0
   b521a:	4620      	mov	r0, r4
    }
   b521c:	b002      	add	sp, #8
   b521e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5222:	4718      	bx	r3
    }
   b5224:	b002      	add	sp, #8
   b5226:	bd10      	pop	{r4, pc}

000b5228 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5228:	b508      	push	{r3, lr}
  return write(str);
   b522a:	f7ff ffeb 	bl	b5204 <_ZN5Print5writeEPKc>
}
   b522e:	bd08      	pop	{r3, pc}

000b5230 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5230:	6803      	ldr	r3, [r0, #0]
   b5232:	689b      	ldr	r3, [r3, #8]
   b5234:	4718      	bx	r3

000b5236 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5236:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5238:	210d      	movs	r1, #13
{
   b523a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b523c:	f7ff fff8 	bl	b5230 <_ZN5Print5printEc>
  n += print('\n');
   b5240:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5242:	4604      	mov	r4, r0
  n += print('\n');
   b5244:	4628      	mov	r0, r5
   b5246:	f7ff fff3 	bl	b5230 <_ZN5Print5printEc>
  return n;
}
   b524a:	4420      	add	r0, r4
   b524c:	bd38      	pop	{r3, r4, r5, pc}

000b524e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b524e:	b538      	push	{r3, r4, r5, lr}
   b5250:	4605      	mov	r5, r0
  return write(str);
   b5252:	f7ff ffd7 	bl	b5204 <_ZN5Print5writeEPKc>
   b5256:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5258:	4628      	mov	r0, r5
   b525a:	f7ff ffec 	bl	b5236 <_ZN5Print7printlnEv>
  return n;
}
   b525e:	4420      	add	r0, r4
   b5260:	bd38      	pop	{r3, r4, r5, pc}

000b5262 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5262:	b530      	push	{r4, r5, lr}
   b5264:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5266:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5268:	2a01      	cmp	r2, #1
  *str = '\0';
   b526a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b526e:	bf98      	it	ls
   b5270:	220a      	movls	r2, #10
   b5272:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5274:	460d      	mov	r5, r1
   b5276:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b527a:	fb01 5312 	mls	r3, r1, r2, r5
   b527e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5282:	2b09      	cmp	r3, #9
   b5284:	bf94      	ite	ls
   b5286:	3330      	addls	r3, #48	; 0x30
   b5288:	3337      	addhi	r3, #55	; 0x37
   b528a:	b2db      	uxtb	r3, r3
  } while(n);
   b528c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b528e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5292:	d9ef      	bls.n	b5274 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5294:	4621      	mov	r1, r4
   b5296:	f7ff ffb5 	bl	b5204 <_ZN5Print5writeEPKc>
}
   b529a:	b00b      	add	sp, #44	; 0x2c
   b529c:	bd30      	pop	{r4, r5, pc}

000b529e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b529e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b52a2:	b086      	sub	sp, #24
   b52a4:	af00      	add	r7, sp, #0
   b52a6:	4605      	mov	r5, r0
   b52a8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b52aa:	1d38      	adds	r0, r7, #4
   b52ac:	2114      	movs	r1, #20
{
   b52ae:	4614      	mov	r4, r2
    va_copy(args2, args);
   b52b0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b52b2:	f7ff feb7 	bl	b5024 <vsnprintf>

    if (n<bufsize)
   b52b6:	2813      	cmp	r0, #19
   b52b8:	d80e      	bhi.n	b52d8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b52ba:	1d39      	adds	r1, r7, #4
   b52bc:	4628      	mov	r0, r5
   b52be:	f7ff ffa1 	bl	b5204 <_ZN5Print5writeEPKc>
   b52c2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b52c4:	b11e      	cbz	r6, b52ce <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b52c6:	4628      	mov	r0, r5
   b52c8:	f7ff ffb5 	bl	b5236 <_ZN5Print7printlnEv>
   b52cc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b52ce:	4620      	mov	r0, r4
   b52d0:	3718      	adds	r7, #24
   b52d2:	46bd      	mov	sp, r7
   b52d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b52d8:	f100 0308 	add.w	r3, r0, #8
   b52dc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b52e0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b52e2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b52e6:	4622      	mov	r2, r4
   b52e8:	1c41      	adds	r1, r0, #1
   b52ea:	683b      	ldr	r3, [r7, #0]
   b52ec:	4668      	mov	r0, sp
   b52ee:	f7ff fe99 	bl	b5024 <vsnprintf>
  return write(str);
   b52f2:	4669      	mov	r1, sp
   b52f4:	4628      	mov	r0, r5
   b52f6:	f7ff ff85 	bl	b5204 <_ZN5Print5writeEPKc>
   b52fa:	4604      	mov	r4, r0
   b52fc:	46c5      	mov	sp, r8
   b52fe:	e7e1      	b.n	b52c4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5300 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5300:	4b01      	ldr	r3, [pc, #4]	; (b5308 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5302:	4a02      	ldr	r2, [pc, #8]	; (b530c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5304:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5306:	4770      	bx	lr
   b5308:	2003e6d4 	.word	0x2003e6d4
   b530c:	000b723c 	.word	0x000b723c

000b5310 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5310:	4b02      	ldr	r3, [pc, #8]	; (b531c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5312:	681a      	ldr	r2, [r3, #0]
   b5314:	4b02      	ldr	r3, [pc, #8]	; (b5320 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5316:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5318:	4770      	bx	lr
   b531a:	bf00      	nop
   b531c:	2003e4f0 	.word	0x2003e4f0
   b5320:	2003e6d8 	.word	0x2003e6d8

000b5324 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5324:	2100      	movs	r1, #0
   b5326:	f7ff bde1 	b.w	b4eec <system_delay_ms>
	...

000b532c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b532c:	b510      	push	{r4, lr}
   b532e:	4b04      	ldr	r3, [pc, #16]	; (b5340 <_ZN9TCPClientD1Ev+0x14>)
   b5330:	6003      	str	r3, [r0, #0]
   b5332:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b5334:	6980      	ldr	r0, [r0, #24]
   b5336:	b108      	cbz	r0, b533c <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b5338:	f7ff ff32 	bl	b51a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b533c:	4620      	mov	r0, r4
   b533e:	bd10      	pop	{r4, pc}
   b5340:	000b7334 	.word	0x000b7334

000b5344 <_ZN9TCPClientD0Ev>:
   b5344:	b510      	push	{r4, lr}
   b5346:	4604      	mov	r4, r0
   b5348:	f7ff fff0 	bl	b532c <_ZN9TCPClientD1Ev>
   b534c:	4620      	mov	r0, r4
   b534e:	211c      	movs	r1, #28
   b5350:	f7fe fea3 	bl	b409a <_ZdlPvj>
   b5354:	4620      	mov	r0, r4
   b5356:	bd10      	pop	{r4, pc}

000b5358 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5358:	4b01      	ldr	r3, [pc, #4]	; (b5360 <_GLOBAL__sub_I_RGB+0x8>)
   b535a:	2200      	movs	r2, #0
   b535c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b535e:	4770      	bx	lr
   b5360:	2003e6dc 	.word	0x2003e6dc

000b5364 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5364:	4b01      	ldr	r3, [pc, #4]	; (b536c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5366:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5368:	4770      	bx	lr
   b536a:	bf00      	nop
   b536c:	2003e4f4 	.word	0x2003e4f4

000b5370 <serialEventRun>:
{
   b5370:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5372:	4b0b      	ldr	r3, [pc, #44]	; (b53a0 <serialEventRun+0x30>)
   b5374:	b143      	cbz	r3, b5388 <serialEventRun+0x18>
   b5376:	f000 f981 	bl	b567c <_Z16_fetch_usbserialv>
   b537a:	6803      	ldr	r3, [r0, #0]
   b537c:	691b      	ldr	r3, [r3, #16]
   b537e:	4798      	blx	r3
   b5380:	2800      	cmp	r0, #0
   b5382:	dd01      	ble.n	b5388 <serialEventRun+0x18>
        serialEvent();
   b5384:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5388:	4b06      	ldr	r3, [pc, #24]	; (b53a4 <serialEventRun+0x34>)
   b538a:	b143      	cbz	r3, b539e <serialEventRun+0x2e>
   b538c:	f000 fec6 	bl	b611c <_Z22__fetch_global_Serial1v>
   b5390:	6803      	ldr	r3, [r0, #0]
   b5392:	691b      	ldr	r3, [r3, #16]
   b5394:	4798      	blx	r3
   b5396:	2800      	cmp	r0, #0
   b5398:	dd01      	ble.n	b539e <serialEventRun+0x2e>
        serialEvent1();
   b539a:	f3af 8000 	nop.w
}
   b539e:	bd08      	pop	{r3, pc}
	...

000b53a8 <_post_loop>:
{
   b53a8:	b508      	push	{r3, lr}
	serialEventRun();
   b53aa:	f7ff ffe1 	bl	b5370 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b53ae:	f7ff fc55 	bl	b4c5c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b53b2:	4b01      	ldr	r3, [pc, #4]	; (b53b8 <_post_loop+0x10>)
   b53b4:	6018      	str	r0, [r3, #0]
}
   b53b6:	bd08      	pop	{r3, pc}
   b53b8:	2003e740 	.word	0x2003e740

000b53bc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b53bc:	4805      	ldr	r0, [pc, #20]	; (b53d4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b53be:	4a06      	ldr	r2, [pc, #24]	; (b53d8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b53c0:	4906      	ldr	r1, [pc, #24]	; (b53dc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b53c2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b53c4:	1a12      	subs	r2, r2, r0
   b53c6:	f001 fc59 	bl	b6c7c <memcpy>
    __backup_sram_signature = signature;
   b53ca:	4b05      	ldr	r3, [pc, #20]	; (b53e0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b53cc:	4a05      	ldr	r2, [pc, #20]	; (b53e4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b53ce:	601a      	str	r2, [r3, #0]
}
   b53d0:	bd08      	pop	{r3, pc}
   b53d2:	bf00      	nop
   b53d4:	2003f400 	.word	0x2003f400
   b53d8:	2003f404 	.word	0x2003f404
   b53dc:	000b75c4 	.word	0x000b75c4
   b53e0:	2003f400 	.word	0x2003f400
   b53e4:	9a271c1e 	.word	0x9a271c1e

000b53e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b53e8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b53ea:	2300      	movs	r3, #0
   b53ec:	9300      	str	r3, [sp, #0]
   b53ee:	461a      	mov	r2, r3
   b53f0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b53f4:	f7ff fd8c 	bl	b4f10 <system_ctrl_set_result>
}
   b53f8:	b003      	add	sp, #12
   b53fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5400 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5400:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5402:	8843      	ldrh	r3, [r0, #2]
   b5404:	2b0a      	cmp	r3, #10
   b5406:	d008      	beq.n	b541a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5408:	2b50      	cmp	r3, #80	; 0x50
   b540a:	d10b      	bne.n	b5424 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b540c:	4b09      	ldr	r3, [pc, #36]	; (b5434 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b540e:	681b      	ldr	r3, [r3, #0]
   b5410:	b14b      	cbz	r3, b5426 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5412:	b003      	add	sp, #12
   b5414:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5418:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b541a:	f7ff ffe5 	bl	b53e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b541e:	b003      	add	sp, #12
   b5420:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5424:	2300      	movs	r3, #0
   b5426:	9300      	str	r3, [sp, #0]
   b5428:	461a      	mov	r2, r3
   b542a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b542e:	f7ff fd6f 	bl	b4f10 <system_ctrl_set_result>
}
   b5432:	e7f4      	b.n	b541e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5434:	2003e6f0 	.word	0x2003e6f0

000b5438 <module_user_init_hook>:
{
   b5438:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b543a:	4812      	ldr	r0, [pc, #72]	; (b5484 <module_user_init_hook+0x4c>)
   b543c:	2100      	movs	r1, #0
   b543e:	f7ff fe09 	bl	b5054 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5442:	4b11      	ldr	r3, [pc, #68]	; (b5488 <module_user_init_hook+0x50>)
   b5444:	681a      	ldr	r2, [r3, #0]
   b5446:	4b11      	ldr	r3, [pc, #68]	; (b548c <module_user_init_hook+0x54>)
   b5448:	429a      	cmp	r2, r3
   b544a:	4b11      	ldr	r3, [pc, #68]	; (b5490 <module_user_init_hook+0x58>)
   b544c:	bf0c      	ite	eq
   b544e:	2201      	moveq	r2, #1
   b5450:	2200      	movne	r2, #0
   b5452:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5454:	d001      	beq.n	b545a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5456:	f7ff ffb1 	bl	b53bc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b545a:	f7ff fbef 	bl	b4c3c <HAL_RNG_GetRandomNumber>
   b545e:	4604      	mov	r4, r0
    srand(seed);
   b5460:	f001 fc3c 	bl	b6cdc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5464:	4b0b      	ldr	r3, [pc, #44]	; (b5494 <module_user_init_hook+0x5c>)
   b5466:	b113      	cbz	r3, b546e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5468:	4620      	mov	r0, r4
   b546a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b546e:	2100      	movs	r1, #0
   b5470:	4808      	ldr	r0, [pc, #32]	; (b5494 <module_user_init_hook+0x5c>)
   b5472:	f7ff fdbf 	bl	b4ff4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b547a:	4807      	ldr	r0, [pc, #28]	; (b5498 <module_user_init_hook+0x60>)
   b547c:	2100      	movs	r1, #0
   b547e:	f7ff bd3d 	b.w	b4efc <system_ctrl_set_app_request_handler>
   b5482:	bf00      	nop
   b5484:	000b5365 	.word	0x000b5365
   b5488:	2003f400 	.word	0x2003f400
   b548c:	9a271c1e 	.word	0x9a271c1e
   b5490:	2003e6ec 	.word	0x2003e6ec
   b5494:	00000000 	.word	0x00000000
   b5498:	000b5401 	.word	0x000b5401

000b549c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b549c:	4770      	bx	lr

000b549e <_ZN9IPAddressD0Ev>:
   b549e:	b510      	push	{r4, lr}
   b54a0:	2118      	movs	r1, #24
   b54a2:	4604      	mov	r4, r0
   b54a4:	f7fe fdf9 	bl	b409a <_ZdlPvj>
   b54a8:	4620      	mov	r0, r4
   b54aa:	bd10      	pop	{r4, pc}

000b54ac <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b54ac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b54ae:	7d03      	ldrb	r3, [r0, #20]
   b54b0:	2b06      	cmp	r3, #6
{
   b54b2:	b08d      	sub	sp, #52	; 0x34
   b54b4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b54b6:	f100 0704 	add.w	r7, r0, #4
   b54ba:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b54be:	d012      	beq.n	b54e6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b54c0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b54c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b54c8:	220a      	movs	r2, #10
   b54ca:	4630      	mov	r0, r6
   b54cc:	f7ff fec9 	bl	b5262 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b54d0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b54d2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b54d4:	d019      	beq.n	b550a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b54d6:	2c00      	cmp	r4, #0
   b54d8:	d0f4      	beq.n	b54c4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b54da:	212e      	movs	r1, #46	; 0x2e
   b54dc:	4630      	mov	r0, r6
   b54de:	f7ff fea7 	bl	b5230 <_ZN5Print5printEc>
   b54e2:	4404      	add	r4, r0
   b54e4:	e7ee      	b.n	b54c4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b54e6:	232f      	movs	r3, #47	; 0x2f
   b54e8:	466a      	mov	r2, sp
   b54ea:	4639      	mov	r1, r7
   b54ec:	200a      	movs	r0, #10
		buf[0] = 0;
   b54ee:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b54f2:	f7ff fbd3 	bl	b4c9c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b54f6:	4668      	mov	r0, sp
   b54f8:	f001 fc30 	bl	b6d5c <strlen>
   b54fc:	6833      	ldr	r3, [r6, #0]
   b54fe:	4602      	mov	r2, r0
   b5500:	68db      	ldr	r3, [r3, #12]
   b5502:	4669      	mov	r1, sp
   b5504:	4630      	mov	r0, r6
   b5506:	4798      	blx	r3
   b5508:	4604      	mov	r4, r0
    }
    return n;
}
   b550a:	4620      	mov	r0, r4
   b550c:	b00d      	add	sp, #52	; 0x34
   b550e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5510 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5510:	b510      	push	{r4, lr}
   b5512:	4b05      	ldr	r3, [pc, #20]	; (b5528 <_ZN9IPAddressC1Ev+0x18>)
   b5514:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5516:	2211      	movs	r2, #17
   b5518:	f840 3b04 	str.w	r3, [r0], #4
   b551c:	2100      	movs	r1, #0
   b551e:	f001 fbd5 	bl	b6ccc <memset>
}
   b5522:	4620      	mov	r0, r4
   b5524:	bd10      	pop	{r4, pc}
   b5526:	bf00      	nop
   b5528:	000b7264 	.word	0x000b7264

000b552c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b552c:	4603      	mov	r3, r0
   b552e:	4a07      	ldr	r2, [pc, #28]	; (b554c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5530:	b510      	push	{r4, lr}
   b5532:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5536:	f101 0210 	add.w	r2, r1, #16
   b553a:	f851 4b04 	ldr.w	r4, [r1], #4
   b553e:	f843 4b04 	str.w	r4, [r3], #4
   b5542:	4291      	cmp	r1, r2
   b5544:	d1f9      	bne.n	b553a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5546:	780a      	ldrb	r2, [r1, #0]
   b5548:	701a      	strb	r2, [r3, #0]
}
   b554a:	bd10      	pop	{r4, pc}
   b554c:	000b7264 	.word	0x000b7264

000b5550 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b5550:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b5552:	2b04      	cmp	r3, #4
   b5554:	d104      	bne.n	b5560 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b5556:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5558:	3800      	subs	r0, #0
   b555a:	bf18      	it	ne
   b555c:	2001      	movne	r0, #1
   b555e:	4770      	bx	lr
    } else if (version() == 6) {
   b5560:	2b06      	cmp	r3, #6
   b5562:	d107      	bne.n	b5574 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5564:	6843      	ldr	r3, [r0, #4]
   b5566:	b93b      	cbnz	r3, b5578 <_ZNK9IPAddresscvbEv+0x28>
   b5568:	6883      	ldr	r3, [r0, #8]
   b556a:	b92b      	cbnz	r3, b5578 <_ZNK9IPAddresscvbEv+0x28>
   b556c:	68c3      	ldr	r3, [r0, #12]
   b556e:	b91b      	cbnz	r3, b5578 <_ZNK9IPAddresscvbEv+0x28>
   b5570:	6900      	ldr	r0, [r0, #16]
   b5572:	e7f1      	b.n	b5558 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b5574:	2000      	movs	r0, #0
   b5576:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5578:	2001      	movs	r0, #1
}
   b557a:	4770      	bx	lr

000b557c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b557c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b557e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5582:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5586:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b558a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b558e:	2304      	movs	r3, #4
   b5590:	6041      	str	r1, [r0, #4]
   b5592:	7503      	strb	r3, [r0, #20]
}
   b5594:	bd10      	pop	{r4, pc}
	...

000b5598 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5598:	b507      	push	{r0, r1, r2, lr}
   b559a:	4b06      	ldr	r3, [pc, #24]	; (b55b4 <_ZN9IPAddressC1EPKh+0x1c>)
   b559c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b559e:	78cb      	ldrb	r3, [r1, #3]
   b55a0:	9300      	str	r3, [sp, #0]
   b55a2:	788b      	ldrb	r3, [r1, #2]
   b55a4:	784a      	ldrb	r2, [r1, #1]
   b55a6:	7809      	ldrb	r1, [r1, #0]
   b55a8:	f7ff ffe8 	bl	b557c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b55ac:	b003      	add	sp, #12
   b55ae:	f85d fb04 	ldr.w	pc, [sp], #4
   b55b2:	bf00      	nop
   b55b4:	000b7264 	.word	0x000b7264

000b55b8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b55b8:	7441      	strb	r1, [r0, #17]
}
   b55ba:	4770      	bx	lr

000b55bc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b55bc:	4770      	bx	lr

000b55be <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b55be:	4770      	bx	lr

000b55c0 <_ZN9USBSerial4readEv>:
{
   b55c0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b55c2:	2100      	movs	r1, #0
   b55c4:	7c00      	ldrb	r0, [r0, #16]
   b55c6:	f7ff fc59 	bl	b4e7c <HAL_USB_USART_Receive_Data>
}
   b55ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b55ce:	bd08      	pop	{r3, pc}

000b55d0 <_ZN9USBSerial4peekEv>:
{
   b55d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b55d2:	2101      	movs	r1, #1
   b55d4:	7c00      	ldrb	r0, [r0, #16]
   b55d6:	f7ff fc51 	bl	b4e7c <HAL_USB_USART_Receive_Data>
}
   b55da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b55de:	bd08      	pop	{r3, pc}

000b55e0 <_ZN9USBSerial17availableForWriteEv>:
{
   b55e0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b55e2:	7c00      	ldrb	r0, [r0, #16]
   b55e4:	f7ff fc42 	bl	b4e6c <HAL_USB_USART_Available_Data_For_Write>
}
   b55e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b55ec:	bd08      	pop	{r3, pc}

000b55ee <_ZN9USBSerial9availableEv>:
{
   b55ee:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b55f0:	7c00      	ldrb	r0, [r0, #16]
   b55f2:	f7ff fc33 	bl	b4e5c <HAL_USB_USART_Available_Data>
}
   b55f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b55fa:	bd08      	pop	{r3, pc}

000b55fc <_ZN9USBSerial5writeEh>:
{
   b55fc:	b513      	push	{r0, r1, r4, lr}
   b55fe:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5600:	7c00      	ldrb	r0, [r0, #16]
{
   b5602:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5604:	f7ff fc32 	bl	b4e6c <HAL_USB_USART_Available_Data_For_Write>
   b5608:	2800      	cmp	r0, #0
   b560a:	9901      	ldr	r1, [sp, #4]
   b560c:	dc01      	bgt.n	b5612 <_ZN9USBSerial5writeEh+0x16>
   b560e:	7c60      	ldrb	r0, [r4, #17]
   b5610:	b120      	cbz	r0, b561c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5612:	7c20      	ldrb	r0, [r4, #16]
   b5614:	f7ff fc3a 	bl	b4e8c <HAL_USB_USART_Send_Data>
   b5618:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b561c:	b002      	add	sp, #8
   b561e:	bd10      	pop	{r4, pc}

000b5620 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5620:	7c00      	ldrb	r0, [r0, #16]
   b5622:	f7ff bc3b 	b.w	b4e9c <HAL_USB_USART_Flush_Data>

000b5626 <_ZN9USBSerialD0Ev>:
   b5626:	b510      	push	{r4, lr}
   b5628:	2114      	movs	r1, #20
   b562a:	4604      	mov	r4, r0
   b562c:	f7fe fd35 	bl	b409a <_ZdlPvj>
   b5630:	4620      	mov	r0, r4
   b5632:	bd10      	pop	{r4, pc}

000b5634 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5634:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b563a:	4604      	mov	r4, r0
   b563c:	4608      	mov	r0, r1
   b563e:	2100      	movs	r1, #0
   b5640:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5644:	4b04      	ldr	r3, [pc, #16]	; (b5658 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5646:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5648:	2301      	movs	r3, #1
  _serial = serial;
   b564a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b564c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b564e:	4611      	mov	r1, r2
   b5650:	f7ff fbf4 	bl	b4e3c <HAL_USB_USART_Init>
}
   b5654:	4620      	mov	r0, r4
   b5656:	bd10      	pop	{r4, pc}
   b5658:	000b7278 	.word	0x000b7278

000b565c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b565c:	7c00      	ldrb	r0, [r0, #16]
   b565e:	2200      	movs	r2, #0
   b5660:	f7ff bbf4 	b.w	b4e4c <HAL_USB_USART_Begin>

000b5664 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b5664:	7c00      	ldrb	r0, [r0, #16]
   b5666:	f7ff bc21 	b.w	b4eac <HAL_USB_USART_Is_Connected>

000b566a <_Z19acquireSerialBufferv>:
{
   b566a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b566c:	2214      	movs	r2, #20
{
   b566e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5670:	2100      	movs	r1, #0
   b5672:	f001 fb2b 	bl	b6ccc <memset>
}
   b5676:	4620      	mov	r0, r4
   b5678:	bd10      	pop	{r4, pc}
	...

000b567c <_Z16_fetch_usbserialv>:
{
   b567c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b567e:	4c0f      	ldr	r4, [pc, #60]	; (b56bc <_Z16_fetch_usbserialv+0x40>)
{
   b5680:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5682:	a803      	add	r0, sp, #12
   b5684:	f7ff fff1 	bl	b566a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5688:	7821      	ldrb	r1, [r4, #0]
   b568a:	f3bf 8f5b 	dmb	ish
   b568e:	f011 0101 	ands.w	r1, r1, #1
   b5692:	d10f      	bne.n	b56b4 <_Z16_fetch_usbserialv+0x38>
   b5694:	4620      	mov	r0, r4
   b5696:	9101      	str	r1, [sp, #4]
   b5698:	f7fe fd0e 	bl	b40b8 <__cxa_guard_acquire>
   b569c:	9901      	ldr	r1, [sp, #4]
   b569e:	b148      	cbz	r0, b56b4 <_Z16_fetch_usbserialv+0x38>
   b56a0:	aa03      	add	r2, sp, #12
   b56a2:	4807      	ldr	r0, [pc, #28]	; (b56c0 <_Z16_fetch_usbserialv+0x44>)
   b56a4:	f7ff ffc6 	bl	b5634 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b56a8:	4620      	mov	r0, r4
   b56aa:	f7fe fd0a 	bl	b40c2 <__cxa_guard_release>
   b56ae:	4805      	ldr	r0, [pc, #20]	; (b56c4 <_Z16_fetch_usbserialv+0x48>)
   b56b0:	f001 faca 	bl	b6c48 <atexit>
	return _usbserial;
}
   b56b4:	4802      	ldr	r0, [pc, #8]	; (b56c0 <_Z16_fetch_usbserialv+0x44>)
   b56b6:	b008      	add	sp, #32
   b56b8:	bd10      	pop	{r4, pc}
   b56ba:	bf00      	nop
   b56bc:	2003e6f4 	.word	0x2003e6f4
   b56c0:	2003e6f8 	.word	0x2003e6f8
   b56c4:	000b55bd 	.word	0x000b55bd

000b56c8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b56c8:	4770      	bx	lr

000b56ca <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b56ca:	7441      	strb	r1, [r0, #17]
}
   b56cc:	4770      	bx	lr

000b56ce <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b56ce:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b56d0:	7c00      	ldrb	r0, [r0, #16]
   b56d2:	f7ff fb2b 	bl	b4d2c <hal_usart_available_data_for_write>
}
   b56d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b56da:	bd08      	pop	{r3, pc}

000b56dc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b56dc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b56de:	7c00      	ldrb	r0, [r0, #16]
   b56e0:	f7ff fafc 	bl	b4cdc <hal_usart_available>
}
   b56e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b56e8:	bd08      	pop	{r3, pc}

000b56ea <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b56ea:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b56ec:	7c00      	ldrb	r0, [r0, #16]
   b56ee:	f7ff fb05 	bl	b4cfc <hal_usart_peek>
}
   b56f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b56f6:	bd08      	pop	{r3, pc}

000b56f8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b56f8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b56fa:	7c00      	ldrb	r0, [r0, #16]
   b56fc:	f7ff faf6 	bl	b4cec <hal_usart_read>
}
   b5700:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5704:	bd08      	pop	{r3, pc}

000b5706 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5706:	7c00      	ldrb	r0, [r0, #16]
   b5708:	f7ff bb00 	b.w	b4d0c <hal_usart_flush>

000b570c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b570c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b570e:	7c45      	ldrb	r5, [r0, #17]
{
   b5710:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5712:	b12d      	cbz	r5, b5720 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5714:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5716:	b003      	add	sp, #12
   b5718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b571c:	f7ff bad6 	b.w	b4ccc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5720:	7c00      	ldrb	r0, [r0, #16]
   b5722:	9101      	str	r1, [sp, #4]
   b5724:	f7ff fb02 	bl	b4d2c <hal_usart_available_data_for_write>
   b5728:	2800      	cmp	r0, #0
   b572a:	9901      	ldr	r1, [sp, #4]
   b572c:	dcf2      	bgt.n	b5714 <_ZN11USARTSerial5writeEh+0x8>
}
   b572e:	4628      	mov	r0, r5
   b5730:	b003      	add	sp, #12
   b5732:	bd30      	pop	{r4, r5, pc}

000b5734 <_ZN11USARTSerialD0Ev>:
   b5734:	b510      	push	{r4, lr}
   b5736:	2114      	movs	r1, #20
   b5738:	4604      	mov	r4, r0
   b573a:	f7fe fcae 	bl	b409a <_ZdlPvj>
   b573e:	4620      	mov	r0, r4
   b5740:	bd10      	pop	{r4, pc}
	...

000b5744 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5744:	b510      	push	{r4, lr}
   b5746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b574a:	4604      	mov	r4, r0
   b574c:	4608      	mov	r0, r1
   b574e:	4611      	mov	r1, r2
   b5750:	2200      	movs	r2, #0
   b5752:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5756:	4b04      	ldr	r3, [pc, #16]	; (b5768 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5758:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b575a:	2301      	movs	r3, #1
  _serial = serial;
   b575c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b575e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5760:	f7ff faec 	bl	b4d3c <hal_usart_init_ex>
}
   b5764:	4620      	mov	r0, r4
   b5766:	bd10      	pop	{r4, pc}
   b5768:	000b72a8 	.word	0x000b72a8

000b576c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b576c:	4770      	bx	lr

000b576e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b576e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5770:	4606      	mov	r6, r0
   b5772:	4615      	mov	r5, r2
   b5774:	460c      	mov	r4, r1
   b5776:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5778:	42bc      	cmp	r4, r7
   b577a:	d006      	beq.n	b578a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b577c:	6833      	ldr	r3, [r6, #0]
   b577e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5782:	689b      	ldr	r3, [r3, #8]
   b5784:	4630      	mov	r0, r6
   b5786:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5788:	e7f6      	b.n	b5778 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b578a:	4628      	mov	r0, r5
   b578c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b578e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b578e:	7c00      	ldrb	r0, [r0, #16]
   b5790:	2200      	movs	r2, #0
   b5792:	f7ff badb 	b.w	b4d4c <hal_i2c_write>

000b5796 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5796:	7c00      	ldrb	r0, [r0, #16]
   b5798:	2100      	movs	r1, #0
   b579a:	f7ff badf 	b.w	b4d5c <hal_i2c_available>

000b579e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b579e:	7c00      	ldrb	r0, [r0, #16]
   b57a0:	2100      	movs	r1, #0
   b57a2:	f7ff bae3 	b.w	b4d6c <hal_i2c_read>

000b57a6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b57a6:	7c00      	ldrb	r0, [r0, #16]
   b57a8:	2100      	movs	r1, #0
   b57aa:	f7ff bae7 	b.w	b4d7c <hal_i2c_peek>

000b57ae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b57ae:	7c00      	ldrb	r0, [r0, #16]
   b57b0:	2100      	movs	r1, #0
   b57b2:	f7ff baeb 	b.w	b4d8c <hal_i2c_flush>

000b57b6 <_ZN7TwoWireD0Ev>:
   b57b6:	b510      	push	{r4, lr}
   b57b8:	2114      	movs	r1, #20
   b57ba:	4604      	mov	r4, r0
   b57bc:	f7fe fc6d 	bl	b409a <_ZdlPvj>
   b57c0:	4620      	mov	r0, r4
   b57c2:	bd10      	pop	{r4, pc}

000b57c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b57c4:	b538      	push	{r3, r4, r5, lr}
   b57c6:	4604      	mov	r4, r0
   b57c8:	4615      	mov	r5, r2
   b57ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b57ce:	2200      	movs	r2, #0
   b57d0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b57d4:	4b09      	ldr	r3, [pc, #36]	; (b57fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b57d6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b57d8:	4608      	mov	r0, r1
   b57da:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b57dc:	4629      	mov	r1, r5
   b57de:	f7ff fae5 	bl	b4dac <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b57e2:	30bf      	adds	r0, #191	; 0xbf
   b57e4:	d108      	bne.n	b57f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b57e6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b57e8:	07db      	lsls	r3, r3, #31
   b57ea:	d505      	bpl.n	b57f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b57ec:	6868      	ldr	r0, [r5, #4]
   b57ee:	f7ff fc11 	bl	b5014 <free>
    free(conf.tx_buffer);
   b57f2:	68e8      	ldr	r0, [r5, #12]
   b57f4:	f7ff fc0e 	bl	b5014 <free>
}
   b57f8:	4620      	mov	r0, r4
   b57fa:	bd38      	pop	{r3, r4, r5, pc}
   b57fc:	000b72d8 	.word	0x000b72d8

000b5800 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b5800:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5802:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b5804:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5808:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b580a:	2201      	movs	r2, #1
   b580c:	f04f 33ff 	mov.w	r3, #4294967295
   b5810:	f10d 0107 	add.w	r1, sp, #7
   b5814:	47a0      	blx	r4
}
   b5816:	b002      	add	sp, #8
   b5818:	bd10      	pop	{r4, pc}

000b581a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b581a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b581c:	6803      	ldr	r3, [r0, #0]
   b581e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5820:	f04f 33ff 	mov.w	r3, #4294967295
   b5824:	46a4      	mov	ip, r4
}
   b5826:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b582a:	4760      	bx	ip

000b582c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b582c:	b513      	push	{r0, r1, r4, lr}
   b582e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b5830:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5832:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b5836:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5838:	f10d 0107 	add.w	r1, sp, #7
   b583c:	2201      	movs	r2, #1
   b583e:	47a0      	blx	r4
}
   b5840:	b002      	add	sp, #8
   b5842:	bd10      	pop	{r4, pc}

000b5844 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b5844:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5846:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5848:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b584c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5850:	429a      	cmp	r2, r3
int TCPClient::read() {
   b5852:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5854:	d008      	beq.n	b5868 <_ZN9TCPClient4readEv+0x24>
   b5856:	6963      	ldr	r3, [r4, #20]
   b5858:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b585c:	1c51      	adds	r1, r2, #1
   b585e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b5862:	4413      	add	r3, r2
   b5864:	7918      	ldrb	r0, [r3, #4]
}
   b5866:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5868:	6803      	ldr	r3, [r0, #0]
   b586a:	691b      	ldr	r3, [r3, #16]
   b586c:	4798      	blx	r3
   b586e:	2800      	cmp	r0, #0
   b5870:	d1f1      	bne.n	b5856 <_ZN9TCPClient4readEv+0x12>
   b5872:	f04f 30ff 	mov.w	r0, #4294967295
   b5876:	e7f6      	b.n	b5866 <_ZN9TCPClient4readEv+0x22>

000b5878 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b5878:	4770      	bx	lr

000b587a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b587a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b587c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b587e:	43c0      	mvns	r0, r0
   b5880:	0fc0      	lsrs	r0, r0, #31
   b5882:	4770      	bx	lr

000b5884 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5884:	4770      	bx	lr
	...

000b5888 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5888:	4b06      	ldr	r3, [pc, #24]	; (b58a4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b588a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b588c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b588e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5892:	d005      	beq.n	b58a0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5894:	4608      	mov	r0, r1
   b5896:	f000 fca7 	bl	b61e8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b589a:	2800      	cmp	r0, #0
   b589c:	bf08      	it	eq
   b589e:	2400      	moveq	r4, #0
      }
   b58a0:	4620      	mov	r0, r4
   b58a2:	bd10      	pop	{r4, pc}
   b58a4:	000b7234 	.word	0x000b7234

000b58a8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b58a8:	b510      	push	{r4, lr}
   b58aa:	21ac      	movs	r1, #172	; 0xac
   b58ac:	4604      	mov	r4, r0
   b58ae:	f7fe fbf4 	bl	b409a <_ZdlPvj>
   b58b2:	4620      	mov	r0, r4
   b58b4:	bd10      	pop	{r4, pc}

000b58b6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b58b6:	21ac      	movs	r1, #172	; 0xac
   b58b8:	f7fe bbef 	b.w	b409a <_ZdlPvj>

000b58bc <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b58bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b58c0:	f04f 0800 	mov.w	r8, #0
   b58c4:	b086      	sub	sp, #24
   b58c6:	461c      	mov	r4, r3
   b58c8:	f8c0 8004 	str.w	r8, [r0, #4]
   b58cc:	4605      	mov	r5, r0
   b58ce:	460e      	mov	r6, r1
   b58d0:	4617      	mov	r7, r2
    struct timeval tv = {};
   b58d2:	4641      	mov	r1, r8
   b58d4:	2210      	movs	r2, #16
   b58d6:	a802      	add	r0, sp, #8
   b58d8:	f001 f9f8 	bl	b6ccc <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b58dc:	1c63      	adds	r3, r4, #1
   b58de:	d009      	beq.n	b58f4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b58e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b58e4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b58e8:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b58ec:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b58f0:	435c      	muls	r4, r3
   b58f2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b58f4:	6968      	ldr	r0, [r5, #20]
   b58f6:	2310      	movs	r3, #16
   b58f8:	9300      	str	r3, [sp, #0]
   b58fa:	6800      	ldr	r0, [r0, #0]
   b58fc:	ab02      	add	r3, sp, #8
   b58fe:	f241 0205 	movw	r2, #4101	; 0x1005
   b5902:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5906:	f7ff fa59 	bl	b4dbc <sock_setsockopt>
    if (ret < 0) {
   b590a:	2800      	cmp	r0, #0
   b590c:	da07      	bge.n	b591e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b590e:	f7ff fb91 	bl	b5034 <__errno>
   b5912:	6803      	ldr	r3, [r0, #0]
   b5914:	606b      	str	r3, [r5, #4]
        return 0;
   b5916:	2000      	movs	r0, #0
}
   b5918:	b006      	add	sp, #24
   b591a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b591e:	6968      	ldr	r0, [r5, #20]
   b5920:	2300      	movs	r3, #0
   b5922:	6800      	ldr	r0, [r0, #0]
   b5924:	463a      	mov	r2, r7
   b5926:	4631      	mov	r1, r6
   b5928:	f7ff fa68 	bl	b4dfc <sock_send>
    if (ret < 0) {
   b592c:	1e03      	subs	r3, r0, #0
   b592e:	dbee      	blt.n	b590e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b5930:	4618      	mov	r0, r3
   b5932:	e7f1      	b.n	b5918 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b5934 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5934:	b530      	push	{r4, r5, lr}
   b5936:	b087      	sub	sp, #28
   b5938:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b593a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b593c:	4668      	mov	r0, sp
   b593e:	f7ff fe2b 	bl	b5598 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5944:	3404      	adds	r4, #4
   b5946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5948:	682b      	ldr	r3, [r5, #0]
   b594a:	7023      	strb	r3, [r4, #0]
    }
   b594c:	b007      	add	sp, #28
   b594e:	bd30      	pop	{r4, r5, pc}

000b5950 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b5950:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b5952:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b5954:	4b05      	ldr	r3, [pc, #20]	; (b596c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b5956:	4604      	mov	r4, r0
   b5958:	358c      	adds	r5, #140	; 0x8c
   b595a:	f844 3b04 	str.w	r3, [r4], #4
   b595e:	4606      	mov	r6, r0
   b5960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5964:	682b      	ldr	r3, [r5, #0]
   b5966:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5968:	4630      	mov	r0, r6
   b596a:	bd70      	pop	{r4, r5, r6, pc}
   b596c:	000b7264 	.word	0x000b7264

000b5970 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5974:	4698      	mov	r8, r3
    stop();
   b5976:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5978:	b093      	sub	sp, #76	; 0x4c
   b597a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b597c:	2400      	movs	r4, #0
    stop();
   b597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5980:	4606      	mov	r6, r0
   b5982:	4617      	mov	r7, r2
    stop();
   b5984:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5986:	4628      	mov	r0, r5
   b5988:	466b      	mov	r3, sp
   b598a:	4622      	mov	r2, r4
   b598c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b598e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5990:	f7ff f914 	bl	b4bbc <netdb_getaddrinfo>
   b5994:	4605      	mov	r5, r0
   b5996:	2800      	cmp	r0, #0
   b5998:	d163      	bne.n	b5a62 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b599a:	9b00      	ldr	r3, [sp, #0]
   b599c:	2b00      	cmp	r3, #0
   b599e:	d04b      	beq.n	b5a38 <_ZN9TCPClient7connectEPKctm+0xc8>
   b59a0:	695b      	ldr	r3, [r3, #20]
   b59a2:	2b00      	cmp	r3, #0
   b59a4:	d048      	beq.n	b5a38 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b59a6:	a806      	add	r0, sp, #24
   b59a8:	f7ff fdb2 	bl	b5510 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b59ac:	9b00      	ldr	r3, [sp, #0]
   b59ae:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b59b0:	7863      	ldrb	r3, [r4, #1]
   b59b2:	2b02      	cmp	r3, #2
   b59b4:	d104      	bne.n	b59c0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b59b6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b59b8:	a806      	add	r0, sp, #24
   b59ba:	f7ff ffbb 	bl	b5934 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b59be:	e026      	b.n	b5a0e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b59c0:	2b0a      	cmp	r3, #10
   b59c2:	d124      	bne.n	b5a0e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b59c4:	2211      	movs	r2, #17
   b59c6:	4629      	mov	r1, r5
   b59c8:	a801      	add	r0, sp, #4
   b59ca:	f001 f97f 	bl	b6ccc <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b59ce:	68a3      	ldr	r3, [r4, #8]
   b59d0:	2b00      	cmp	r3, #0
   b59d2:	d038      	beq.n	b5a46 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b59d4:	f104 0308 	add.w	r3, r4, #8
   b59d8:	f10d 0c04 	add.w	ip, sp, #4
   b59dc:	3418      	adds	r4, #24
   b59de:	6818      	ldr	r0, [r3, #0]
   b59e0:	6859      	ldr	r1, [r3, #4]
   b59e2:	4662      	mov	r2, ip
   b59e4:	c203      	stmia	r2!, {r0, r1}
   b59e6:	3308      	adds	r3, #8
   b59e8:	42a3      	cmp	r3, r4
   b59ea:	4694      	mov	ip, r2
   b59ec:	d1f7      	bne.n	b59de <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b59ee:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b59f0:	a901      	add	r1, sp, #4
   b59f2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b59f4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b59f8:	f7ff fd98 	bl	b552c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b59fc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b5a00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5a04:	ac07      	add	r4, sp, #28
   b5a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5a08:	f8dc 3000 	ldr.w	r3, [ip]
   b5a0c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b5a0e:	a806      	add	r0, sp, #24
   b5a10:	f7ff fd9e 	bl	b5550 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5a14:	b180      	cbz	r0, b5a38 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b5a16:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b5a18:	ad07      	add	r5, sp, #28
   b5a1a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b5a1e:	4b12      	ldr	r3, [pc, #72]	; (b5a68 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b5a20:	930c      	str	r3, [sp, #48]	; 0x30
   b5a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5a24:	ac0d      	add	r4, sp, #52	; 0x34
   b5a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5a28:	682b      	ldr	r3, [r5, #0]
   b5a2a:	7023      	strb	r3, [r4, #0]
   b5a2c:	463a      	mov	r2, r7
   b5a2e:	4643      	mov	r3, r8
   b5a30:	a90c      	add	r1, sp, #48	; 0x30
   b5a32:	4630      	mov	r0, r6
   b5a34:	47c8      	blx	r9
   b5a36:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b5a38:	9800      	ldr	r0, [sp, #0]
   b5a3a:	f7ff f8b7 	bl	b4bac <netdb_freeaddrinfo>
}
   b5a3e:	4628      	mov	r0, r5
   b5a40:	b013      	add	sp, #76	; 0x4c
   b5a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5a46:	68e3      	ldr	r3, [r4, #12]
   b5a48:	2b00      	cmp	r3, #0
   b5a4a:	d1c3      	bne.n	b59d4 <_ZN9TCPClient7connectEPKctm+0x64>
   b5a4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5a50:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b5a54:	f7ff f92a 	bl	b4cac <inet_htonl>
   b5a58:	4581      	cmp	r9, r0
   b5a5a:	d1bb      	bne.n	b59d4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b5a5c:	f104 0114 	add.w	r1, r4, #20
   b5a60:	e7aa      	b.n	b59b8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5a62:	4625      	mov	r5, r4
   b5a64:	e7e8      	b.n	b5a38 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5a66:	bf00      	nop
   b5a68:	000b7264 	.word	0x000b7264

000b5a6c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b5a6c:	b538      	push	{r3, r4, r5, lr}
   b5a6e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b5a70:	681a      	ldr	r2, [r3, #0]
   b5a72:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b5a74:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b5a76:	da10      	bge.n	b5a9a <_ZN9TCPClient9connectedEv+0x2e>
   b5a78:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5a7c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5a80:	429a      	cmp	r2, r3
   b5a82:	d10a      	bne.n	b5a9a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b5a84:	6803      	ldr	r3, [r0, #0]
   b5a86:	691b      	ldr	r3, [r3, #16]
   b5a88:	4798      	blx	r3
        if (!rv) {
   b5a8a:	4604      	mov	r4, r0
   b5a8c:	b928      	cbnz	r0, b5a9a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b5a8e:	682b      	ldr	r3, [r5, #0]
   b5a90:	4628      	mov	r0, r5
   b5a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5a94:	4798      	blx	r3
        rv = available();
   b5a96:	4620      	mov	r0, r4
}
   b5a98:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b5a9a:	2001      	movs	r0, #1
   b5a9c:	e7fc      	b.n	b5a98 <_ZN9TCPClient9connectedEv+0x2c>

000b5a9e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b5a9e:	b510      	push	{r4, lr}
   b5aa0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5aa2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5aa6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5aaa:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b5aac:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5aae:	d005      	beq.n	b5abc <_ZN9TCPClient4peekEv+0x1e>
   b5ab0:	6963      	ldr	r3, [r4, #20]
   b5ab2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5ab6:	4413      	add	r3, r2
   b5ab8:	7918      	ldrb	r0, [r3, #4]
}
   b5aba:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5abc:	6803      	ldr	r3, [r0, #0]
   b5abe:	691b      	ldr	r3, [r3, #16]
   b5ac0:	4798      	blx	r3
   b5ac2:	2800      	cmp	r0, #0
   b5ac4:	d1f4      	bne.n	b5ab0 <_ZN9TCPClient4peekEv+0x12>
   b5ac6:	f04f 30ff 	mov.w	r0, #4294967295
   b5aca:	e7f6      	b.n	b5aba <_ZN9TCPClient4peekEv+0x1c>

000b5acc <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5ace:	6943      	ldr	r3, [r0, #20]
   b5ad0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b5ad2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5ad6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5ada:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5adc:	4605      	mov	r5, r0
   b5ade:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5ae0:	d016      	beq.n	b5b10 <_ZN9TCPClient4readEPhj+0x44>
   b5ae2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b5ae4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b5ae8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5aec:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5aee:	42bc      	cmp	r4, r7
   b5af0:	bf28      	it	cs
   b5af2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5af4:	3304      	adds	r3, #4
   b5af6:	4622      	mov	r2, r4
   b5af8:	4419      	add	r1, r3
   b5afa:	4630      	mov	r0, r6
   b5afc:	f001 f8be 	bl	b6c7c <memcpy>
   b5b00:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b5b02:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b5b06:	4423      	add	r3, r4
   b5b08:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5b0c:	4620      	mov	r0, r4
   b5b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5b10:	6803      	ldr	r3, [r0, #0]
   b5b12:	691b      	ldr	r3, [r3, #16]
   b5b14:	4798      	blx	r3
   b5b16:	2800      	cmp	r0, #0
   b5b18:	d1e3      	bne.n	b5ae2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b5b1a:	f04f 34ff 	mov.w	r4, #4294967295
   b5b1e:	e7f5      	b.n	b5b0c <_ZN9TCPClient4readEPhj+0x40>

000b5b20 <_ZN9TCPClient12flush_bufferEv>:
   b5b20:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b5b22:	2300      	movs	r3, #0
   b5b24:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b5b28:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b5b2a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b5b2e:	4770      	bx	lr

000b5b30 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5b34:	461f      	mov	r7, r3
    stop();
   b5b36:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5b38:	460c      	mov	r4, r1
    stop();
   b5b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5b3c:	b08a      	sub	sp, #40	; 0x28
   b5b3e:	4605      	mov	r5, r0
   b5b40:	4616      	mov	r6, r2
    stop();
   b5b42:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b5b44:	7d23      	ldrb	r3, [r4, #20]
   b5b46:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b5b4a:	2b04      	cmp	r3, #4
   b5b4c:	bf0c      	ite	eq
   b5b4e:	2002      	moveq	r0, #2
   b5b50:	200a      	movne	r0, #10
   b5b52:	2206      	movs	r2, #6
   b5b54:	2101      	movs	r1, #1
   b5b56:	f7ff f959 	bl	b4e0c <sock_socket>
   b5b5a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b5b5e:	696b      	ldr	r3, [r5, #20]
   b5b60:	681b      	ldr	r3, [r3, #0]
   b5b62:	2b00      	cmp	r3, #0
   b5b64:	da08      	bge.n	b5b78 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b5b66:	682b      	ldr	r3, [r5, #0]
   b5b68:	4628      	mov	r0, r5
   b5b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5b6c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b5b6e:	4798      	blx	r3
}
   b5b70:	4620      	mov	r0, r4
   b5b72:	b00a      	add	sp, #40	; 0x28
   b5b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5b78:	4628      	mov	r0, r5
   b5b7a:	f7ff ffd1 	bl	b5b20 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b5b7e:	b1b7      	cbz	r7, b5bae <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5b80:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5b82:	a903      	add	r1, sp, #12
   b5b84:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b5b86:	9303      	str	r3, [sp, #12]
   b5b88:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5b8c:	f7ff f84e 	bl	b4c2c <if_index_to_name>
   b5b90:	2800      	cmp	r0, #0
   b5b92:	d1e8      	bne.n	b5b66 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5b94:	6968      	ldr	r0, [r5, #20]
   b5b96:	2306      	movs	r3, #6
   b5b98:	9300      	str	r3, [sp, #0]
   b5b9a:	6800      	ldr	r0, [r0, #0]
   b5b9c:	ab03      	add	r3, sp, #12
   b5b9e:	f241 020b 	movw	r2, #4107	; 0x100b
   b5ba2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5ba6:	f7ff f909 	bl	b4dbc <sock_setsockopt>
   b5baa:	2800      	cmp	r0, #0
   b5bac:	d1db      	bne.n	b5b66 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b5bae:	221c      	movs	r2, #28
   b5bb0:	2100      	movs	r1, #0
   b5bb2:	a803      	add	r0, sp, #12
   b5bb4:	f001 f88a 	bl	b6ccc <memset>
    if (ip.version() == 4) {
   b5bb8:	7d23      	ldrb	r3, [r4, #20]
   b5bba:	2b04      	cmp	r3, #4
   b5bbc:	d11d      	bne.n	b5bfa <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b5bbe:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5bc2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5bc4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5bc8:	f7ff f878 	bl	b4cbc <inet_htons>
   b5bcc:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5bd0:	6860      	ldr	r0, [r4, #4]
   b5bd2:	f7ff f86b 	bl	b4cac <inet_htonl>
   b5bd6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5bd8:	696b      	ldr	r3, [r5, #20]
   b5bda:	221c      	movs	r2, #28
   b5bdc:	6818      	ldr	r0, [r3, #0]
   b5bde:	a903      	add	r1, sp, #12
   b5be0:	f7ff f8fc 	bl	b4ddc <sock_connect>
   b5be4:	2800      	cmp	r0, #0
   b5be6:	d1be      	bne.n	b5b66 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b5be8:	3404      	adds	r4, #4
   b5bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5bec:	696d      	ldr	r5, [r5, #20]
   b5bee:	358c      	adds	r5, #140	; 0x8c
   b5bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5bf2:	6823      	ldr	r3, [r4, #0]
   b5bf4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b5bf6:	2401      	movs	r4, #1
   b5bf8:	e7ba      	b.n	b5b70 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b5bfa:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5bfe:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5c00:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b5c04:	f7ff f85a 	bl	b4cbc <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5c08:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b5c0a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5c0e:	1d23      	adds	r3, r4, #4
   b5c10:	f104 0714 	add.w	r7, r4, #20
   b5c14:	6818      	ldr	r0, [r3, #0]
   b5c16:	6859      	ldr	r1, [r3, #4]
   b5c18:	4632      	mov	r2, r6
   b5c1a:	c203      	stmia	r2!, {r0, r1}
   b5c1c:	3308      	adds	r3, #8
   b5c1e:	42bb      	cmp	r3, r7
   b5c20:	4616      	mov	r6, r2
   b5c22:	d1f7      	bne.n	b5c14 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b5c24:	e7d8      	b.n	b5bd8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b5c28 <_ZN9TCPClient9availableEv>:
{
   b5c28:	b530      	push	{r4, r5, lr}
   b5c2a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b5c2c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b5c30:	b08b      	sub	sp, #44	; 0x2c
   b5c32:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b5c34:	b12b      	cbz	r3, b5c42 <_ZN9TCPClient9availableEv+0x1a>
   b5c36:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b5c3a:	429a      	cmp	r2, r3
   b5c3c:	d101      	bne.n	b5c42 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b5c3e:	f7ff ff6f 	bl	b5b20 <_ZN9TCPClient12flush_bufferEv>
   b5c42:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b5c44:	6808      	ldr	r0, [r1, #0]
   b5c46:	2800      	cmp	r0, #0
   b5c48:	db18      	blt.n	b5c7c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b5c4a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b5c4e:	2d7f      	cmp	r5, #127	; 0x7f
   b5c50:	d814      	bhi.n	b5c7c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b5c52:	3104      	adds	r1, #4
   b5c54:	2308      	movs	r3, #8
   b5c56:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b5c5a:	4429      	add	r1, r5
   b5c5c:	f7ff f8c6 	bl	b4dec <sock_recv>
            if (ret > 0) {
   b5c60:	2800      	cmp	r0, #0
   b5c62:	dd13      	ble.n	b5c8c <_ZN9TCPClient9availableEv+0x64>
   b5c64:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b5c66:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5c6a:	b90a      	cbnz	r2, b5c70 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b5c6c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b5c70:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b5c72:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5c76:	4410      	add	r0, r2
   b5c78:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b5c7c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b5c7e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b5c82:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b5c86:	1ac0      	subs	r0, r0, r3
   b5c88:	b00b      	add	sp, #44	; 0x2c
   b5c8a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b5c8c:	f7ff f9d2 	bl	b5034 <__errno>
   b5c90:	6803      	ldr	r3, [r0, #0]
   b5c92:	2b0b      	cmp	r3, #11
   b5c94:	d0f2      	beq.n	b5c7c <_ZN9TCPClient9availableEv+0x54>
   b5c96:	f7ff f9cd 	bl	b5034 <__errno>
   b5c9a:	6803      	ldr	r3, [r0, #0]
   b5c9c:	2b0b      	cmp	r3, #11
   b5c9e:	d0ed      	beq.n	b5c7c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5ca0:	2320      	movs	r3, #32
   b5ca2:	2500      	movs	r5, #0
   b5ca4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b5ca8:	f7ff f9c4 	bl	b5034 <__errno>
   b5cac:	6803      	ldr	r3, [r0, #0]
   b5cae:	9301      	str	r3, [sp, #4]
   b5cb0:	4b08      	ldr	r3, [pc, #32]	; (b5cd4 <_ZN9TCPClient9availableEv+0xac>)
   b5cb2:	4909      	ldr	r1, [pc, #36]	; (b5cd8 <_ZN9TCPClient9availableEv+0xb0>)
   b5cb4:	9300      	str	r3, [sp, #0]
   b5cb6:	aa02      	add	r2, sp, #8
   b5cb8:	462b      	mov	r3, r5
   b5cba:	2032      	movs	r0, #50	; 0x32
   b5cbc:	f7ff f906 	bl	b4ecc <log_message>
                    sock_close(d_->sock);
   b5cc0:	6963      	ldr	r3, [r4, #20]
   b5cc2:	6818      	ldr	r0, [r3, #0]
   b5cc4:	f7ff f882 	bl	b4dcc <sock_close>
   b5cc8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b5cca:	f04f 32ff 	mov.w	r2, #4294967295
   b5cce:	601a      	str	r2, [r3, #0]
   b5cd0:	e7d4      	b.n	b5c7c <_ZN9TCPClient9availableEv+0x54>
   b5cd2:	bf00      	nop
   b5cd4:	000b72ff 	.word	0x000b72ff
   b5cd8:	000b72f8 	.word	0x000b72f8

000b5cdc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5cdc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b5cde:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5ce0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b5ce2:	6818      	ldr	r0, [r3, #0]
   b5ce4:	2800      	cmp	r0, #0
   b5ce6:	db01      	blt.n	b5cec <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b5ce8:	f7ff f870 	bl	b4dcc <sock_close>
   b5cec:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5cee:	f04f 32ff 	mov.w	r2, #4294967295
   b5cf2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5cf4:	6960      	ldr	r0, [r4, #20]
   b5cf6:	2211      	movs	r2, #17
   b5cf8:	2100      	movs	r1, #0
   b5cfa:	308c      	adds	r0, #140	; 0x8c
   b5cfc:	f000 ffe6 	bl	b6ccc <memset>
    flush_buffer();
   b5d00:	4620      	mov	r0, r4
}
   b5d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b5d06:	f7ff bf0b 	b.w	b5b20 <_ZN9TCPClient12flush_bufferEv>

000b5d0a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b5d0a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5d0c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5d0e:	4604      	mov	r4, r0
          total(0) {
   b5d10:	6001      	str	r1, [r0, #0]
   b5d12:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b5d16:	3088      	adds	r0, #136	; 0x88
   b5d18:	f7ff fbfa 	bl	b5510 <_ZN9IPAddressC1Ev>
}
   b5d1c:	4620      	mov	r0, r4
   b5d1e:	bd10      	pop	{r4, pc}

000b5d20 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b5d20:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5d22:	2300      	movs	r3, #0
   b5d24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5d28:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b5d2c:	4a0e      	ldr	r2, [pc, #56]	; (b5d68 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b5d2e:	6103      	str	r3, [r0, #16]
   b5d30:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5d32:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b5d34:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5d36:	20ac      	movs	r0, #172	; 0xac
   b5d38:	9101      	str	r1, [sp, #4]
   b5d3a:	f7fe f9aa 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5d3e:	1e05      	subs	r5, r0, #0
   b5d40:	f105 060c 	add.w	r6, r5, #12
   b5d44:	d008      	beq.n	b5d58 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b5d46:	2301      	movs	r3, #1
   b5d48:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5d4c:	4b07      	ldr	r3, [pc, #28]	; (b5d6c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5d4e:	9901      	ldr	r1, [sp, #4]
   b5d50:	602b      	str	r3, [r5, #0]
   b5d52:	4630      	mov	r0, r6
   b5d54:	f7ff ffd9 	bl	b5d0a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b5d58:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b5d5a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b5d5e:	f7ff fedf 	bl	b5b20 <_ZN9TCPClient12flush_bufferEv>
}
   b5d62:	b002      	add	sp, #8
   b5d64:	bd70      	pop	{r4, r5, r6, pc}
   b5d66:	bf00      	nop
   b5d68:	000b7334 	.word	0x000b7334
   b5d6c:	000b7318 	.word	0x000b7318

000b5d70 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b5d70:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b5d72:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b5d76:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b5d78:	f7ff ffd2 	bl	b5d20 <_ZN9TCPClientC1Ei>
}
   b5d7c:	4620      	mov	r0, r4
   b5d7e:	bd10      	pop	{r4, pc}

000b5d80 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b5d80:	b510      	push	{r4, lr}
   b5d82:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b5d84:	6800      	ldr	r0, [r0, #0]
   b5d86:	2800      	cmp	r0, #0
   b5d88:	db01      	blt.n	b5d8e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b5d8a:	f7ff f81f 	bl	b4dcc <sock_close>
    }
}
   b5d8e:	4620      	mov	r0, r4
   b5d90:	bd10      	pop	{r4, pc}

000b5d92 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b5d92:	300c      	adds	r0, #12
   b5d94:	f7ff bff4 	b.w	b5d80 <_ZN9TCPClient4DataD1Ev>

000b5d98 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5d98:	2200      	movs	r2, #0
   b5d9a:	6840      	ldr	r0, [r0, #4]
   b5d9c:	4611      	mov	r1, r2
   b5d9e:	f7ff b8d9 	b.w	b4f54 <network_ready>

000b5da2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5da2:	2200      	movs	r2, #0
   b5da4:	6840      	ldr	r0, [r0, #4]
   b5da6:	4611      	mov	r1, r2
   b5da8:	f7ff b8f4 	b.w	b4f94 <network_listening>

000b5dac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5dac:	2200      	movs	r2, #0
   b5dae:	6840      	ldr	r0, [r0, #4]
   b5db0:	4611      	mov	r1, r2
   b5db2:	f7ff b8ff 	b.w	b4fb4 <network_get_listen_timeout>

000b5db6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5db6:	6840      	ldr	r0, [r0, #4]
   b5db8:	2200      	movs	r2, #0
   b5dba:	f7ff b8f3 	b.w	b4fa4 <network_set_listen_timeout>

000b5dbe <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5dbe:	6840      	ldr	r0, [r0, #4]
   b5dc0:	2200      	movs	r2, #0
   b5dc2:	f081 0101 	eor.w	r1, r1, #1
   b5dc6:	f7ff b8dd 	b.w	b4f84 <network_listen>

000b5dca <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5dca:	2300      	movs	r3, #0
   b5dcc:	6840      	ldr	r0, [r0, #4]
   b5dce:	461a      	mov	r2, r3
   b5dd0:	4619      	mov	r1, r3
   b5dd2:	f7ff b8cf 	b.w	b4f74 <network_off>

000b5dd6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5dd6:	2300      	movs	r3, #0
   b5dd8:	6840      	ldr	r0, [r0, #4]
   b5dda:	461a      	mov	r2, r3
   b5ddc:	4619      	mov	r1, r3
   b5dde:	f7ff b8c1 	b.w	b4f64 <network_on>

000b5de2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5de2:	2200      	movs	r2, #0
   b5de4:	6840      	ldr	r0, [r0, #4]
   b5de6:	4611      	mov	r1, r2
   b5de8:	f7ff b8a4 	b.w	b4f34 <network_connecting>

000b5dec <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5dec:	6840      	ldr	r0, [r0, #4]
   b5dee:	2200      	movs	r2, #0
   b5df0:	2102      	movs	r1, #2
   b5df2:	f7ff b8a7 	b.w	b4f44 <network_disconnect>

000b5df6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5df6:	2300      	movs	r3, #0
   b5df8:	6840      	ldr	r0, [r0, #4]
   b5dfa:	461a      	mov	r2, r3
   b5dfc:	f7ff b892 	b.w	b4f24 <network_connect>

000b5e00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5e00:	4b02      	ldr	r3, [pc, #8]	; (b5e0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5e02:	2204      	movs	r2, #4
   b5e04:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5e06:	4a02      	ldr	r2, [pc, #8]	; (b5e10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5e08:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5e0a:	4770      	bx	lr
   b5e0c:	2003e70c 	.word	0x2003e70c
   b5e10:	000b7380 	.word	0x000b7380

000b5e14 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5e14:	2300      	movs	r3, #0
   b5e16:	6840      	ldr	r0, [r0, #4]
   b5e18:	461a      	mov	r2, r3
   b5e1a:	f7ff b883 	b.w	b4f24 <network_connect>

000b5e1e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5e1e:	6840      	ldr	r0, [r0, #4]
   b5e20:	2200      	movs	r2, #0
   b5e22:	2102      	movs	r1, #2
   b5e24:	f7ff b88e 	b.w	b4f44 <network_disconnect>

000b5e28 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5e28:	2200      	movs	r2, #0
   b5e2a:	6840      	ldr	r0, [r0, #4]
   b5e2c:	4611      	mov	r1, r2
   b5e2e:	f7ff b881 	b.w	b4f34 <network_connecting>

000b5e32 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5e32:	2200      	movs	r2, #0
   b5e34:	6840      	ldr	r0, [r0, #4]
   b5e36:	4611      	mov	r1, r2
   b5e38:	f7ff b88c 	b.w	b4f54 <network_ready>

000b5e3c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5e3c:	2300      	movs	r3, #0
   b5e3e:	6840      	ldr	r0, [r0, #4]
   b5e40:	461a      	mov	r2, r3
   b5e42:	4619      	mov	r1, r3
   b5e44:	f7ff b88e 	b.w	b4f64 <network_on>

000b5e48 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5e48:	2300      	movs	r3, #0
   b5e4a:	6840      	ldr	r0, [r0, #4]
   b5e4c:	461a      	mov	r2, r3
   b5e4e:	4619      	mov	r1, r3
   b5e50:	f7ff b890 	b.w	b4f74 <network_off>

000b5e54 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5e54:	6840      	ldr	r0, [r0, #4]
   b5e56:	2100      	movs	r1, #0
   b5e58:	f7ff b8b4 	b.w	b4fc4 <network_is_on>

000b5e5c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5e5c:	6840      	ldr	r0, [r0, #4]
   b5e5e:	2100      	movs	r1, #0
   b5e60:	f7ff b8b8 	b.w	b4fd4 <network_is_off>

000b5e64 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5e64:	6840      	ldr	r0, [r0, #4]
   b5e66:	2200      	movs	r2, #0
   b5e68:	f081 0101 	eor.w	r1, r1, #1
   b5e6c:	f7ff b88a 	b.w	b4f84 <network_listen>

000b5e70 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5e70:	6840      	ldr	r0, [r0, #4]
   b5e72:	2200      	movs	r2, #0
   b5e74:	f7ff b896 	b.w	b4fa4 <network_set_listen_timeout>

000b5e78 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5e78:	2200      	movs	r2, #0
   b5e7a:	6840      	ldr	r0, [r0, #4]
   b5e7c:	4611      	mov	r1, r2
   b5e7e:	f7ff b899 	b.w	b4fb4 <network_get_listen_timeout>

000b5e82 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5e82:	2200      	movs	r2, #0
   b5e84:	6840      	ldr	r0, [r0, #4]
   b5e86:	4611      	mov	r1, r2
   b5e88:	f7ff b884 	b.w	b4f94 <network_listening>

000b5e8c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5e90:	b095      	sub	sp, #84	; 0x54
   b5e92:	4614      	mov	r4, r2
   b5e94:	460d      	mov	r5, r1
   b5e96:	4607      	mov	r7, r0
    IPAddress addr;
   b5e98:	f7ff fb3a 	bl	b5510 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5e9c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5e9e:	221c      	movs	r2, #28
   b5ea0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5ea2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5ea4:	f000 ff12 	bl	b6ccc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5ea8:	2340      	movs	r3, #64	; 0x40
   b5eaa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5eac:	4620      	mov	r0, r4
   b5eae:	466b      	mov	r3, sp
   b5eb0:	aa0c      	add	r2, sp, #48	; 0x30
   b5eb2:	2100      	movs	r1, #0
   b5eb4:	f7fe fe82 	bl	b4bbc <netdb_getaddrinfo>
    if (!r) {
   b5eb8:	4604      	mov	r4, r0
   b5eba:	2800      	cmp	r0, #0
   b5ebc:	d14b      	bne.n	b5f56 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5ebe:	4602      	mov	r2, r0
   b5ec0:	2101      	movs	r1, #1
   b5ec2:	6868      	ldr	r0, [r5, #4]
   b5ec4:	f7ff f846 	bl	b4f54 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5ec8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5eca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5ecc:	4622      	mov	r2, r4
   b5ece:	6868      	ldr	r0, [r5, #4]
   b5ed0:	f7ff f840 	bl	b4f54 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5ed4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5ed6:	4681      	mov	r9, r0
        bool ok = false;
   b5ed8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5eda:	2e00      	cmp	r6, #0
   b5edc:	d03b      	beq.n	b5f56 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5ede:	2900      	cmp	r1, #0
   b5ee0:	d139      	bne.n	b5f56 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5ee2:	6873      	ldr	r3, [r6, #4]
   b5ee4:	2b02      	cmp	r3, #2
   b5ee6:	d003      	beq.n	b5ef0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5ee8:	2b0a      	cmp	r3, #10
   b5eea:	d011      	beq.n	b5f10 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5eec:	69f6      	ldr	r6, [r6, #28]
   b5eee:	e7f4      	b.n	b5eda <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5ef0:	f1b8 0f00 	cmp.w	r8, #0
   b5ef4:	d0fa      	beq.n	b5eec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5ef6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5ef8:	a806      	add	r0, sp, #24
   b5efa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5efc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5efe:	f7ff fb4b 	bl	b5598 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5f04:	1d3c      	adds	r4, r7, #4
   b5f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5f08:	682b      	ldr	r3, [r5, #0]
   b5f0a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5f0c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5f0e:	e7ed      	b.n	b5eec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5f10:	f1b9 0f00 	cmp.w	r9, #0
   b5f14:	d0ea      	beq.n	b5eec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5f16:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5f18:	2210      	movs	r2, #16
   b5f1a:	a801      	add	r0, sp, #4
   b5f1c:	f000 fed6 	bl	b6ccc <memset>
                    a.v = 6;
   b5f20:	2306      	movs	r3, #6
   b5f22:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5f26:	ad01      	add	r5, sp, #4
   b5f28:	f104 0308 	add.w	r3, r4, #8
   b5f2c:	3418      	adds	r4, #24
   b5f2e:	6818      	ldr	r0, [r3, #0]
   b5f30:	6859      	ldr	r1, [r3, #4]
   b5f32:	462a      	mov	r2, r5
   b5f34:	c203      	stmia	r2!, {r0, r1}
   b5f36:	3308      	adds	r3, #8
   b5f38:	42a3      	cmp	r3, r4
   b5f3a:	4615      	mov	r5, r2
   b5f3c:	d1f7      	bne.n	b5f2e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5f3e:	a901      	add	r1, sp, #4
   b5f40:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5f42:	ad07      	add	r5, sp, #28
   b5f44:	f7ff faf2 	bl	b552c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5f4a:	1d3c      	adds	r4, r7, #4
   b5f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5f4e:	682b      	ldr	r3, [r5, #0]
   b5f50:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5f52:	4649      	mov	r1, r9
   b5f54:	e7ca      	b.n	b5eec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5f56:	9800      	ldr	r0, [sp, #0]
   b5f58:	f7fe fe28 	bl	b4bac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5f5c:	4638      	mov	r0, r7
   b5f5e:	b015      	add	sp, #84	; 0x54
   b5f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5f64 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5f64:	4b02      	ldr	r3, [pc, #8]	; (b5f70 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5f66:	4a03      	ldr	r2, [pc, #12]	; (b5f74 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5f68:	601a      	str	r2, [r3, #0]
   b5f6a:	2200      	movs	r2, #0
   b5f6c:	605a      	str	r2, [r3, #4]

} // spark
   b5f6e:	4770      	bx	lr
   b5f70:	2003e714 	.word	0x2003e714
   b5f74:	000b73bc 	.word	0x000b73bc

000b5f78 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5f78:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5f7a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5f7c:	d902      	bls.n	b5f84 <pinAvailable+0xc>
    return false;
   b5f7e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5f80:	b002      	add	sp, #8
   b5f82:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5f84:	f1a0 030b 	sub.w	r3, r0, #11
   b5f88:	2b02      	cmp	r3, #2
   b5f8a:	d81a      	bhi.n	b5fc2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5f8c:	4c17      	ldr	r4, [pc, #92]	; (b5fec <pinAvailable+0x74>)
   b5f8e:	7821      	ldrb	r1, [r4, #0]
   b5f90:	f3bf 8f5b 	dmb	ish
   b5f94:	f011 0101 	ands.w	r1, r1, #1
   b5f98:	d10b      	bne.n	b5fb2 <pinAvailable+0x3a>
   b5f9a:	4620      	mov	r0, r4
   b5f9c:	9101      	str	r1, [sp, #4]
   b5f9e:	f7fe f88b 	bl	b40b8 <__cxa_guard_acquire>
   b5fa2:	9901      	ldr	r1, [sp, #4]
   b5fa4:	b128      	cbz	r0, b5fb2 <pinAvailable+0x3a>
   b5fa6:	4812      	ldr	r0, [pc, #72]	; (b5ff0 <pinAvailable+0x78>)
   b5fa8:	f7ff f89a 	bl	b50e0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5fac:	4620      	mov	r0, r4
   b5fae:	f7fe f888 	bl	b40c2 <__cxa_guard_release>
   b5fb2:	4b0f      	ldr	r3, [pc, #60]	; (b5ff0 <pinAvailable+0x78>)
   b5fb4:	7818      	ldrb	r0, [r3, #0]
   b5fb6:	f7fe ff39 	bl	b4e2c <hal_spi_is_enabled>
   b5fba:	2800      	cmp	r0, #0
   b5fbc:	d1df      	bne.n	b5f7e <pinAvailable+0x6>
  return true; // 'pin' is available
   b5fbe:	2001      	movs	r0, #1
   b5fc0:	e7de      	b.n	b5f80 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5fc2:	2801      	cmp	r0, #1
   b5fc4:	d809      	bhi.n	b5fda <pinAvailable+0x62>
   b5fc6:	f000 f8e9 	bl	b619c <_Z19__fetch_global_Wirev>
   b5fca:	2100      	movs	r1, #0
   b5fcc:	7c00      	ldrb	r0, [r0, #16]
   b5fce:	f7fe fee5 	bl	b4d9c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5fd2:	f080 0001 	eor.w	r0, r0, #1
   b5fd6:	b2c0      	uxtb	r0, r0
   b5fd8:	e7d2      	b.n	b5f80 <pinAvailable+0x8>
   b5fda:	3809      	subs	r0, #9
   b5fdc:	2801      	cmp	r0, #1
   b5fde:	d8ee      	bhi.n	b5fbe <pinAvailable+0x46>
   b5fe0:	f000 f89c 	bl	b611c <_Z22__fetch_global_Serial1v>
   b5fe4:	7c00      	ldrb	r0, [r0, #16]
   b5fe6:	f7fe fe99 	bl	b4d1c <hal_usart_is_enabled>
   b5fea:	e7f2      	b.n	b5fd2 <pinAvailable+0x5a>
   b5fec:	2003e71c 	.word	0x2003e71c
   b5ff0:	2003e720 	.word	0x2003e720

000b5ff4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5ff4:	2823      	cmp	r0, #35	; 0x23
{
   b5ff6:	b538      	push	{r3, r4, r5, lr}
   b5ff8:	4604      	mov	r4, r0
   b5ffa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5ffc:	d80a      	bhi.n	b6014 <pinMode+0x20>
   b5ffe:	29ff      	cmp	r1, #255	; 0xff
   b6000:	d008      	beq.n	b6014 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6002:	f7ff ffb9 	bl	b5f78 <pinAvailable>
   b6006:	b128      	cbz	r0, b6014 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6008:	4629      	mov	r1, r5
   b600a:	4620      	mov	r0, r4
}
   b600c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6010:	f7fe bde4 	b.w	b4bdc <HAL_Pin_Mode>
}
   b6014:	bd38      	pop	{r3, r4, r5, pc}

000b6016 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6016:	b538      	push	{r3, r4, r5, lr}
   b6018:	4604      	mov	r4, r0
   b601a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b601c:	f7fe fde6 	bl	b4bec <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6020:	28ff      	cmp	r0, #255	; 0xff
   b6022:	d010      	beq.n	b6046 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6024:	2806      	cmp	r0, #6
   b6026:	d804      	bhi.n	b6032 <digitalWrite+0x1c>
   b6028:	234d      	movs	r3, #77	; 0x4d
   b602a:	fa23 f000 	lsr.w	r0, r3, r0
   b602e:	07c3      	lsls	r3, r0, #31
   b6030:	d409      	bmi.n	b6046 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6032:	4620      	mov	r0, r4
   b6034:	f7ff ffa0 	bl	b5f78 <pinAvailable>
   b6038:	b128      	cbz	r0, b6046 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b603a:	4629      	mov	r1, r5
   b603c:	4620      	mov	r0, r4
}
   b603e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6042:	f7fe bddb 	b.w	b4bfc <HAL_GPIO_Write>
}
   b6046:	bd38      	pop	{r3, r4, r5, pc}

000b6048 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b6048:	b510      	push	{r4, lr}
   b604a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b604c:	f7fe fdce 	bl	b4bec <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6050:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b6052:	b2db      	uxtb	r3, r3
   b6054:	2b01      	cmp	r3, #1
   b6056:	d908      	bls.n	b606a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6058:	4620      	mov	r0, r4
   b605a:	f7ff ff8d 	bl	b5f78 <pinAvailable>
   b605e:	b120      	cbz	r0, b606a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b6060:	4620      	mov	r0, r4
}
   b6062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b6066:	f7fe bdd1 	b.w	b4c0c <HAL_GPIO_Read>
}
   b606a:	2000      	movs	r0, #0
   b606c:	bd10      	pop	{r4, pc}

000b606e <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b606e:	280d      	cmp	r0, #13
{
   b6070:	b510      	push	{r4, lr}
   b6072:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b6074:	bf9c      	itt	ls
   b6076:	340e      	addls	r4, #14
   b6078:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b607a:	4620      	mov	r0, r4
   b607c:	f7ff ff7c 	bl	b5f78 <pinAvailable>
   b6080:	b150      	cbz	r0, b6098 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b6082:	2103      	movs	r1, #3
   b6084:	4620      	mov	r0, r4
   b6086:	f7fe fda1 	bl	b4bcc <HAL_Validate_Pin_Function>
   b608a:	2803      	cmp	r0, #3
   b608c:	d104      	bne.n	b6098 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b608e:	4620      	mov	r0, r4
}
   b6090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b6094:	f7fe bdc2 	b.w	b4c1c <hal_adc_read>
}
   b6098:	2000      	movs	r0, #0
   b609a:	bd10      	pop	{r4, pc}

000b609c <shiftIn>:
  }

  return hal_pwm_get_max_frequency(pin);
}

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
   b609c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b60a0:	4690      	mov	r8, r2
   b60a2:	2507      	movs	r5, #7
  uint8_t value = 0;
   b60a4:	2400      	movs	r4, #0
  uint8_t i;

  for (i = 0; i < 8; ++i) {
    digitalWrite(clockPin, HIGH);
   b60a6:	460e      	mov	r6, r1
    if (bitOrder == LSBFIRST)
      value |= digitalRead(dataPin) << i;
   b60a8:	4607      	mov	r7, r0
    digitalWrite(clockPin, HIGH);
   b60aa:	4630      	mov	r0, r6
   b60ac:	2101      	movs	r1, #1
   b60ae:	f7ff ffb2 	bl	b6016 <digitalWrite>
    if (bitOrder == LSBFIRST)
   b60b2:	f1c5 0907 	rsb	r9, r5, #7
      value |= digitalRead(dataPin) << i;
   b60b6:	b264      	sxtb	r4, r4
   b60b8:	4638      	mov	r0, r7
    if (bitOrder == LSBFIRST)
   b60ba:	f1b8 0f00 	cmp.w	r8, #0
   b60be:	d10e      	bne.n	b60de <shiftIn+0x42>
      value |= digitalRead(dataPin) << i;
   b60c0:	f7ff ffc2 	bl	b6048 <digitalRead>
   b60c4:	fa00 f009 	lsl.w	r0, r0, r9
    else
      value |= digitalRead(dataPin) << (7 - i);
   b60c8:	4304      	orrs	r4, r0
    digitalWrite(clockPin, LOW);
   b60ca:	2100      	movs	r1, #0
   b60cc:	4630      	mov	r0, r6
   b60ce:	f7ff ffa2 	bl	b6016 <digitalWrite>
  for (i = 0; i < 8; ++i) {
   b60d2:	3d01      	subs	r5, #1
      value |= digitalRead(dataPin) << (7 - i);
   b60d4:	b2e4      	uxtb	r4, r4
  for (i = 0; i < 8; ++i) {
   b60d6:	d2e8      	bcs.n	b60aa <shiftIn+0xe>
  }
  return value;
}
   b60d8:	4620      	mov	r0, r4
   b60da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      value |= digitalRead(dataPin) << (7 - i);
   b60de:	f7ff ffb3 	bl	b6048 <digitalRead>
   b60e2:	40a8      	lsls	r0, r5
   b60e4:	e7f0      	b.n	b60c8 <shiftIn+0x2c>

000b60e6 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b60e6:	4770      	bx	lr

000b60e8 <_Z20acquireSerial1Bufferv>:
{
   b60e8:	b538      	push	{r3, r4, r5, lr}
   b60ea:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b60ec:	2514      	movs	r5, #20
   b60ee:	462a      	mov	r2, r5
   b60f0:	2100      	movs	r1, #0
   b60f2:	f000 fdeb 	bl	b6ccc <memset>
   b60f6:	8025      	strh	r5, [r4, #0]
   b60f8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b60fa:	4907      	ldr	r1, [pc, #28]	; (b6118 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b60fc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b60fe:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6100:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6102:	f000 f86f 	bl	b61e4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6106:	4904      	ldr	r1, [pc, #16]	; (b6118 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6108:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b610a:	4628      	mov	r0, r5
   b610c:	f000 f86a 	bl	b61e4 <_ZnajRKSt9nothrow_t>
    };
   b6110:	60e0      	str	r0, [r4, #12]
}
   b6112:	4620      	mov	r0, r4
   b6114:	bd38      	pop	{r3, r4, r5, pc}
   b6116:	bf00      	nop
   b6118:	000b73f0 	.word	0x000b73f0

000b611c <_Z22__fetch_global_Serial1v>:
{
   b611c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b611e:	4d0e      	ldr	r5, [pc, #56]	; (b6158 <_Z22__fetch_global_Serial1v+0x3c>)
   b6120:	7829      	ldrb	r1, [r5, #0]
   b6122:	f3bf 8f5b 	dmb	ish
   b6126:	f011 0401 	ands.w	r4, r1, #1
{
   b612a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b612c:	d111      	bne.n	b6152 <_Z22__fetch_global_Serial1v+0x36>
   b612e:	4628      	mov	r0, r5
   b6130:	f7fd ffc2 	bl	b40b8 <__cxa_guard_acquire>
   b6134:	b168      	cbz	r0, b6152 <_Z22__fetch_global_Serial1v+0x36>
   b6136:	a801      	add	r0, sp, #4
   b6138:	f7ff ffd6 	bl	b60e8 <_Z20acquireSerial1Bufferv>
   b613c:	aa01      	add	r2, sp, #4
   b613e:	4621      	mov	r1, r4
   b6140:	4806      	ldr	r0, [pc, #24]	; (b615c <_Z22__fetch_global_Serial1v+0x40>)
   b6142:	f7ff faff 	bl	b5744 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6146:	4628      	mov	r0, r5
   b6148:	f7fd ffbb 	bl	b40c2 <__cxa_guard_release>
   b614c:	4804      	ldr	r0, [pc, #16]	; (b6160 <_Z22__fetch_global_Serial1v+0x44>)
   b614e:	f000 fd7b 	bl	b6c48 <atexit>
    return serial1;
}
   b6152:	4802      	ldr	r0, [pc, #8]	; (b615c <_Z22__fetch_global_Serial1v+0x40>)
   b6154:	b007      	add	sp, #28
   b6156:	bd30      	pop	{r4, r5, pc}
   b6158:	2003e728 	.word	0x2003e728
   b615c:	2003e72c 	.word	0x2003e72c
   b6160:	000b60e7 	.word	0x000b60e7

000b6164 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6164:	4770      	bx	lr
	...

000b6168 <_Z17acquireWireBufferv>:
{
   b6168:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b616a:	4b0a      	ldr	r3, [pc, #40]	; (b6194 <_Z17acquireWireBufferv+0x2c>)
   b616c:	6003      	str	r3, [r0, #0]
   b616e:	2301      	movs	r3, #1
{
   b6170:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6172:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6174:	4908      	ldr	r1, [pc, #32]	; (b6198 <_Z17acquireWireBufferv+0x30>)
   b6176:	2020      	movs	r0, #32
   b6178:	f000 f834 	bl	b61e4 <_ZnajRKSt9nothrow_t>
	};
   b617c:	2520      	movs	r5, #32
   b617e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6180:	4905      	ldr	r1, [pc, #20]	; (b6198 <_Z17acquireWireBufferv+0x30>)
	};
   b6182:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6184:	4628      	mov	r0, r5
   b6186:	f000 f82d 	bl	b61e4 <_ZnajRKSt9nothrow_t>
	};
   b618a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b618e:	4620      	mov	r0, r4
   b6190:	bd38      	pop	{r3, r4, r5, pc}
   b6192:	bf00      	nop
   b6194:	00010018 	.word	0x00010018
   b6198:	000b73f0 	.word	0x000b73f0

000b619c <_Z19__fetch_global_Wirev>:
{
   b619c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b619e:	4d0e      	ldr	r5, [pc, #56]	; (b61d8 <_Z19__fetch_global_Wirev+0x3c>)
   b61a0:	7829      	ldrb	r1, [r5, #0]
   b61a2:	f3bf 8f5b 	dmb	ish
   b61a6:	f011 0401 	ands.w	r4, r1, #1
{
   b61aa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b61ac:	d111      	bne.n	b61d2 <_Z19__fetch_global_Wirev+0x36>
   b61ae:	4628      	mov	r0, r5
   b61b0:	f7fd ff82 	bl	b40b8 <__cxa_guard_acquire>
   b61b4:	b168      	cbz	r0, b61d2 <_Z19__fetch_global_Wirev+0x36>
   b61b6:	4668      	mov	r0, sp
   b61b8:	f7ff ffd6 	bl	b6168 <_Z17acquireWireBufferv>
   b61bc:	466a      	mov	r2, sp
   b61be:	4621      	mov	r1, r4
   b61c0:	4806      	ldr	r0, [pc, #24]	; (b61dc <_Z19__fetch_global_Wirev+0x40>)
   b61c2:	f7ff faff 	bl	b57c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b61c6:	4628      	mov	r0, r5
   b61c8:	f7fd ff7b 	bl	b40c2 <__cxa_guard_release>
   b61cc:	4804      	ldr	r0, [pc, #16]	; (b61e0 <_Z19__fetch_global_Wirev+0x44>)
   b61ce:	f000 fd3b 	bl	b6c48 <atexit>
	return wire;
}
   b61d2:	4802      	ldr	r0, [pc, #8]	; (b61dc <_Z19__fetch_global_Wirev+0x40>)
   b61d4:	b007      	add	sp, #28
   b61d6:	bd30      	pop	{r4, r5, pc}
   b61d8:	2003e744 	.word	0x2003e744
   b61dc:	2003e748 	.word	0x2003e748
   b61e0:	000b6165 	.word	0x000b6165

000b61e4 <_ZnajRKSt9nothrow_t>:
   b61e4:	f7fd bf57 	b.w	b4096 <_Znaj>

000b61e8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b61e8:	4901      	ldr	r1, [pc, #4]	; (b61f0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b61ea:	f000 b8f9 	b.w	b63e0 <_ZNKSt9type_infoeqERKS_>
   b61ee:	bf00      	nop
   b61f0:	000b740c 	.word	0x000b740c

000b61f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b61f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b61f6:	2400      	movs	r4, #0
   b61f8:	2310      	movs	r3, #16
   b61fa:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b61fe:	6803      	ldr	r3, [r0, #0]
   b6200:	4615      	mov	r5, r2
   b6202:	699e      	ldr	r6, [r3, #24]
   b6204:	6812      	ldr	r2, [r2, #0]
   b6206:	466b      	mov	r3, sp
   b6208:	e9cd 4400 	strd	r4, r4, [sp]
   b620c:	47b0      	blx	r6
   b620e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6212:	f003 0306 	and.w	r3, r3, #6
   b6216:	2b06      	cmp	r3, #6
   b6218:	bf03      	ittte	eq
   b621a:	9b00      	ldreq	r3, [sp, #0]
   b621c:	602b      	streq	r3, [r5, #0]
   b621e:	2001      	moveq	r0, #1
   b6220:	4620      	movne	r0, r4
   b6222:	b004      	add	sp, #16
   b6224:	bd70      	pop	{r4, r5, r6, pc}

000b6226 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6226:	9800      	ldr	r0, [sp, #0]
   b6228:	4290      	cmp	r0, r2
   b622a:	bf14      	ite	ne
   b622c:	2001      	movne	r0, #1
   b622e:	2006      	moveq	r0, #6
   b6230:	4770      	bx	lr
	...

000b6234 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6234:	b510      	push	{r4, lr}
   b6236:	4b03      	ldr	r3, [pc, #12]	; (b6244 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6238:	6003      	str	r3, [r0, #0]
   b623a:	4604      	mov	r4, r0
   b623c:	f000 f8cd 	bl	b63da <_ZNSt9type_infoD1Ev>
   b6240:	4620      	mov	r0, r4
   b6242:	bd10      	pop	{r4, pc}
   b6244:	000b744c 	.word	0x000b744c

000b6248 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6248:	b510      	push	{r4, lr}
   b624a:	4604      	mov	r4, r0
   b624c:	f7ff fff2 	bl	b6234 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6250:	4620      	mov	r0, r4
   b6252:	2108      	movs	r1, #8
   b6254:	f7fd ff21 	bl	b409a <_ZdlPvj>
   b6258:	4620      	mov	r0, r4
   b625a:	bd10      	pop	{r4, pc}

000b625c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b625c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6260:	461f      	mov	r7, r3
   b6262:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6266:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b626a:	4598      	cmp	r8, r3
   b626c:	4606      	mov	r6, r0
   b626e:	4615      	mov	r5, r2
   b6270:	d107      	bne.n	b6282 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6272:	9907      	ldr	r1, [sp, #28]
   b6274:	f000 f8b4 	bl	b63e0 <_ZNKSt9type_infoeqERKS_>
   b6278:	b118      	cbz	r0, b6282 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b627a:	7165      	strb	r5, [r4, #5]
   b627c:	2000      	movs	r0, #0
   b627e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6282:	4639      	mov	r1, r7
   b6284:	4630      	mov	r0, r6
   b6286:	f000 f8ab 	bl	b63e0 <_ZNKSt9type_infoeqERKS_>
   b628a:	2800      	cmp	r0, #0
   b628c:	d0f6      	beq.n	b627c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b628e:	2301      	movs	r3, #1
   b6290:	f8c4 8000 	str.w	r8, [r4]
   b6294:	7125      	strb	r5, [r4, #4]
   b6296:	71a3      	strb	r3, [r4, #6]
   b6298:	e7f0      	b.n	b627c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b629a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b629a:	b538      	push	{r3, r4, r5, lr}
   b629c:	4615      	mov	r5, r2
   b629e:	461c      	mov	r4, r3
   b62a0:	f000 f89e 	bl	b63e0 <_ZNKSt9type_infoeqERKS_>
   b62a4:	b120      	cbz	r0, b62b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b62a6:	2308      	movs	r3, #8
   b62a8:	60e3      	str	r3, [r4, #12]
   b62aa:	2306      	movs	r3, #6
   b62ac:	6025      	str	r5, [r4, #0]
   b62ae:	7123      	strb	r3, [r4, #4]
   b62b0:	bd38      	pop	{r3, r4, r5, pc}

000b62b2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b62b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b62b4:	4605      	mov	r5, r0
   b62b6:	460c      	mov	r4, r1
   b62b8:	9201      	str	r2, [sp, #4]
   b62ba:	461e      	mov	r6, r3
   b62bc:	f000 f890 	bl	b63e0 <_ZNKSt9type_infoeqERKS_>
   b62c0:	b950      	cbnz	r0, b62d8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b62c2:	2e03      	cmp	r6, #3
   b62c4:	d808      	bhi.n	b62d8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b62c6:	6823      	ldr	r3, [r4, #0]
   b62c8:	9a01      	ldr	r2, [sp, #4]
   b62ca:	695b      	ldr	r3, [r3, #20]
   b62cc:	4629      	mov	r1, r5
   b62ce:	4620      	mov	r0, r4
   b62d0:	b002      	add	sp, #8
   b62d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b62d6:	4718      	bx	r3
   b62d8:	b002      	add	sp, #8
   b62da:	bd70      	pop	{r4, r5, r6, pc}

000b62dc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b62dc:	b510      	push	{r4, lr}
   b62de:	4b03      	ldr	r3, [pc, #12]	; (b62ec <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b62e0:	6003      	str	r3, [r0, #0]
   b62e2:	4604      	mov	r4, r0
   b62e4:	f7ff ffa6 	bl	b6234 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b62e8:	4620      	mov	r0, r4
   b62ea:	bd10      	pop	{r4, pc}
   b62ec:	000b74ac 	.word	0x000b74ac

000b62f0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b62f0:	b510      	push	{r4, lr}
   b62f2:	4604      	mov	r4, r0
   b62f4:	f7ff fff2 	bl	b62dc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b62f8:	4620      	mov	r0, r4
   b62fa:	210c      	movs	r1, #12
   b62fc:	f7fd fecd 	bl	b409a <_ZdlPvj>
   b6300:	4620      	mov	r0, r4
   b6302:	bd10      	pop	{r4, pc}

000b6304 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6306:	9f08      	ldr	r7, [sp, #32]
   b6308:	4297      	cmp	r7, r2
   b630a:	4605      	mov	r5, r0
   b630c:	460e      	mov	r6, r1
   b630e:	4614      	mov	r4, r2
   b6310:	d00a      	beq.n	b6328 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b6312:	68a8      	ldr	r0, [r5, #8]
   b6314:	6802      	ldr	r2, [r0, #0]
   b6316:	9708      	str	r7, [sp, #32]
   b6318:	6a15      	ldr	r5, [r2, #32]
   b631a:	4631      	mov	r1, r6
   b631c:	4622      	mov	r2, r4
   b631e:	46ac      	mov	ip, r5
   b6320:	b003      	add	sp, #12
   b6322:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6326:	4760      	bx	ip
   b6328:	4619      	mov	r1, r3
   b632a:	9301      	str	r3, [sp, #4]
   b632c:	f000 f858 	bl	b63e0 <_ZNKSt9type_infoeqERKS_>
   b6330:	9b01      	ldr	r3, [sp, #4]
   b6332:	2800      	cmp	r0, #0
   b6334:	d0ed      	beq.n	b6312 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6336:	2006      	movs	r0, #6
   b6338:	b003      	add	sp, #12
   b633a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b633c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b633c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6340:	460d      	mov	r5, r1
   b6342:	4619      	mov	r1, r3
   b6344:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6348:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b634c:	4681      	mov	r9, r0
   b634e:	4617      	mov	r7, r2
   b6350:	4698      	mov	r8, r3
   b6352:	f000 f845 	bl	b63e0 <_ZNKSt9type_infoeqERKS_>
   b6356:	b190      	cbz	r0, b637e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6358:	2d00      	cmp	r5, #0
   b635a:	6034      	str	r4, [r6, #0]
   b635c:	7137      	strb	r7, [r6, #4]
   b635e:	db09      	blt.n	b6374 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6360:	1961      	adds	r1, r4, r5
   b6362:	458a      	cmp	sl, r1
   b6364:	bf0c      	ite	eq
   b6366:	2106      	moveq	r1, #6
   b6368:	2101      	movne	r1, #1
   b636a:	71b1      	strb	r1, [r6, #6]
   b636c:	2000      	movs	r0, #0
   b636e:	b001      	add	sp, #4
   b6370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6374:	3502      	adds	r5, #2
   b6376:	d1f9      	bne.n	b636c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6378:	2301      	movs	r3, #1
   b637a:	71b3      	strb	r3, [r6, #6]
   b637c:	e7f6      	b.n	b636c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b637e:	4554      	cmp	r4, sl
   b6380:	d106      	bne.n	b6390 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6382:	4659      	mov	r1, fp
   b6384:	4648      	mov	r0, r9
   b6386:	f000 f82b 	bl	b63e0 <_ZNKSt9type_infoeqERKS_>
   b638a:	b108      	cbz	r0, b6390 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b638c:	7177      	strb	r7, [r6, #5]
   b638e:	e7ed      	b.n	b636c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6390:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6394:	6803      	ldr	r3, [r0, #0]
   b6396:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b639a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b639e:	69dc      	ldr	r4, [r3, #28]
   b63a0:	463a      	mov	r2, r7
   b63a2:	4643      	mov	r3, r8
   b63a4:	4629      	mov	r1, r5
   b63a6:	46a4      	mov	ip, r4
   b63a8:	b001      	add	sp, #4
   b63aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b63ae:	4760      	bx	ip

000b63b0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b63b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b63b4:	4607      	mov	r7, r0
   b63b6:	460c      	mov	r4, r1
   b63b8:	4615      	mov	r5, r2
   b63ba:	461e      	mov	r6, r3
   b63bc:	f7ff ff6d 	bl	b629a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b63c0:	b948      	cbnz	r0, b63d6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b63c2:	68b8      	ldr	r0, [r7, #8]
   b63c4:	6803      	ldr	r3, [r0, #0]
   b63c6:	699f      	ldr	r7, [r3, #24]
   b63c8:	462a      	mov	r2, r5
   b63ca:	4633      	mov	r3, r6
   b63cc:	4621      	mov	r1, r4
   b63ce:	46bc      	mov	ip, r7
   b63d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b63d4:	4760      	bx	ip
   b63d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b63da <_ZNSt9type_infoD1Ev>:
   b63da:	4770      	bx	lr

000b63dc <_ZNKSt9type_info14__is_pointer_pEv>:
   b63dc:	2000      	movs	r0, #0
   b63de:	4770      	bx	lr

000b63e0 <_ZNKSt9type_infoeqERKS_>:
   b63e0:	4281      	cmp	r1, r0
   b63e2:	b508      	push	{r3, lr}
   b63e4:	d00e      	beq.n	b6404 <_ZNKSt9type_infoeqERKS_+0x24>
   b63e6:	6840      	ldr	r0, [r0, #4]
   b63e8:	7803      	ldrb	r3, [r0, #0]
   b63ea:	2b2a      	cmp	r3, #42	; 0x2a
   b63ec:	d00c      	beq.n	b6408 <_ZNKSt9type_infoeqERKS_+0x28>
   b63ee:	6849      	ldr	r1, [r1, #4]
   b63f0:	780b      	ldrb	r3, [r1, #0]
   b63f2:	2b2a      	cmp	r3, #42	; 0x2a
   b63f4:	bf08      	it	eq
   b63f6:	3101      	addeq	r1, #1
   b63f8:	f000 fc9e 	bl	b6d38 <strcmp>
   b63fc:	fab0 f080 	clz	r0, r0
   b6400:	0940      	lsrs	r0, r0, #5
   b6402:	bd08      	pop	{r3, pc}
   b6404:	2001      	movs	r0, #1
   b6406:	e7fc      	b.n	b6402 <_ZNKSt9type_infoeqERKS_+0x22>
   b6408:	2000      	movs	r0, #0
   b640a:	e7fa      	b.n	b6402 <_ZNKSt9type_infoeqERKS_+0x22>

000b640c <__aeabi_drsub>:
   b640c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6410:	e002      	b.n	b6418 <__adddf3>
   b6412:	bf00      	nop

000b6414 <__aeabi_dsub>:
   b6414:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6418 <__adddf3>:
   b6418:	b530      	push	{r4, r5, lr}
   b641a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b641e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6422:	ea94 0f05 	teq	r4, r5
   b6426:	bf08      	it	eq
   b6428:	ea90 0f02 	teqeq	r0, r2
   b642c:	bf1f      	itttt	ne
   b642e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6432:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6436:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b643a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b643e:	f000 80e2 	beq.w	b6606 <__adddf3+0x1ee>
   b6442:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6446:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b644a:	bfb8      	it	lt
   b644c:	426d      	neglt	r5, r5
   b644e:	dd0c      	ble.n	b646a <__adddf3+0x52>
   b6450:	442c      	add	r4, r5
   b6452:	ea80 0202 	eor.w	r2, r0, r2
   b6456:	ea81 0303 	eor.w	r3, r1, r3
   b645a:	ea82 0000 	eor.w	r0, r2, r0
   b645e:	ea83 0101 	eor.w	r1, r3, r1
   b6462:	ea80 0202 	eor.w	r2, r0, r2
   b6466:	ea81 0303 	eor.w	r3, r1, r3
   b646a:	2d36      	cmp	r5, #54	; 0x36
   b646c:	bf88      	it	hi
   b646e:	bd30      	pophi	{r4, r5, pc}
   b6470:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6474:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6478:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b647c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6480:	d002      	beq.n	b6488 <__adddf3+0x70>
   b6482:	4240      	negs	r0, r0
   b6484:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6488:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b648c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6490:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6494:	d002      	beq.n	b649c <__adddf3+0x84>
   b6496:	4252      	negs	r2, r2
   b6498:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b649c:	ea94 0f05 	teq	r4, r5
   b64a0:	f000 80a7 	beq.w	b65f2 <__adddf3+0x1da>
   b64a4:	f1a4 0401 	sub.w	r4, r4, #1
   b64a8:	f1d5 0e20 	rsbs	lr, r5, #32
   b64ac:	db0d      	blt.n	b64ca <__adddf3+0xb2>
   b64ae:	fa02 fc0e 	lsl.w	ip, r2, lr
   b64b2:	fa22 f205 	lsr.w	r2, r2, r5
   b64b6:	1880      	adds	r0, r0, r2
   b64b8:	f141 0100 	adc.w	r1, r1, #0
   b64bc:	fa03 f20e 	lsl.w	r2, r3, lr
   b64c0:	1880      	adds	r0, r0, r2
   b64c2:	fa43 f305 	asr.w	r3, r3, r5
   b64c6:	4159      	adcs	r1, r3
   b64c8:	e00e      	b.n	b64e8 <__adddf3+0xd0>
   b64ca:	f1a5 0520 	sub.w	r5, r5, #32
   b64ce:	f10e 0e20 	add.w	lr, lr, #32
   b64d2:	2a01      	cmp	r2, #1
   b64d4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b64d8:	bf28      	it	cs
   b64da:	f04c 0c02 	orrcs.w	ip, ip, #2
   b64de:	fa43 f305 	asr.w	r3, r3, r5
   b64e2:	18c0      	adds	r0, r0, r3
   b64e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b64e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b64ec:	d507      	bpl.n	b64fe <__adddf3+0xe6>
   b64ee:	f04f 0e00 	mov.w	lr, #0
   b64f2:	f1dc 0c00 	rsbs	ip, ip, #0
   b64f6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b64fa:	eb6e 0101 	sbc.w	r1, lr, r1
   b64fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6502:	d31b      	bcc.n	b653c <__adddf3+0x124>
   b6504:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6508:	d30c      	bcc.n	b6524 <__adddf3+0x10c>
   b650a:	0849      	lsrs	r1, r1, #1
   b650c:	ea5f 0030 	movs.w	r0, r0, rrx
   b6510:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6514:	f104 0401 	add.w	r4, r4, #1
   b6518:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b651c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6520:	f080 809a 	bcs.w	b6658 <__adddf3+0x240>
   b6524:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6528:	bf08      	it	eq
   b652a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b652e:	f150 0000 	adcs.w	r0, r0, #0
   b6532:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6536:	ea41 0105 	orr.w	r1, r1, r5
   b653a:	bd30      	pop	{r4, r5, pc}
   b653c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6540:	4140      	adcs	r0, r0
   b6542:	eb41 0101 	adc.w	r1, r1, r1
   b6546:	3c01      	subs	r4, #1
   b6548:	bf28      	it	cs
   b654a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b654e:	d2e9      	bcs.n	b6524 <__adddf3+0x10c>
   b6550:	f091 0f00 	teq	r1, #0
   b6554:	bf04      	itt	eq
   b6556:	4601      	moveq	r1, r0
   b6558:	2000      	moveq	r0, #0
   b655a:	fab1 f381 	clz	r3, r1
   b655e:	bf08      	it	eq
   b6560:	3320      	addeq	r3, #32
   b6562:	f1a3 030b 	sub.w	r3, r3, #11
   b6566:	f1b3 0220 	subs.w	r2, r3, #32
   b656a:	da0c      	bge.n	b6586 <__adddf3+0x16e>
   b656c:	320c      	adds	r2, #12
   b656e:	dd08      	ble.n	b6582 <__adddf3+0x16a>
   b6570:	f102 0c14 	add.w	ip, r2, #20
   b6574:	f1c2 020c 	rsb	r2, r2, #12
   b6578:	fa01 f00c 	lsl.w	r0, r1, ip
   b657c:	fa21 f102 	lsr.w	r1, r1, r2
   b6580:	e00c      	b.n	b659c <__adddf3+0x184>
   b6582:	f102 0214 	add.w	r2, r2, #20
   b6586:	bfd8      	it	le
   b6588:	f1c2 0c20 	rsble	ip, r2, #32
   b658c:	fa01 f102 	lsl.w	r1, r1, r2
   b6590:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6594:	bfdc      	itt	le
   b6596:	ea41 010c 	orrle.w	r1, r1, ip
   b659a:	4090      	lslle	r0, r2
   b659c:	1ae4      	subs	r4, r4, r3
   b659e:	bfa2      	ittt	ge
   b65a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b65a4:	4329      	orrge	r1, r5
   b65a6:	bd30      	popge	{r4, r5, pc}
   b65a8:	ea6f 0404 	mvn.w	r4, r4
   b65ac:	3c1f      	subs	r4, #31
   b65ae:	da1c      	bge.n	b65ea <__adddf3+0x1d2>
   b65b0:	340c      	adds	r4, #12
   b65b2:	dc0e      	bgt.n	b65d2 <__adddf3+0x1ba>
   b65b4:	f104 0414 	add.w	r4, r4, #20
   b65b8:	f1c4 0220 	rsb	r2, r4, #32
   b65bc:	fa20 f004 	lsr.w	r0, r0, r4
   b65c0:	fa01 f302 	lsl.w	r3, r1, r2
   b65c4:	ea40 0003 	orr.w	r0, r0, r3
   b65c8:	fa21 f304 	lsr.w	r3, r1, r4
   b65cc:	ea45 0103 	orr.w	r1, r5, r3
   b65d0:	bd30      	pop	{r4, r5, pc}
   b65d2:	f1c4 040c 	rsb	r4, r4, #12
   b65d6:	f1c4 0220 	rsb	r2, r4, #32
   b65da:	fa20 f002 	lsr.w	r0, r0, r2
   b65de:	fa01 f304 	lsl.w	r3, r1, r4
   b65e2:	ea40 0003 	orr.w	r0, r0, r3
   b65e6:	4629      	mov	r1, r5
   b65e8:	bd30      	pop	{r4, r5, pc}
   b65ea:	fa21 f004 	lsr.w	r0, r1, r4
   b65ee:	4629      	mov	r1, r5
   b65f0:	bd30      	pop	{r4, r5, pc}
   b65f2:	f094 0f00 	teq	r4, #0
   b65f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b65fa:	bf06      	itte	eq
   b65fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6600:	3401      	addeq	r4, #1
   b6602:	3d01      	subne	r5, #1
   b6604:	e74e      	b.n	b64a4 <__adddf3+0x8c>
   b6606:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b660a:	bf18      	it	ne
   b660c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6610:	d029      	beq.n	b6666 <__adddf3+0x24e>
   b6612:	ea94 0f05 	teq	r4, r5
   b6616:	bf08      	it	eq
   b6618:	ea90 0f02 	teqeq	r0, r2
   b661c:	d005      	beq.n	b662a <__adddf3+0x212>
   b661e:	ea54 0c00 	orrs.w	ip, r4, r0
   b6622:	bf04      	itt	eq
   b6624:	4619      	moveq	r1, r3
   b6626:	4610      	moveq	r0, r2
   b6628:	bd30      	pop	{r4, r5, pc}
   b662a:	ea91 0f03 	teq	r1, r3
   b662e:	bf1e      	ittt	ne
   b6630:	2100      	movne	r1, #0
   b6632:	2000      	movne	r0, #0
   b6634:	bd30      	popne	{r4, r5, pc}
   b6636:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b663a:	d105      	bne.n	b6648 <__adddf3+0x230>
   b663c:	0040      	lsls	r0, r0, #1
   b663e:	4149      	adcs	r1, r1
   b6640:	bf28      	it	cs
   b6642:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6646:	bd30      	pop	{r4, r5, pc}
   b6648:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b664c:	bf3c      	itt	cc
   b664e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b6652:	bd30      	popcc	{r4, r5, pc}
   b6654:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6658:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b665c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6660:	f04f 0000 	mov.w	r0, #0
   b6664:	bd30      	pop	{r4, r5, pc}
   b6666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b666a:	bf1a      	itte	ne
   b666c:	4619      	movne	r1, r3
   b666e:	4610      	movne	r0, r2
   b6670:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6674:	bf1c      	itt	ne
   b6676:	460b      	movne	r3, r1
   b6678:	4602      	movne	r2, r0
   b667a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b667e:	bf06      	itte	eq
   b6680:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6684:	ea91 0f03 	teqeq	r1, r3
   b6688:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b668c:	bd30      	pop	{r4, r5, pc}
   b668e:	bf00      	nop

000b6690 <__aeabi_ui2d>:
   b6690:	f090 0f00 	teq	r0, #0
   b6694:	bf04      	itt	eq
   b6696:	2100      	moveq	r1, #0
   b6698:	4770      	bxeq	lr
   b669a:	b530      	push	{r4, r5, lr}
   b669c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b66a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b66a4:	f04f 0500 	mov.w	r5, #0
   b66a8:	f04f 0100 	mov.w	r1, #0
   b66ac:	e750      	b.n	b6550 <__adddf3+0x138>
   b66ae:	bf00      	nop

000b66b0 <__aeabi_i2d>:
   b66b0:	f090 0f00 	teq	r0, #0
   b66b4:	bf04      	itt	eq
   b66b6:	2100      	moveq	r1, #0
   b66b8:	4770      	bxeq	lr
   b66ba:	b530      	push	{r4, r5, lr}
   b66bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b66c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b66c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b66c8:	bf48      	it	mi
   b66ca:	4240      	negmi	r0, r0
   b66cc:	f04f 0100 	mov.w	r1, #0
   b66d0:	e73e      	b.n	b6550 <__adddf3+0x138>
   b66d2:	bf00      	nop

000b66d4 <__aeabi_f2d>:
   b66d4:	0042      	lsls	r2, r0, #1
   b66d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b66da:	ea4f 0131 	mov.w	r1, r1, rrx
   b66de:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b66e2:	bf1f      	itttt	ne
   b66e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b66e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b66ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b66f0:	4770      	bxne	lr
   b66f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b66f6:	bf08      	it	eq
   b66f8:	4770      	bxeq	lr
   b66fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b66fe:	bf04      	itt	eq
   b6700:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6704:	4770      	bxeq	lr
   b6706:	b530      	push	{r4, r5, lr}
   b6708:	f44f 7460 	mov.w	r4, #896	; 0x380
   b670c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6714:	e71c      	b.n	b6550 <__adddf3+0x138>
   b6716:	bf00      	nop

000b6718 <__aeabi_ul2d>:
   b6718:	ea50 0201 	orrs.w	r2, r0, r1
   b671c:	bf08      	it	eq
   b671e:	4770      	bxeq	lr
   b6720:	b530      	push	{r4, r5, lr}
   b6722:	f04f 0500 	mov.w	r5, #0
   b6726:	e00a      	b.n	b673e <__aeabi_l2d+0x16>

000b6728 <__aeabi_l2d>:
   b6728:	ea50 0201 	orrs.w	r2, r0, r1
   b672c:	bf08      	it	eq
   b672e:	4770      	bxeq	lr
   b6730:	b530      	push	{r4, r5, lr}
   b6732:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6736:	d502      	bpl.n	b673e <__aeabi_l2d+0x16>
   b6738:	4240      	negs	r0, r0
   b673a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b673e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6742:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6746:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b674a:	f43f aed8 	beq.w	b64fe <__adddf3+0xe6>
   b674e:	f04f 0203 	mov.w	r2, #3
   b6752:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6756:	bf18      	it	ne
   b6758:	3203      	addne	r2, #3
   b675a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b675e:	bf18      	it	ne
   b6760:	3203      	addne	r2, #3
   b6762:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6766:	f1c2 0320 	rsb	r3, r2, #32
   b676a:	fa00 fc03 	lsl.w	ip, r0, r3
   b676e:	fa20 f002 	lsr.w	r0, r0, r2
   b6772:	fa01 fe03 	lsl.w	lr, r1, r3
   b6776:	ea40 000e 	orr.w	r0, r0, lr
   b677a:	fa21 f102 	lsr.w	r1, r1, r2
   b677e:	4414      	add	r4, r2
   b6780:	e6bd      	b.n	b64fe <__adddf3+0xe6>
   b6782:	bf00      	nop

000b6784 <__aeabi_dmul>:
   b6784:	b570      	push	{r4, r5, r6, lr}
   b6786:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b678a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b678e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6792:	bf1d      	ittte	ne
   b6794:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6798:	ea94 0f0c 	teqne	r4, ip
   b679c:	ea95 0f0c 	teqne	r5, ip
   b67a0:	f000 f8de 	bleq	b6960 <__aeabi_dmul+0x1dc>
   b67a4:	442c      	add	r4, r5
   b67a6:	ea81 0603 	eor.w	r6, r1, r3
   b67aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b67ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b67b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b67b6:	bf18      	it	ne
   b67b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b67bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b67c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b67c4:	d038      	beq.n	b6838 <__aeabi_dmul+0xb4>
   b67c6:	fba0 ce02 	umull	ip, lr, r0, r2
   b67ca:	f04f 0500 	mov.w	r5, #0
   b67ce:	fbe1 e502 	umlal	lr, r5, r1, r2
   b67d2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b67d6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b67da:	f04f 0600 	mov.w	r6, #0
   b67de:	fbe1 5603 	umlal	r5, r6, r1, r3
   b67e2:	f09c 0f00 	teq	ip, #0
   b67e6:	bf18      	it	ne
   b67e8:	f04e 0e01 	orrne.w	lr, lr, #1
   b67ec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b67f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b67f4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b67f8:	d204      	bcs.n	b6804 <__aeabi_dmul+0x80>
   b67fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b67fe:	416d      	adcs	r5, r5
   b6800:	eb46 0606 	adc.w	r6, r6, r6
   b6804:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6808:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b680c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6810:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6814:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6818:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b681c:	bf88      	it	hi
   b681e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6822:	d81e      	bhi.n	b6862 <__aeabi_dmul+0xde>
   b6824:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6828:	bf08      	it	eq
   b682a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b682e:	f150 0000 	adcs.w	r0, r0, #0
   b6832:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6836:	bd70      	pop	{r4, r5, r6, pc}
   b6838:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b683c:	ea46 0101 	orr.w	r1, r6, r1
   b6840:	ea40 0002 	orr.w	r0, r0, r2
   b6844:	ea81 0103 	eor.w	r1, r1, r3
   b6848:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b684c:	bfc2      	ittt	gt
   b684e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6852:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6856:	bd70      	popgt	{r4, r5, r6, pc}
   b6858:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b685c:	f04f 0e00 	mov.w	lr, #0
   b6860:	3c01      	subs	r4, #1
   b6862:	f300 80ab 	bgt.w	b69bc <__aeabi_dmul+0x238>
   b6866:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b686a:	bfde      	ittt	le
   b686c:	2000      	movle	r0, #0
   b686e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6872:	bd70      	pople	{r4, r5, r6, pc}
   b6874:	f1c4 0400 	rsb	r4, r4, #0
   b6878:	3c20      	subs	r4, #32
   b687a:	da35      	bge.n	b68e8 <__aeabi_dmul+0x164>
   b687c:	340c      	adds	r4, #12
   b687e:	dc1b      	bgt.n	b68b8 <__aeabi_dmul+0x134>
   b6880:	f104 0414 	add.w	r4, r4, #20
   b6884:	f1c4 0520 	rsb	r5, r4, #32
   b6888:	fa00 f305 	lsl.w	r3, r0, r5
   b688c:	fa20 f004 	lsr.w	r0, r0, r4
   b6890:	fa01 f205 	lsl.w	r2, r1, r5
   b6894:	ea40 0002 	orr.w	r0, r0, r2
   b6898:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b689c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b68a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b68a4:	fa21 f604 	lsr.w	r6, r1, r4
   b68a8:	eb42 0106 	adc.w	r1, r2, r6
   b68ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b68b0:	bf08      	it	eq
   b68b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b68b6:	bd70      	pop	{r4, r5, r6, pc}
   b68b8:	f1c4 040c 	rsb	r4, r4, #12
   b68bc:	f1c4 0520 	rsb	r5, r4, #32
   b68c0:	fa00 f304 	lsl.w	r3, r0, r4
   b68c4:	fa20 f005 	lsr.w	r0, r0, r5
   b68c8:	fa01 f204 	lsl.w	r2, r1, r4
   b68cc:	ea40 0002 	orr.w	r0, r0, r2
   b68d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b68d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b68d8:	f141 0100 	adc.w	r1, r1, #0
   b68dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b68e0:	bf08      	it	eq
   b68e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b68e6:	bd70      	pop	{r4, r5, r6, pc}
   b68e8:	f1c4 0520 	rsb	r5, r4, #32
   b68ec:	fa00 f205 	lsl.w	r2, r0, r5
   b68f0:	ea4e 0e02 	orr.w	lr, lr, r2
   b68f4:	fa20 f304 	lsr.w	r3, r0, r4
   b68f8:	fa01 f205 	lsl.w	r2, r1, r5
   b68fc:	ea43 0302 	orr.w	r3, r3, r2
   b6900:	fa21 f004 	lsr.w	r0, r1, r4
   b6904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6908:	fa21 f204 	lsr.w	r2, r1, r4
   b690c:	ea20 0002 	bic.w	r0, r0, r2
   b6910:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6914:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6918:	bf08      	it	eq
   b691a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b691e:	bd70      	pop	{r4, r5, r6, pc}
   b6920:	f094 0f00 	teq	r4, #0
   b6924:	d10f      	bne.n	b6946 <__aeabi_dmul+0x1c2>
   b6926:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b692a:	0040      	lsls	r0, r0, #1
   b692c:	eb41 0101 	adc.w	r1, r1, r1
   b6930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6934:	bf08      	it	eq
   b6936:	3c01      	subeq	r4, #1
   b6938:	d0f7      	beq.n	b692a <__aeabi_dmul+0x1a6>
   b693a:	ea41 0106 	orr.w	r1, r1, r6
   b693e:	f095 0f00 	teq	r5, #0
   b6942:	bf18      	it	ne
   b6944:	4770      	bxne	lr
   b6946:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b694a:	0052      	lsls	r2, r2, #1
   b694c:	eb43 0303 	adc.w	r3, r3, r3
   b6950:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6954:	bf08      	it	eq
   b6956:	3d01      	subeq	r5, #1
   b6958:	d0f7      	beq.n	b694a <__aeabi_dmul+0x1c6>
   b695a:	ea43 0306 	orr.w	r3, r3, r6
   b695e:	4770      	bx	lr
   b6960:	ea94 0f0c 	teq	r4, ip
   b6964:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6968:	bf18      	it	ne
   b696a:	ea95 0f0c 	teqne	r5, ip
   b696e:	d00c      	beq.n	b698a <__aeabi_dmul+0x206>
   b6970:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6974:	bf18      	it	ne
   b6976:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b697a:	d1d1      	bne.n	b6920 <__aeabi_dmul+0x19c>
   b697c:	ea81 0103 	eor.w	r1, r1, r3
   b6980:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6984:	f04f 0000 	mov.w	r0, #0
   b6988:	bd70      	pop	{r4, r5, r6, pc}
   b698a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b698e:	bf06      	itte	eq
   b6990:	4610      	moveq	r0, r2
   b6992:	4619      	moveq	r1, r3
   b6994:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6998:	d019      	beq.n	b69ce <__aeabi_dmul+0x24a>
   b699a:	ea94 0f0c 	teq	r4, ip
   b699e:	d102      	bne.n	b69a6 <__aeabi_dmul+0x222>
   b69a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b69a4:	d113      	bne.n	b69ce <__aeabi_dmul+0x24a>
   b69a6:	ea95 0f0c 	teq	r5, ip
   b69aa:	d105      	bne.n	b69b8 <__aeabi_dmul+0x234>
   b69ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b69b0:	bf1c      	itt	ne
   b69b2:	4610      	movne	r0, r2
   b69b4:	4619      	movne	r1, r3
   b69b6:	d10a      	bne.n	b69ce <__aeabi_dmul+0x24a>
   b69b8:	ea81 0103 	eor.w	r1, r1, r3
   b69bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b69c0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b69c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b69c8:	f04f 0000 	mov.w	r0, #0
   b69cc:	bd70      	pop	{r4, r5, r6, pc}
   b69ce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b69d2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b69d6:	bd70      	pop	{r4, r5, r6, pc}

000b69d8 <__aeabi_ddiv>:
   b69d8:	b570      	push	{r4, r5, r6, lr}
   b69da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b69de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b69e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b69e6:	bf1d      	ittte	ne
   b69e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b69ec:	ea94 0f0c 	teqne	r4, ip
   b69f0:	ea95 0f0c 	teqne	r5, ip
   b69f4:	f000 f8a7 	bleq	b6b46 <__aeabi_ddiv+0x16e>
   b69f8:	eba4 0405 	sub.w	r4, r4, r5
   b69fc:	ea81 0e03 	eor.w	lr, r1, r3
   b6a00:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6a04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6a08:	f000 8088 	beq.w	b6b1c <__aeabi_ddiv+0x144>
   b6a0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6a10:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6a14:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6a18:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6a1c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6a20:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b6a24:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6a28:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6a2c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6a30:	429d      	cmp	r5, r3
   b6a32:	bf08      	it	eq
   b6a34:	4296      	cmpeq	r6, r2
   b6a36:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6a3a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6a3e:	d202      	bcs.n	b6a46 <__aeabi_ddiv+0x6e>
   b6a40:	085b      	lsrs	r3, r3, #1
   b6a42:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a46:	1ab6      	subs	r6, r6, r2
   b6a48:	eb65 0503 	sbc.w	r5, r5, r3
   b6a4c:	085b      	lsrs	r3, r3, #1
   b6a4e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6a56:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6a5a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6a5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6a62:	bf22      	ittt	cs
   b6a64:	1ab6      	subcs	r6, r6, r2
   b6a66:	4675      	movcs	r5, lr
   b6a68:	ea40 000c 	orrcs.w	r0, r0, ip
   b6a6c:	085b      	lsrs	r3, r3, #1
   b6a6e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a72:	ebb6 0e02 	subs.w	lr, r6, r2
   b6a76:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6a7a:	bf22      	ittt	cs
   b6a7c:	1ab6      	subcs	r6, r6, r2
   b6a7e:	4675      	movcs	r5, lr
   b6a80:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6a84:	085b      	lsrs	r3, r3, #1
   b6a86:	ea4f 0232 	mov.w	r2, r2, rrx
   b6a8a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6a8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6a92:	bf22      	ittt	cs
   b6a94:	1ab6      	subcs	r6, r6, r2
   b6a96:	4675      	movcs	r5, lr
   b6a98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6a9c:	085b      	lsrs	r3, r3, #1
   b6a9e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6aa2:	ebb6 0e02 	subs.w	lr, r6, r2
   b6aa6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6aaa:	bf22      	ittt	cs
   b6aac:	1ab6      	subcs	r6, r6, r2
   b6aae:	4675      	movcs	r5, lr
   b6ab0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6ab4:	ea55 0e06 	orrs.w	lr, r5, r6
   b6ab8:	d018      	beq.n	b6aec <__aeabi_ddiv+0x114>
   b6aba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b6abe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6ac2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6ac6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b6aca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b6ace:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6ad2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6ad6:	d1c0      	bne.n	b6a5a <__aeabi_ddiv+0x82>
   b6ad8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6adc:	d10b      	bne.n	b6af6 <__aeabi_ddiv+0x11e>
   b6ade:	ea41 0100 	orr.w	r1, r1, r0
   b6ae2:	f04f 0000 	mov.w	r0, #0
   b6ae6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6aea:	e7b6      	b.n	b6a5a <__aeabi_ddiv+0x82>
   b6aec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6af0:	bf04      	itt	eq
   b6af2:	4301      	orreq	r1, r0
   b6af4:	2000      	moveq	r0, #0
   b6af6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6afa:	bf88      	it	hi
   b6afc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6b00:	f63f aeaf 	bhi.w	b6862 <__aeabi_dmul+0xde>
   b6b04:	ebb5 0c03 	subs.w	ip, r5, r3
   b6b08:	bf04      	itt	eq
   b6b0a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6b0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6b12:	f150 0000 	adcs.w	r0, r0, #0
   b6b16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6b1a:	bd70      	pop	{r4, r5, r6, pc}
   b6b1c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6b20:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6b24:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6b28:	bfc2      	ittt	gt
   b6b2a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6b2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6b32:	bd70      	popgt	{r4, r5, r6, pc}
   b6b34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6b38:	f04f 0e00 	mov.w	lr, #0
   b6b3c:	3c01      	subs	r4, #1
   b6b3e:	e690      	b.n	b6862 <__aeabi_dmul+0xde>
   b6b40:	ea45 0e06 	orr.w	lr, r5, r6
   b6b44:	e68d      	b.n	b6862 <__aeabi_dmul+0xde>
   b6b46:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6b4a:	ea94 0f0c 	teq	r4, ip
   b6b4e:	bf08      	it	eq
   b6b50:	ea95 0f0c 	teqeq	r5, ip
   b6b54:	f43f af3b 	beq.w	b69ce <__aeabi_dmul+0x24a>
   b6b58:	ea94 0f0c 	teq	r4, ip
   b6b5c:	d10a      	bne.n	b6b74 <__aeabi_ddiv+0x19c>
   b6b5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6b62:	f47f af34 	bne.w	b69ce <__aeabi_dmul+0x24a>
   b6b66:	ea95 0f0c 	teq	r5, ip
   b6b6a:	f47f af25 	bne.w	b69b8 <__aeabi_dmul+0x234>
   b6b6e:	4610      	mov	r0, r2
   b6b70:	4619      	mov	r1, r3
   b6b72:	e72c      	b.n	b69ce <__aeabi_dmul+0x24a>
   b6b74:	ea95 0f0c 	teq	r5, ip
   b6b78:	d106      	bne.n	b6b88 <__aeabi_ddiv+0x1b0>
   b6b7a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6b7e:	f43f aefd 	beq.w	b697c <__aeabi_dmul+0x1f8>
   b6b82:	4610      	mov	r0, r2
   b6b84:	4619      	mov	r1, r3
   b6b86:	e722      	b.n	b69ce <__aeabi_dmul+0x24a>
   b6b88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6b8c:	bf18      	it	ne
   b6b8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6b92:	f47f aec5 	bne.w	b6920 <__aeabi_dmul+0x19c>
   b6b96:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b6b9a:	f47f af0d 	bne.w	b69b8 <__aeabi_dmul+0x234>
   b6b9e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6ba2:	f47f aeeb 	bne.w	b697c <__aeabi_dmul+0x1f8>
   b6ba6:	e712      	b.n	b69ce <__aeabi_dmul+0x24a>

000b6ba8 <__aeabi_d2f>:
   b6ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b6bb0:	bf24      	itt	cs
   b6bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b6bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b6bba:	d90d      	bls.n	b6bd8 <__aeabi_d2f+0x30>
   b6bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b6bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b6bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b6bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b6bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b6bd0:	bf08      	it	eq
   b6bd2:	f020 0001 	biceq.w	r0, r0, #1
   b6bd6:	4770      	bx	lr
   b6bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b6bdc:	d121      	bne.n	b6c22 <__aeabi_d2f+0x7a>
   b6bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b6be2:	bfbc      	itt	lt
   b6be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b6be8:	4770      	bxlt	lr
   b6bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b6bf2:	f1c2 0218 	rsb	r2, r2, #24
   b6bf6:	f1c2 0c20 	rsb	ip, r2, #32
   b6bfa:	fa10 f30c 	lsls.w	r3, r0, ip
   b6bfe:	fa20 f002 	lsr.w	r0, r0, r2
   b6c02:	bf18      	it	ne
   b6c04:	f040 0001 	orrne.w	r0, r0, #1
   b6c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b6c10:	fa03 fc0c 	lsl.w	ip, r3, ip
   b6c14:	ea40 000c 	orr.w	r0, r0, ip
   b6c18:	fa23 f302 	lsr.w	r3, r3, r2
   b6c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b6c20:	e7cc      	b.n	b6bbc <__aeabi_d2f+0x14>
   b6c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b6c26:	d107      	bne.n	b6c38 <__aeabi_d2f+0x90>
   b6c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b6c2c:	bf1e      	ittt	ne
   b6c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b6c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b6c36:	4770      	bxne	lr
   b6c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b6c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b6c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b6c44:	4770      	bx	lr
   b6c46:	bf00      	nop

000b6c48 <atexit>:
   b6c48:	2300      	movs	r3, #0
   b6c4a:	4601      	mov	r1, r0
   b6c4c:	461a      	mov	r2, r3
   b6c4e:	4618      	mov	r0, r3
   b6c50:	f000 b8a0 	b.w	b6d94 <__register_exitproc>

000b6c54 <ldiv>:
   b6c54:	2900      	cmp	r1, #0
   b6c56:	b510      	push	{r4, lr}
   b6c58:	fb91 f4f2 	sdiv	r4, r1, r2
   b6c5c:	fb02 1314 	mls	r3, r2, r4, r1
   b6c60:	db06      	blt.n	b6c70 <ldiv+0x1c>
   b6c62:	2b00      	cmp	r3, #0
   b6c64:	da01      	bge.n	b6c6a <ldiv+0x16>
   b6c66:	3401      	adds	r4, #1
   b6c68:	1a9b      	subs	r3, r3, r2
   b6c6a:	e9c0 4300 	strd	r4, r3, [r0]
   b6c6e:	bd10      	pop	{r4, pc}
   b6c70:	2b00      	cmp	r3, #0
   b6c72:	bfc4      	itt	gt
   b6c74:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b6c78:	189b      	addgt	r3, r3, r2
   b6c7a:	e7f6      	b.n	b6c6a <ldiv+0x16>

000b6c7c <memcpy>:
   b6c7c:	440a      	add	r2, r1
   b6c7e:	4291      	cmp	r1, r2
   b6c80:	f100 33ff 	add.w	r3, r0, #4294967295
   b6c84:	d100      	bne.n	b6c88 <memcpy+0xc>
   b6c86:	4770      	bx	lr
   b6c88:	b510      	push	{r4, lr}
   b6c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6c92:	4291      	cmp	r1, r2
   b6c94:	d1f9      	bne.n	b6c8a <memcpy+0xe>
   b6c96:	bd10      	pop	{r4, pc}

000b6c98 <memmove>:
   b6c98:	4288      	cmp	r0, r1
   b6c9a:	b510      	push	{r4, lr}
   b6c9c:	eb01 0402 	add.w	r4, r1, r2
   b6ca0:	d902      	bls.n	b6ca8 <memmove+0x10>
   b6ca2:	4284      	cmp	r4, r0
   b6ca4:	4623      	mov	r3, r4
   b6ca6:	d807      	bhi.n	b6cb8 <memmove+0x20>
   b6ca8:	1e43      	subs	r3, r0, #1
   b6caa:	42a1      	cmp	r1, r4
   b6cac:	d008      	beq.n	b6cc0 <memmove+0x28>
   b6cae:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6cb2:	f803 2f01 	strb.w	r2, [r3, #1]!
   b6cb6:	e7f8      	b.n	b6caa <memmove+0x12>
   b6cb8:	4402      	add	r2, r0
   b6cba:	4601      	mov	r1, r0
   b6cbc:	428a      	cmp	r2, r1
   b6cbe:	d100      	bne.n	b6cc2 <memmove+0x2a>
   b6cc0:	bd10      	pop	{r4, pc}
   b6cc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b6cc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b6cca:	e7f7      	b.n	b6cbc <memmove+0x24>

000b6ccc <memset>:
   b6ccc:	4402      	add	r2, r0
   b6cce:	4603      	mov	r3, r0
   b6cd0:	4293      	cmp	r3, r2
   b6cd2:	d100      	bne.n	b6cd6 <memset+0xa>
   b6cd4:	4770      	bx	lr
   b6cd6:	f803 1b01 	strb.w	r1, [r3], #1
   b6cda:	e7f9      	b.n	b6cd0 <memset+0x4>

000b6cdc <srand>:
   b6cdc:	b538      	push	{r3, r4, r5, lr}
   b6cde:	4b10      	ldr	r3, [pc, #64]	; (b6d20 <srand+0x44>)
   b6ce0:	681d      	ldr	r5, [r3, #0]
   b6ce2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6ce4:	4604      	mov	r4, r0
   b6ce6:	b9b3      	cbnz	r3, b6d16 <srand+0x3a>
   b6ce8:	2018      	movs	r0, #24
   b6cea:	f7fe f98b 	bl	b5004 <malloc>
   b6cee:	4602      	mov	r2, r0
   b6cf0:	63a8      	str	r0, [r5, #56]	; 0x38
   b6cf2:	b920      	cbnz	r0, b6cfe <srand+0x22>
   b6cf4:	4b0b      	ldr	r3, [pc, #44]	; (b6d24 <srand+0x48>)
   b6cf6:	480c      	ldr	r0, [pc, #48]	; (b6d28 <srand+0x4c>)
   b6cf8:	2142      	movs	r1, #66	; 0x42
   b6cfa:	f7fe f9a3 	bl	b5044 <__assert_func>
   b6cfe:	490b      	ldr	r1, [pc, #44]	; (b6d2c <srand+0x50>)
   b6d00:	4b0b      	ldr	r3, [pc, #44]	; (b6d30 <srand+0x54>)
   b6d02:	e9c0 1300 	strd	r1, r3, [r0]
   b6d06:	4b0b      	ldr	r3, [pc, #44]	; (b6d34 <srand+0x58>)
   b6d08:	6083      	str	r3, [r0, #8]
   b6d0a:	230b      	movs	r3, #11
   b6d0c:	8183      	strh	r3, [r0, #12]
   b6d0e:	2100      	movs	r1, #0
   b6d10:	2001      	movs	r0, #1
   b6d12:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6d16:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6d18:	2200      	movs	r2, #0
   b6d1a:	611c      	str	r4, [r3, #16]
   b6d1c:	615a      	str	r2, [r3, #20]
   b6d1e:	bd38      	pop	{r3, r4, r5, pc}
   b6d20:	2003e4f4 	.word	0x2003e4f4
   b6d24:	000b74e5 	.word	0x000b74e5
   b6d28:	000b74fc 	.word	0x000b74fc
   b6d2c:	abcd330e 	.word	0xabcd330e
   b6d30:	e66d1234 	.word	0xe66d1234
   b6d34:	0005deec 	.word	0x0005deec

000b6d38 <strcmp>:
   b6d38:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6d3c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6d40:	2a01      	cmp	r2, #1
   b6d42:	bf28      	it	cs
   b6d44:	429a      	cmpcs	r2, r3
   b6d46:	d0f7      	beq.n	b6d38 <strcmp>
   b6d48:	1ad0      	subs	r0, r2, r3
   b6d4a:	4770      	bx	lr

000b6d4c <strcpy>:
   b6d4c:	4603      	mov	r3, r0
   b6d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6d52:	f803 2b01 	strb.w	r2, [r3], #1
   b6d56:	2a00      	cmp	r2, #0
   b6d58:	d1f9      	bne.n	b6d4e <strcpy+0x2>
   b6d5a:	4770      	bx	lr

000b6d5c <strlen>:
   b6d5c:	4603      	mov	r3, r0
   b6d5e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6d62:	2a00      	cmp	r2, #0
   b6d64:	d1fb      	bne.n	b6d5e <strlen+0x2>
   b6d66:	1a18      	subs	r0, r3, r0
   b6d68:	3801      	subs	r0, #1
   b6d6a:	4770      	bx	lr

000b6d6c <strncpy>:
   b6d6c:	b510      	push	{r4, lr}
   b6d6e:	3901      	subs	r1, #1
   b6d70:	4603      	mov	r3, r0
   b6d72:	b132      	cbz	r2, b6d82 <strncpy+0x16>
   b6d74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b6d78:	f803 4b01 	strb.w	r4, [r3], #1
   b6d7c:	3a01      	subs	r2, #1
   b6d7e:	2c00      	cmp	r4, #0
   b6d80:	d1f7      	bne.n	b6d72 <strncpy+0x6>
   b6d82:	441a      	add	r2, r3
   b6d84:	2100      	movs	r1, #0
   b6d86:	4293      	cmp	r3, r2
   b6d88:	d100      	bne.n	b6d8c <strncpy+0x20>
   b6d8a:	bd10      	pop	{r4, pc}
   b6d8c:	f803 1b01 	strb.w	r1, [r3], #1
   b6d90:	e7f9      	b.n	b6d86 <strncpy+0x1a>
	...

000b6d94 <__register_exitproc>:
   b6d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6d98:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6e54 <__register_exitproc+0xc0>
   b6d9c:	4606      	mov	r6, r0
   b6d9e:	f8d8 0000 	ldr.w	r0, [r8]
   b6da2:	461f      	mov	r7, r3
   b6da4:	460d      	mov	r5, r1
   b6da6:	4691      	mov	r9, r2
   b6da8:	f000 f856 	bl	b6e58 <__retarget_lock_acquire_recursive>
   b6dac:	4b25      	ldr	r3, [pc, #148]	; (b6e44 <__register_exitproc+0xb0>)
   b6dae:	681c      	ldr	r4, [r3, #0]
   b6db0:	b934      	cbnz	r4, b6dc0 <__register_exitproc+0x2c>
   b6db2:	4c25      	ldr	r4, [pc, #148]	; (b6e48 <__register_exitproc+0xb4>)
   b6db4:	601c      	str	r4, [r3, #0]
   b6db6:	4b25      	ldr	r3, [pc, #148]	; (b6e4c <__register_exitproc+0xb8>)
   b6db8:	b113      	cbz	r3, b6dc0 <__register_exitproc+0x2c>
   b6dba:	681b      	ldr	r3, [r3, #0]
   b6dbc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6dc0:	6863      	ldr	r3, [r4, #4]
   b6dc2:	2b1f      	cmp	r3, #31
   b6dc4:	dd07      	ble.n	b6dd6 <__register_exitproc+0x42>
   b6dc6:	f8d8 0000 	ldr.w	r0, [r8]
   b6dca:	f000 f847 	bl	b6e5c <__retarget_lock_release_recursive>
   b6dce:	f04f 30ff 	mov.w	r0, #4294967295
   b6dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6dd6:	b34e      	cbz	r6, b6e2c <__register_exitproc+0x98>
   b6dd8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6ddc:	b988      	cbnz	r0, b6e02 <__register_exitproc+0x6e>
   b6dde:	4b1c      	ldr	r3, [pc, #112]	; (b6e50 <__register_exitproc+0xbc>)
   b6de0:	b923      	cbnz	r3, b6dec <__register_exitproc+0x58>
   b6de2:	f8d8 0000 	ldr.w	r0, [r8]
   b6de6:	f000 f838 	bl	b6e5a <__retarget_lock_release>
   b6dea:	e7f0      	b.n	b6dce <__register_exitproc+0x3a>
   b6dec:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6df0:	f7fe f908 	bl	b5004 <malloc>
   b6df4:	2800      	cmp	r0, #0
   b6df6:	d0f4      	beq.n	b6de2 <__register_exitproc+0x4e>
   b6df8:	2300      	movs	r3, #0
   b6dfa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6dfe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6e02:	6863      	ldr	r3, [r4, #4]
   b6e04:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6e08:	2201      	movs	r2, #1
   b6e0a:	409a      	lsls	r2, r3
   b6e0c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6e10:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6e14:	4313      	orrs	r3, r2
   b6e16:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6e1a:	2e02      	cmp	r6, #2
   b6e1c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6e20:	bf02      	ittt	eq
   b6e22:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6e26:	4313      	orreq	r3, r2
   b6e28:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6e2c:	6863      	ldr	r3, [r4, #4]
   b6e2e:	f8d8 0000 	ldr.w	r0, [r8]
   b6e32:	1c5a      	adds	r2, r3, #1
   b6e34:	3302      	adds	r3, #2
   b6e36:	6062      	str	r2, [r4, #4]
   b6e38:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6e3c:	f000 f80e 	bl	b6e5c <__retarget_lock_release_recursive>
   b6e40:	2000      	movs	r0, #0
   b6e42:	e7c6      	b.n	b6dd2 <__register_exitproc+0x3e>
   b6e44:	2003e7e8 	.word	0x2003e7e8
   b6e48:	2003e75c 	.word	0x2003e75c
   b6e4c:	00000000 	.word	0x00000000
   b6e50:	000b5005 	.word	0x000b5005
   b6e54:	2003e558 	.word	0x2003e558

000b6e58 <__retarget_lock_acquire_recursive>:
   b6e58:	4770      	bx	lr

000b6e5a <__retarget_lock_release>:
   b6e5a:	4770      	bx	lr

000b6e5c <__retarget_lock_release_recursive>:
   b6e5c:	4770      	bx	lr

000b6e5e <link_code_end>:
	...

000b6e60 <dynalib_user>:
   b6e60:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6e70:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b6e80:	7620 7269 7574 6c61 0a00 000a 6f43 6e6e      virtual....Conn
   b6e90:	6365 6974 676e 7420 206f 514d 5454 2e2e     ecting to MQTT..
   b6ea0:	202e 4500 7272 726f 4320 646f 2065 7325     . .Error Code %s
   b6eb0:	000a 6552 7274 6979 676e 4d20 5451 2054     ..Retrying MQTT 
   b6ec0:	6f63 6e6e 6365 6974 6e6f 6920 206e 2035     connection in 5 
   b6ed0:	6573 6f63 646e 2e73 2e2e 000a 514d 5454     seconds.....MQTT
   b6ee0:	4320 6e6f 656e 7463 6465 0a21 5000 6e69      Connected!..Pin
   b6ef0:	6967 676e 4d20 5451 2054 000a 6944 6373     ging MQTT ..Disc
   b6f00:	6e6f 656e 7463 6e69 2067 000a 6f4d 7369     onnecting ..Mois
   b6f10:	7574 6572 7220 6165 6964 676e 6920 2073     ture reading is 
   b6f20:	6925 0a20 7300 6e61 6574 3764 6900 2e6f     %i ..santed7.io.
   b6f30:	6461 6661 7572 7469 632e 6d6f 6100 6f69     adafruit.com.aio
   b6f40:	545f 4c54 304b 4332 4e55 6a53 6b64 7951     _TTLK02CUNSjdkQy
   b6f50:	3168 4f6f 674a 3542 4333 7838 0053 6173     h1oOJgB53C8xS.sa
   b6f60:	746e 6465 2f37 6566 6465 2f73 7573 6176     nted7/feeds/suva
   b6f70:	7562 7474 6e6f 6e6f 666f 0066 6173 746e     buttononoff.sant
   b6f80:	6465 2f37 6566 6465 2f73 6f73 6c69 6e65     ed7/feeds/soilen
   b6f90:	4774 6572 6e65 0000                         tGreen..

000b6f98 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   b6fa0:	4441 000b 44cd 000b 43ed 000b 449b 000b     AD...D...C...D..
   b6fb0:	44db 000b 4401 000b 4443 000b 7244 706f     .D...D..CD..Drop
   b6fc0:	6570 2064 2061 6170 6b63 7465 5500 6b6e     ped a packet.Unk
   b6fd0:	6f6e 6e77 6520 7272 726f 4d00 5451 0054     nown error.MQTT.
   b6fe0:	6146 6c69 6465 7420 206f 7573 7362 7263     Failed to subscr
   b6ff0:	6269 0065 6f43 6e6e 6365 6974 6e6f 6620     ibe.Connection f
   b7000:	6961 656c 0064 6854 2065 6553 7672 7265     ailed.The Server
   b7010:	6420 656f 2073 6f6e 2074 7573 7070 726f      does not suppor
   b7020:	2074 6874 2065 656c 6576 206c 666f 7420     t the level of t
   b7030:	6568 4d20 5451 2054 7270 746f 636f 6c6f     he MQTT protocol
   b7040:	7220 7165 6575 7473 6465 5400 6568 4320      requested.The C
   b7050:	696c 6e65 2074 6469 6e65 6974 6966 7265     lient identifier
   b7060:	6920 2073 6f63 7272 6365 2074 5455 2d46      is correct UTF-
   b7070:	2038 7562 2074 6f6e 2074 6c61 6f6c 6577     8 but not allowe
   b7080:	2064 7962 7420 6568 5320 7265 6576 0072     d by the Server.
   b7090:	6854 2065 514d 5454 7320 7265 6976 6563     The MQTT service
   b70a0:	6920 2073 6e75 7661 6961 616c 6c62 0065      is unavailable.
   b70b0:	6854 2065 6164 6174 6920 206e 6874 2065     The data in the 
   b70c0:	7375 7265 6e20 6d61 2065 726f 7020 7361     user name or pas
   b70d0:	7773 726f 2064 7369 6d20 6c61 6f66 6d72     sword is malform
   b70e0:	6465 4e00 746f 6120 7475 6f68 6972 657a     ed.Not authorize
   b70f0:	2064 6f74 6320 6e6f 656e 7463 4500 6378     d to connect.Exc
   b7100:	6565 6564 2064 6572 6f63 6e6e 6365 2074     eeded reconnect 
   b7110:	6172 6574 6c20 6d69 7469 202e 6c50 6165     rate limit. Plea
   b7120:	6573 7420 7972 6120 6167 6e69 6c20 7461     se try again lat
   b7130:	7265 002e 6f59 2075 6168 6576 6220 6565     er..You have bee
   b7140:	206e 6162 6e6e 6465 6620 6f72 206d 6f63     n banned from co
   b7150:	6e6e 6365 6974 676e 202e 6c50 6165 6573     nnecting. Please
   b7160:	6320 6e6f 6174 7463 7420 6568 4d20 5451      contact the MQT
   b7170:	2054 6573 7672 7265 6120 6d64 6e69 7369     T server adminis
   b7180:	7274 7461 726f 6620 726f 6d20 726f 2065     trator for more 
   b7190:	6564 6174 6c69 2e73 0000 0000               details.....

000b719c <_ZTV13Adafruit_MQTT>:
	...
   b71ac:	40a1 000b 40a1 000b 40a1 000b 40a1 000b     .@...@...@...@..
   b71bc:	40a1 000b                                   .@..

000b71c0 <CSWTCH.45>:
   b71c0:	6fe0 000b 6ff4 000b 6fcd 000b 7006 000b     .o...o...o...p..
   b71d0:	704b 000b 7090 000b 70b0 000b 70e3 000b     Kp...p...p...p..
   b71e0:	70fd 000b 7134 000b                         .p..4q..

000b71e8 <_ZTV5HX711>:
	...
   b71f0:	4a37 000b 4a39 000b                         7J..9J..

000b71f8 <_ZTVN5spark13EthernetClassE>:
	...
   b7200:	50c3 000b 50b9 000b 50af 000b 50a5 000b     .P...P...P...P..
   b7210:	5099 000b 508d 000b 5e55 000b 5e5d 000b     .P...P..U^..]^..
   b7220:	5081 000b 5079 000b 506f 000b 5065 000b     .P..yP..oP..eP..
   b7230:	5e8d 000b                                   .^..

000b7234 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b723c:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b724c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b725c <_ZTV9IPAddress>:
	...
   b7264:	54ad 000b 549d 000b 549f 000b               .T...T...T..

000b7270 <_ZTV9USBSerial>:
	...
   b7278:	55bf 000b 5627 000b 55fd 000b 51d9 000b     .U..'V...U...Q..
   b7288:	55ef 000b 55c1 000b 55d1 000b 5621 000b     .U...U...U..!V..
   b7298:	55e1 000b 55b9 000b                         .U...U..

000b72a0 <_ZTV11USARTSerial>:
	...
   b72a8:	56c9 000b 5735 000b 570d 000b 51d9 000b     .V..5W...W...Q..
   b72b8:	56dd 000b 56f9 000b 56eb 000b 5707 000b     .V...V...V...W..
   b72c8:	56cb 000b 56cf 000b                         .V...V..

000b72d0 <_ZTV7TwoWire>:
	...
   b72d8:	576d 000b 57b7 000b 578f 000b 576f 000b     mW...W...W..oW..
   b72e8:	5797 000b 579f 000b 57a7 000b 57af 000b     .W...W...W...W..
   b72f8:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b7308:	2072 203d 6425 0000                         r = %d..

000b7310 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7318:	5885 000b 58a9 000b 5d93 000b 58b7 000b     .X...X...]...X..
   b7328:	5889 000b                                   .X..

000b732c <_ZTV9TCPClient>:
	...
   b7334:	532d 000b 5345 000b 5801 000b 581b 000b     -S..ES...X...X..
   b7344:	5c29 000b 5845 000b 5a9f 000b 5879 000b     )\..EX...Z..yX..
   b7354:	5b31 000b 5971 000b 5acd 000b 5cdd 000b     1[..qY...Z...\..
   b7364:	5a6d 000b 587b 000b 582d 000b 58bd 000b     mZ..{X..-X...X..
   b7374:	5951 000b                                   QY..

000b7378 <_ZTVN5spark9WiFiClassE>:
	...
   b7380:	5df7 000b 5ded 000b 5de3 000b 5d99 000b     .]...]...]...]..
   b7390:	5dd7 000b 5dcb 000b 5e55 000b 5e5d 000b     .]...]..U^..]^..
   b73a0:	5dbf 000b 5db7 000b 5dad 000b 5da3 000b     .]...]...]...]..
   b73b0:	5e8d 000b                                   .^..

000b73b4 <_ZTVN5spark12NetworkClassE>:
	...
   b73bc:	5e15 000b 5e1f 000b 5e29 000b 5e33 000b     .^...^..)^..3^..
   b73cc:	5e3d 000b 5e49 000b 5e55 000b 5e5d 000b     =^..I^..U^..]^..
   b73dc:	5e65 000b 5e71 000b 5e79 000b 5e83 000b     e^..q^..y^...^..
   b73ec:	5e8d 000b                                   .^..

000b73f0 <_ZSt7nothrow>:
	...

000b73f1 <_ZTSSt19_Sp_make_shared_tag>:
   b73f1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b7401:	6572 5f64 6174 0067 0000                     red_tag....

000b740c <_ZTISt19_Sp_make_shared_tag>:
   b740c:	744c 000b 73f1 000b                         Lt...s..

000b7414 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7414:	74ac 000b 7420 000b 74d0 000b               .t.. t...t..

000b7420 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b7420:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b7430:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b7440:	0045 0000                                   E...

000b7444 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7444:	0000 0000 7414 000b 6235 000b 6249 000b     .....t..5b..Ib..
   b7454:	63dd 000b 63dd 000b 62b3 000b 61f5 000b     .c...c...b...a..
   b7464:	629b 000b 625d 000b 6227 000b               .b..]b..'b..

000b7470 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b7470:	74ac 000b 747c 000b 7414 000b               .t..|t...t..

000b747c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b747c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b748c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b749c:	666e 456f 0000 0000                         nfoE....

000b74a4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b74a4:	0000 0000 7470 000b 62dd 000b 62f1 000b     ....pt...b...b..
   b74b4:	63dd 000b 63dd 000b 62b3 000b 61f5 000b     .c...c...b...a..
   b74c4:	63b1 000b 633d 000b 6305 000b               .c..=c...c..

000b74d0 <_ZTISt9type_info>:
   b74d0:	744c 000b 74d8 000b                         Lt...t..

000b74d8 <_ZTSSt9type_info>:
   b74d8:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b74e8:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b74f8:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b7508:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b7518:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b7528:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7538:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7548:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b7558:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7568:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7579 <link_const_variable_data_end>:
   b7579:	00          	.byte	0x00
	...

000b757c <link_constructors_location>:
   b757c:	000b4359 	.word	0x000b4359
   b7580:	000b50cd 	.word	0x000b50cd
   b7584:	000b50f5 	.word	0x000b50f5
   b7588:	000b51c9 	.word	0x000b51c9
   b758c:	000b5301 	.word	0x000b5301
   b7590:	000b5311 	.word	0x000b5311
   b7594:	000b5359 	.word	0x000b5359
   b7598:	000b5e01 	.word	0x000b5e01
   b759c:	000b5f65 	.word	0x000b5f65
