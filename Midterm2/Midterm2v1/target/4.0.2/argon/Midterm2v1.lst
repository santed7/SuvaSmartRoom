
c:/Users/vcox/Documents/IoT/SuvaSmartRoom/Midterm2/Midterm2v1/target/4.0.2/argon/Midterm2v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000033a4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b73c0  000b73c0  000073c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b73e4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003e4f0  000b73e8  0001e4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000290  2003e560  2003e560  0002e560  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7458  000b7458  00027458  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b7480  000b7480  00027480  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001278b9  00000000  00000000  00027484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00014ba7  00000000  00000000  0014ed3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003adad  00000000  00000000  001638e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003188  00000000  00000000  0019e691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000aa80  00000000  00000000  001a1819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003dc28  00000000  00000000  001ac299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00045288  00000000  00000000  001e9ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001379e6  00000000  00000000  0022f149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000089f8  00000000  00000000  00366b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fc47 	bl	b68c0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fc69 	bl	b6910 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e4f0 	.word	0x2003e4f0
   b4048:	000b73e8 	.word	0x000b73e8
   b404c:	2003e560 	.word	0x2003e560
   b4050:	2003e560 	.word	0x2003e560
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fc01 	bl	b5864 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7398 	.word	0x000b7398
   b407c:	000b73bc 	.word	0x000b73bc

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b98e 	b.w	b43a0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 faad 	bl	b45e4 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bba1 	b.w	b57d4 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 b911 	b.w	b52b8 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 b90f 	b.w	b52b8 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 b915 	b.w	b52c8 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f001 f842 	bl	b5130 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b4eb1 	.word	0x000b4eb1
   b40b4:	000b6ab8 	.word	0x000b6ab8

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_.isra.0>:

    bool setCredentials(const char *ssid) {
        return setCredentials(ssid, NULL, UNSEC);
    }

    bool setCredentials(const char *ssid, const char *password) {
   b40c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b40cc:	4680      	mov	r8, r0
   b40ce:	b094      	sub	sp, #80	; 0x50
   b40d0:	4614      	mov	r4, r2
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b40d2:	460d      	mov	r5, r1
   b40d4:	b301      	cbz	r1, b4118 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_.isra.0+0x50>
   b40d6:	4608      	mov	r0, r1
   b40d8:	f002 fc62 	bl	b69a0 <strlen>
   b40dc:	4607      	mov	r7, r0
   b40de:	b1ec      	cbz	r4, b411c <_ZN5spark9WiFiClass14setCredentialsEPKcS2_.isra.0+0x54>
   b40e0:	4620      	mov	r0, r4
   b40e2:	f002 fc5d 	bl	b69a0 <strlen>
   b40e6:	4606      	mov	r6, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b40e8:	2238      	movs	r2, #56	; 0x38
   b40ea:	2100      	movs	r1, #0
   b40ec:	a806      	add	r0, sp, #24
   b40ee:	f002 fc0f 	bl	b6910 <memset>
        creds.size = sizeof(creds);
   b40f2:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b40f4:	e9cd 3501 	strd	r3, r5, [sp, #4]
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
   b40f8:	2303      	movs	r3, #3
   b40fa:	f88d 3018 	strb.w	r3, [sp, #24]
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b40fe:	2300      	movs	r3, #0
   b4100:	f8d8 0004 	ldr.w	r0, [r8, #4]
        creds.password_len = passwordLen;
   b4104:	9605      	str	r6, [sp, #20]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4106:	aa01      	add	r2, sp, #4
   b4108:	4619      	mov	r1, r3
        creds.password = password;
   b410a:	e9cd 7403 	strd	r7, r4, [sp, #12]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b410e:	f001 f893 	bl	b5238 <network_set_credentials>
    }
   b4112:	b014      	add	sp, #80	; 0x50
   b4114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4118:	460f      	mov	r7, r1
   b411a:	e7e0      	b.n	b40de <_ZN5spark9WiFiClass14setCredentialsEPKcS2_.isra.0+0x16>
   b411c:	4626      	mov	r6, r4
   b411e:	e7e3      	b.n	b40e8 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_.isra.0+0x20>

000b4120 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4120:	b40e      	push	{r1, r2, r3}
   b4122:	b503      	push	{r0, r1, lr}
   b4124:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4126:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4128:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b412c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b412e:	f001 facc 	bl	b56ca <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4132:	b002      	add	sp, #8
   b4134:	f85d eb04 	ldr.w	lr, [sp], #4
   b4138:	b003      	add	sp, #12
   b413a:	4770      	bx	lr

000b413c <_Z7getWiFiv>:
    delay(250);
  }
}


void getWiFi() {
   b413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4140:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
   b4144:	ac38      	add	r4, sp, #224	; 0xe0
   b4146:	f04f 0a0a 	mov.w	sl, #10
   b414a:	4625      	mov	r5, r4
#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
       size = sizeof(*this);
   b414c:	2638      	movs	r6, #56	; 0x38
       memset(this, 0, sizeof(*this));
   b414e:	1d20      	adds	r0, r4, #4
   b4150:	2234      	movs	r2, #52	; 0x34
   b4152:	2100      	movs	r1, #0
   b4154:	f002 fbdc 	bl	b6910 <memset>
  WiFiAccessPoint ap[10];
   b4158:	f1ba 0a01 	subs.w	sl, sl, #1
       size = sizeof(*this);
   b415c:	f844 6b38 	str.w	r6, [r4], #56
   b4160:	d1f5      	bne.n	b414e <_Z7getWiFiv+0x12>
  int sectype,cytype,found,i;
  byte mac[6];

  String security[6] = {"WLAN_SEC_UNSEC", "WLAN_SEC_WEP", "WLAN_SEC_WPA", "WLAN_SEC_WPA2", "WLAN_SEC_WPA_ENTERPRISE", "WLAN_SEC_WPA2_ENTERPRISE"};
   b4162:	ae20      	add	r6, sp, #128	; 0x80
   b4164:	4976      	ldr	r1, [pc, #472]	; (b4340 <_Z7getWiFiv+0x204>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4166:	4c77      	ldr	r4, [pc, #476]	; (b4344 <_Z7getWiFiv+0x208>)
    cytype = (int) ap[i].cipher;
    for(int j=0;j<6;j++){
       mac[j] = ap[i].bssid[j];
    }
      
    Serial.printf("AP%d - ssid: %s \n", i,ap[i].ssid);
   b4168:	f8df b230 	ldr.w	fp, [pc, #560]	; b439c <_Z7getWiFiv+0x260>
  String security[6] = {"WLAN_SEC_UNSEC", "WLAN_SEC_WEP", "WLAN_SEC_WPA", "WLAN_SEC_WPA2", "WLAN_SEC_WPA_ENTERPRISE", "WLAN_SEC_WPA2_ENTERPRISE"};
   b416c:	4630      	mov	r0, r6
   b416e:	f001 f9cc 	bl	b550a <_ZN6StringC1EPK19__FlashStringHelper>
   b4172:	4975      	ldr	r1, [pc, #468]	; (b4348 <_Z7getWiFiv+0x20c>)
   b4174:	a824      	add	r0, sp, #144	; 0x90
   b4176:	f001 f9c8 	bl	b550a <_ZN6StringC1EPK19__FlashStringHelper>
   b417a:	4974      	ldr	r1, [pc, #464]	; (b434c <_Z7getWiFiv+0x210>)
   b417c:	a828      	add	r0, sp, #160	; 0xa0
   b417e:	f001 f9c4 	bl	b550a <_ZN6StringC1EPK19__FlashStringHelper>
   b4182:	4973      	ldr	r1, [pc, #460]	; (b4350 <_Z7getWiFiv+0x214>)
   b4184:	a82c      	add	r0, sp, #176	; 0xb0
   b4186:	f001 f9c0 	bl	b550a <_ZN6StringC1EPK19__FlashStringHelper>
   b418a:	4972      	ldr	r1, [pc, #456]	; (b4354 <_Z7getWiFiv+0x218>)
   b418c:	a830      	add	r0, sp, #192	; 0xc0
   b418e:	f001 f9bc 	bl	b550a <_ZN6StringC1EPK19__FlashStringHelper>
  String cypher[4] = {"N/A","WLAN_CIPHER_AES", "WLAN_CIPHER_TKIP", "WLAN_CIPHER_AES_TKIP"};
   b4192:	af10      	add	r7, sp, #64	; 0x40
  String security[6] = {"WLAN_SEC_UNSEC", "WLAN_SEC_WEP", "WLAN_SEC_WPA", "WLAN_SEC_WPA2", "WLAN_SEC_WPA_ENTERPRISE", "WLAN_SEC_WPA2_ENTERPRISE"};
   b4194:	4970      	ldr	r1, [pc, #448]	; (b4358 <_Z7getWiFiv+0x21c>)
   b4196:	a834      	add	r0, sp, #208	; 0xd0
   b4198:	f001 f9b7 	bl	b550a <_ZN6StringC1EPK19__FlashStringHelper>
  String cypher[4] = {"N/A","WLAN_CIPHER_AES", "WLAN_CIPHER_TKIP", "WLAN_CIPHER_AES_TKIP"};
   b419c:	496f      	ldr	r1, [pc, #444]	; (b435c <_Z7getWiFiv+0x220>)
   b419e:	4638      	mov	r0, r7
   b41a0:	f001 f9b3 	bl	b550a <_ZN6StringC1EPK19__FlashStringHelper>
   b41a4:	496e      	ldr	r1, [pc, #440]	; (b4360 <_Z7getWiFiv+0x224>)
   b41a6:	a814      	add	r0, sp, #80	; 0x50
   b41a8:	f001 f9af 	bl	b550a <_ZN6StringC1EPK19__FlashStringHelper>
   b41ac:	496d      	ldr	r1, [pc, #436]	; (b4364 <_Z7getWiFiv+0x228>)
   b41ae:	a818      	add	r0, sp, #96	; 0x60
   b41b0:	f001 f9ab 	bl	b550a <_ZN6StringC1EPK19__FlashStringHelper>
   b41b4:	496c      	ldr	r1, [pc, #432]	; (b4368 <_Z7getWiFiv+0x22c>)
   b41b6:	a81c      	add	r0, sp, #112	; 0x70
   b41b8:	f001 f9a7 	bl	b550a <_ZN6StringC1EPK19__FlashStringHelper>
  Serial.printf("Scan Argon for WiFi Information \n");
   b41bc:	f001 fc74 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b41c0:	496a      	ldr	r1, [pc, #424]	; (b436c <_Z7getWiFiv+0x230>)
   b41c2:	f7ff ffad 	bl	b4120 <_ZN5Print6printfEPKcz>
  Serial.printf("ip address: %s \n", WiFi.localIP().toString().c_str());
   b41c6:	f001 fc6f 	bl	b5aa8 <_Z16_fetch_usbserialv>
        return (WLanConfig*)network_config(*this, 0, NULL);
   b41ca:	4652      	mov	r2, sl
   b41cc:	4681      	mov	r9, r0
   b41ce:	4651      	mov	r1, sl
   b41d0:	6860      	ldr	r0, [r4, #4]
   b41d2:	f000 ffe1 	bl	b5198 <network_config>
        return IPAddress(wifi_config()->nw.aucIP);
   b41d6:	1c81      	adds	r1, r0, #2
   b41d8:	a80a      	add	r0, sp, #40	; 0x28
   b41da:	f001 fbbd 	bl	b5958 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   b41de:	a90a      	add	r1, sp, #40	; 0x28
   b41e0:	a806      	add	r0, sp, #24
   b41e2:	f001 f9d9 	bl	b5598 <_ZN6StringC1ERK9Printable>
   b41e6:	9a06      	ldr	r2, [sp, #24]
   b41e8:	4961      	ldr	r1, [pc, #388]	; (b4370 <_Z7getWiFiv+0x234>)
   b41ea:	4648      	mov	r0, r9
   b41ec:	f7ff ff98 	bl	b4120 <_ZN5Print6printfEPKcz>
   b41f0:	a806      	add	r0, sp, #24
   b41f2:	f001 f93f 	bl	b5474 <_ZN6StringD1Ev>
        return (WLanConfig*)network_config(*this, 0, NULL);
   b41f6:	4652      	mov	r2, sl
   b41f8:	4651      	mov	r1, sl
   b41fa:	6860      	ldr	r0, [r4, #4]
   b41fc:	f000 ffcc 	bl	b5198 <network_config>
   b4200:	4603      	mov	r3, r0
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
   b4202:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
   b4206:	900a      	str	r0, [sp, #40]	; 0x28
   b4208:	f8b3 305b 	ldrh.w	r3, [r3, #91]	; 0x5b
   b420c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  Serial.printf("mac: %02X:%02X:%02X:%02X:%02X:%02X \n", mac[0],mac[1],mac[2],mac[3],mac[4],mac[5]);
   b4210:	f001 fc4a 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b4214:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b4218:	9303      	str	r3, [sp, #12]
   b421a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   b421e:	9302      	str	r3, [sp, #8]
   b4220:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   b4224:	9301      	str	r3, [sp, #4]
   b4226:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   b422a:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   b422e:	4951      	ldr	r1, [pc, #324]	; (b4374 <_Z7getWiFiv+0x238>)
   b4230:	9300      	str	r3, [sp, #0]
   b4232:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   b4236:	f7ff ff73 	bl	b4120 <_ZN5Print6printfEPKcz>
  found = WiFi.getCredentials(ap, 5);
   b423a:	4629      	mov	r1, r5
   b423c:	2205      	movs	r2, #5
   b423e:	4620      	mov	r0, r4
   b4240:	f002 f80c 	bl	b625c <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>
   b4244:	4605      	mov	r5, r0
  Serial.printf("Credentials for %d Access Points Found \n",found);
   b4246:	f001 fc2f 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b424a:	494b      	ldr	r1, [pc, #300]	; (b4378 <_Z7getWiFiv+0x23c>)
   b424c:	462a      	mov	r2, r5
   b424e:	f7ff ff67 	bl	b4120 <_ZN5Print6printfEPKcz>
  for (i = 0; i < found; i++) {
   b4252:	ac39      	add	r4, sp, #228	; 0xe4
   b4254:	45aa      	cmp	sl, r5
   b4256:	da45      	bge.n	b42e4 <_Z7getWiFiv+0x1a8>
    sectype = (int) ap[i].security;
   b4258:	f894 9028 	ldrb.w	r9, [r4, #40]	; 0x28
    cytype = (int) ap[i].cipher;
   b425c:	f894 8029 	ldrb.w	r8, [r4, #41]	; 0x29
    for(int j=0;j<6;j++){
   b4260:	f104 0022 	add.w	r0, r4, #34	; 0x22
   b4264:	a90a      	add	r1, sp, #40	; 0x28
    cytype = (int) ap[i].cipher;
   b4266:	2306      	movs	r3, #6
       mac[j] = ap[i].bssid[j];
   b4268:	f810 cb01 	ldrb.w	ip, [r0], #1
   b426c:	f801 cb01 	strb.w	ip, [r1], #1
    for(int j=0;j<6;j++){
   b4270:	3b01      	subs	r3, #1
   b4272:	d1f9      	bne.n	b4268 <_Z7getWiFiv+0x12c>
    Serial.printf("AP%d - ssid: %s \n", i,ap[i].ssid);
   b4274:	f001 fc18 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b4278:	4623      	mov	r3, r4
   b427a:	4652      	mov	r2, sl
   b427c:	4659      	mov	r1, fp
   b427e:	f7ff ff4f 	bl	b4120 <_ZN5Print6printfEPKcz>
    Serial.printf("AP%d - mac: %02X:%02X:%02X:%02X:%02X:%02X \n", i,mac[0],mac[1],mac[2],mac[3],mac[4],mac[5]);
   b4282:	f001 fc11 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b4286:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b428a:	9304      	str	r3, [sp, #16]
   b428c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   b4290:	9303      	str	r3, [sp, #12]
   b4292:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   b4296:	9302      	str	r3, [sp, #8]
   b4298:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   b429c:	9301      	str	r3, [sp, #4]
   b429e:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   b42a2:	4936      	ldr	r1, [pc, #216]	; (b437c <_Z7getWiFiv+0x240>)
   b42a4:	9300      	str	r3, [sp, #0]
   b42a6:	4652      	mov	r2, sl
   b42a8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   b42ac:	f7ff ff38 	bl	b4120 <_ZN5Print6printfEPKcz>
    Serial.printf("AP%d - security: %d (security %s) \n", i,sectype,security[sectype].c_str());
   b42b0:	f001 fbfa 	bl	b5aa8 <_Z16_fetch_usbserialv>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b42b4:	ea4f 1309 	mov.w	r3, r9, lsl #4
   b42b8:	4652      	mov	r2, sl
   b42ba:	58f3      	ldr	r3, [r6, r3]
   b42bc:	4930      	ldr	r1, [pc, #192]	; (b4380 <_Z7getWiFiv+0x244>)
   b42be:	9300      	str	r3, [sp, #0]
   b42c0:	464b      	mov	r3, r9
   b42c2:	f7ff ff2d 	bl	b4120 <_ZN5Print6printfEPKcz>
    Serial.printf("AP%d - cipher:   %d (cipher %s) \n\n", i,cytype, cypher[cytype].c_str());
   b42c6:	f001 fbef 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b42ca:	ea4f 1308 	mov.w	r3, r8, lsl #4
   b42ce:	4652      	mov	r2, sl
   b42d0:	58fb      	ldr	r3, [r7, r3]
   b42d2:	9300      	str	r3, [sp, #0]
   b42d4:	492b      	ldr	r1, [pc, #172]	; (b4384 <_Z7getWiFiv+0x248>)
   b42d6:	4643      	mov	r3, r8
   b42d8:	f7ff ff22 	bl	b4120 <_ZN5Print6printfEPKcz>
  for (i = 0; i < found; i++) {
   b42dc:	f10a 0a01 	add.w	sl, sl, #1
   b42e0:	3438      	adds	r4, #56	; 0x38
   b42e2:	e7b7      	b.n	b4254 <_Z7getWiFiv+0x118>
  }
    
//lines below for puslishing
  if((millis()-lastTime > 6000)) {
   b42e4:	4c28      	ldr	r4, [pc, #160]	; (b4388 <_Z7getWiFiv+0x24c>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b42e6:	f000 fdeb 	bl	b4ec0 <HAL_Timer_Get_Milli_Seconds>
   b42ea:	6823      	ldr	r3, [r4, #0]
   b42ec:	1ac0      	subs	r0, r0, r3
   b42ee:	f241 7370 	movw	r3, #6000	; 0x1770
   b42f2:	4298      	cmp	r0, r3
   b42f4:	d911      	bls.n	b431a <_Z7getWiFiv+0x1de>
    if(mqtt.Update()) {
   b42f6:	4825      	ldr	r0, [pc, #148]	; (b438c <_Z7getWiFiv+0x250>)
   b42f8:	4d25      	ldr	r5, [pc, #148]	; (b4390 <_Z7getWiFiv+0x254>)
   b42fa:	f000 fa69 	bl	b47d0 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   b42fe:	b118      	cbz	r0, b4308 <_Z7getWiFiv+0x1cc>
      pubFeed.publish(soilentGreen);
   b4300:	6829      	ldr	r1, [r5, #0]
   b4302:	4824      	ldr	r0, [pc, #144]	; (b4394 <_Z7getWiFiv+0x258>)
   b4304:	f000 fce7 	bl	b4cd6 <_ZN21Adafruit_MQTT_Publish7publishEi>
    
      } 
      Serial.printf("Moisture reading is %i \n",soilentGreen); 
   b4308:	f001 fbce 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b430c:	682a      	ldr	r2, [r5, #0]
   b430e:	4922      	ldr	r1, [pc, #136]	; (b4398 <_Z7getWiFiv+0x25c>)
   b4310:	f7ff ff06 	bl	b4120 <_ZN5Print6printfEPKcz>
   b4314:	f000 fdd4 	bl	b4ec0 <HAL_Timer_Get_Milli_Seconds>
    lastTime = millis();
   b4318:	6020      	str	r0, [r4, #0]
    cytype = (int) ap[i].cipher;
   b431a:	2403      	movs	r4, #3
  String cypher[4] = {"N/A","WLAN_CIPHER_AES", "WLAN_CIPHER_TKIP", "WLAN_CIPHER_AES_TKIP"};
   b431c:	eb07 1004 	add.w	r0, r7, r4, lsl #4
   b4320:	f001 f8a8 	bl	b5474 <_ZN6StringD1Ev>
   b4324:	3c01      	subs	r4, #1
   b4326:	d2f9      	bcs.n	b431c <_Z7getWiFiv+0x1e0>
   b4328:	2405      	movs	r4, #5
  String security[6] = {"WLAN_SEC_UNSEC", "WLAN_SEC_WEP", "WLAN_SEC_WPA", "WLAN_SEC_WPA2", "WLAN_SEC_WPA_ENTERPRISE", "WLAN_SEC_WPA2_ENTERPRISE"};
   b432a:	eb06 1004 	add.w	r0, r6, r4, lsl #4
   b432e:	f001 f8a1 	bl	b5474 <_ZN6StringD1Ev>
   b4332:	3c01      	subs	r4, #1
   b4334:	d2f9      	bcs.n	b432a <_Z7getWiFiv+0x1ee>
  }
}
   b4336:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   b433a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b433e:	bf00      	nop
   b4340:	000b6acd 	.word	0x000b6acd
   b4344:	2003e70c 	.word	0x2003e70c
   b4348:	000b6adc 	.word	0x000b6adc
   b434c:	000b6ae9 	.word	0x000b6ae9
   b4350:	000b6af6 	.word	0x000b6af6
   b4354:	000b6b04 	.word	0x000b6b04
   b4358:	000b6b1c 	.word	0x000b6b1c
   b435c:	000b6b35 	.word	0x000b6b35
   b4360:	000b6b39 	.word	0x000b6b39
   b4364:	000b6b49 	.word	0x000b6b49
   b4368:	000b6b5a 	.word	0x000b6b5a
   b436c:	000b6b6f 	.word	0x000b6b6f
   b4370:	000b6b91 	.word	0x000b6b91
   b4374:	000b6be4 	.word	0x000b6be4
   b4378:	000b6ba2 	.word	0x000b6ba2
   b437c:	000b6bdd 	.word	0x000b6bdd
   b4380:	000b6c09 	.word	0x000b6c09
   b4384:	000b6c2d 	.word	0x000b6c2d
   b4388:	2003e58c 	.word	0x2003e58c
   b438c:	2003e590 	.word	0x2003e590
   b4390:	2003e4f0 	.word	0x2003e4f0
   b4394:	2003e674 	.word	0x2003e674
   b4398:	000b6c50 	.word	0x000b6c50
   b439c:	000b6bcb 	.word	0x000b6bcb

000b43a0 <setup>:
 void setup() {
   b43a0:	b570      	push	{r4, r5, r6, lr}
    Serial.begin(9600);
   b43a2:	f001 fb81 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b43a6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b43aa:	f001 fb6d 	bl	b5a88 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b43ae:	2000      	movs	r0, #0
   b43b0:	f000 fd8e 	bl	b4ed0 <hal_timer_millis>
        while (_while() && !_condition()) {
   b43b4:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b43b8:	4604      	mov	r4, r0
   b43ba:	2000      	movs	r0, #0
   b43bc:	f000 fd88 	bl	b4ed0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b43c0:	1b00      	subs	r0, r0, r4
   b43c2:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b43c6:	42a8      	cmp	r0, r5
   b43c8:	f171 0300 	sbcs.w	r3, r1, #0
   b43cc:	d207      	bcs.n	b43de <setup+0x3e>
    waitFor(Serial.isConnected,10000);
   b43ce:	f001 fb6b 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b43d2:	f001 fb5d 	bl	b5a90 <_ZN9USBSerial11isConnectedEv>
   b43d6:	b910      	cbnz	r0, b43de <setup+0x3e>
            spark_process();
   b43d8:	f000 ff5e 	bl	b5298 <spark_process>
        while (_while() && !_condition()) {
   b43dc:	e7ed      	b.n	b43ba <setup+0x1a>
   b43de:	f001 fb63 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b43e2:	4c3f      	ldr	r4, [pc, #252]	; (b44e0 <setup+0x140>)
      Serial.printf(".");
   b43e4:	4e3f      	ldr	r6, [pc, #252]	; (b44e4 <setup+0x144>)
    waitFor(Serial.isConnected,10000);
   b43e6:	f001 fb53 	bl	b5a90 <_ZN9USBSerial11isConnectedEv>
    delay(1000);
   b43ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b43ee:	f001 f9af 	bl	b5750 <delay>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   b43f2:	2300      	movs	r3, #0
   b43f4:	461a      	mov	r2, r3
   b43f6:	4619      	mov	r1, r3
   b43f8:	6860      	ldr	r0, [r4, #4]
   b43fa:	f000 ff25 	bl	b5248 <network_clear_credentials>
    Serial.printf("Has Credentials = %i\n\n",WiFi.hasCredentials());
   b43fe:	f001 fb53 	bl	b5aa8 <_Z16_fetch_usbserialv>
        return network_has_credentials(*this, 0, NULL);
   b4402:	2200      	movs	r2, #0
   b4404:	4611      	mov	r1, r2
   b4406:	4605      	mov	r5, r0
   b4408:	6860      	ldr	r0, [r4, #4]
   b440a:	f000 ff0d 	bl	b5228 <network_has_credentials>
   b440e:	4936      	ldr	r1, [pc, #216]	; (b44e8 <setup+0x148>)
   b4410:	4602      	mov	r2, r0
   b4412:	4628      	mov	r0, r5
   b4414:	f7ff fe84 	bl	b4120 <_ZN5Print6printfEPKcz>
    delay(1000);
   b4418:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b441c:	f001 f998 	bl	b5750 <delay>
    WiFi.setCredentials("DDCIOT","ddcIOT2020");
   b4420:	4a32      	ldr	r2, [pc, #200]	; (b44ec <setup+0x14c>)
   b4422:	4933      	ldr	r1, [pc, #204]	; (b44f0 <setup+0x150>)
   b4424:	4620      	mov	r0, r4
   b4426:	f7ff fe4f 	bl	b40c8 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_.isra.0>
    WiFi.setCredentials("ParentHouse","Suva9fiji");
   b442a:	4a32      	ldr	r2, [pc, #200]	; (b44f4 <setup+0x154>)
   b442c:	4932      	ldr	r1, [pc, #200]	; (b44f8 <setup+0x158>)
   b442e:	4620      	mov	r0, r4
   b4430:	f7ff fe4a 	bl	b40c8 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_.isra.0>
        network_on(*this, 0, 0, NULL);
   b4434:	2300      	movs	r3, #0
   b4436:	461a      	mov	r2, r3
   b4438:	4619      	mov	r1, r3
   b443a:	6860      	ldr	r0, [r4, #4]
   b443c:	f000 fed4 	bl	b51e8 <network_on>
        network_connect(*this, flags, 0, NULL);
   b4440:	2300      	movs	r3, #0
   b4442:	6860      	ldr	r0, [r4, #4]
   b4444:	461a      	mov	r2, r3
   b4446:	4619      	mov	r1, r3
   b4448:	f000 feae 	bl	b51a8 <network_connect>
        return network_connecting(*this, 0, NULL);
   b444c:	2200      	movs	r2, #0
   b444e:	6860      	ldr	r0, [r4, #4]
   b4450:	4611      	mov	r1, r2
   b4452:	f000 feb1 	bl	b51b8 <network_connecting>
    while(WiFi.connecting()) {
   b4456:	4605      	mov	r5, r0
   b4458:	b140      	cbz	r0, b446c <setup+0xcc>
      Serial.printf(".");
   b445a:	f001 fb25 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b445e:	4631      	mov	r1, r6
   b4460:	f7ff fe5e 	bl	b4120 <_ZN5Print6printfEPKcz>
      delay(100);
   b4464:	2064      	movs	r0, #100	; 0x64
   b4466:	f001 f973 	bl	b5750 <delay>
    while(WiFi.connecting()) {
   b446a:	e7ef      	b.n	b444c <setup+0xac>
  Serial.printf("\n\n");
   b446c:	f001 fb1c 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b4470:	4922      	ldr	r1, [pc, #136]	; (b44fc <setup+0x15c>)
   b4472:	f7ff fe55 	bl	b4120 <_ZN5Print6printfEPKcz>
  delay(3000);
   b4476:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b447a:	f001 f969 	bl	b5750 <delay>
  getWiFi();
   b447e:	f7ff fe5d 	bl	b413c <_Z7getWiFiv>
  pinMode(D7,OUTPUT);
   b4482:	2101      	movs	r1, #1
   b4484:	2007      	movs	r0, #7
   b4486:	f001 fff5 	bl	b6474 <pinMode>
  pinMode(soilentGreen, INPUT);
   b448a:	4b1d      	ldr	r3, [pc, #116]	; (b4500 <setup+0x160>)
   b448c:	4629      	mov	r1, r5
   b448e:	8818      	ldrh	r0, [r3, #0]
   b4490:	f001 fff0 	bl	b6474 <pinMode>
  pinMode(pumpPIN, OUTPUT);
   b4494:	2101      	movs	r1, #1
   b4496:	200b      	movs	r0, #11
   b4498:	f001 ffec 	bl	b6474 <pinMode>
  digitalWrite(pumpPIN,HIGH);
   b449c:	2101      	movs	r1, #1
   b449e:	200b      	movs	r0, #11
   b44a0:	f001 fff9 	bl	b6496 <digitalWrite>
  delay(6000);
   b44a4:	f241 7070 	movw	r0, #6000	; 0x1770
   b44a8:	f001 f952 	bl	b5750 <delay>
  digitalWrite(pumpPIN,LOW);
   b44ac:	4629      	mov	r1, r5
   b44ae:	200b      	movs	r0, #11
   b44b0:	f001 fff1 	bl	b6496 <digitalWrite>
  delay(6000);
   b44b4:	f241 7070 	movw	r0, #6000	; 0x1770
   b44b8:	f001 f94a 	bl	b5750 <delay>
  digitalWrite(pumpPIN,HIGH);
   b44bc:	2101      	movs	r1, #1
   b44be:	200b      	movs	r0, #11
   b44c0:	f001 ffe9 	bl	b6496 <digitalWrite>
  delay(6000);
   b44c4:	f241 7070 	movw	r0, #6000	; 0x1770
   b44c8:	f001 f942 	bl	b5750 <delay>
  digitalWrite(pumpPIN,LOW);
   b44cc:	4629      	mov	r1, r5
   b44ce:	200b      	movs	r0, #11
   b44d0:	f001 ffe1 	bl	b6496 <digitalWrite>
 }
   b44d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  mqtt.subscribe(&subFeed);//must tell Argon to subscribe
   b44d8:	490a      	ldr	r1, [pc, #40]	; (b4504 <setup+0x164>)
   b44da:	480b      	ldr	r0, [pc, #44]	; (b4508 <setup+0x168>)
   b44dc:	f000 ba54 	b.w	b4988 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>
   b44e0:	2003e70c 	.word	0x2003e70c
   b44e4:	000b6f36 	.word	0x000b6f36
   b44e8:	000b6c69 	.word	0x000b6c69
   b44ec:	000b6c80 	.word	0x000b6c80
   b44f0:	000b6c8b 	.word	0x000b6c8b
   b44f4:	000b6c92 	.word	0x000b6c92
   b44f8:	000b6c9c 	.word	0x000b6c9c
   b44fc:	000b6c4d 	.word	0x000b6c4d
   b4500:	2003e4f0 	.word	0x2003e4f0
   b4504:	2003e680 	.word	0x2003e680
   b4508:	2003e590 	.word	0x2003e590

000b450c <_Z12MQTT_connectv>:

// Function to connect and reconnect as necessary to the MQTT server.
// Should be called in the loop function and it will take care if connecting.
void MQTT_connect() {
   b450c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int8_t ret;
 
  // Return if already connected.
  if (mqtt.connected()) {
   b4510:	4818      	ldr	r0, [pc, #96]	; (b4574 <_Z12MQTT_connectv+0x68>)
   b4512:	f000 f8d7 	bl	b46c4 <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   b4516:	bb58      	cbnz	r0, b4570 <_Z12MQTT_connectv+0x64>
    return;
  }
 
  Serial.print("Connecting to MQTT... ");
   b4518:	f001 fac6 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b451c:	4916      	ldr	r1, [pc, #88]	; (b4578 <_Z12MQTT_connectv+0x6c>)
 
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b451e:	4e15      	ldr	r6, [pc, #84]	; (b4574 <_Z12MQTT_connectv+0x68>)
       Serial.printf("Error Code %s\n",mqtt.connectErrorString(ret));
   b4520:	f8df 8060 	ldr.w	r8, [pc, #96]	; b4584 <_Z12MQTT_connectv+0x78>
       Serial.printf("Retrying MQTT connection in 5 seconds...\n");
   b4524:	4f15      	ldr	r7, [pc, #84]	; (b457c <_Z12MQTT_connectv+0x70>)
  Serial.print("Connecting to MQTT... ");
   b4526:	f001 f895 	bl	b5654 <_ZN5Print5printEPKc>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b452a:	4812      	ldr	r0, [pc, #72]	; (b4574 <_Z12MQTT_connectv+0x68>)
   b452c:	f000 fb77 	bl	b4c1e <_ZN13Adafruit_MQTT7connectEv>
   b4530:	4604      	mov	r4, r0
   b4532:	b1c0      	cbz	r0, b4566 <_Z12MQTT_connectv+0x5a>
       Serial.printf("Error Code %s\n",mqtt.connectErrorString(ret));
   b4534:	f001 fab8 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b4538:	4621      	mov	r1, r4
   b453a:	4605      	mov	r5, r0
   b453c:	4630      	mov	r0, r6
   b453e:	f000 fa01 	bl	b4944 <_ZN13Adafruit_MQTT18connectErrorStringEa>
   b4542:	4641      	mov	r1, r8
   b4544:	4602      	mov	r2, r0
   b4546:	4628      	mov	r0, r5
   b4548:	f7ff fdea 	bl	b4120 <_ZN5Print6printfEPKcz>
       Serial.printf("Retrying MQTT connection in 5 seconds...\n");
   b454c:	f001 faac 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b4550:	4639      	mov	r1, r7
   b4552:	f7ff fde5 	bl	b4120 <_ZN5Print6printfEPKcz>
       mqtt.disconnect();
   b4556:	4630      	mov	r0, r6
   b4558:	f000 fa02 	bl	b4960 <_ZN13Adafruit_MQTT10disconnectEv>
       delay(5000);  // wait 5 seconds and try again
   b455c:	f241 3088 	movw	r0, #5000	; 0x1388
   b4560:	f001 f8f6 	bl	b5750 <delay>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   b4564:	e7e1      	b.n	b452a <_Z12MQTT_connectv+0x1e>
  }
  Serial.printf("MQTT Connected!\n");
   b4566:	f001 fa9f 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b456a:	4905      	ldr	r1, [pc, #20]	; (b4580 <_Z12MQTT_connectv+0x74>)
   b456c:	f7ff fdd8 	bl	b4120 <_ZN5Print6printfEPKcz>
}
   b4570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4574:	2003e590 	.word	0x2003e590
   b4578:	000b6ca8 	.word	0x000b6ca8
   b457c:	000b6cce 	.word	0x000b6cce
   b4580:	000b6cf8 	.word	0x000b6cf8
   b4584:	000b6cbf 	.word	0x000b6cbf

000b4588 <_Z9MQTT_pingv>:

bool MQTT_ping() {
   b4588:	b538      	push	{r3, r4, r5, lr}
  static unsigned int last;
  bool pingStatus;

  //keep the connection alive

  if ((millis()-last)>120000) {
   b458a:	4d11      	ldr	r5, [pc, #68]	; (b45d0 <_Z9MQTT_pingv+0x48>)
   b458c:	f000 fc98 	bl	b4ec0 <HAL_Timer_Get_Milli_Seconds>
   b4590:	682b      	ldr	r3, [r5, #0]
   b4592:	1ac0      	subs	r0, r0, r3
   b4594:	4b0f      	ldr	r3, [pc, #60]	; (b45d4 <_Z9MQTT_pingv+0x4c>)
   b4596:	4298      	cmp	r0, r3
bool MQTT_ping() {
   b4598:	f04f 0400 	mov.w	r4, #0
  if ((millis()-last)>120000) {
   b459c:	d915      	bls.n	b45ca <_Z9MQTT_pingv+0x42>
      Serial.printf("Pinging MQTT \n");
   b459e:	f001 fa83 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b45a2:	490d      	ldr	r1, [pc, #52]	; (b45d8 <_Z9MQTT_pingv+0x50>)
   b45a4:	f7ff fdbc 	bl	b4120 <_ZN5Print6printfEPKcz>
      pingStatus = mqtt.ping();
   b45a8:	480c      	ldr	r0, [pc, #48]	; (b45dc <_Z9MQTT_pingv+0x54>)
   b45aa:	2101      	movs	r1, #1
   b45ac:	f000 fa07 	bl	b49be <_ZN13Adafruit_MQTT4pingEh>
      if(!pingStatus) {
   b45b0:	4604      	mov	r4, r0
   b45b2:	b938      	cbnz	r0, b45c4 <_Z9MQTT_pingv+0x3c>
        Serial.printf("Disconnecting \n");
   b45b4:	f001 fa78 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b45b8:	4909      	ldr	r1, [pc, #36]	; (b45e0 <_Z9MQTT_pingv+0x58>)
   b45ba:	f7ff fdb1 	bl	b4120 <_ZN5Print6printfEPKcz>
        mqtt.disconnect();
   b45be:	4807      	ldr	r0, [pc, #28]	; (b45dc <_Z9MQTT_pingv+0x54>)
   b45c0:	f000 f9ce 	bl	b4960 <_ZN13Adafruit_MQTT10disconnectEv>
   b45c4:	f000 fc7c 	bl	b4ec0 <HAL_Timer_Get_Milli_Seconds>
      }
      last = millis();
   b45c8:	6028      	str	r0, [r5, #0]
  }
  return pingStatus;
}
   b45ca:	4620      	mov	r0, r4
   b45cc:	bd38      	pop	{r3, r4, r5, pc}
   b45ce:	bf00      	nop
   b45d0:	2003e588 	.word	0x2003e588
   b45d4:	0001d4c0 	.word	0x0001d4c0
   b45d8:	000b6d09 	.word	0x000b6d09
   b45dc:	2003e590 	.word	0x2003e590
   b45e0:	000b6d18 	.word	0x000b6d18

000b45e4 <loop>:
 void loop () {
   b45e4:	b510      	push	{r4, lr}
  soilentGreen=analogRead(soilentGreen);
   b45e6:	4c10      	ldr	r4, [pc, #64]	; (b4628 <loop+0x44>)
   b45e8:	8820      	ldrh	r0, [r4, #0]
   b45ea:	f001 ff80 	bl	b64ee <analogRead>
   b45ee:	6020      	str	r0, [r4, #0]
  MQTT_connect();
   b45f0:	f7ff ff8c 	bl	b450c <_Z12MQTT_connectv>
  MQTT_ping();
   b45f4:	f7ff ffc8 	bl	b4588 <_Z9MQTT_pingv>
        return network_has_credentials(*this, 0, NULL);
   b45f8:	4b0c      	ldr	r3, [pc, #48]	; (b462c <loop+0x48>)
   b45fa:	2200      	movs	r2, #0
   b45fc:	6858      	ldr	r0, [r3, #4]
   b45fe:	4611      	mov	r1, r2
   b4600:	f000 fe12 	bl	b5228 <network_has_credentials>
   if(WiFi.hasCredentials()) {
   b4604:	b178      	cbz	r0, b4626 <loop+0x42>
    digitalWrite(D7,HIGH);
   b4606:	2101      	movs	r1, #1
   b4608:	2007      	movs	r0, #7
   b460a:	f001 ff44 	bl	b6496 <digitalWrite>
    delay(250);
   b460e:	20fa      	movs	r0, #250	; 0xfa
   b4610:	f001 f89e 	bl	b5750 <delay>
    digitalWrite(D7,LOW);
   b4614:	2007      	movs	r0, #7
   b4616:	2100      	movs	r1, #0
   b4618:	f001 ff3d 	bl	b6496 <digitalWrite>
}
   b461c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(250);
   b4620:	20fa      	movs	r0, #250	; 0xfa
   b4622:	f001 b895 	b.w	b5750 <delay>
}
   b4626:	bd10      	pop	{r4, pc}
   b4628:	2003e4f0 	.word	0x2003e4f0
   b462c:	2003e70c 	.word	0x2003e70c

000b4630 <_GLOBAL__sub_I_myScale>:
}
   b4630:	b537      	push	{r0, r1, r2, r4, r5, lr}
TCPClient TheClient; 
   b4632:	4d18      	ldr	r5, [pc, #96]	; (b4694 <_GLOBAL__sub_I_myScale+0x64>)
 HX711 myScale (14, 17); // my (2) digital pins [2 are needed]
   b4634:	4818      	ldr	r0, [pc, #96]	; (b4698 <_GLOBAL__sub_I_myScale+0x68>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   b4636:	4c19      	ldr	r4, [pc, #100]	; (b469c <_GLOBAL__sub_I_myScale+0x6c>)
   b4638:	2380      	movs	r3, #128	; 0x80
   b463a:	2211      	movs	r2, #17
   b463c:	210e      	movs	r1, #14
   b463e:	f000 fbd7 	bl	b4df0 <_ZN5HX711C1Ehhh>
TCPClient TheClient; 
   b4642:	4628      	mov	r0, r5
   b4644:	f001 fdaa 	bl	b619c <_ZN9TCPClientC1Ev>
   b4648:	4b15      	ldr	r3, [pc, #84]	; (b46a0 <_GLOBAL__sub_I_myScale+0x70>)
   b464a:	9300      	str	r3, [sp, #0]
   b464c:	4915      	ldr	r1, [pc, #84]	; (b46a4 <_GLOBAL__sub_I_myScale+0x74>)
   b464e:	4b16      	ldr	r3, [pc, #88]	; (b46a8 <_GLOBAL__sub_I_myScale+0x78>)
   b4650:	f240 725b 	movw	r2, #1883	; 0x75b
   b4654:	4620      	mov	r0, r4
   b4656:	f000 f8f1 	bl	b483c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   b465a:	4b14      	ldr	r3, [pc, #80]	; (b46ac <_GLOBAL__sub_I_myScale+0x7c>)
   b465c:	6023      	str	r3, [r4, #0]
Adafruit_MQTT_Subscribe subFeed = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/suvabuttononoff"); 
   b465e:	4621      	mov	r1, r4
   b4660:	4a13      	ldr	r2, [pc, #76]	; (b46b0 <_GLOBAL__sub_I_myScale+0x80>)
   b4662:	4814      	ldr	r0, [pc, #80]	; (b46b4 <_GLOBAL__sub_I_myScale+0x84>)
   b4664:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
   b4668:	2300      	movs	r3, #0
   b466a:	f000 fb43 	bl	b4cf4 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish pubFeed = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/soilentGreen");
   b466e:	4a12      	ldr	r2, [pc, #72]	; (b46b8 <_GLOBAL__sub_I_myScale+0x88>)
   b4670:	4812      	ldr	r0, [pc, #72]	; (b46bc <_GLOBAL__sub_I_myScale+0x8c>)
   b4672:	2300      	movs	r3, #0
   b4674:	4621      	mov	r1, r4
   b4676:	f000 fb29 	bl	b4ccc <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
              error_(SYSTEM_ERROR_NONE) {
   b467a:	4b11      	ldr	r3, [pc, #68]	; (b46c0 <_GLOBAL__sub_I_myScale+0x90>)
   b467c:	2200      	movs	r2, #0
   b467e:	e9c3 2200 	strd	r2, r2, [r3]
        set_system_mode(mode);
   b4682:	2002      	movs	r0, #2
    SleepResult() {}
   b4684:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4688:	609a      	str	r2, [r3, #8]
}
   b468a:	b003      	add	sp, #12
   b468c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        set_system_mode(mode);
   b4690:	f000 bd5e 	b.w	b5150 <set_system_mode>
   b4694:	2003e56c 	.word	0x2003e56c
   b4698:	2003e664 	.word	0x2003e664
   b469c:	2003e590 	.word	0x2003e590
   b46a0:	000b6d40 	.word	0x000b6d40
   b46a4:	000b6d30 	.word	0x000b6d30
   b46a8:	000b6d28 	.word	0x000b6d28
   b46ac:	000b6da4 	.word	0x000b6da4
   b46b0:	000b6d61 	.word	0x000b6d61
   b46b4:	2003e680 	.word	0x2003e680
   b46b8:	000b6d7f 	.word	0x000b6d7f
   b46bc:	2003e674 	.word	0x2003e674
   b46c0:	2003e560 	.word	0x2003e560

000b46c4 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   b46c4:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   b46c6:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b46ca:	6803      	ldr	r3, [r0, #0]
   b46cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b46ce:	4798      	blx	r3
}
   b46d0:	3800      	subs	r0, #0
   b46d2:	bf18      	it	ne
   b46d4:	2001      	movne	r0, #1
   b46d6:	bd08      	pop	{r3, pc}

000b46d8 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   b46d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b46da:	4606      	mov	r6, r0
   b46dc:	460f      	mov	r7, r1
   b46de:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   b46e0:	b1c4      	cbz	r4, b4714 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   b46e2:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b46e6:	6803      	ldr	r3, [r0, #0]
   b46e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b46ea:	4798      	blx	r3
   b46ec:	b908      	cbnz	r0, b46f2 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   b46ee:	2000      	movs	r0, #0
    }
  }
  return true;
}
   b46f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret = client->write(buffer, sendlen);
   b46f2:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   b46f6:	2cfa      	cmp	r4, #250	; 0xfa
   b46f8:	6803      	ldr	r3, [r0, #0]
   b46fa:	4625      	mov	r5, r4
   b46fc:	bfa8      	it	ge
   b46fe:	25fa      	movge	r5, #250	; 0xfa
   b4700:	68db      	ldr	r3, [r3, #12]
   b4702:	462a      	mov	r2, r5
   b4704:	4639      	mov	r1, r7
   b4706:	4798      	blx	r3
   b4708:	b283      	uxth	r3, r0
      len -= ret;
   b470a:	1ae4      	subs	r4, r4, r3
      if (ret != sendlen) {
   b470c:	429d      	cmp	r5, r3
      len -= ret;
   b470e:	b2a4      	uxth	r4, r4
      if (ret != sendlen) {
   b4710:	d0e6      	beq.n	b46e0 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   b4712:	e7ec      	b.n	b46ee <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
  return true;
   b4714:	2001      	movs	r0, #1
   b4716:	e7eb      	b.n	b46f0 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x18>

000b4718 <_ZN19Adafruit_MQTT_SPARKD1Ev>:
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   b4718:	4770      	bx	lr

000b471a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
                                          int16_t timeout) {
   b471a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b471e:	4606      	mov	r6, r0
   b4720:	4688      	mov	r8, r1
   b4722:	4691      	mov	r9, r2
   b4724:	461f      	mov	r7, r3
   b4726:	461d      	mov	r5, r3
  uint16_t len = 0;
   b4728:	2400      	movs	r4, #0
  while (client->connected() && (timeout >= 0)) {
   b472a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b472e:	6803      	ldr	r3, [r0, #0]
   b4730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4732:	4798      	blx	r3
   b4734:	b1d0      	cbz	r0, b476c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   b4736:	2d00      	cmp	r5, #0
   b4738:	db18      	blt.n	b476c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    while (client->available()) {
   b473a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b473e:	6803      	ldr	r3, [r0, #0]
   b4740:	691b      	ldr	r3, [r3, #16]
   b4742:	4798      	blx	r3
   b4744:	b160      	cbz	r0, b4760 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      char c = client->read();
   b4746:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b474a:	6803      	ldr	r3, [r0, #0]
   b474c:	695b      	ldr	r3, [r3, #20]
   b474e:	4798      	blx	r3
   b4750:	f808 0004 	strb.w	r0, [r8, r4]
      len++;
   b4754:	3401      	adds	r4, #1
   b4756:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   b4758:	454c      	cmp	r4, r9
   b475a:	d007      	beq.n	b476c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
      timeout = t;  // reset the timeout
   b475c:	463d      	mov	r5, r7
   b475e:	e7ec      	b.n	b473a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b4760:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b4762:	200a      	movs	r0, #10
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b4764:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b4766:	f000 fff3 	bl	b5750 <delay>
  while (client->connected() && (timeout >= 0)) {
   b476a:	e7de      	b.n	b472a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
}
   b476c:	4620      	mov	r0, r4
   b476e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4772 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
bool Adafruit_MQTT_SPARK::connectServer(){
   b4772:	b570      	push	{r4, r5, r6, lr}
   b4774:	4604      	mov	r4, r0
  memset(buffer, 0, sizeof(buffer));
   b4776:	f100 0522 	add.w	r5, r0, #34	; 0x22
   b477a:	2296      	movs	r2, #150	; 0x96
   b477c:	2100      	movs	r1, #0
   b477e:	4628      	mov	r0, r5
   b4780:	f002 f8c6 	bl	b6910 <memset>
  strcpy((char *)buffer, servername);
   b4784:	6861      	ldr	r1, [r4, #4]
   b4786:	4628      	mov	r0, r5
   b4788:	f002 f902 	bl	b6990 <strcpy>
  int r = client->connect((char *)buffer, portnum);
   b478c:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b4790:	8922      	ldrh	r2, [r4, #8]
   b4792:	6803      	ldr	r3, [r0, #0]
   b4794:	4629      	mov	r1, r5
   b4796:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   b4798:	2300      	movs	r3, #0
   b479a:	47b0      	blx	r6
}
   b479c:	3800      	subs	r0, #0
   b479e:	bf18      	it	ne
   b47a0:	2001      	movne	r0, #1
   b47a2:	bd70      	pop	{r4, r5, r6, pc}

000b47a4 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   b47a4:	b510      	push	{r4, lr}
   b47a6:	21d4      	movs	r1, #212	; 0xd4
   b47a8:	4604      	mov	r4, r0
   b47aa:	f7ff fc76 	bl	b409a <_ZdlPvj>
   b47ae:	4620      	mov	r0, r4
   b47b0:	bd10      	pop	{r4, pc}

000b47b2 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:
bool Adafruit_MQTT_SPARK::disconnectServer() {
   b47b2:	b510      	push	{r4, lr}
   b47b4:	4604      	mov	r4, r0
  if (client->connected()) {
   b47b6:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b47ba:	6803      	ldr	r3, [r0, #0]
   b47bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b47be:	4798      	blx	r3
   b47c0:	b120      	cbz	r0, b47cc <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   b47c2:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b47c6:	6803      	ldr	r3, [r0, #0]
   b47c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b47ca:	4798      	blx	r3
}
   b47cc:	2001      	movs	r0, #1
   b47ce:	bd10      	pop	{r4, pc}

000b47d0 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
{
   b47d0:	b570      	push	{r4, r5, r6, lr}
    if (!connected())
   b47d2:	6803      	ldr	r3, [r0, #0]
   b47d4:	689b      	ldr	r3, [r3, #8]
{
   b47d6:	4604      	mov	r4, r0
    if (!connected())
   b47d8:	4798      	blx	r3
   b47da:	b9c8      	cbnz	r0, b4810 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   b47dc:	4620      	mov	r0, r4
   b47de:	f000 fa1e 	bl	b4c1e <_ZN13Adafruit_MQTT7connectEv>
   b47e2:	2504      	movs	r5, #4
   b47e4:	b170      	cbz	r0, b4804 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   b47e6:	3d01      	subs	r5, #1
   b47e8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b47ec:	d00a      	beq.n	b4804 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
            disconnect();
   b47ee:	4620      	mov	r0, r4
   b47f0:	f000 f8b6 	bl	b4960 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   b47f4:	f241 3088 	movw	r0, #5000	; 0x1388
   b47f8:	f000 ffaa 	bl	b5750 <delay>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   b47fc:	4620      	mov	r0, r4
   b47fe:	f000 fa0e 	bl	b4c1e <_ZN13Adafruit_MQTT7connectEv>
   b4802:	e7ef      	b.n	b47e4 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
        if( connected() )
   b4804:	6823      	ldr	r3, [r4, #0]
   b4806:	4620      	mov	r0, r4
   b4808:	689b      	ldr	r3, [r3, #8]
}
   b480a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if( connected() )
   b480e:	4718      	bx	r3
}
   b4810:	bd70      	pop	{r4, r5, r6, pc}

000b4812 <_ZL11stringprintPhPKct.constprop.0>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   b4812:	b513      	push	{r0, r1, r4, lr}
   b4814:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   b4816:	4608      	mov	r0, r1
   b4818:	9101      	str	r1, [sp, #4]
   b481a:	f002 f8c1 	bl	b69a0 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   b481e:	f3c0 2307 	ubfx	r3, r0, #8, #8
   b4822:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   b4824:	7060      	strb	r0, [r4, #1]
   b4826:	1ca3      	adds	r3, r4, #2
  strncpy((char *)p, s, len);
   b4828:	b284      	uxth	r4, r0
   b482a:	9901      	ldr	r1, [sp, #4]
   b482c:	4622      	mov	r2, r4
   b482e:	4618      	mov	r0, r3
   b4830:	f002 f8be 	bl	b69b0 <strncpy>
  return p+len;
}
   b4834:	4420      	add	r0, r4
   b4836:	b002      	add	sp, #8
   b4838:	bd10      	pop	{r4, pc}
	...

000b483c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   b483c:	b530      	push	{r4, r5, lr}
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
   b483e:	8102      	strh	r2, [r0, #8]
  clientid = "";
   b4840:	4a0a      	ldr	r2, [pc, #40]	; (b486c <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x30>)
                             const char *pass) {
   b4842:	4d0b      	ldr	r5, [pc, #44]	; (b4870 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x34>)
  username = user;
   b4844:	e9c0 2303 	strd	r2, r3, [r0, #12]
  password = pass;
   b4848:	9b03      	ldr	r3, [sp, #12]
   b484a:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   b484c:	2300      	movs	r3, #0
  servername = server;
   b484e:	e9c0 5100 	strd	r5, r1, [r0]
    subscriptions[i] = 0;
   b4852:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
   b4856:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  }

  will_topic = 0;
  will_payload = 0;
   b485a:	e9c0 3306 	strd	r3, r3, [r0, #24]
    subscriptions[i] = 0;
   b485e:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  will_qos = 0;
   b4862:	8403      	strh	r3, [r0, #32]
  will_retain = 0;

  packet_id_counter = 0;
   b4864:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   b4868:	bd30      	pop	{r4, r5, pc}
   b486a:	bf00      	nop
   b486c:	000b6c4f 	.word	0x000b6c4f
   b4870:	000b6fa8 	.word	0x000b6fa8

000b4874 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b4874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4878:	4616      	mov	r6, r2
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   b487a:	6802      	ldr	r2, [r0, #0]
   b487c:	b21b      	sxth	r3, r3
   b487e:	6997      	ldr	r7, [r2, #24]
   b4880:	9301      	str	r3, [sp, #4]
   b4882:	2201      	movs	r2, #1
uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   b4884:	4605      	mov	r5, r0
   b4886:	460c      	mov	r4, r1
  rlen = readPacket(pbuff, 1, timeout);
   b4888:	47b8      	blx	r7
  if (rlen != 1) return 0;
   b488a:	b2c7      	uxtb	r7, r0
   b488c:	2f01      	cmp	r7, #1
   b488e:	9b01      	ldr	r3, [sp, #4]
   b4890:	d003      	beq.n	b489a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x26>
   b4892:	2000      	movs	r0, #0
    rlen = readPacket(pbuff, value, timeout);
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
}
   b4894:	b003      	add	sp, #12
   b4896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pbuff++;
   b489a:	f104 0801 	add.w	r8, r4, #1
  uint32_t multiplier = 1;
   b489e:	f104 0a05 	add.w	sl, r4, #5
  uint32_t value = 0;
   b48a2:	f04f 0900 	mov.w	r9, #0
    rlen = readPacket(pbuff, 1, timeout);
   b48a6:	682a      	ldr	r2, [r5, #0]
   b48a8:	9301      	str	r3, [sp, #4]
   b48aa:	f8d2 b018 	ldr.w	fp, [r2, #24]
   b48ae:	4641      	mov	r1, r8
   b48b0:	2201      	movs	r2, #1
   b48b2:	4628      	mov	r0, r5
   b48b4:	47d8      	blx	fp
    if (rlen != 1) return 0;
   b48b6:	b2c0      	uxtb	r0, r0
   b48b8:	2801      	cmp	r0, #1
   b48ba:	d1ea      	bne.n	b4892 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   b48bc:	f818 2b01 	ldrb.w	r2, [r8], #1
    uint32_t intermediate = encodedByte & 0x7F;
   b48c0:	f002 017f 	and.w	r1, r2, #127	; 0x7f
    if (multiplier > (128UL*128UL*128UL)) {
   b48c4:	45c2      	cmp	sl, r8
    value += intermediate;
   b48c6:	fb01 9907 	mla	r9, r1, r7, r9
    multiplier *= 128;
   b48ca:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   b48ce:	d0e0      	beq.n	b4892 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
  } while (encodedByte & 0x80);
   b48d0:	f012 0f80 	tst.w	r2, #128	; 0x80
   b48d4:	9b01      	ldr	r3, [sp, #4]
   b48d6:	d1e6      	bne.n	b48a6 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x32>
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b48d8:	eba8 0404 	sub.w	r4, r8, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b48dc:	b2a7      	uxth	r7, r4
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b48de:	1b34      	subs	r4, r6, r4
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b48e0:	682a      	ldr	r2, [r5, #0]
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   b48e2:	3c01      	subs	r4, #1
   b48e4:	454c      	cmp	r4, r9
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   b48e6:	f8d2 a018 	ldr.w	sl, [r2, #24]
   b48ea:	bf3d      	ittte	cc
   b48ec:	f106 32ff 	addcc.w	r2, r6, #4294967295
   b48f0:	1bd2      	subcc	r2, r2, r7
   b48f2:	b292      	uxthcc	r2, r2
    rlen = readPacket(pbuff, value, timeout);
   b48f4:	fa1f f289 	uxthcs.w	r2, r9
   b48f8:	4641      	mov	r1, r8
   b48fa:	4628      	mov	r0, r5
   b48fc:	47d0      	blx	sl
   b48fe:	b2c0      	uxtb	r0, r0
  return ((pbuff - buffer)+rlen);
   b4900:	4438      	add	r0, r7
   b4902:	b280      	uxth	r0, r0
   b4904:	e7c6      	b.n	b4894 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x20>
	...

000b4908 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b4908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      ERROR_PRINTLN(F("Dropped a packet"));
   b490c:	f8df 8030 	ldr.w	r8, [pc, #48]	; b4940 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x38>
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   b4910:	4605      	mov	r5, r0
   b4912:	460c      	mov	r4, r1
   b4914:	4616      	mov	r6, r2
   b4916:	461f      	mov	r7, r3
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b4918:	463b      	mov	r3, r7
   b491a:	2296      	movs	r2, #150	; 0x96
   b491c:	4621      	mov	r1, r4
   b491e:	4628      	mov	r0, r5
   b4920:	f7ff ffa8 	bl	b4874 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   b4924:	b148      	cbz	r0, b493a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
    if ((buffer[0] >> 4) == waitforpackettype) {
   b4926:	7823      	ldrb	r3, [r4, #0]
   b4928:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   b492c:	d005      	beq.n	b493a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
      ERROR_PRINTLN(F("Dropped a packet"));
   b492e:	f001 f8bb 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b4932:	4641      	mov	r1, r8
   b4934:	f000 fea1 	bl	b567a <_ZN5Print7printlnEPKc>
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   b4938:	e7ee      	b.n	b4918 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x10>
}
   b493a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b493e:	bf00      	nop
   b4940:	000b6dc0 	.word	0x000b6dc0

000b4944 <_ZN13Adafruit_MQTT18connectErrorStringEa>:

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   switch (code) {
   b4944:	3102      	adds	r1, #2
   b4946:	b2c9      	uxtb	r1, r1
   b4948:	2909      	cmp	r1, #9
   b494a:	bf9a      	itte	ls
   b494c:	4b02      	ldrls	r3, [pc, #8]	; (b4958 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   b494e:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   b4952:	4802      	ldrhi	r0, [pc, #8]	; (b495c <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   b4954:	4770      	bx	lr
   b4956:	bf00      	nop
   b4958:	000b6fc4 	.word	0x000b6fc4
   b495c:	000b6dd1 	.word	0x000b6dd1

000b4960 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   b4960:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   b4962:	23e0      	movs	r3, #224	; 0xe0
   b4964:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  uint8_t len = disconnectPacket(buffer);
   b4968:	4601      	mov	r1, r0
  packet[1] = 0;
   b496a:	2300      	movs	r3, #0
   b496c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
  if (! sendPacket(buffer, len))
   b4970:	f851 3b22 	ldr.w	r3, [r1], #34
bool Adafruit_MQTT::disconnect() {
   b4974:	4604      	mov	r4, r0
  if (! sendPacket(buffer, len))
   b4976:	695b      	ldr	r3, [r3, #20]
   b4978:	2202      	movs	r2, #2
   b497a:	4798      	blx	r3
  return disconnectServer();
   b497c:	6823      	ldr	r3, [r4, #0]
   b497e:	4620      	mov	r0, r4
   b4980:	691b      	ldr	r3, [r3, #16]
}
   b4982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return disconnectServer();
   b4986:	4718      	bx	r3

000b4988 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b4988:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   b498c:	b530      	push	{r4, r5, lr}
   b498e:	4613      	mov	r3, r2
   b4990:	f100 04d0 	add.w	r4, r0, #208	; 0xd0
    if (subscriptions[i] == sub) {
   b4994:	f853 5b04 	ldr.w	r5, [r3], #4
   b4998:	428d      	cmp	r5, r1
   b499a:	d009      	beq.n	b49b0 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x28>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b499c:	42a3      	cmp	r3, r4
   b499e:	d1f9      	bne.n	b4994 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   b49a0:	2300      	movs	r3, #0
      if (subscriptions[i] == 0) {
   b49a2:	f852 4b04 	ldr.w	r4, [r2], #4
   b49a6:	b92c      	cbnz	r4, b49b4 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2c>
        subscriptions[i] = sub;
   b49a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   b49ac:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
      return true;
   b49b0:	2001      	movs	r0, #1
   b49b2:	e003      	b.n	b49bc <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   b49b4:	3301      	adds	r3, #1
   b49b6:	2b05      	cmp	r3, #5
   b49b8:	d1f3      	bne.n	b49a2 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
  return false;
   b49ba:	2000      	movs	r0, #0
}
   b49bc:	bd30      	pop	{r4, r5, pc}

000b49be <_ZN13Adafruit_MQTT4pingEh>:
bool Adafruit_MQTT::ping(uint8_t num) {
   b49be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b49c2:	4604      	mov	r4, r0
   b49c4:	460d      	mov	r5, r1
   b49c6:	f04f 0800 	mov.w	r8, #0
    uint8_t len = pingPacket(buffer);
   b49ca:	f100 0722 	add.w	r7, r0, #34	; 0x22
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   b49ce:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  while (num--) {
   b49d2:	b1e5      	cbz	r5, b4a0e <_ZN13Adafruit_MQTT4pingEh+0x50>
    if (!sendPacket(buffer, len))
   b49d4:	6823      	ldr	r3, [r4, #0]
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   b49d6:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
  packet[1] = 0;
   b49da:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
    if (!sendPacket(buffer, len))
   b49de:	695b      	ldr	r3, [r3, #20]
   b49e0:	2202      	movs	r2, #2
   b49e2:	4639      	mov	r1, r7
   b49e4:	4620      	mov	r0, r4
   b49e6:	4798      	blx	r3
   b49e8:	4606      	mov	r6, r0
   b49ea:	b168      	cbz	r0, b4a08 <_ZN13Adafruit_MQTT4pingEh+0x4a>
    len = processPacketsUntil(buffer, MQTT_CTRL_PINGRESP, PING_TIMEOUT_MS);
   b49ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b49f0:	220d      	movs	r2, #13
   b49f2:	4639      	mov	r1, r7
   b49f4:	4620      	mov	r0, r4
   b49f6:	f7ff ff87 	bl	b4908 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
    if (buffer[0] == (MQTT_CTRL_PINGRESP << 4))
   b49fa:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b49fe:	2bd0      	cmp	r3, #208	; 0xd0
   b4a00:	d102      	bne.n	b4a08 <_ZN13Adafruit_MQTT4pingEh+0x4a>
}
   b4a02:	4630      	mov	r0, r6
   b4a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4a08:	3d01      	subs	r5, #1
   b4a0a:	b2ed      	uxtb	r5, r5
   b4a0c:	e7e1      	b.n	b49d2 <_ZN13Adafruit_MQTT4pingEh+0x14>
  return false;
   b4a0e:	462e      	mov	r6, r5
   b4a10:	e7f7      	b.n	b4a02 <_ZN13Adafruit_MQTT4pingEh+0x44>
	...

000b4a14 <_ZN13Adafruit_MQTT13connectPacketEPh>:
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b4a14:	b538      	push	{r3, r4, r5, lr}
   b4a16:	4605      	mov	r5, r0
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   b4a18:	4608      	mov	r0, r1
   b4a1a:	2310      	movs	r3, #16
   b4a1c:	f800 3b02 	strb.w	r3, [r0], #2
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   b4a20:	460c      	mov	r4, r1
    p = stringprint(p, "MQTT");
   b4a22:	4929      	ldr	r1, [pc, #164]	; (b4ac8 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   b4a24:	f7ff fef5 	bl	b4812 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = MQTT_PROTOCOL_LEVEL;
   b4a28:	2304      	movs	r3, #4
   b4a2a:	7003      	strb	r3, [r0, #0]
  p[0] = MQTT_CONN_CLEANSESSION;
   b4a2c:	2302      	movs	r3, #2
   b4a2e:	7043      	strb	r3, [r0, #1]
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b4a30:	69ab      	ldr	r3, [r5, #24]
   b4a32:	b18b      	cbz	r3, b4a58 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
   b4a34:	781b      	ldrb	r3, [r3, #0]
   b4a36:	b17b      	cbz	r3, b4a58 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
    p[0] |= MQTT_CONN_WILLFLAG;
   b4a38:	2306      	movs	r3, #6
   b4a3a:	7043      	strb	r3, [r0, #1]
    if(will_qos == 1)
   b4a3c:	f895 3020 	ldrb.w	r3, [r5, #32]
   b4a40:	2b01      	cmp	r3, #1
   b4a42:	d139      	bne.n	b4ab8 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa4>
      p[0] |= MQTT_CONN_WILLQOS_1;
   b4a44:	230e      	movs	r3, #14
      p[0] |= MQTT_CONN_WILLQOS_2;
   b4a46:	7043      	strb	r3, [r0, #1]
    if(will_retain == 1)
   b4a48:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   b4a4c:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   b4a4e:	bf02      	ittt	eq
   b4a50:	7843      	ldrbeq	r3, [r0, #1]
   b4a52:	f043 0320 	orreq.w	r3, r3, #32
   b4a56:	7043      	strbeq	r3, [r0, #1]
  if (pgm_read_byte(username) != 0)
   b4a58:	692b      	ldr	r3, [r5, #16]
   b4a5a:	781b      	ldrb	r3, [r3, #0]
   b4a5c:	b11b      	cbz	r3, b4a66 <_ZN13Adafruit_MQTT13connectPacketEPh+0x52>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   b4a5e:	7843      	ldrb	r3, [r0, #1]
   b4a60:	f063 037f 	orn	r3, r3, #127	; 0x7f
   b4a64:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   b4a66:	696b      	ldr	r3, [r5, #20]
   b4a68:	781b      	ldrb	r3, [r3, #0]
   b4a6a:	b11b      	cbz	r3, b4a74 <_ZN13Adafruit_MQTT13connectPacketEPh+0x60>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   b4a6c:	7843      	ldrb	r3, [r0, #1]
   b4a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   b4a72:	7043      	strb	r3, [r0, #1]
  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   b4a74:	2301      	movs	r3, #1
   b4a76:	7083      	strb	r3, [r0, #2]
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   b4a78:	232c      	movs	r3, #44	; 0x2c
   b4a7a:	70c3      	strb	r3, [r0, #3]
    if (pgm_read_byte(clientid) != 0) {
   b4a7c:	68e9      	ldr	r1, [r5, #12]
   b4a7e:	780b      	ldrb	r3, [r1, #0]
   b4a80:	b1f3      	cbz	r3, b4ac0 <_ZN13Adafruit_MQTT13connectPacketEPh+0xac>
      p = stringprint(p, clientid);
   b4a82:	3004      	adds	r0, #4
   b4a84:	f7ff fec5 	bl	b4812 <_ZL11stringprintPhPKct.constprop.0>
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   b4a88:	69a9      	ldr	r1, [r5, #24]
   b4a8a:	b131      	cbz	r1, b4a9a <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
   b4a8c:	780b      	ldrb	r3, [r1, #0]
   b4a8e:	b123      	cbz	r3, b4a9a <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
    p = stringprint(p, will_topic);
   b4a90:	f7ff febf 	bl	b4812 <_ZL11stringprintPhPKct.constprop.0>
    p = stringprint(p, will_payload);
   b4a94:	69e9      	ldr	r1, [r5, #28]
   b4a96:	f7ff febc 	bl	b4812 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(username) != 0) {
   b4a9a:	6929      	ldr	r1, [r5, #16]
   b4a9c:	780b      	ldrb	r3, [r1, #0]
   b4a9e:	b10b      	cbz	r3, b4aa4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x90>
    p = stringprint(p, username);
   b4aa0:	f7ff feb7 	bl	b4812 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(password) != 0) {
   b4aa4:	6969      	ldr	r1, [r5, #20]
   b4aa6:	780b      	ldrb	r3, [r1, #0]
   b4aa8:	b10b      	cbz	r3, b4aae <_ZN13Adafruit_MQTT13connectPacketEPh+0x9a>
    p = stringprint(p, password);
   b4aaa:	f7ff feb2 	bl	b4812 <_ZL11stringprintPhPKct.constprop.0>
  len = p - packet;
   b4aae:	1b00      	subs	r0, r0, r4
  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   b4ab0:	b2c0      	uxtb	r0, r0
   b4ab2:	1e83      	subs	r3, r0, #2
   b4ab4:	7063      	strb	r3, [r4, #1]
}
   b4ab6:	bd38      	pop	{r3, r4, r5, pc}
    else if(will_qos == 2)
   b4ab8:	2b02      	cmp	r3, #2
   b4aba:	d1c5      	bne.n	b4a48 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_2;
   b4abc:	231e      	movs	r3, #30
   b4abe:	e7c2      	b.n	b4a46 <_ZN13Adafruit_MQTT13connectPacketEPh+0x32>
      p[0] = 0x0;
   b4ac0:	7103      	strb	r3, [r0, #4]
      p[0] = 0x0;
   b4ac2:	7143      	strb	r3, [r0, #5]
      p++;
   b4ac4:	3006      	adds	r0, #6
   b4ac6:	e7df      	b.n	b4a88 <_ZN13Adafruit_MQTT13connectPacketEPh+0x74>
   b4ac8:	000b6ddf 	.word	0x000b6ddf

000b4acc <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b4acc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4ad0:	4605      	mov	r5, r0
  len += strlen(topic); // topic length
   b4ad2:	4610      	mov	r0, r2
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b4ad4:	460e      	mov	r6, r1
   b4ad6:	4698      	mov	r8, r3
  len += strlen(topic); // topic length
   b4ad8:	9201      	str	r2, [sp, #4]
   b4ada:	f001 ff61 	bl	b69a0 <strlen>
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   b4ade:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b4ae2:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
  if(qos > 0) { 
   b4ae6:	9901      	ldr	r1, [sp, #4]
  len += strlen(topic); // topic length
   b4ae8:	b284      	uxth	r4, r0
  if(qos > 0) { 
   b4aea:	f1b9 0f00 	cmp.w	r9, #0
   b4aee:	d135      	bne.n	b4b5c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x90>
  len += strlen(topic); // topic length
   b4af0:	3402      	adds	r4, #2
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b4af2:	ea4f 0349 	mov.w	r3, r9, lsl #1
   b4af6:	4630      	mov	r0, r6
    len += 2; // qos packet id
   b4af8:	b2a4      	uxth	r4, r4
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b4afa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  len += bLen; // payload length
   b4afe:	443c      	add	r4, r7
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   b4b00:	f800 3b01 	strb.w	r3, [r0], #1
  len += bLen; // payload length
   b4b04:	b2a4      	uxth	r4, r4
    uint8_t encodedByte = len % 128;
   b4b06:	4622      	mov	r2, r4
   b4b08:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    if ( len > 0 ) {
   b4b0c:	2a7f      	cmp	r2, #127	; 0x7f
      encodedByte |= 0x80;
   b4b0e:	bf88      	it	hi
   b4b10:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
  } while ( len > 0 );
   b4b14:	2a7f      	cmp	r2, #127	; 0x7f
    p[0] = encodedByte;
   b4b16:	f800 3b01 	strb.w	r3, [r0], #1
    len /= 128;
   b4b1a:	ea4f 14d4 	mov.w	r4, r4, lsr #7
  } while ( len > 0 );
   b4b1e:	d8f2      	bhi.n	b4b06 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3a>
  p = stringprint(p, topic);
   b4b20:	f7ff fe77 	bl	b4812 <_ZL11stringprintPhPKct.constprop.0>
   b4b24:	4603      	mov	r3, r0
  if(qos > 0) {
   b4b26:	f1b9 0f00 	cmp.w	r9, #0
   b4b2a:	d00c      	beq.n	b4b46 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x7a>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   b4b2c:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b4b30:	0a12      	lsrs	r2, r2, #8
   b4b32:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   b4b34:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b4b38:	7042      	strb	r2, [r0, #1]
    packet_id_counter++;
   b4b3a:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   b4b3e:	3201      	adds	r2, #1
    p+=2;
   b4b40:	3302      	adds	r3, #2
    packet_id_counter++;
   b4b42:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  memmove(p, data, bLen);
   b4b46:	463a      	mov	r2, r7
   b4b48:	4641      	mov	r1, r8
   b4b4a:	4618      	mov	r0, r3
   b4b4c:	f001 fec6 	bl	b68dc <memmove>
  p+= bLen;
   b4b50:	4438      	add	r0, r7
  len = p - packet;
   b4b52:	1b80      	subs	r0, r0, r6
}
   b4b54:	b280      	uxth	r0, r0
   b4b56:	b003      	add	sp, #12
   b4b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    len += 2; // qos packet id
   b4b5c:	3404      	adds	r4, #4
   b4b5e:	e7c8      	b.n	b4af2 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>

000b4b60 <_ZN13Adafruit_MQTT7publishEPKcPhth>:
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   b4b60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4b62:	f89d 6018 	ldrb.w	r6, [sp, #24]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b4b66:	f100 0522 	add.w	r5, r0, #34	; 0x22
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   b4b6a:	4604      	mov	r4, r0
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b4b6c:	e9cd 3600 	strd	r3, r6, [sp]
   b4b70:	4613      	mov	r3, r2
   b4b72:	460a      	mov	r2, r1
   b4b74:	4629      	mov	r1, r5
   b4b76:	f7ff ffa9 	bl	b4acc <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   b4b7a:	6823      	ldr	r3, [r4, #0]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   b4b7c:	4602      	mov	r2, r0
  if (!sendPacket(buffer, len))
   b4b7e:	695b      	ldr	r3, [r3, #20]
   b4b80:	4629      	mov	r1, r5
   b4b82:	4620      	mov	r0, r4
   b4b84:	4798      	blx	r3
   b4b86:	b910      	cbnz	r0, b4b8e <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2e>
    return false;
   b4b88:	2000      	movs	r0, #0
}
   b4b8a:	b002      	add	sp, #8
   b4b8c:	bd70      	pop	{r4, r5, r6, pc}
  if (qos > 0) {
   b4b8e:	2e00      	cmp	r6, #0
   b4b90:	d0fb      	beq.n	b4b8a <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   b4b92:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b4b96:	2296      	movs	r2, #150	; 0x96
   b4b98:	4629      	mov	r1, r5
   b4b9a:	4620      	mov	r0, r4
   b4b9c:	f7ff fe6a 	bl	b4874 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    if (len != 4)
   b4ba0:	2804      	cmp	r0, #4
   b4ba2:	d1f1      	bne.n	b4b88 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   b4ba4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4ba8:	091b      	lsrs	r3, r3, #4
   b4baa:	2b04      	cmp	r3, #4
   b4bac:	d1ec      	bne.n	b4b88 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    packnum |= buffer[3];
   b4bae:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    if (packnum != packet_id_counter)
   b4bb0:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   b4bb4:	ba5b      	rev16	r3, r3
    packnum++;
   b4bb6:	3301      	adds	r3, #1
    if (packnum != packet_id_counter)
   b4bb8:	b29b      	uxth	r3, r3
   b4bba:	1ac3      	subs	r3, r0, r3
   b4bbc:	4258      	negs	r0, r3
   b4bbe:	4158      	adcs	r0, r3
   b4bc0:	e7e3      	b.n	b4b8a <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>

000b4bc2 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   b4bc2:	b530      	push	{r4, r5, lr}
   b4bc4:	b085      	sub	sp, #20
   b4bc6:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   b4bc8:	4610      	mov	r0, r2
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   b4bca:	461d      	mov	r5, r3
   b4bcc:	9103      	str	r1, [sp, #12]
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   b4bce:	9202      	str	r2, [sp, #8]
   b4bd0:	f001 fee6 	bl	b69a0 <strlen>
   b4bd4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   b4bd8:	b283      	uxth	r3, r0
   b4bda:	9500      	str	r5, [sp, #0]
   b4bdc:	4620      	mov	r0, r4
   b4bde:	f7ff ffbf 	bl	b4b60 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   b4be2:	b005      	add	sp, #20
   b4be4:	bd30      	pop	{r4, r5, pc}

000b4be6 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
                                       uint8_t qos) {
   b4be6:	b538      	push	{r3, r4, r5, lr}
   b4be8:	461d      	mov	r5, r3
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   b4bea:	2382      	movs	r3, #130	; 0x82
   b4bec:	700b      	strb	r3, [r1, #0]
  p[0] = (packet_id_counter >> 8) & 0xFF;
   b4bee:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b4bf2:	0a1b      	lsrs	r3, r3, #8
   b4bf4:	708b      	strb	r3, [r1, #2]
  p[1] = packet_id_counter & 0xFF;
   b4bf6:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   b4bfa:	70cb      	strb	r3, [r1, #3]
  packet_id_counter++;
   b4bfc:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
                                       uint8_t qos) {
   b4c00:	460c      	mov	r4, r1
  packet_id_counter++;
   b4c02:	3301      	adds	r3, #1
   b4c04:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8
  p = stringprint(p, topic);
   b4c08:	4611      	mov	r1, r2
   b4c0a:	1d20      	adds	r0, r4, #4
   b4c0c:	f7ff fe01 	bl	b4812 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = qos;
   b4c10:	f800 5b01 	strb.w	r5, [r0], #1
  len = p - packet;
   b4c14:	1b00      	subs	r0, r0, r4
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   b4c16:	b2c0      	uxtb	r0, r0
   b4c18:	1e83      	subs	r3, r0, #2
   b4c1a:	7063      	strb	r3, [r4, #1]
}
   b4c1c:	bd38      	pop	{r3, r4, r5, pc}

000b4c1e <_ZN13Adafruit_MQTT7connectEv>:
int8_t Adafruit_MQTT::connect() {
   b4c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!connectServer())
   b4c22:	6803      	ldr	r3, [r0, #0]
   b4c24:	68db      	ldr	r3, [r3, #12]
int8_t Adafruit_MQTT::connect() {
   b4c26:	4604      	mov	r4, r0
  if (!connectServer())
   b4c28:	4798      	blx	r3
   b4c2a:	2800      	cmp	r0, #0
   b4c2c:	d04b      	beq.n	b4cc6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  uint8_t len = connectPacket(buffer);
   b4c2e:	f104 0522 	add.w	r5, r4, #34	; 0x22
   b4c32:	4629      	mov	r1, r5
   b4c34:	4620      	mov	r0, r4
   b4c36:	f7ff feed 	bl	b4a14 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   b4c3a:	6823      	ldr	r3, [r4, #0]
   b4c3c:	b282      	uxth	r2, r0
   b4c3e:	695b      	ldr	r3, [r3, #20]
   b4c40:	4629      	mov	r1, r5
   b4c42:	4620      	mov	r0, r4
   b4c44:	4798      	blx	r3
   b4c46:	2800      	cmp	r0, #0
   b4c48:	d03d      	beq.n	b4cc6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   b4c4a:	f241 7370 	movw	r3, #6000	; 0x1770
   b4c4e:	2296      	movs	r2, #150	; 0x96
   b4c50:	4629      	mov	r1, r5
   b4c52:	4620      	mov	r0, r4
   b4c54:	f7ff fe0e 	bl	b4874 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   b4c58:	b2c0      	uxtb	r0, r0
   b4c5a:	2804      	cmp	r0, #4
   b4c5c:	d133      	bne.n	b4cc6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   b4c5e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b4c60:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   b4c64:	d12f      	bne.n	b4cc6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if (buffer[3] != 0)
   b4c66:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   b4c6a:	b110      	cbz	r0, b4c72 <_ZN13Adafruit_MQTT7connectEv+0x54>
    return buffer[3];
   b4c6c:	b240      	sxtb	r0, r0
}
   b4c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4c72:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
   b4c76:	f104 08d0 	add.w	r8, r4, #208	; 0xd0
    if (subscriptions[i] == 0) continue;
   b4c7a:	f857 3b04 	ldr.w	r3, [r7], #4
   b4c7e:	b1f3      	cbz	r3, b4cbe <_ZN13Adafruit_MQTT7connectEv+0xa0>
   b4c80:	2603      	movs	r6, #3
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   b4c82:	f857 2c04 	ldr.w	r2, [r7, #-4]
   b4c86:	4629      	mov	r1, r5
   b4c88:	7913      	ldrb	r3, [r2, #4]
   b4c8a:	6812      	ldr	r2, [r2, #0]
   b4c8c:	4620      	mov	r0, r4
   b4c8e:	f7ff ffaa 	bl	b4be6 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   b4c92:	6823      	ldr	r3, [r4, #0]
   b4c94:	b282      	uxth	r2, r0
   b4c96:	695b      	ldr	r3, [r3, #20]
   b4c98:	4629      	mov	r1, r5
   b4c9a:	4620      	mov	r0, r4
   b4c9c:	4798      	blx	r3
   b4c9e:	b190      	cbz	r0, b4cc6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   b4ca0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   b4ca4:	2209      	movs	r2, #9
   b4ca6:	4629      	mov	r1, r5
   b4ca8:	4620      	mov	r0, r4
   b4caa:	f7ff fe2d 	bl	b4908 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   b4cae:	b930      	cbnz	r0, b4cbe <_ZN13Adafruit_MQTT7connectEv+0xa0>
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   b4cb0:	3e01      	subs	r6, #1
   b4cb2:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   b4cb6:	d1e4      	bne.n	b4c82 <_ZN13Adafruit_MQTT7connectEv+0x64>
    if (! success) return -2; // failed to sub for some reason
   b4cb8:	f06f 0001 	mvn.w	r0, #1
   b4cbc:	e7d7      	b.n	b4c6e <_ZN13Adafruit_MQTT7connectEv+0x50>
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   b4cbe:	45b8      	cmp	r8, r7
   b4cc0:	d1db      	bne.n	b4c7a <_ZN13Adafruit_MQTT7connectEv+0x5c>
  return 0;
   b4cc2:	2000      	movs	r0, #0
   b4cc4:	e7d3      	b.n	b4c6e <_ZN13Adafruit_MQTT7connectEv+0x50>
    return -1;
   b4cc6:	f04f 30ff 	mov.w	r0, #4294967295
   b4cca:	e7d0      	b.n	b4c6e <_ZN13Adafruit_MQTT7connectEv+0x50>

000b4ccc <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   b4ccc:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   b4cce:	e9c0 1200 	strd	r1, r2, [r0]
  qos = q;
   b4cd2:	7203      	strb	r3, [r0, #8]
}
   b4cd4:	bd10      	pop	{r4, pc}

000b4cd6 <_ZN21Adafruit_MQTT_Publish7publishEi>:

bool Adafruit_MQTT_Publish::publish(int i) {
   b4cd6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b4cd8:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   b4cda:	220a      	movs	r2, #10
bool Adafruit_MQTT_Publish::publish(int i) {
   b4cdc:	4608      	mov	r0, r1
  ltoa(i, payload, 10);
   b4cde:	a901      	add	r1, sp, #4
   b4ce0:	f000 fb7c 	bl	b53dc <ltoa>
  return mqtt->publish(topic, payload, qos);
   b4ce4:	e9d4 0100 	ldrd	r0, r1, [r4]
   b4ce8:	7a23      	ldrb	r3, [r4, #8]
   b4cea:	aa01      	add	r2, sp, #4
   b4cec:	f7ff ff69 	bl	b4bc2 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   b4cf0:	b004      	add	sp, #16
   b4cf2:	bd10      	pop	{r4, pc}

000b4cf4 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   b4cf4:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   b4cf6:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   b4cf8:	2300      	movs	r3, #0
  callback_uint32t = 0;
  callback_buffer = 0;
  callback_double = 0;
   b4cfa:	e9c0 3308 	strd	r3, r3, [r0, #32]
  callback_io = 0;
   b4cfe:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  mqtt = mqttserver;
   b4d02:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   b4d04:	6002      	str	r2, [r0, #0]
  datalen = 0;
   b4d06:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   b4d08:	61c3      	str	r3, [r0, #28]
  io_feed = 0;
   b4d0a:	6303      	str	r3, [r0, #48]	; 0x30
}
   b4d0c:	bd10      	pop	{r4, pc}

000b4d0e <_ZN5HX711D1Ev>:

HX711::HX711() {
}

HX711::~HX711() {
}
   b4d0e:	4770      	bx	lr

000b4d10 <_ZN5HX711D0Ev>:
HX711::~HX711() {
   b4d10:	b510      	push	{r4, lr}
}
   b4d12:	2110      	movs	r1, #16
HX711::~HX711() {
   b4d14:	4604      	mov	r4, r0
}
   b4d16:	f7ff f9c0 	bl	b409a <_ZdlPvj>
   b4d1a:	4620      	mov	r0, r4
   b4d1c:	bd10      	pop	{r4, pc}

000b4d1e <_ZN5HX7118is_readyEv>:
	pinMode(DOUT, INPUT);

	set_gain(gain);
}

bool HX711::is_ready() {
   b4d1e:	b508      	push	{r3, lr}
	return digitalRead(DOUT) == LOW;
   b4d20:	7940      	ldrb	r0, [r0, #5]
   b4d22:	f001 fbd1 	bl	b64c8 <digitalRead>
}
   b4d26:	fab0 f080 	clz	r0, r0
   b4d2a:	0940      	lsrs	r0, r0, #5
   b4d2c:	bd08      	pop	{r3, pc}

000b4d2e <_ZN5HX7114readEv>:

	digitalWrite(PD_SCK, LOW);
	read();
}

long HX711::read() {
   b4d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4d32:	4604      	mov	r4, r0
	// wait for the chip to become ready
	while (!is_ready()) {
   b4d34:	4620      	mov	r0, r4
   b4d36:	f7ff fff2 	bl	b4d1e <_ZN5HX7118is_readyEv>
   b4d3a:	b910      	cbnz	r0, b4d42 <_ZN5HX7114readEv+0x14>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   b4d3c:	f000 f8d0 	bl	b4ee0 <os_thread_yield>
#endif // PLATFORM_THREADING
}
   b4d40:	e7f8      	b.n	b4d34 <_ZN5HX7114readEv+0x6>
	unsigned long value = 0;
	uint8_t data[3] = { 0 };
	uint8_t filler = 0x00;

	// pulse the clock pin 24 times to read the data
	data[2] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4d42:	7921      	ldrb	r1, [r4, #4]
   b4d44:	7960      	ldrb	r0, [r4, #5]
   b4d46:	2201      	movs	r2, #1
   b4d48:	f001 fbe8 	bl	b651c <shiftIn>
	data[1] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4d4c:	7921      	ldrb	r1, [r4, #4]
   b4d4e:	2201      	movs	r2, #1
	data[2] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4d50:	4606      	mov	r6, r0
	data[1] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4d52:	7960      	ldrb	r0, [r4, #5]
   b4d54:	f001 fbe2 	bl	b651c <shiftIn>
	data[0] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4d58:	7921      	ldrb	r1, [r4, #4]
	data[1] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4d5a:	4605      	mov	r5, r0
	data[0] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4d5c:	2201      	movs	r2, #1
   b4d5e:	7960      	ldrb	r0, [r4, #5]
   b4d60:	f001 fbdc 	bl	b651c <shiftIn>

	// set the channel and the gain factor for the next reading using the clock pin
	for (unsigned int i = 0; i < GAIN; i++) {
   b4d64:	f04f 0800 	mov.w	r8, #0
	data[0] = shiftIn(DOUT, PD_SCK, MSBFIRST);
   b4d68:	4607      	mov	r7, r0
	for (unsigned int i = 0; i < GAIN; i++) {
   b4d6a:	79a3      	ldrb	r3, [r4, #6]
   b4d6c:	4543      	cmp	r3, r8
   b4d6e:	d90a      	bls.n	b4d86 <_ZN5HX7114readEv+0x58>
		digitalWrite(PD_SCK, HIGH);
   b4d70:	7920      	ldrb	r0, [r4, #4]
   b4d72:	2101      	movs	r1, #1
   b4d74:	f001 fb8f 	bl	b6496 <digitalWrite>
		digitalWrite(PD_SCK, LOW);
   b4d78:	7920      	ldrb	r0, [r4, #4]
   b4d7a:	2100      	movs	r1, #0
   b4d7c:	f001 fb8b 	bl	b6496 <digitalWrite>
	for (unsigned int i = 0; i < GAIN; i++) {
   b4d80:	f108 0801 	add.w	r8, r8, #1
   b4d84:	e7f1      	b.n	b4d6a <_ZN5HX7114readEv+0x3c>
	}

	// Construct a 32-bit signed integer
	value = ( static_cast<unsigned long>(filler) << 24
			| static_cast<unsigned long>(data[2]) << 16
			| static_cast<unsigned long>(data[1]) << 8
   b4d86:	022b      	lsls	r3, r5, #8
	value = ( static_cast<unsigned long>(filler) << 24
   b4d88:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b4d8c:	433b      	orrs	r3, r7
	if (data[2] & 0x80) {
   b4d8e:	f346 10c0 	sbfx	r0, r6, #7, #1
			| static_cast<unsigned long>(data[0]) );

	return static_cast<long>(value);
}
   b4d92:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b4d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4d9a <_ZN5HX7118set_gainEh>:
	switch (gain) {
   b4d9a:	2940      	cmp	r1, #64	; 0x40
void HX711::set_gain(byte gain) {
   b4d9c:	b510      	push	{r4, lr}
   b4d9e:	4604      	mov	r4, r0
	switch (gain) {
   b4da0:	d010      	beq.n	b4dc4 <_ZN5HX7118set_gainEh+0x2a>
   b4da2:	2980      	cmp	r1, #128	; 0x80
   b4da4:	d003      	beq.n	b4dae <_ZN5HX7118set_gainEh+0x14>
   b4da6:	2920      	cmp	r1, #32
   b4da8:	d103      	bne.n	b4db2 <_ZN5HX7118set_gainEh+0x18>
			GAIN = 2;
   b4daa:	2302      	movs	r3, #2
   b4dac:	e000      	b.n	b4db0 <_ZN5HX7118set_gainEh+0x16>
			GAIN = 1;
   b4dae:	2301      	movs	r3, #1
			GAIN = 2;
   b4db0:	71a3      	strb	r3, [r4, #6]
	digitalWrite(PD_SCK, LOW);
   b4db2:	7920      	ldrb	r0, [r4, #4]
   b4db4:	2100      	movs	r1, #0
   b4db6:	f001 fb6e 	bl	b6496 <digitalWrite>
	read();
   b4dba:	4620      	mov	r0, r4
}
   b4dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	read();
   b4dc0:	f7ff bfb5 	b.w	b4d2e <_ZN5HX7114readEv>
			GAIN = 3;
   b4dc4:	2303      	movs	r3, #3
   b4dc6:	e7f3      	b.n	b4db0 <_ZN5HX7118set_gainEh+0x16>

000b4dc8 <_ZN5HX7115beginEhhh>:
void HX711::begin(byte dout, byte pd_sck, byte gain) {
   b4dc8:	b538      	push	{r3, r4, r5, lr}
   b4dca:	4604      	mov	r4, r0
   b4dcc:	4610      	mov	r0, r2
	PD_SCK = pd_sck;
   b4dce:	7122      	strb	r2, [r4, #4]
	DOUT = dout;
   b4dd0:	7161      	strb	r1, [r4, #5]
	pinMode(PD_SCK, OUTPUT);
   b4dd2:	2101      	movs	r1, #1
void HX711::begin(byte dout, byte pd_sck, byte gain) {
   b4dd4:	461d      	mov	r5, r3
	pinMode(PD_SCK, OUTPUT);
   b4dd6:	f001 fb4d 	bl	b6474 <pinMode>
	pinMode(DOUT, INPUT);
   b4dda:	7960      	ldrb	r0, [r4, #5]
   b4ddc:	2100      	movs	r1, #0
   b4dde:	f001 fb49 	bl	b6474 <pinMode>
	set_gain(gain);
   b4de2:	4629      	mov	r1, r5
   b4de4:	4620      	mov	r0, r4
}
   b4de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	set_gain(gain);
   b4dea:	f7ff bfd6 	b.w	b4d9a <_ZN5HX7118set_gainEh>
	...

000b4df0 <_ZN5HX711C1Ehhh>:
HX711::HX711(byte dout, byte pd_sck, byte gain) {
   b4df0:	b538      	push	{r3, r4, r5, lr}
   b4df2:	4d06      	ldr	r5, [pc, #24]	; (b4e0c <_ZN5HX711C1Ehhh+0x1c>)
   b4df4:	6005      	str	r5, [r0, #0]
   b4df6:	2500      	movs	r5, #0
   b4df8:	6085      	str	r5, [r0, #8]
   b4dfa:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
   b4dfe:	4604      	mov	r4, r0
   b4e00:	60c5      	str	r5, [r0, #12]
	begin(dout, pd_sck, gain);
   b4e02:	f7ff ffe1 	bl	b4dc8 <_ZN5HX7115beginEhhh>
}
   b4e06:	4620      	mov	r0, r4
   b4e08:	bd38      	pop	{r3, r4, r5, pc}
   b4e0a:	bf00      	nop
   b4e0c:	000b6ff4 	.word	0x000b6ff4

000b4e10 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4e10:	b508      	push	{r3, lr}
   b4e12:	4b02      	ldr	r3, [pc, #8]	; (b4e1c <netdb_freeaddrinfo+0xc>)
   b4e14:	681b      	ldr	r3, [r3, #0]
   b4e16:	689b      	ldr	r3, [r3, #8]
   b4e18:	9301      	str	r3, [sp, #4]
   b4e1a:	bd08      	pop	{r3, pc}
   b4e1c:	00030268 	.word	0x00030268

000b4e20 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4e20:	b508      	push	{r3, lr}
   b4e22:	4b02      	ldr	r3, [pc, #8]	; (b4e2c <netdb_getaddrinfo+0xc>)
   b4e24:	681b      	ldr	r3, [r3, #0]
   b4e26:	68db      	ldr	r3, [r3, #12]
   b4e28:	9301      	str	r3, [sp, #4]
   b4e2a:	bd08      	pop	{r3, pc}
   b4e2c:	00030268 	.word	0x00030268

000b4e30 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4e30:	b508      	push	{r3, lr}
   b4e32:	4b02      	ldr	r3, [pc, #8]	; (b4e3c <HAL_Validate_Pin_Function+0xc>)
   b4e34:	681b      	ldr	r3, [r3, #0]
   b4e36:	685b      	ldr	r3, [r3, #4]
   b4e38:	9301      	str	r3, [sp, #4]
   b4e3a:	bd08      	pop	{r3, pc}
   b4e3c:	0003022c 	.word	0x0003022c

000b4e40 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4e40:	b508      	push	{r3, lr}
   b4e42:	4b02      	ldr	r3, [pc, #8]	; (b4e4c <HAL_Pin_Mode+0xc>)
   b4e44:	681b      	ldr	r3, [r3, #0]
   b4e46:	689b      	ldr	r3, [r3, #8]
   b4e48:	9301      	str	r3, [sp, #4]
   b4e4a:	bd08      	pop	{r3, pc}
   b4e4c:	0003022c 	.word	0x0003022c

000b4e50 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4e50:	b508      	push	{r3, lr}
   b4e52:	4b02      	ldr	r3, [pc, #8]	; (b4e5c <HAL_Get_Pin_Mode+0xc>)
   b4e54:	681b      	ldr	r3, [r3, #0]
   b4e56:	68db      	ldr	r3, [r3, #12]
   b4e58:	9301      	str	r3, [sp, #4]
   b4e5a:	bd08      	pop	{r3, pc}
   b4e5c:	0003022c 	.word	0x0003022c

000b4e60 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4e60:	b508      	push	{r3, lr}
   b4e62:	4b02      	ldr	r3, [pc, #8]	; (b4e6c <HAL_GPIO_Write+0xc>)
   b4e64:	681b      	ldr	r3, [r3, #0]
   b4e66:	691b      	ldr	r3, [r3, #16]
   b4e68:	9301      	str	r3, [sp, #4]
   b4e6a:	bd08      	pop	{r3, pc}
   b4e6c:	0003022c 	.word	0x0003022c

000b4e70 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b4e70:	b508      	push	{r3, lr}
   b4e72:	4b02      	ldr	r3, [pc, #8]	; (b4e7c <HAL_GPIO_Read+0xc>)
   b4e74:	681b      	ldr	r3, [r3, #0]
   b4e76:	695b      	ldr	r3, [r3, #20]
   b4e78:	9301      	str	r3, [sp, #4]
   b4e7a:	bd08      	pop	{r3, pc}
   b4e7c:	0003022c 	.word	0x0003022c

000b4e80 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4e80:	b508      	push	{r3, lr}
   b4e82:	4b02      	ldr	r3, [pc, #8]	; (b4e8c <hal_adc_read+0xc>)
   b4e84:	681b      	ldr	r3, [r3, #0]
   b4e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4e88:	9301      	str	r3, [sp, #4]
   b4e8a:	bd08      	pop	{r3, pc}
   b4e8c:	0003022c 	.word	0x0003022c

000b4e90 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4e90:	b508      	push	{r3, lr}
   b4e92:	4b02      	ldr	r3, [pc, #8]	; (b4e9c <if_index_to_name+0xc>)
   b4e94:	681b      	ldr	r3, [r3, #0]
   b4e96:	695b      	ldr	r3, [r3, #20]
   b4e98:	9301      	str	r3, [sp, #4]
   b4e9a:	bd08      	pop	{r3, pc}
   b4e9c:	0003026c 	.word	0x0003026c

000b4ea0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4ea0:	b508      	push	{r3, lr}
   b4ea2:	4b02      	ldr	r3, [pc, #8]	; (b4eac <HAL_RNG_GetRandomNumber+0xc>)
   b4ea4:	681b      	ldr	r3, [r3, #0]
   b4ea6:	685b      	ldr	r3, [r3, #4]
   b4ea8:	9301      	str	r3, [sp, #4]
   b4eaa:	bd08      	pop	{r3, pc}
   b4eac:	00030218 	.word	0x00030218

000b4eb0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4eb0:	b508      	push	{r3, lr}
   b4eb2:	4b02      	ldr	r3, [pc, #8]	; (b4ebc <HAL_Delay_Microseconds+0xc>)
   b4eb4:	681b      	ldr	r3, [r3, #0]
   b4eb6:	68db      	ldr	r3, [r3, #12]
   b4eb8:	9301      	str	r3, [sp, #4]
   b4eba:	bd08      	pop	{r3, pc}
   b4ebc:	00030218 	.word	0x00030218

000b4ec0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4ec0:	b508      	push	{r3, lr}
   b4ec2:	4b02      	ldr	r3, [pc, #8]	; (b4ecc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4ec4:	681b      	ldr	r3, [r3, #0]
   b4ec6:	695b      	ldr	r3, [r3, #20]
   b4ec8:	9301      	str	r3, [sp, #4]
   b4eca:	bd08      	pop	{r3, pc}
   b4ecc:	00030218 	.word	0x00030218

000b4ed0 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b4ed0:	b508      	push	{r3, lr}
   b4ed2:	4b02      	ldr	r3, [pc, #8]	; (b4edc <hal_timer_millis+0xc>)
   b4ed4:	681b      	ldr	r3, [r3, #0]
   b4ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b4ed8:	9301      	str	r3, [sp, #4]
   b4eda:	bd08      	pop	{r3, pc}
   b4edc:	00030218 	.word	0x00030218

000b4ee0 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b4ee0:	b508      	push	{r3, lr}
   b4ee2:	4b02      	ldr	r3, [pc, #8]	; (b4eec <os_thread_yield+0xc>)
   b4ee4:	681b      	ldr	r3, [r3, #0]
   b4ee6:	68db      	ldr	r3, [r3, #12]
   b4ee8:	9301      	str	r3, [sp, #4]
   b4eea:	bd08      	pop	{r3, pc}
   b4eec:	00030248 	.word	0x00030248

000b4ef0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4ef0:	b508      	push	{r3, lr}
   b4ef2:	4b02      	ldr	r3, [pc, #8]	; (b4efc <os_mutex_recursive_create+0xc>)
   b4ef4:	681b      	ldr	r3, [r3, #0]
   b4ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4ef8:	9301      	str	r3, [sp, #4]
   b4efa:	bd08      	pop	{r3, pc}
   b4efc:	00030248 	.word	0x00030248

000b4f00 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4f00:	b508      	push	{r3, lr}
   b4f02:	4b02      	ldr	r3, [pc, #8]	; (b4f0c <inet_inet_ntop+0xc>)
   b4f04:	681b      	ldr	r3, [r3, #0]
   b4f06:	695b      	ldr	r3, [r3, #20]
   b4f08:	9301      	str	r3, [sp, #4]
   b4f0a:	bd08      	pop	{r3, pc}
   b4f0c:	00030264 	.word	0x00030264

000b4f10 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4f10:	b508      	push	{r3, lr}
   b4f12:	4b02      	ldr	r3, [pc, #8]	; (b4f1c <inet_htonl+0xc>)
   b4f14:	681b      	ldr	r3, [r3, #0]
   b4f16:	6a1b      	ldr	r3, [r3, #32]
   b4f18:	9301      	str	r3, [sp, #4]
   b4f1a:	bd08      	pop	{r3, pc}
   b4f1c:	00030264 	.word	0x00030264

000b4f20 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4f20:	b508      	push	{r3, lr}
   b4f22:	4b02      	ldr	r3, [pc, #8]	; (b4f2c <inet_htons+0xc>)
   b4f24:	681b      	ldr	r3, [r3, #0]
   b4f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4f28:	9301      	str	r3, [sp, #4]
   b4f2a:	bd08      	pop	{r3, pc}
   b4f2c:	00030264 	.word	0x00030264

000b4f30 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4f30:	b508      	push	{r3, lr}
   b4f32:	4b02      	ldr	r3, [pc, #8]	; (b4f3c <hal_usart_write+0xc>)
   b4f34:	681b      	ldr	r3, [r3, #0]
   b4f36:	68db      	ldr	r3, [r3, #12]
   b4f38:	9301      	str	r3, [sp, #4]
   b4f3a:	bd08      	pop	{r3, pc}
   b4f3c:	0003023c 	.word	0x0003023c

000b4f40 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4f40:	b508      	push	{r3, lr}
   b4f42:	4b02      	ldr	r3, [pc, #8]	; (b4f4c <hal_usart_available+0xc>)
   b4f44:	681b      	ldr	r3, [r3, #0]
   b4f46:	691b      	ldr	r3, [r3, #16]
   b4f48:	9301      	str	r3, [sp, #4]
   b4f4a:	bd08      	pop	{r3, pc}
   b4f4c:	0003023c 	.word	0x0003023c

000b4f50 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4f50:	b508      	push	{r3, lr}
   b4f52:	4b02      	ldr	r3, [pc, #8]	; (b4f5c <hal_usart_read+0xc>)
   b4f54:	681b      	ldr	r3, [r3, #0]
   b4f56:	695b      	ldr	r3, [r3, #20]
   b4f58:	9301      	str	r3, [sp, #4]
   b4f5a:	bd08      	pop	{r3, pc}
   b4f5c:	0003023c 	.word	0x0003023c

000b4f60 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4f60:	b508      	push	{r3, lr}
   b4f62:	4b02      	ldr	r3, [pc, #8]	; (b4f6c <hal_usart_peek+0xc>)
   b4f64:	681b      	ldr	r3, [r3, #0]
   b4f66:	699b      	ldr	r3, [r3, #24]
   b4f68:	9301      	str	r3, [sp, #4]
   b4f6a:	bd08      	pop	{r3, pc}
   b4f6c:	0003023c 	.word	0x0003023c

000b4f70 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4f70:	b508      	push	{r3, lr}
   b4f72:	4b02      	ldr	r3, [pc, #8]	; (b4f7c <hal_usart_flush+0xc>)
   b4f74:	681b      	ldr	r3, [r3, #0]
   b4f76:	69db      	ldr	r3, [r3, #28]
   b4f78:	9301      	str	r3, [sp, #4]
   b4f7a:	bd08      	pop	{r3, pc}
   b4f7c:	0003023c 	.word	0x0003023c

000b4f80 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4f80:	b508      	push	{r3, lr}
   b4f82:	4b02      	ldr	r3, [pc, #8]	; (b4f8c <hal_usart_is_enabled+0xc>)
   b4f84:	681b      	ldr	r3, [r3, #0]
   b4f86:	6a1b      	ldr	r3, [r3, #32]
   b4f88:	9301      	str	r3, [sp, #4]
   b4f8a:	bd08      	pop	{r3, pc}
   b4f8c:	0003023c 	.word	0x0003023c

000b4f90 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4f90:	b508      	push	{r3, lr}
   b4f92:	4b02      	ldr	r3, [pc, #8]	; (b4f9c <hal_usart_available_data_for_write+0xc>)
   b4f94:	681b      	ldr	r3, [r3, #0]
   b4f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4f98:	9301      	str	r3, [sp, #4]
   b4f9a:	bd08      	pop	{r3, pc}
   b4f9c:	0003023c 	.word	0x0003023c

000b4fa0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4fa0:	b508      	push	{r3, lr}
   b4fa2:	4b02      	ldr	r3, [pc, #8]	; (b4fac <hal_usart_init_ex+0xc>)
   b4fa4:	681b      	ldr	r3, [r3, #0]
   b4fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4fa8:	9301      	str	r3, [sp, #4]
   b4faa:	bd08      	pop	{r3, pc}
   b4fac:	0003023c 	.word	0x0003023c

000b4fb0 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4fb0:	b508      	push	{r3, lr}
   b4fb2:	4b02      	ldr	r3, [pc, #8]	; (b4fbc <hal_i2c_write+0xc>)
   b4fb4:	681b      	ldr	r3, [r3, #0]
   b4fb6:	6a1b      	ldr	r3, [r3, #32]
   b4fb8:	9301      	str	r3, [sp, #4]
   b4fba:	bd08      	pop	{r3, pc}
   b4fbc:	00030228 	.word	0x00030228

000b4fc0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4fc0:	b508      	push	{r3, lr}
   b4fc2:	4b02      	ldr	r3, [pc, #8]	; (b4fcc <hal_i2c_available+0xc>)
   b4fc4:	681b      	ldr	r3, [r3, #0]
   b4fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4fc8:	9301      	str	r3, [sp, #4]
   b4fca:	bd08      	pop	{r3, pc}
   b4fcc:	00030228 	.word	0x00030228

000b4fd0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4fd0:	b508      	push	{r3, lr}
   b4fd2:	4b02      	ldr	r3, [pc, #8]	; (b4fdc <hal_i2c_read+0xc>)
   b4fd4:	681b      	ldr	r3, [r3, #0]
   b4fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4fd8:	9301      	str	r3, [sp, #4]
   b4fda:	bd08      	pop	{r3, pc}
   b4fdc:	00030228 	.word	0x00030228

000b4fe0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4fe0:	b508      	push	{r3, lr}
   b4fe2:	4b02      	ldr	r3, [pc, #8]	; (b4fec <hal_i2c_peek+0xc>)
   b4fe4:	681b      	ldr	r3, [r3, #0]
   b4fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4fe8:	9301      	str	r3, [sp, #4]
   b4fea:	bd08      	pop	{r3, pc}
   b4fec:	00030228 	.word	0x00030228

000b4ff0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4ff0:	b508      	push	{r3, lr}
   b4ff2:	4b02      	ldr	r3, [pc, #8]	; (b4ffc <hal_i2c_flush+0xc>)
   b4ff4:	681b      	ldr	r3, [r3, #0]
   b4ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4ff8:	9301      	str	r3, [sp, #4]
   b4ffa:	bd08      	pop	{r3, pc}
   b4ffc:	00030228 	.word	0x00030228

000b5000 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5000:	b508      	push	{r3, lr}
   b5002:	4b02      	ldr	r3, [pc, #8]	; (b500c <hal_i2c_is_enabled+0xc>)
   b5004:	681b      	ldr	r3, [r3, #0]
   b5006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5008:	9301      	str	r3, [sp, #4]
   b500a:	bd08      	pop	{r3, pc}
   b500c:	00030228 	.word	0x00030228

000b5010 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5010:	b508      	push	{r3, lr}
   b5012:	4b02      	ldr	r3, [pc, #8]	; (b501c <hal_i2c_init+0xc>)
   b5014:	681b      	ldr	r3, [r3, #0]
   b5016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5018:	9301      	str	r3, [sp, #4]
   b501a:	bd08      	pop	{r3, pc}
   b501c:	00030228 	.word	0x00030228

000b5020 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5020:	b508      	push	{r3, lr}
   b5022:	4b02      	ldr	r3, [pc, #8]	; (b502c <sock_setsockopt+0xc>)
   b5024:	681b      	ldr	r3, [r3, #0]
   b5026:	699b      	ldr	r3, [r3, #24]
   b5028:	9301      	str	r3, [sp, #4]
   b502a:	bd08      	pop	{r3, pc}
   b502c:	00030238 	.word	0x00030238

000b5030 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5030:	b508      	push	{r3, lr}
   b5032:	4b02      	ldr	r3, [pc, #8]	; (b503c <sock_close+0xc>)
   b5034:	681b      	ldr	r3, [r3, #0]
   b5036:	69db      	ldr	r3, [r3, #28]
   b5038:	9301      	str	r3, [sp, #4]
   b503a:	bd08      	pop	{r3, pc}
   b503c:	00030238 	.word	0x00030238

000b5040 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5040:	b508      	push	{r3, lr}
   b5042:	4b02      	ldr	r3, [pc, #8]	; (b504c <sock_connect+0xc>)
   b5044:	681b      	ldr	r3, [r3, #0]
   b5046:	6a1b      	ldr	r3, [r3, #32]
   b5048:	9301      	str	r3, [sp, #4]
   b504a:	bd08      	pop	{r3, pc}
   b504c:	00030238 	.word	0x00030238

000b5050 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5050:	b508      	push	{r3, lr}
   b5052:	4b02      	ldr	r3, [pc, #8]	; (b505c <sock_recv+0xc>)
   b5054:	681b      	ldr	r3, [r3, #0]
   b5056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5058:	9301      	str	r3, [sp, #4]
   b505a:	bd08      	pop	{r3, pc}
   b505c:	00030238 	.word	0x00030238

000b5060 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5060:	b508      	push	{r3, lr}
   b5062:	4b02      	ldr	r3, [pc, #8]	; (b506c <sock_send+0xc>)
   b5064:	681b      	ldr	r3, [r3, #0]
   b5066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5068:	9301      	str	r3, [sp, #4]
   b506a:	bd08      	pop	{r3, pc}
   b506c:	00030238 	.word	0x00030238

000b5070 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5070:	b508      	push	{r3, lr}
   b5072:	4b02      	ldr	r3, [pc, #8]	; (b507c <sock_socket+0xc>)
   b5074:	681b      	ldr	r3, [r3, #0]
   b5076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5078:	9301      	str	r3, [sp, #4]
   b507a:	bd08      	pop	{r3, pc}
   b507c:	00030238 	.word	0x00030238

000b5080 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5080:	b508      	push	{r3, lr}
   b5082:	4b02      	ldr	r3, [pc, #8]	; (b508c <hal_spi_init+0xc>)
   b5084:	681b      	ldr	r3, [r3, #0]
   b5086:	69db      	ldr	r3, [r3, #28]
   b5088:	9301      	str	r3, [sp, #4]
   b508a:	bd08      	pop	{r3, pc}
   b508c:	00030230 	.word	0x00030230

000b5090 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5090:	b508      	push	{r3, lr}
   b5092:	4b02      	ldr	r3, [pc, #8]	; (b509c <hal_spi_is_enabled+0xc>)
   b5094:	681b      	ldr	r3, [r3, #0]
   b5096:	6a1b      	ldr	r3, [r3, #32]
   b5098:	9301      	str	r3, [sp, #4]
   b509a:	bd08      	pop	{r3, pc}
   b509c:	00030230 	.word	0x00030230

000b50a0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b50a0:	b508      	push	{r3, lr}
   b50a2:	4b02      	ldr	r3, [pc, #8]	; (b50ac <HAL_USB_USART_Init+0xc>)
   b50a4:	681b      	ldr	r3, [r3, #0]
   b50a6:	681b      	ldr	r3, [r3, #0]
   b50a8:	9301      	str	r3, [sp, #4]
   b50aa:	bd08      	pop	{r3, pc}
   b50ac:	0003024c 	.word	0x0003024c

000b50b0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b50b0:	b508      	push	{r3, lr}
   b50b2:	4b02      	ldr	r3, [pc, #8]	; (b50bc <HAL_USB_USART_Begin+0xc>)
   b50b4:	681b      	ldr	r3, [r3, #0]
   b50b6:	685b      	ldr	r3, [r3, #4]
   b50b8:	9301      	str	r3, [sp, #4]
   b50ba:	bd08      	pop	{r3, pc}
   b50bc:	0003024c 	.word	0x0003024c

000b50c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b50c0:	b508      	push	{r3, lr}
   b50c2:	4b02      	ldr	r3, [pc, #8]	; (b50cc <HAL_USB_USART_Available_Data+0xc>)
   b50c4:	681b      	ldr	r3, [r3, #0]
   b50c6:	691b      	ldr	r3, [r3, #16]
   b50c8:	9301      	str	r3, [sp, #4]
   b50ca:	bd08      	pop	{r3, pc}
   b50cc:	0003024c 	.word	0x0003024c

000b50d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b50d0:	b508      	push	{r3, lr}
   b50d2:	4b02      	ldr	r3, [pc, #8]	; (b50dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b50d4:	681b      	ldr	r3, [r3, #0]
   b50d6:	695b      	ldr	r3, [r3, #20]
   b50d8:	9301      	str	r3, [sp, #4]
   b50da:	bd08      	pop	{r3, pc}
   b50dc:	0003024c 	.word	0x0003024c

000b50e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b50e0:	b508      	push	{r3, lr}
   b50e2:	4b02      	ldr	r3, [pc, #8]	; (b50ec <HAL_USB_USART_Receive_Data+0xc>)
   b50e4:	681b      	ldr	r3, [r3, #0]
   b50e6:	699b      	ldr	r3, [r3, #24]
   b50e8:	9301      	str	r3, [sp, #4]
   b50ea:	bd08      	pop	{r3, pc}
   b50ec:	0003024c 	.word	0x0003024c

000b50f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b50f0:	b508      	push	{r3, lr}
   b50f2:	4b02      	ldr	r3, [pc, #8]	; (b50fc <HAL_USB_USART_Send_Data+0xc>)
   b50f4:	681b      	ldr	r3, [r3, #0]
   b50f6:	69db      	ldr	r3, [r3, #28]
   b50f8:	9301      	str	r3, [sp, #4]
   b50fa:	bd08      	pop	{r3, pc}
   b50fc:	0003024c 	.word	0x0003024c

000b5100 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5100:	b508      	push	{r3, lr}
   b5102:	4b02      	ldr	r3, [pc, #8]	; (b510c <HAL_USB_USART_Flush_Data+0xc>)
   b5104:	681b      	ldr	r3, [r3, #0]
   b5106:	6a1b      	ldr	r3, [r3, #32]
   b5108:	9301      	str	r3, [sp, #4]
   b510a:	bd08      	pop	{r3, pc}
   b510c:	0003024c 	.word	0x0003024c

000b5110 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b5110:	b508      	push	{r3, lr}
   b5112:	4b02      	ldr	r3, [pc, #8]	; (b511c <HAL_USB_USART_Is_Connected+0xc>)
   b5114:	681b      	ldr	r3, [r3, #0]
   b5116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5118:	9301      	str	r3, [sp, #4]
   b511a:	bd08      	pop	{r3, pc}
   b511c:	0003024c 	.word	0x0003024c

000b5120 <wlan_get_credentials>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
   b5120:	b508      	push	{r3, lr}
   b5122:	4b02      	ldr	r3, [pc, #8]	; (b512c <wlan_get_credentials+0xc>)
   b5124:	681b      	ldr	r3, [r3, #0]
   b5126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b5128:	9301      	str	r3, [sp, #4]
   b512a:	bd08      	pop	{r3, pc}
   b512c:	00030274 	.word	0x00030274

000b5130 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5130:	b508      	push	{r3, lr}
   b5132:	4b02      	ldr	r3, [pc, #8]	; (b513c <panic_+0xc>)
   b5134:	681b      	ldr	r3, [r3, #0]
   b5136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5138:	9301      	str	r3, [sp, #4]
   b513a:	bd08      	pop	{r3, pc}
   b513c:	00030260 	.word	0x00030260

000b5140 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5140:	b508      	push	{r3, lr}
   b5142:	4b02      	ldr	r3, [pc, #8]	; (b514c <log_message+0xc>)
   b5144:	681b      	ldr	r3, [r3, #0]
   b5146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5148:	9301      	str	r3, [sp, #4]
   b514a:	bd08      	pop	{r3, pc}
   b514c:	00030260 	.word	0x00030260

000b5150 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5150:	b508      	push	{r3, lr}
   b5152:	4b02      	ldr	r3, [pc, #8]	; (b515c <set_system_mode+0xc>)
   b5154:	681b      	ldr	r3, [r3, #0]
   b5156:	685b      	ldr	r3, [r3, #4]
   b5158:	9301      	str	r3, [sp, #4]
   b515a:	bd08      	pop	{r3, pc}
   b515c:	00030220 	.word	0x00030220

000b5160 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5160:	b508      	push	{r3, lr}
   b5162:	4b02      	ldr	r3, [pc, #8]	; (b516c <system_delay_ms+0xc>)
   b5164:	681b      	ldr	r3, [r3, #0]
   b5166:	695b      	ldr	r3, [r3, #20]
   b5168:	9301      	str	r3, [sp, #4]
   b516a:	bd08      	pop	{r3, pc}
   b516c:	00030220 	.word	0x00030220

000b5170 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5170:	b508      	push	{r3, lr}
   b5172:	4b03      	ldr	r3, [pc, #12]	; (b5180 <system_ctrl_set_app_request_handler+0x10>)
   b5174:	681b      	ldr	r3, [r3, #0]
   b5176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b517a:	9301      	str	r3, [sp, #4]
   b517c:	bd08      	pop	{r3, pc}
   b517e:	0000      	.short	0x0000
   b5180:	00030220 	.word	0x00030220

000b5184 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5184:	b508      	push	{r3, lr}
   b5186:	4b03      	ldr	r3, [pc, #12]	; (b5194 <system_ctrl_set_result+0x10>)
   b5188:	681b      	ldr	r3, [r3, #0]
   b518a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b518e:	9301      	str	r3, [sp, #4]
   b5190:	bd08      	pop	{r3, pc}
   b5192:	0000      	.short	0x0000
   b5194:	00030220 	.word	0x00030220

000b5198 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   b5198:	b508      	push	{r3, lr}
   b519a:	4b02      	ldr	r3, [pc, #8]	; (b51a4 <network_config+0xc>)
   b519c:	681b      	ldr	r3, [r3, #0]
   b519e:	681b      	ldr	r3, [r3, #0]
   b51a0:	9301      	str	r3, [sp, #4]
   b51a2:	bd08      	pop	{r3, pc}
   b51a4:	00030240 	.word	0x00030240

000b51a8 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b51a8:	b508      	push	{r3, lr}
   b51aa:	4b02      	ldr	r3, [pc, #8]	; (b51b4 <network_connect+0xc>)
   b51ac:	681b      	ldr	r3, [r3, #0]
   b51ae:	685b      	ldr	r3, [r3, #4]
   b51b0:	9301      	str	r3, [sp, #4]
   b51b2:	bd08      	pop	{r3, pc}
   b51b4:	00030240 	.word	0x00030240

000b51b8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b51b8:	b508      	push	{r3, lr}
   b51ba:	4b02      	ldr	r3, [pc, #8]	; (b51c4 <network_connecting+0xc>)
   b51bc:	681b      	ldr	r3, [r3, #0]
   b51be:	689b      	ldr	r3, [r3, #8]
   b51c0:	9301      	str	r3, [sp, #4]
   b51c2:	bd08      	pop	{r3, pc}
   b51c4:	00030240 	.word	0x00030240

000b51c8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b51c8:	b508      	push	{r3, lr}
   b51ca:	4b02      	ldr	r3, [pc, #8]	; (b51d4 <network_disconnect+0xc>)
   b51cc:	681b      	ldr	r3, [r3, #0]
   b51ce:	68db      	ldr	r3, [r3, #12]
   b51d0:	9301      	str	r3, [sp, #4]
   b51d2:	bd08      	pop	{r3, pc}
   b51d4:	00030240 	.word	0x00030240

000b51d8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b51d8:	b508      	push	{r3, lr}
   b51da:	4b02      	ldr	r3, [pc, #8]	; (b51e4 <network_ready+0xc>)
   b51dc:	681b      	ldr	r3, [r3, #0]
   b51de:	691b      	ldr	r3, [r3, #16]
   b51e0:	9301      	str	r3, [sp, #4]
   b51e2:	bd08      	pop	{r3, pc}
   b51e4:	00030240 	.word	0x00030240

000b51e8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b51e8:	b508      	push	{r3, lr}
   b51ea:	4b02      	ldr	r3, [pc, #8]	; (b51f4 <network_on+0xc>)
   b51ec:	681b      	ldr	r3, [r3, #0]
   b51ee:	695b      	ldr	r3, [r3, #20]
   b51f0:	9301      	str	r3, [sp, #4]
   b51f2:	bd08      	pop	{r3, pc}
   b51f4:	00030240 	.word	0x00030240

000b51f8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b51f8:	b508      	push	{r3, lr}
   b51fa:	4b02      	ldr	r3, [pc, #8]	; (b5204 <network_off+0xc>)
   b51fc:	681b      	ldr	r3, [r3, #0]
   b51fe:	699b      	ldr	r3, [r3, #24]
   b5200:	9301      	str	r3, [sp, #4]
   b5202:	bd08      	pop	{r3, pc}
   b5204:	00030240 	.word	0x00030240

000b5208 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5208:	b508      	push	{r3, lr}
   b520a:	4b02      	ldr	r3, [pc, #8]	; (b5214 <network_listen+0xc>)
   b520c:	681b      	ldr	r3, [r3, #0]
   b520e:	69db      	ldr	r3, [r3, #28]
   b5210:	9301      	str	r3, [sp, #4]
   b5212:	bd08      	pop	{r3, pc}
   b5214:	00030240 	.word	0x00030240

000b5218 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5218:	b508      	push	{r3, lr}
   b521a:	4b02      	ldr	r3, [pc, #8]	; (b5224 <network_listening+0xc>)
   b521c:	681b      	ldr	r3, [r3, #0]
   b521e:	6a1b      	ldr	r3, [r3, #32]
   b5220:	9301      	str	r3, [sp, #4]
   b5222:	bd08      	pop	{r3, pc}
   b5224:	00030240 	.word	0x00030240

000b5228 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   b5228:	b508      	push	{r3, lr}
   b522a:	4b02      	ldr	r3, [pc, #8]	; (b5234 <network_has_credentials+0xc>)
   b522c:	681b      	ldr	r3, [r3, #0]
   b522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5230:	9301      	str	r3, [sp, #4]
   b5232:	bd08      	pop	{r3, pc}
   b5234:	00030240 	.word	0x00030240

000b5238 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b5238:	b508      	push	{r3, lr}
   b523a:	4b02      	ldr	r3, [pc, #8]	; (b5244 <network_set_credentials+0xc>)
   b523c:	681b      	ldr	r3, [r3, #0]
   b523e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5240:	9301      	str	r3, [sp, #4]
   b5242:	bd08      	pop	{r3, pc}
   b5244:	00030240 	.word	0x00030240

000b5248 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b5248:	b508      	push	{r3, lr}
   b524a:	4b02      	ldr	r3, [pc, #8]	; (b5254 <network_clear_credentials+0xc>)
   b524c:	681b      	ldr	r3, [r3, #0]
   b524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5250:	9301      	str	r3, [sp, #4]
   b5252:	bd08      	pop	{r3, pc}
   b5254:	00030240 	.word	0x00030240

000b5258 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5258:	b508      	push	{r3, lr}
   b525a:	4b02      	ldr	r3, [pc, #8]	; (b5264 <network_set_listen_timeout+0xc>)
   b525c:	681b      	ldr	r3, [r3, #0]
   b525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5260:	9301      	str	r3, [sp, #4]
   b5262:	bd08      	pop	{r3, pc}
   b5264:	00030240 	.word	0x00030240

000b5268 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5268:	b508      	push	{r3, lr}
   b526a:	4b02      	ldr	r3, [pc, #8]	; (b5274 <network_get_listen_timeout+0xc>)
   b526c:	681b      	ldr	r3, [r3, #0]
   b526e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5270:	9301      	str	r3, [sp, #4]
   b5272:	bd08      	pop	{r3, pc}
   b5274:	00030240 	.word	0x00030240

000b5278 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5278:	b508      	push	{r3, lr}
   b527a:	4b02      	ldr	r3, [pc, #8]	; (b5284 <network_is_on+0xc>)
   b527c:	681b      	ldr	r3, [r3, #0]
   b527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5280:	9301      	str	r3, [sp, #4]
   b5282:	bd08      	pop	{r3, pc}
   b5284:	00030240 	.word	0x00030240

000b5288 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5288:	b508      	push	{r3, lr}
   b528a:	4b02      	ldr	r3, [pc, #8]	; (b5294 <network_is_off+0xc>)
   b528c:	681b      	ldr	r3, [r3, #0]
   b528e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5290:	9301      	str	r3, [sp, #4]
   b5292:	bd08      	pop	{r3, pc}
   b5294:	00030240 	.word	0x00030240

000b5298 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5298:	b508      	push	{r3, lr}
   b529a:	4b02      	ldr	r3, [pc, #8]	; (b52a4 <spark_process+0xc>)
   b529c:	681b      	ldr	r3, [r3, #0]
   b529e:	689b      	ldr	r3, [r3, #8]
   b52a0:	9301      	str	r3, [sp, #4]
   b52a2:	bd08      	pop	{r3, pc}
   b52a4:	00030244 	.word	0x00030244

000b52a8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b52a8:	b508      	push	{r3, lr}
   b52aa:	4b02      	ldr	r3, [pc, #8]	; (b52b4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b52ac:	681b      	ldr	r3, [r3, #0]
   b52ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b52b0:	9301      	str	r3, [sp, #4]
   b52b2:	bd08      	pop	{r3, pc}
   b52b4:	00030244 	.word	0x00030244

000b52b8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b52b8:	b508      	push	{r3, lr}
   b52ba:	4b02      	ldr	r3, [pc, #8]	; (b52c4 <malloc+0xc>)
   b52bc:	681b      	ldr	r3, [r3, #0]
   b52be:	681b      	ldr	r3, [r3, #0]
   b52c0:	9301      	str	r3, [sp, #4]
   b52c2:	bd08      	pop	{r3, pc}
   b52c4:	0003021c 	.word	0x0003021c

000b52c8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b52c8:	b508      	push	{r3, lr}
   b52ca:	4b02      	ldr	r3, [pc, #8]	; (b52d4 <free+0xc>)
   b52cc:	681b      	ldr	r3, [r3, #0]
   b52ce:	685b      	ldr	r3, [r3, #4]
   b52d0:	9301      	str	r3, [sp, #4]
   b52d2:	bd08      	pop	{r3, pc}
   b52d4:	0003021c 	.word	0x0003021c

000b52d8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b52d8:	b508      	push	{r3, lr}
   b52da:	4b02      	ldr	r3, [pc, #8]	; (b52e4 <realloc+0xc>)
   b52dc:	681b      	ldr	r3, [r3, #0]
   b52de:	689b      	ldr	r3, [r3, #8]
   b52e0:	9301      	str	r3, [sp, #4]
   b52e2:	bd08      	pop	{r3, pc}
   b52e4:	0003021c 	.word	0x0003021c

000b52e8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b52e8:	b508      	push	{r3, lr}
   b52ea:	4b02      	ldr	r3, [pc, #8]	; (b52f4 <vsnprintf+0xc>)
   b52ec:	681b      	ldr	r3, [r3, #0]
   b52ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b52f0:	9301      	str	r3, [sp, #4]
   b52f2:	bd08      	pop	{r3, pc}
   b52f4:	0003021c 	.word	0x0003021c

000b52f8 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b52f8:	b508      	push	{r3, lr}
   b52fa:	4b02      	ldr	r3, [pc, #8]	; (b5304 <__errno+0xc>)
   b52fc:	681b      	ldr	r3, [r3, #0]
   b52fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5300:	9301      	str	r3, [sp, #4]
   b5302:	bd08      	pop	{r3, pc}
   b5304:	0003021c 	.word	0x0003021c

000b5308 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5308:	b508      	push	{r3, lr}
   b530a:	4b02      	ldr	r3, [pc, #8]	; (b5314 <__assert_func+0xc>)
   b530c:	681b      	ldr	r3, [r3, #0]
   b530e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5310:	9301      	str	r3, [sp, #4]
   b5312:	bd08      	pop	{r3, pc}
   b5314:	0003021c 	.word	0x0003021c

000b5318 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5318:	b508      	push	{r3, lr}
   b531a:	4b02      	ldr	r3, [pc, #8]	; (b5324 <newlib_impure_ptr_callback+0xc>)
   b531c:	681b      	ldr	r3, [r3, #0]
   b531e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5320:	9301      	str	r3, [sp, #4]
   b5322:	bd08      	pop	{r3, pc}
   b5324:	0003021c 	.word	0x0003021c

000b5328 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5328:	2200      	movs	r2, #0
   b532a:	6840      	ldr	r0, [r0, #4]
   b532c:	4611      	mov	r1, r2
   b532e:	f7ff bf73 	b.w	b5218 <network_listening>

000b5332 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5332:	2200      	movs	r2, #0
   b5334:	6840      	ldr	r0, [r0, #4]
   b5336:	4611      	mov	r1, r2
   b5338:	f7ff bf96 	b.w	b5268 <network_get_listen_timeout>

000b533c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b533c:	6840      	ldr	r0, [r0, #4]
   b533e:	2200      	movs	r2, #0
   b5340:	f7ff bf8a 	b.w	b5258 <network_set_listen_timeout>

000b5344 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5344:	6840      	ldr	r0, [r0, #4]
   b5346:	2200      	movs	r2, #0
   b5348:	f081 0101 	eor.w	r1, r1, #1
   b534c:	f7ff bf5c 	b.w	b5208 <network_listen>

000b5350 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5350:	2300      	movs	r3, #0
   b5352:	6840      	ldr	r0, [r0, #4]
   b5354:	461a      	mov	r2, r3
   b5356:	4619      	mov	r1, r3
   b5358:	f7ff bf4e 	b.w	b51f8 <network_off>

000b535c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b535c:	2300      	movs	r3, #0
   b535e:	6840      	ldr	r0, [r0, #4]
   b5360:	461a      	mov	r2, r3
   b5362:	4619      	mov	r1, r3
   b5364:	f7ff bf40 	b.w	b51e8 <network_on>

000b5368 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5368:	2200      	movs	r2, #0
   b536a:	6840      	ldr	r0, [r0, #4]
   b536c:	4611      	mov	r1, r2
   b536e:	f7ff bf33 	b.w	b51d8 <network_ready>

000b5372 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5372:	2200      	movs	r2, #0
   b5374:	6840      	ldr	r0, [r0, #4]
   b5376:	4611      	mov	r1, r2
   b5378:	f7ff bf1e 	b.w	b51b8 <network_connecting>

000b537c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b537c:	6840      	ldr	r0, [r0, #4]
   b537e:	2200      	movs	r2, #0
   b5380:	2102      	movs	r1, #2
   b5382:	f7ff bf21 	b.w	b51c8 <network_disconnect>

000b5386 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5386:	2300      	movs	r3, #0
   b5388:	6840      	ldr	r0, [r0, #4]
   b538a:	461a      	mov	r2, r3
   b538c:	f7ff bf0c 	b.w	b51a8 <network_connect>

000b5390 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5390:	4b02      	ldr	r3, [pc, #8]	; (b539c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5392:	2203      	movs	r2, #3
   b5394:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5396:	4a02      	ldr	r2, [pc, #8]	; (b53a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5398:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b539a:	4770      	bx	lr
   b539c:	2003e6b8 	.word	0x2003e6b8
   b53a0:	000b7004 	.word	0x000b7004

000b53a4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b53a4:	b510      	push	{r4, lr}
   b53a6:	4604      	mov	r4, r0
   b53a8:	4608      	mov	r0, r1
{
    _spi = spi;
   b53aa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b53ac:	f7ff fe68 	bl	b5080 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b53b0:	2300      	movs	r3, #0
   b53b2:	6063      	str	r3, [r4, #4]
}
   b53b4:	4620      	mov	r0, r4
   b53b6:	bd10      	pop	{r4, pc}

000b53b8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b53b8:	4b05      	ldr	r3, [pc, #20]	; (b53d0 <_GLOBAL__sub_I_System+0x18>)
   b53ba:	2202      	movs	r2, #2
   b53bc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b53be:	4b05      	ldr	r3, [pc, #20]	; (b53d4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b53c0:	4a05      	ldr	r2, [pc, #20]	; (b53d8 <_GLOBAL__sub_I_System+0x20>)
   b53c2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b53c4:	2000      	movs	r0, #0
   b53c6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b53ca:	f7ff bec1 	b.w	b5150 <set_system_mode>
   b53ce:	bf00      	nop
   b53d0:	2003e6cc 	.word	0x2003e6cc
   b53d4:	2003e6c0 	.word	0x2003e6c0
   b53d8:	ffff0000 	.word	0xffff0000

000b53dc <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b53dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b53e0:	1e93      	subs	r3, r2, #2
{
   b53e2:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b53e4:	2b22      	cmp	r3, #34	; 0x22
   b53e6:	f04f 0300 	mov.w	r3, #0
{
   b53ea:	460d      	mov	r5, r1
   b53ec:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b53ee:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b53f2:	d927      	bls.n	b5444 <ltoa+0x68>

      if (10 == base && N < 0L)
   b53f4:	2800      	cmp	r0, #0
   b53f6:	da2a      	bge.n	b544e <ltoa+0x72>
      {
            *head++ = '-';
   b53f8:	462e      	mov	r6, r5
   b53fa:	232d      	movs	r3, #45	; 0x2d
   b53fc:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b5400:	4240      	negs	r0, r0
   b5402:	240a      	movs	r4, #10
      *tail-- = '\0';
   b5404:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b5408:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b540c:	4622      	mov	r2, r4
   b540e:	4601      	mov	r1, r0
   b5410:	a801      	add	r0, sp, #4
   b5412:	f001 fa41 	bl	b6898 <ldiv>
   b5416:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b5418:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b541a:	2b09      	cmp	r3, #9
   b541c:	bfcc      	ite	gt
   b541e:	2237      	movgt	r2, #55	; 0x37
   b5420:	2230      	movle	r2, #48	; 0x30
   b5422:	fa52 f383 	uxtab	r3, r2, r3
   b5426:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b542a:	f108 0801 	add.w	r8, r8, #1
   b542e:	2800      	cmp	r0, #0
   b5430:	d1ec      	bne.n	b540c <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b5432:	4642      	mov	r2, r8
   b5434:	1c79      	adds	r1, r7, #1
   b5436:	4630      	mov	r0, r6
   b5438:	f001 fa42 	bl	b68c0 <memcpy>
      return str;
}
   b543c:	4628      	mov	r0, r5
   b543e:	b00c      	add	sp, #48	; 0x30
   b5440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b5444:	2a0a      	cmp	r2, #10
   b5446:	d0d5      	beq.n	b53f4 <ltoa+0x18>
      if (uarg)
   b5448:	b118      	cbz	r0, b5452 <ltoa+0x76>
   b544a:	462e      	mov	r6, r5
   b544c:	e7da      	b.n	b5404 <ltoa+0x28>
   b544e:	240a      	movs	r4, #10
   b5450:	e7fa      	b.n	b5448 <ltoa+0x6c>
      else  *tail-- = '0';
   b5452:	2330      	movs	r3, #48	; 0x30
   b5454:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b5458:	462e      	mov	r6, r5
   b545a:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b545e:	f04f 0802 	mov.w	r8, #2
   b5462:	e7e6      	b.n	b5432 <ltoa+0x56>

000b5464 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   b5464:	4770      	bx	lr

000b5466 <_ZN21StringPrintableHelperD0Ev>:
   b5466:	b510      	push	{r4, lr}
   b5468:	210c      	movs	r1, #12
   b546a:	4604      	mov	r4, r0
   b546c:	f7fe fe15 	bl	b409a <_ZdlPvj>
   b5470:	4620      	mov	r0, r4
   b5472:	bd10      	pop	{r4, pc}

000b5474 <_ZN6StringD1Ev>:
String::~String()
   b5474:	b510      	push	{r4, lr}
   b5476:	4604      	mov	r4, r0
	free(buffer);
   b5478:	6800      	ldr	r0, [r0, #0]
   b547a:	f7ff ff25 	bl	b52c8 <free>
}
   b547e:	4620      	mov	r0, r4
   b5480:	bd10      	pop	{r4, pc}

000b5482 <_ZN6String10invalidateEv>:
{
   b5482:	b510      	push	{r4, lr}
   b5484:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5486:	6800      	ldr	r0, [r0, #0]
   b5488:	b108      	cbz	r0, b548e <_ZN6String10invalidateEv+0xc>
   b548a:	f7ff ff1d 	bl	b52c8 <free>
	buffer = NULL;
   b548e:	2300      	movs	r3, #0
	capacity = len = 0;
   b5490:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5494:	6023      	str	r3, [r4, #0]
}
   b5496:	bd10      	pop	{r4, pc}

000b5498 <_ZN6String12changeBufferEj>:
{
   b5498:	b538      	push	{r3, r4, r5, lr}
   b549a:	4604      	mov	r4, r0
   b549c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b549e:	6800      	ldr	r0, [r0, #0]
   b54a0:	3101      	adds	r1, #1
   b54a2:	f7ff ff19 	bl	b52d8 <realloc>
	if (newbuffer) {
   b54a6:	b110      	cbz	r0, b54ae <_ZN6String12changeBufferEj+0x16>
		capacity = maxStrLen;
   b54a8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b54ac:	2001      	movs	r0, #1
}
   b54ae:	bd38      	pop	{r3, r4, r5, pc}

000b54b0 <_ZN6String7reserveEj>:
{
   b54b0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b54b2:	6803      	ldr	r3, [r0, #0]
{
   b54b4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b54b6:	b123      	cbz	r3, b54c2 <_ZN6String7reserveEj+0x12>
   b54b8:	6843      	ldr	r3, [r0, #4]
   b54ba:	428b      	cmp	r3, r1
   b54bc:	d301      	bcc.n	b54c2 <_ZN6String7reserveEj+0x12>
   b54be:	2001      	movs	r0, #1
}
   b54c0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b54c2:	4620      	mov	r0, r4
   b54c4:	f7ff ffe8 	bl	b5498 <_ZN6String12changeBufferEj>
   b54c8:	2800      	cmp	r0, #0
   b54ca:	d0f9      	beq.n	b54c0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b54cc:	68a3      	ldr	r3, [r4, #8]
   b54ce:	2b00      	cmp	r3, #0
   b54d0:	d1f5      	bne.n	b54be <_ZN6String7reserveEj+0xe>
   b54d2:	6822      	ldr	r2, [r4, #0]
   b54d4:	7013      	strb	r3, [r2, #0]
   b54d6:	e7f2      	b.n	b54be <_ZN6String7reserveEj+0xe>

000b54d8 <_ZN6String4copyEPKcj>:
{
   b54d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b54da:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b54dc:	4611      	mov	r1, r2
   b54de:	9201      	str	r2, [sp, #4]
{
   b54e0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b54e2:	f7ff ffe5 	bl	b54b0 <_ZN6String7reserveEj>
   b54e6:	9a01      	ldr	r2, [sp, #4]
   b54e8:	b928      	cbnz	r0, b54f6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b54ea:	4620      	mov	r0, r4
   b54ec:	f7ff ffc9 	bl	b5482 <_ZN6String10invalidateEv>
}
   b54f0:	4620      	mov	r0, r4
   b54f2:	b003      	add	sp, #12
   b54f4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b54f6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b54f8:	4629      	mov	r1, r5
   b54fa:	6820      	ldr	r0, [r4, #0]
   b54fc:	f001 f9e0 	bl	b68c0 <memcpy>
	buffer[len] = 0;
   b5500:	6822      	ldr	r2, [r4, #0]
   b5502:	68a3      	ldr	r3, [r4, #8]
   b5504:	2100      	movs	r1, #0
   b5506:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5508:	e7f2      	b.n	b54f0 <_ZN6String4copyEPKcj+0x18>

000b550a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b550a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b550c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b550e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5512:	4604      	mov	r4, r0
	len = 0;
   b5514:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5516:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5518:	b141      	cbz	r1, b552c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b551a:	4608      	mov	r0, r1
   b551c:	9101      	str	r1, [sp, #4]
   b551e:	f001 fa3f 	bl	b69a0 <strlen>
   b5522:	9901      	ldr	r1, [sp, #4]
   b5524:	4602      	mov	r2, r0
   b5526:	4620      	mov	r0, r4
   b5528:	f7ff ffd6 	bl	b54d8 <_ZN6String4copyEPKcj>
}
   b552c:	4620      	mov	r0, r4
   b552e:	b002      	add	sp, #8
   b5530:	bd10      	pop	{r4, pc}

000b5532 <_ZN6String6concatEPKcj>:
{
   b5532:	b570      	push	{r4, r5, r6, lr}
   b5534:	4605      	mov	r5, r0
	if (!cstr) return 0;
   b5536:	460e      	mov	r6, r1
   b5538:	b909      	cbnz	r1, b553e <_ZN6String6concatEPKcj+0xc>
   b553a:	2000      	movs	r0, #0
}
   b553c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b553e:	b16a      	cbz	r2, b555c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b5540:	6884      	ldr	r4, [r0, #8]
   b5542:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5544:	4621      	mov	r1, r4
   b5546:	f7ff ffb3 	bl	b54b0 <_ZN6String7reserveEj>
   b554a:	2800      	cmp	r0, #0
   b554c:	d0f5      	beq.n	b553a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b554e:	6828      	ldr	r0, [r5, #0]
   b5550:	68ab      	ldr	r3, [r5, #8]
   b5552:	4631      	mov	r1, r6
   b5554:	4418      	add	r0, r3
   b5556:	f001 fa1b 	bl	b6990 <strcpy>
	len = newlen;
   b555a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b555c:	2001      	movs	r0, #1
   b555e:	e7ed      	b.n	b553c <_ZN6String6concatEPKcj+0xa>

000b5560 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   b5560:	b538      	push	{r3, r4, r5, lr}
   b5562:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   b5564:	6880      	ldr	r0, [r0, #8]
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b5566:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   b5568:	f7ff ffe3 	bl	b5532 <_ZN6String6concatEPKcj>
   b556c:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   b556e:	6898      	ldr	r0, [r3, #8]
    }
   b5570:	1b40      	subs	r0, r0, r5
   b5572:	bd38      	pop	{r3, r4, r5, pc}

000b5574 <_ZN6String6concatEc>:
{
   b5574:	b507      	push	{r0, r1, r2, lr}
	buf[1] = 0;
   b5576:	2300      	movs	r3, #0
	buf[0] = c;
   b5578:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b557c:	2201      	movs	r2, #1
   b557e:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b5580:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b5584:	f7ff ffd5 	bl	b5532 <_ZN6String6concatEPKcj>
}
   b5588:	b003      	add	sp, #12
   b558a:	f85d fb04 	ldr.w	pc, [sp], #4

000b558e <_ZN21StringPrintableHelper5writeEh>:

    virtual size_t write(uint8_t c) override
   b558e:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   b5590:	6880      	ldr	r0, [r0, #8]
   b5592:	f7ff ffef 	bl	b5574 <_ZN6String6concatEc>
    }
   b5596:	bd08      	pop	{r3, pc}

000b5598 <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   b5598:	b530      	push	{r4, r5, lr}
   b559a:	b085      	sub	sp, #20
	buffer = NULL;
   b559c:	2300      	movs	r3, #0
String::String(const Printable& printable)
   b559e:	460d      	mov	r5, r1
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b55a0:	9302      	str	r3, [sp, #8]
	capacity = 0;
   b55a2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b55a6:	6083      	str	r3, [r0, #8]
	flags = 0;
   b55a8:	7303      	strb	r3, [r0, #12]
        s.reserve(20);
   b55aa:	2114      	movs	r1, #20
    StringPrintableHelper(String& s_) : s(s_) {
   b55ac:	4b06      	ldr	r3, [pc, #24]	; (b55c8 <_ZN6StringC1ERK9Printable+0x30>)
   b55ae:	9301      	str	r3, [sp, #4]
String::String(const Printable& printable)
   b55b0:	4604      	mov	r4, r0
    StringPrintableHelper(String& s_) : s(s_) {
   b55b2:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   b55b4:	f7ff ff7c 	bl	b54b0 <_ZN6String7reserveEj>
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   b55b8:	682b      	ldr	r3, [r5, #0]
   b55ba:	a901      	add	r1, sp, #4
   b55bc:	681b      	ldr	r3, [r3, #0]
   b55be:	4628      	mov	r0, r5
   b55c0:	4798      	blx	r3
}
   b55c2:	4620      	mov	r0, r4
   b55c4:	b005      	add	sp, #20
   b55c6:	bd30      	pop	{r4, r5, pc}
   b55c8:	000b7040 	.word	0x000b7040

000b55cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b55cc:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b55ce:	6843      	ldr	r3, [r0, #4]
   b55d0:	3b01      	subs	r3, #1
    {
   b55d2:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b55d4:	6043      	str	r3, [r0, #4]
   b55d6:	b963      	cbnz	r3, b55f2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b55d8:	6803      	ldr	r3, [r0, #0]
   b55da:	689b      	ldr	r3, [r3, #8]
   b55dc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b55de:	68a3      	ldr	r3, [r4, #8]
   b55e0:	3b01      	subs	r3, #1
   b55e2:	60a3      	str	r3, [r4, #8]
   b55e4:	b92b      	cbnz	r3, b55f2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b55e6:	6823      	ldr	r3, [r4, #0]
   b55e8:	4620      	mov	r0, r4
   b55ea:	68db      	ldr	r3, [r3, #12]
        }
    }
   b55ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b55f0:	4718      	bx	r3
    }
   b55f2:	bd10      	pop	{r4, pc}

000b55f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b55f4:	4802      	ldr	r0, [pc, #8]	; (b5600 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b55f6:	2300      	movs	r3, #0
   b55f8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b55fa:	f7ff bc79 	b.w	b4ef0 <os_mutex_recursive_create>
   b55fe:	bf00      	nop
   b5600:	2003e6d0 	.word	0x2003e6d0

000b5604 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5606:	4606      	mov	r6, r0
   b5608:	460d      	mov	r5, r1
  size_t n = 0;
   b560a:	188f      	adds	r7, r1, r2
   b560c:	2400      	movs	r4, #0
  while (size--) {
   b560e:	42bd      	cmp	r5, r7
   b5610:	d00c      	beq.n	b562c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5612:	6833      	ldr	r3, [r6, #0]
   b5614:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5618:	689b      	ldr	r3, [r3, #8]
   b561a:	4630      	mov	r0, r6
   b561c:	4798      	blx	r3
     if (chunk>=0)
   b561e:	1e03      	subs	r3, r0, #0
   b5620:	db01      	blt.n	b5626 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5622:	441c      	add	r4, r3
  while (size--) {
   b5624:	e7f3      	b.n	b560e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5626:	2c00      	cmp	r4, #0
   b5628:	bf08      	it	eq
   b562a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b562c:	4620      	mov	r0, r4
   b562e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5630 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5630:	b513      	push	{r0, r1, r4, lr}
   b5632:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5634:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5636:	b159      	cbz	r1, b5650 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5638:	9101      	str	r1, [sp, #4]
   b563a:	f001 f9b1 	bl	b69a0 <strlen>
   b563e:	6823      	ldr	r3, [r4, #0]
   b5640:	9901      	ldr	r1, [sp, #4]
   b5642:	68db      	ldr	r3, [r3, #12]
   b5644:	4602      	mov	r2, r0
   b5646:	4620      	mov	r0, r4
    }
   b5648:	b002      	add	sp, #8
   b564a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b564e:	4718      	bx	r3
    }
   b5650:	b002      	add	sp, #8
   b5652:	bd10      	pop	{r4, pc}

000b5654 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5654:	b508      	push	{r3, lr}
  return write(str);
   b5656:	f7ff ffeb 	bl	b5630 <_ZN5Print5writeEPKc>
}
   b565a:	bd08      	pop	{r3, pc}

000b565c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b565c:	6803      	ldr	r3, [r0, #0]
   b565e:	689b      	ldr	r3, [r3, #8]
   b5660:	4718      	bx	r3

000b5662 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5662:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5664:	210d      	movs	r1, #13
{
   b5666:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5668:	f7ff fff8 	bl	b565c <_ZN5Print5printEc>
  n += print('\n');
   b566c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b566e:	4604      	mov	r4, r0
  n += print('\n');
   b5670:	4628      	mov	r0, r5
   b5672:	f7ff fff3 	bl	b565c <_ZN5Print5printEc>
  return n;
}
   b5676:	4420      	add	r0, r4
   b5678:	bd38      	pop	{r3, r4, r5, pc}

000b567a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b567a:	b538      	push	{r3, r4, r5, lr}
   b567c:	4605      	mov	r5, r0
  return write(str);
   b567e:	f7ff ffd7 	bl	b5630 <_ZN5Print5writeEPKc>
   b5682:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5684:	4628      	mov	r0, r5
   b5686:	f7ff ffec 	bl	b5662 <_ZN5Print7printlnEv>
  return n;
}
   b568a:	4420      	add	r0, r4
   b568c:	bd38      	pop	{r3, r4, r5, pc}

000b568e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b568e:	b530      	push	{r4, r5, lr}
   b5690:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5692:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5694:	2a01      	cmp	r2, #1
  *str = '\0';
   b5696:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b569a:	bf98      	it	ls
   b569c:	220a      	movls	r2, #10
   b569e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b56a0:	460d      	mov	r5, r1
   b56a2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b56a6:	fb01 5312 	mls	r3, r1, r2, r5
   b56aa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b56ae:	2b09      	cmp	r3, #9
   b56b0:	bf94      	ite	ls
   b56b2:	3330      	addls	r3, #48	; 0x30
   b56b4:	3337      	addhi	r3, #55	; 0x37
   b56b6:	b2db      	uxtb	r3, r3
  } while(n);
   b56b8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b56ba:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b56be:	d9ef      	bls.n	b56a0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b56c0:	4621      	mov	r1, r4
   b56c2:	f7ff ffb5 	bl	b5630 <_ZN5Print5writeEPKc>
}
   b56c6:	b00b      	add	sp, #44	; 0x2c
   b56c8:	bd30      	pop	{r4, r5, pc}

000b56ca <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b56ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b56ce:	b086      	sub	sp, #24
   b56d0:	af00      	add	r7, sp, #0
   b56d2:	4605      	mov	r5, r0
   b56d4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b56d6:	1d38      	adds	r0, r7, #4
   b56d8:	2114      	movs	r1, #20
{
   b56da:	4614      	mov	r4, r2
    va_copy(args2, args);
   b56dc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b56de:	f7ff fe03 	bl	b52e8 <vsnprintf>

    if (n<bufsize)
   b56e2:	2813      	cmp	r0, #19
   b56e4:	d80e      	bhi.n	b5704 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b56e6:	1d39      	adds	r1, r7, #4
   b56e8:	4628      	mov	r0, r5
   b56ea:	f7ff ffa1 	bl	b5630 <_ZN5Print5writeEPKc>
   b56ee:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b56f0:	b11e      	cbz	r6, b56fa <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b56f2:	4628      	mov	r0, r5
   b56f4:	f7ff ffb5 	bl	b5662 <_ZN5Print7printlnEv>
   b56f8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b56fa:	4620      	mov	r0, r4
   b56fc:	3718      	adds	r7, #24
   b56fe:	46bd      	mov	sp, r7
   b5700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5704:	f100 0308 	add.w	r3, r0, #8
   b5708:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b570c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b570e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5712:	4622      	mov	r2, r4
   b5714:	1c41      	adds	r1, r0, #1
   b5716:	683b      	ldr	r3, [r7, #0]
   b5718:	4668      	mov	r0, sp
   b571a:	f7ff fde5 	bl	b52e8 <vsnprintf>
  return write(str);
   b571e:	4669      	mov	r1, sp
   b5720:	4628      	mov	r0, r5
   b5722:	f7ff ff85 	bl	b5630 <_ZN5Print5writeEPKc>
   b5726:	4604      	mov	r4, r0
   b5728:	46c5      	mov	sp, r8
   b572a:	e7e1      	b.n	b56f0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b572c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b572c:	4b01      	ldr	r3, [pc, #4]	; (b5734 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b572e:	4a02      	ldr	r2, [pc, #8]	; (b5738 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5730:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5732:	4770      	bx	lr
   b5734:	2003e6d4 	.word	0x2003e6d4
   b5738:	000b7058 	.word	0x000b7058

000b573c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b573c:	4b02      	ldr	r3, [pc, #8]	; (b5748 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b573e:	681a      	ldr	r2, [r3, #0]
   b5740:	4b02      	ldr	r3, [pc, #8]	; (b574c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5742:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5744:	4770      	bx	lr
   b5746:	bf00      	nop
   b5748:	2003e4f4 	.word	0x2003e4f4
   b574c:	2003e6d8 	.word	0x2003e6d8

000b5750 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5750:	2100      	movs	r1, #0
   b5752:	f7ff bd05 	b.w	b5160 <system_delay_ms>
	...

000b5758 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5758:	b510      	push	{r4, lr}
   b575a:	4b04      	ldr	r3, [pc, #16]	; (b576c <_ZN9TCPClientD1Ev+0x14>)
   b575c:	6003      	str	r3, [r0, #0]
   b575e:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b5760:	6980      	ldr	r0, [r0, #24]
   b5762:	b108      	cbz	r0, b5768 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b5764:	f7ff ff32 	bl	b55cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b5768:	4620      	mov	r0, r4
   b576a:	bd10      	pop	{r4, pc}
   b576c:	000b7150 	.word	0x000b7150

000b5770 <_ZN9TCPClientD0Ev>:
   b5770:	b510      	push	{r4, lr}
   b5772:	4604      	mov	r4, r0
   b5774:	f7ff fff0 	bl	b5758 <_ZN9TCPClientD1Ev>
   b5778:	4620      	mov	r0, r4
   b577a:	211c      	movs	r1, #28
   b577c:	f7fe fc8d 	bl	b409a <_ZdlPvj>
   b5780:	4620      	mov	r0, r4
   b5782:	bd10      	pop	{r4, pc}

000b5784 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5784:	4b01      	ldr	r3, [pc, #4]	; (b578c <_GLOBAL__sub_I_RGB+0x8>)
   b5786:	2200      	movs	r2, #0
   b5788:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b578a:	4770      	bx	lr
   b578c:	2003e6dc 	.word	0x2003e6dc

000b5790 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5790:	4b01      	ldr	r3, [pc, #4]	; (b5798 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5792:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5794:	4770      	bx	lr
   b5796:	bf00      	nop
   b5798:	2003e4f8 	.word	0x2003e4f8

000b579c <serialEventRun>:
{
   b579c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b579e:	4b0b      	ldr	r3, [pc, #44]	; (b57cc <serialEventRun+0x30>)
   b57a0:	b143      	cbz	r3, b57b4 <serialEventRun+0x18>
   b57a2:	f000 f981 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b57a6:	6803      	ldr	r3, [r0, #0]
   b57a8:	691b      	ldr	r3, [r3, #16]
   b57aa:	4798      	blx	r3
   b57ac:	2800      	cmp	r0, #0
   b57ae:	dd01      	ble.n	b57b4 <serialEventRun+0x18>
        serialEvent();
   b57b0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b57b4:	4b06      	ldr	r3, [pc, #24]	; (b57d0 <serialEventRun+0x34>)
   b57b6:	b143      	cbz	r3, b57ca <serialEventRun+0x2e>
   b57b8:	f000 fef0 	bl	b659c <_Z22__fetch_global_Serial1v>
   b57bc:	6803      	ldr	r3, [r0, #0]
   b57be:	691b      	ldr	r3, [r3, #16]
   b57c0:	4798      	blx	r3
   b57c2:	2800      	cmp	r0, #0
   b57c4:	dd01      	ble.n	b57ca <serialEventRun+0x2e>
        serialEvent1();
   b57c6:	f3af 8000 	nop.w
}
   b57ca:	bd08      	pop	{r3, pc}
	...

000b57d4 <_post_loop>:
{
   b57d4:	b508      	push	{r3, lr}
	serialEventRun();
   b57d6:	f7ff ffe1 	bl	b579c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b57da:	f7ff fb71 	bl	b4ec0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b57de:	4b01      	ldr	r3, [pc, #4]	; (b57e4 <_post_loop+0x10>)
   b57e0:	6018      	str	r0, [r3, #0]
}
   b57e2:	bd08      	pop	{r3, pc}
   b57e4:	2003e740 	.word	0x2003e740

000b57e8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b57e8:	4805      	ldr	r0, [pc, #20]	; (b5800 <_Z33system_initialize_user_backup_ramv+0x18>)
   b57ea:	4a06      	ldr	r2, [pc, #24]	; (b5804 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b57ec:	4906      	ldr	r1, [pc, #24]	; (b5808 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b57ee:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b57f0:	1a12      	subs	r2, r2, r0
   b57f2:	f001 f865 	bl	b68c0 <memcpy>
    __backup_sram_signature = signature;
   b57f6:	4b05      	ldr	r3, [pc, #20]	; (b580c <_Z33system_initialize_user_backup_ramv+0x24>)
   b57f8:	4a05      	ldr	r2, [pc, #20]	; (b5810 <_Z33system_initialize_user_backup_ramv+0x28>)
   b57fa:	601a      	str	r2, [r3, #0]
}
   b57fc:	bd08      	pop	{r3, pc}
   b57fe:	bf00      	nop
   b5800:	2003f400 	.word	0x2003f400
   b5804:	2003f404 	.word	0x2003f404
   b5808:	000b73e4 	.word	0x000b73e4
   b580c:	2003f400 	.word	0x2003f400
   b5810:	9a271c1e 	.word	0x9a271c1e

000b5814 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5814:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5816:	2300      	movs	r3, #0
   b5818:	9300      	str	r3, [sp, #0]
   b581a:	461a      	mov	r2, r3
   b581c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5820:	f7ff fcb0 	bl	b5184 <system_ctrl_set_result>
}
   b5824:	b003      	add	sp, #12
   b5826:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b582c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b582c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b582e:	8843      	ldrh	r3, [r0, #2]
   b5830:	2b0a      	cmp	r3, #10
   b5832:	d008      	beq.n	b5846 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5834:	2b50      	cmp	r3, #80	; 0x50
   b5836:	d10b      	bne.n	b5850 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5838:	4b09      	ldr	r3, [pc, #36]	; (b5860 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b583a:	681b      	ldr	r3, [r3, #0]
   b583c:	b14b      	cbz	r3, b5852 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b583e:	b003      	add	sp, #12
   b5840:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5844:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5846:	f7ff ffe5 	bl	b5814 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b584a:	b003      	add	sp, #12
   b584c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5850:	2300      	movs	r3, #0
   b5852:	9300      	str	r3, [sp, #0]
   b5854:	461a      	mov	r2, r3
   b5856:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b585a:	f7ff fc93 	bl	b5184 <system_ctrl_set_result>
}
   b585e:	e7f4      	b.n	b584a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5860:	2003e6f0 	.word	0x2003e6f0

000b5864 <module_user_init_hook>:
{
   b5864:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5866:	4812      	ldr	r0, [pc, #72]	; (b58b0 <module_user_init_hook+0x4c>)
   b5868:	2100      	movs	r1, #0
   b586a:	f7ff fd55 	bl	b5318 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b586e:	4b11      	ldr	r3, [pc, #68]	; (b58b4 <module_user_init_hook+0x50>)
   b5870:	681a      	ldr	r2, [r3, #0]
   b5872:	4b11      	ldr	r3, [pc, #68]	; (b58b8 <module_user_init_hook+0x54>)
   b5874:	429a      	cmp	r2, r3
   b5876:	4b11      	ldr	r3, [pc, #68]	; (b58bc <module_user_init_hook+0x58>)
   b5878:	bf0c      	ite	eq
   b587a:	2201      	moveq	r2, #1
   b587c:	2200      	movne	r2, #0
   b587e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5880:	d001      	beq.n	b5886 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5882:	f7ff ffb1 	bl	b57e8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5886:	f7ff fb0b 	bl	b4ea0 <HAL_RNG_GetRandomNumber>
   b588a:	4604      	mov	r4, r0
    srand(seed);
   b588c:	f001 f848 	bl	b6920 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5890:	4b0b      	ldr	r3, [pc, #44]	; (b58c0 <module_user_init_hook+0x5c>)
   b5892:	b113      	cbz	r3, b589a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5894:	4620      	mov	r0, r4
   b5896:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b589a:	2100      	movs	r1, #0
   b589c:	4808      	ldr	r0, [pc, #32]	; (b58c0 <module_user_init_hook+0x5c>)
   b589e:	f7ff fd03 	bl	b52a8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b58a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b58a6:	4807      	ldr	r0, [pc, #28]	; (b58c4 <module_user_init_hook+0x60>)
   b58a8:	2100      	movs	r1, #0
   b58aa:	f7ff bc61 	b.w	b5170 <system_ctrl_set_app_request_handler>
   b58ae:	bf00      	nop
   b58b0:	000b5791 	.word	0x000b5791
   b58b4:	2003f400 	.word	0x2003f400
   b58b8:	9a271c1e 	.word	0x9a271c1e
   b58bc:	2003e6ec 	.word	0x2003e6ec
   b58c0:	00000000 	.word	0x00000000
   b58c4:	000b582d 	.word	0x000b582d

000b58c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b58c8:	4770      	bx	lr

000b58ca <_ZN9IPAddressD0Ev>:
   b58ca:	b510      	push	{r4, lr}
   b58cc:	2118      	movs	r1, #24
   b58ce:	4604      	mov	r4, r0
   b58d0:	f7fe fbe3 	bl	b409a <_ZdlPvj>
   b58d4:	4620      	mov	r0, r4
   b58d6:	bd10      	pop	{r4, pc}

000b58d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b58d8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b58da:	7d03      	ldrb	r3, [r0, #20]
   b58dc:	2b06      	cmp	r3, #6
{
   b58de:	b08d      	sub	sp, #52	; 0x34
   b58e0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b58e2:	f100 0704 	add.w	r7, r0, #4
   b58e6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b58ea:	d012      	beq.n	b5912 <_ZNK9IPAddress7printToER5Print+0x3a>
   b58ec:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b58f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b58f4:	220a      	movs	r2, #10
   b58f6:	4630      	mov	r0, r6
   b58f8:	f7ff fec9 	bl	b568e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b58fc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b58fe:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5900:	d019      	beq.n	b5936 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5902:	2c00      	cmp	r4, #0
   b5904:	d0f4      	beq.n	b58f0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5906:	212e      	movs	r1, #46	; 0x2e
   b5908:	4630      	mov	r0, r6
   b590a:	f7ff fea7 	bl	b565c <_ZN5Print5printEc>
   b590e:	4404      	add	r4, r0
   b5910:	e7ee      	b.n	b58f0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5912:	232f      	movs	r3, #47	; 0x2f
   b5914:	466a      	mov	r2, sp
   b5916:	4639      	mov	r1, r7
   b5918:	200a      	movs	r0, #10
		buf[0] = 0;
   b591a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b591e:	f7ff faef 	bl	b4f00 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5922:	4668      	mov	r0, sp
   b5924:	f001 f83c 	bl	b69a0 <strlen>
   b5928:	6833      	ldr	r3, [r6, #0]
   b592a:	4602      	mov	r2, r0
   b592c:	68db      	ldr	r3, [r3, #12]
   b592e:	4669      	mov	r1, sp
   b5930:	4630      	mov	r0, r6
   b5932:	4798      	blx	r3
   b5934:	4604      	mov	r4, r0
    }
    return n;
}
   b5936:	4620      	mov	r0, r4
   b5938:	b00d      	add	sp, #52	; 0x34
   b593a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b593c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b593c:	b510      	push	{r4, lr}
   b593e:	4b05      	ldr	r3, [pc, #20]	; (b5954 <_ZN9IPAddressC1Ev+0x18>)
   b5940:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5942:	2211      	movs	r2, #17
   b5944:	f840 3b04 	str.w	r3, [r0], #4
   b5948:	2100      	movs	r1, #0
   b594a:	f000 ffe1 	bl	b6910 <memset>
}
   b594e:	4620      	mov	r0, r4
   b5950:	bd10      	pop	{r4, pc}
   b5952:	bf00      	nop
   b5954:	000b7080 	.word	0x000b7080

000b5958 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5958:	4603      	mov	r3, r0
   b595a:	4a07      	ldr	r2, [pc, #28]	; (b5978 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b595c:	b510      	push	{r4, lr}
   b595e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5962:	f101 0210 	add.w	r2, r1, #16
   b5966:	f851 4b04 	ldr.w	r4, [r1], #4
   b596a:	f843 4b04 	str.w	r4, [r3], #4
   b596e:	4291      	cmp	r1, r2
   b5970:	d1f9      	bne.n	b5966 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5972:	780a      	ldrb	r2, [r1, #0]
   b5974:	701a      	strb	r2, [r3, #0]
}
   b5976:	bd10      	pop	{r4, pc}
   b5978:	000b7080 	.word	0x000b7080

000b597c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b597c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b597e:	2b04      	cmp	r3, #4
   b5980:	d104      	bne.n	b598c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b5982:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5984:	3800      	subs	r0, #0
   b5986:	bf18      	it	ne
   b5988:	2001      	movne	r0, #1
   b598a:	4770      	bx	lr
    } else if (version() == 6) {
   b598c:	2b06      	cmp	r3, #6
   b598e:	d107      	bne.n	b59a0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5990:	6843      	ldr	r3, [r0, #4]
   b5992:	b93b      	cbnz	r3, b59a4 <_ZNK9IPAddresscvbEv+0x28>
   b5994:	6883      	ldr	r3, [r0, #8]
   b5996:	b92b      	cbnz	r3, b59a4 <_ZNK9IPAddresscvbEv+0x28>
   b5998:	68c3      	ldr	r3, [r0, #12]
   b599a:	b91b      	cbnz	r3, b59a4 <_ZNK9IPAddresscvbEv+0x28>
   b599c:	6900      	ldr	r0, [r0, #16]
   b599e:	e7f1      	b.n	b5984 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b59a0:	2000      	movs	r0, #0
   b59a2:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b59a4:	2001      	movs	r0, #1
}
   b59a6:	4770      	bx	lr

000b59a8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b59a8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b59aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b59ae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b59b2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b59b6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b59ba:	2304      	movs	r3, #4
   b59bc:	6041      	str	r1, [r0, #4]
   b59be:	7503      	strb	r3, [r0, #20]
}
   b59c0:	bd10      	pop	{r4, pc}
	...

000b59c4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b59c4:	b507      	push	{r0, r1, r2, lr}
   b59c6:	4b06      	ldr	r3, [pc, #24]	; (b59e0 <_ZN9IPAddressC1EPKh+0x1c>)
   b59c8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b59ca:	78cb      	ldrb	r3, [r1, #3]
   b59cc:	9300      	str	r3, [sp, #0]
   b59ce:	788b      	ldrb	r3, [r1, #2]
   b59d0:	784a      	ldrb	r2, [r1, #1]
   b59d2:	7809      	ldrb	r1, [r1, #0]
   b59d4:	f7ff ffe8 	bl	b59a8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b59d8:	b003      	add	sp, #12
   b59da:	f85d fb04 	ldr.w	pc, [sp], #4
   b59de:	bf00      	nop
   b59e0:	000b7080 	.word	0x000b7080

000b59e4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b59e4:	7441      	strb	r1, [r0, #17]
}
   b59e6:	4770      	bx	lr

000b59e8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b59e8:	4770      	bx	lr

000b59ea <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b59ea:	4770      	bx	lr

000b59ec <_ZN9USBSerial4readEv>:
{
   b59ec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b59ee:	2100      	movs	r1, #0
   b59f0:	7c00      	ldrb	r0, [r0, #16]
   b59f2:	f7ff fb75 	bl	b50e0 <HAL_USB_USART_Receive_Data>
}
   b59f6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b59fa:	bd08      	pop	{r3, pc}

000b59fc <_ZN9USBSerial4peekEv>:
{
   b59fc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b59fe:	2101      	movs	r1, #1
   b5a00:	7c00      	ldrb	r0, [r0, #16]
   b5a02:	f7ff fb6d 	bl	b50e0 <HAL_USB_USART_Receive_Data>
}
   b5a06:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5a0a:	bd08      	pop	{r3, pc}

000b5a0c <_ZN9USBSerial17availableForWriteEv>:
{
   b5a0c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5a0e:	7c00      	ldrb	r0, [r0, #16]
   b5a10:	f7ff fb5e 	bl	b50d0 <HAL_USB_USART_Available_Data_For_Write>
}
   b5a14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5a18:	bd08      	pop	{r3, pc}

000b5a1a <_ZN9USBSerial9availableEv>:
{
   b5a1a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5a1c:	7c00      	ldrb	r0, [r0, #16]
   b5a1e:	f7ff fb4f 	bl	b50c0 <HAL_USB_USART_Available_Data>
}
   b5a22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5a26:	bd08      	pop	{r3, pc}

000b5a28 <_ZN9USBSerial5writeEh>:
{
   b5a28:	b513      	push	{r0, r1, r4, lr}
   b5a2a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5a2c:	7c00      	ldrb	r0, [r0, #16]
{
   b5a2e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5a30:	f7ff fb4e 	bl	b50d0 <HAL_USB_USART_Available_Data_For_Write>
   b5a34:	2800      	cmp	r0, #0
   b5a36:	9901      	ldr	r1, [sp, #4]
   b5a38:	dc01      	bgt.n	b5a3e <_ZN9USBSerial5writeEh+0x16>
   b5a3a:	7c60      	ldrb	r0, [r4, #17]
   b5a3c:	b120      	cbz	r0, b5a48 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5a3e:	7c20      	ldrb	r0, [r4, #16]
   b5a40:	f7ff fb56 	bl	b50f0 <HAL_USB_USART_Send_Data>
   b5a44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5a48:	b002      	add	sp, #8
   b5a4a:	bd10      	pop	{r4, pc}

000b5a4c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5a4c:	7c00      	ldrb	r0, [r0, #16]
   b5a4e:	f7ff bb57 	b.w	b5100 <HAL_USB_USART_Flush_Data>

000b5a52 <_ZN9USBSerialD0Ev>:
   b5a52:	b510      	push	{r4, lr}
   b5a54:	2114      	movs	r1, #20
   b5a56:	4604      	mov	r4, r0
   b5a58:	f7fe fb1f 	bl	b409a <_ZdlPvj>
   b5a5c:	4620      	mov	r0, r4
   b5a5e:	bd10      	pop	{r4, pc}

000b5a60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5a60:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5a66:	4604      	mov	r4, r0
   b5a68:	4608      	mov	r0, r1
   b5a6a:	2100      	movs	r1, #0
   b5a6c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5a70:	4b04      	ldr	r3, [pc, #16]	; (b5a84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5a72:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5a74:	2301      	movs	r3, #1
  _serial = serial;
   b5a76:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5a78:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5a7a:	4611      	mov	r1, r2
   b5a7c:	f7ff fb10 	bl	b50a0 <HAL_USB_USART_Init>
}
   b5a80:	4620      	mov	r0, r4
   b5a82:	bd10      	pop	{r4, pc}
   b5a84:	000b7094 	.word	0x000b7094

000b5a88 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5a88:	7c00      	ldrb	r0, [r0, #16]
   b5a8a:	2200      	movs	r2, #0
   b5a8c:	f7ff bb10 	b.w	b50b0 <HAL_USB_USART_Begin>

000b5a90 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b5a90:	7c00      	ldrb	r0, [r0, #16]
   b5a92:	f7ff bb3d 	b.w	b5110 <HAL_USB_USART_Is_Connected>

000b5a96 <_Z19acquireSerialBufferv>:
{
   b5a96:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5a98:	2214      	movs	r2, #20
{
   b5a9a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5a9c:	2100      	movs	r1, #0
   b5a9e:	f000 ff37 	bl	b6910 <memset>
}
   b5aa2:	4620      	mov	r0, r4
   b5aa4:	bd10      	pop	{r4, pc}
	...

000b5aa8 <_Z16_fetch_usbserialv>:
{
   b5aa8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5aaa:	4c0f      	ldr	r4, [pc, #60]	; (b5ae8 <_Z16_fetch_usbserialv+0x40>)
{
   b5aac:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5aae:	a803      	add	r0, sp, #12
   b5ab0:	f7ff fff1 	bl	b5a96 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5ab4:	7821      	ldrb	r1, [r4, #0]
   b5ab6:	f3bf 8f5b 	dmb	ish
   b5aba:	f011 0101 	ands.w	r1, r1, #1
   b5abe:	d10f      	bne.n	b5ae0 <_Z16_fetch_usbserialv+0x38>
   b5ac0:	4620      	mov	r0, r4
   b5ac2:	9101      	str	r1, [sp, #4]
   b5ac4:	f7fe faf8 	bl	b40b8 <__cxa_guard_acquire>
   b5ac8:	9901      	ldr	r1, [sp, #4]
   b5aca:	b148      	cbz	r0, b5ae0 <_Z16_fetch_usbserialv+0x38>
   b5acc:	aa03      	add	r2, sp, #12
   b5ace:	4807      	ldr	r0, [pc, #28]	; (b5aec <_Z16_fetch_usbserialv+0x44>)
   b5ad0:	f7ff ffc6 	bl	b5a60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5ad4:	4620      	mov	r0, r4
   b5ad6:	f7fe faf4 	bl	b40c2 <__cxa_guard_release>
   b5ada:	4805      	ldr	r0, [pc, #20]	; (b5af0 <_Z16_fetch_usbserialv+0x48>)
   b5adc:	f000 fed6 	bl	b688c <atexit>
	return _usbserial;
}
   b5ae0:	4802      	ldr	r0, [pc, #8]	; (b5aec <_Z16_fetch_usbserialv+0x44>)
   b5ae2:	b008      	add	sp, #32
   b5ae4:	bd10      	pop	{r4, pc}
   b5ae6:	bf00      	nop
   b5ae8:	2003e6f4 	.word	0x2003e6f4
   b5aec:	2003e6f8 	.word	0x2003e6f8
   b5af0:	000b59e9 	.word	0x000b59e9

000b5af4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5af4:	4770      	bx	lr

000b5af6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5af6:	7441      	strb	r1, [r0, #17]
}
   b5af8:	4770      	bx	lr

000b5afa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5afa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5afc:	7c00      	ldrb	r0, [r0, #16]
   b5afe:	f7ff fa47 	bl	b4f90 <hal_usart_available_data_for_write>
}
   b5b02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5b06:	bd08      	pop	{r3, pc}

000b5b08 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5b08:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5b0a:	7c00      	ldrb	r0, [r0, #16]
   b5b0c:	f7ff fa18 	bl	b4f40 <hal_usart_available>
}
   b5b10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5b14:	bd08      	pop	{r3, pc}

000b5b16 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5b16:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5b18:	7c00      	ldrb	r0, [r0, #16]
   b5b1a:	f7ff fa21 	bl	b4f60 <hal_usart_peek>
}
   b5b1e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5b22:	bd08      	pop	{r3, pc}

000b5b24 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5b24:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5b26:	7c00      	ldrb	r0, [r0, #16]
   b5b28:	f7ff fa12 	bl	b4f50 <hal_usart_read>
}
   b5b2c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5b30:	bd08      	pop	{r3, pc}

000b5b32 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5b32:	7c00      	ldrb	r0, [r0, #16]
   b5b34:	f7ff ba1c 	b.w	b4f70 <hal_usart_flush>

000b5b38 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5b3a:	7c45      	ldrb	r5, [r0, #17]
{
   b5b3c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5b3e:	b12d      	cbz	r5, b5b4c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5b40:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5b42:	b003      	add	sp, #12
   b5b44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5b48:	f7ff b9f2 	b.w	b4f30 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5b4c:	7c00      	ldrb	r0, [r0, #16]
   b5b4e:	9101      	str	r1, [sp, #4]
   b5b50:	f7ff fa1e 	bl	b4f90 <hal_usart_available_data_for_write>
   b5b54:	2800      	cmp	r0, #0
   b5b56:	9901      	ldr	r1, [sp, #4]
   b5b58:	dcf2      	bgt.n	b5b40 <_ZN11USARTSerial5writeEh+0x8>
}
   b5b5a:	4628      	mov	r0, r5
   b5b5c:	b003      	add	sp, #12
   b5b5e:	bd30      	pop	{r4, r5, pc}

000b5b60 <_ZN11USARTSerialD0Ev>:
   b5b60:	b510      	push	{r4, lr}
   b5b62:	2114      	movs	r1, #20
   b5b64:	4604      	mov	r4, r0
   b5b66:	f7fe fa98 	bl	b409a <_ZdlPvj>
   b5b6a:	4620      	mov	r0, r4
   b5b6c:	bd10      	pop	{r4, pc}
	...

000b5b70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5b70:	b510      	push	{r4, lr}
   b5b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5b76:	4604      	mov	r4, r0
   b5b78:	4608      	mov	r0, r1
   b5b7a:	4611      	mov	r1, r2
   b5b7c:	2200      	movs	r2, #0
   b5b7e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5b82:	4b04      	ldr	r3, [pc, #16]	; (b5b94 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5b84:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5b86:	2301      	movs	r3, #1
  _serial = serial;
   b5b88:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5b8a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5b8c:	f7ff fa08 	bl	b4fa0 <hal_usart_init_ex>
}
   b5b90:	4620      	mov	r0, r4
   b5b92:	bd10      	pop	{r4, pc}
   b5b94:	000b70c4 	.word	0x000b70c4

000b5b98 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5b98:	4770      	bx	lr

000b5b9a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b9c:	4606      	mov	r6, r0
   b5b9e:	4615      	mov	r5, r2
   b5ba0:	460c      	mov	r4, r1
   b5ba2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5ba4:	42bc      	cmp	r4, r7
   b5ba6:	d006      	beq.n	b5bb6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5ba8:	6833      	ldr	r3, [r6, #0]
   b5baa:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5bae:	689b      	ldr	r3, [r3, #8]
   b5bb0:	4630      	mov	r0, r6
   b5bb2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5bb4:	e7f6      	b.n	b5ba4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5bb6:	4628      	mov	r0, r5
   b5bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5bba <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5bba:	7c00      	ldrb	r0, [r0, #16]
   b5bbc:	2200      	movs	r2, #0
   b5bbe:	f7ff b9f7 	b.w	b4fb0 <hal_i2c_write>

000b5bc2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5bc2:	7c00      	ldrb	r0, [r0, #16]
   b5bc4:	2100      	movs	r1, #0
   b5bc6:	f7ff b9fb 	b.w	b4fc0 <hal_i2c_available>

000b5bca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5bca:	7c00      	ldrb	r0, [r0, #16]
   b5bcc:	2100      	movs	r1, #0
   b5bce:	f7ff b9ff 	b.w	b4fd0 <hal_i2c_read>

000b5bd2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5bd2:	7c00      	ldrb	r0, [r0, #16]
   b5bd4:	2100      	movs	r1, #0
   b5bd6:	f7ff ba03 	b.w	b4fe0 <hal_i2c_peek>

000b5bda <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5bda:	7c00      	ldrb	r0, [r0, #16]
   b5bdc:	2100      	movs	r1, #0
   b5bde:	f7ff ba07 	b.w	b4ff0 <hal_i2c_flush>

000b5be2 <_ZN7TwoWireD0Ev>:
   b5be2:	b510      	push	{r4, lr}
   b5be4:	2114      	movs	r1, #20
   b5be6:	4604      	mov	r4, r0
   b5be8:	f7fe fa57 	bl	b409a <_ZdlPvj>
   b5bec:	4620      	mov	r0, r4
   b5bee:	bd10      	pop	{r4, pc}

000b5bf0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5bf0:	b538      	push	{r3, r4, r5, lr}
   b5bf2:	4604      	mov	r4, r0
   b5bf4:	4615      	mov	r5, r2
   b5bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5bfa:	2200      	movs	r2, #0
   b5bfc:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5c00:	4b09      	ldr	r3, [pc, #36]	; (b5c28 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5c02:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5c04:	4608      	mov	r0, r1
   b5c06:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5c08:	4629      	mov	r1, r5
   b5c0a:	f7ff fa01 	bl	b5010 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5c0e:	30bf      	adds	r0, #191	; 0xbf
   b5c10:	d108      	bne.n	b5c24 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5c12:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5c14:	07db      	lsls	r3, r3, #31
   b5c16:	d505      	bpl.n	b5c24 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5c18:	6868      	ldr	r0, [r5, #4]
   b5c1a:	f7ff fb55 	bl	b52c8 <free>
    free(conf.tx_buffer);
   b5c1e:	68e8      	ldr	r0, [r5, #12]
   b5c20:	f7ff fb52 	bl	b52c8 <free>
}
   b5c24:	4620      	mov	r0, r4
   b5c26:	bd38      	pop	{r3, r4, r5, pc}
   b5c28:	000b70f4 	.word	0x000b70f4

000b5c2c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b5c2c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5c2e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b5c30:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5c34:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5c36:	2201      	movs	r2, #1
   b5c38:	f04f 33ff 	mov.w	r3, #4294967295
   b5c3c:	f10d 0107 	add.w	r1, sp, #7
   b5c40:	47a0      	blx	r4
}
   b5c42:	b002      	add	sp, #8
   b5c44:	bd10      	pop	{r4, pc}

000b5c46 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b5c46:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5c48:	6803      	ldr	r3, [r0, #0]
   b5c4a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5c4c:	f04f 33ff 	mov.w	r3, #4294967295
   b5c50:	46a4      	mov	ip, r4
}
   b5c52:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5c56:	4760      	bx	ip

000b5c58 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5c58:	b513      	push	{r0, r1, r4, lr}
   b5c5a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b5c5c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5c5e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b5c62:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5c64:	f10d 0107 	add.w	r1, sp, #7
   b5c68:	2201      	movs	r2, #1
   b5c6a:	47a0      	blx	r4
}
   b5c6c:	b002      	add	sp, #8
   b5c6e:	bd10      	pop	{r4, pc}

000b5c70 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b5c70:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5c72:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5c74:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5c78:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5c7c:	429a      	cmp	r2, r3
int TCPClient::read() {
   b5c7e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5c80:	d008      	beq.n	b5c94 <_ZN9TCPClient4readEv+0x24>
   b5c82:	6963      	ldr	r3, [r4, #20]
   b5c84:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5c88:	1c51      	adds	r1, r2, #1
   b5c8a:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b5c8e:	4413      	add	r3, r2
   b5c90:	7918      	ldrb	r0, [r3, #4]
}
   b5c92:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5c94:	6803      	ldr	r3, [r0, #0]
   b5c96:	691b      	ldr	r3, [r3, #16]
   b5c98:	4798      	blx	r3
   b5c9a:	2800      	cmp	r0, #0
   b5c9c:	d1f1      	bne.n	b5c82 <_ZN9TCPClient4readEv+0x12>
   b5c9e:	f04f 30ff 	mov.w	r0, #4294967295
   b5ca2:	e7f6      	b.n	b5c92 <_ZN9TCPClient4readEv+0x22>

000b5ca4 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b5ca4:	4770      	bx	lr

000b5ca6 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b5ca6:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b5ca8:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b5caa:	43c0      	mvns	r0, r0
   b5cac:	0fc0      	lsrs	r0, r0, #31
   b5cae:	4770      	bx	lr

000b5cb0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5cb0:	4770      	bx	lr
	...

000b5cb4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5cb4:	4b06      	ldr	r3, [pc, #24]	; (b5cd0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5cb6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5cb8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5cba:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5cbe:	d005      	beq.n	b5ccc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5cc0:	4608      	mov	r0, r1
   b5cc2:	f000 fcd1 	bl	b6668 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5cc6:	2800      	cmp	r0, #0
   b5cc8:	bf08      	it	eq
   b5cca:	2400      	moveq	r4, #0
      }
   b5ccc:	4620      	mov	r0, r4
   b5cce:	bd10      	pop	{r4, pc}
   b5cd0:	000b7050 	.word	0x000b7050

000b5cd4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5cd4:	b510      	push	{r4, lr}
   b5cd6:	21ac      	movs	r1, #172	; 0xac
   b5cd8:	4604      	mov	r4, r0
   b5cda:	f7fe f9de 	bl	b409a <_ZdlPvj>
   b5cde:	4620      	mov	r0, r4
   b5ce0:	bd10      	pop	{r4, pc}

000b5ce2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5ce2:	21ac      	movs	r1, #172	; 0xac
   b5ce4:	f7fe b9d9 	b.w	b409a <_ZdlPvj>

000b5ce8 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b5cec:	f04f 0800 	mov.w	r8, #0
   b5cf0:	b086      	sub	sp, #24
   b5cf2:	461c      	mov	r4, r3
   b5cf4:	f8c0 8004 	str.w	r8, [r0, #4]
   b5cf8:	4605      	mov	r5, r0
   b5cfa:	460e      	mov	r6, r1
   b5cfc:	4617      	mov	r7, r2
    struct timeval tv = {};
   b5cfe:	4641      	mov	r1, r8
   b5d00:	2210      	movs	r2, #16
   b5d02:	a802      	add	r0, sp, #8
   b5d04:	f000 fe04 	bl	b6910 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b5d08:	1c63      	adds	r3, r4, #1
   b5d0a:	d009      	beq.n	b5d20 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b5d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5d10:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b5d14:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5d18:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b5d1c:	435c      	muls	r4, r3
   b5d1e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b5d20:	6968      	ldr	r0, [r5, #20]
   b5d22:	2310      	movs	r3, #16
   b5d24:	9300      	str	r3, [sp, #0]
   b5d26:	6800      	ldr	r0, [r0, #0]
   b5d28:	ab02      	add	r3, sp, #8
   b5d2a:	f241 0205 	movw	r2, #4101	; 0x1005
   b5d2e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5d32:	f7ff f975 	bl	b5020 <sock_setsockopt>
    if (ret < 0) {
   b5d36:	2800      	cmp	r0, #0
   b5d38:	da07      	bge.n	b5d4a <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b5d3a:	f7ff fadd 	bl	b52f8 <__errno>
   b5d3e:	6803      	ldr	r3, [r0, #0]
   b5d40:	606b      	str	r3, [r5, #4]
        return 0;
   b5d42:	2000      	movs	r0, #0
}
   b5d44:	b006      	add	sp, #24
   b5d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b5d4a:	6968      	ldr	r0, [r5, #20]
   b5d4c:	2300      	movs	r3, #0
   b5d4e:	6800      	ldr	r0, [r0, #0]
   b5d50:	463a      	mov	r2, r7
   b5d52:	4631      	mov	r1, r6
   b5d54:	f7ff f984 	bl	b5060 <sock_send>
    if (ret < 0) {
   b5d58:	1e03      	subs	r3, r0, #0
   b5d5a:	dbee      	blt.n	b5d3a <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b5d5c:	4618      	mov	r0, r3
   b5d5e:	e7f1      	b.n	b5d44 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b5d60 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5d60:	b530      	push	{r4, r5, lr}
   b5d62:	b087      	sub	sp, #28
   b5d64:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5d66:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5d68:	4668      	mov	r0, sp
   b5d6a:	f7ff fe2b 	bl	b59c4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5d70:	3404      	adds	r4, #4
   b5d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5d74:	682b      	ldr	r3, [r5, #0]
   b5d76:	7023      	strb	r3, [r4, #0]
    }
   b5d78:	b007      	add	sp, #28
   b5d7a:	bd30      	pop	{r4, r5, pc}

000b5d7c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b5d7c:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b5d7e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b5d80:	4b05      	ldr	r3, [pc, #20]	; (b5d98 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b5d82:	4604      	mov	r4, r0
   b5d84:	358c      	adds	r5, #140	; 0x8c
   b5d86:	f844 3b04 	str.w	r3, [r4], #4
   b5d8a:	4606      	mov	r6, r0
   b5d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5d90:	682b      	ldr	r3, [r5, #0]
   b5d92:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5d94:	4630      	mov	r0, r6
   b5d96:	bd70      	pop	{r4, r5, r6, pc}
   b5d98:	000b7080 	.word	0x000b7080

000b5d9c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5da0:	4698      	mov	r8, r3
    stop();
   b5da2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5da4:	b093      	sub	sp, #76	; 0x4c
   b5da6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b5da8:	2400      	movs	r4, #0
    stop();
   b5daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5dac:	4606      	mov	r6, r0
   b5dae:	4617      	mov	r7, r2
    stop();
   b5db0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5db2:	4628      	mov	r0, r5
   b5db4:	466b      	mov	r3, sp
   b5db6:	4622      	mov	r2, r4
   b5db8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b5dba:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5dbc:	f7ff f830 	bl	b4e20 <netdb_getaddrinfo>
   b5dc0:	4605      	mov	r5, r0
   b5dc2:	2800      	cmp	r0, #0
   b5dc4:	d163      	bne.n	b5e8e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b5dc6:	9b00      	ldr	r3, [sp, #0]
   b5dc8:	2b00      	cmp	r3, #0
   b5dca:	d04b      	beq.n	b5e64 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5dcc:	695b      	ldr	r3, [r3, #20]
   b5dce:	2b00      	cmp	r3, #0
   b5dd0:	d048      	beq.n	b5e64 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b5dd2:	a806      	add	r0, sp, #24
   b5dd4:	f7ff fdb2 	bl	b593c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b5dd8:	9b00      	ldr	r3, [sp, #0]
   b5dda:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b5ddc:	7863      	ldrb	r3, [r4, #1]
   b5dde:	2b02      	cmp	r3, #2
   b5de0:	d104      	bne.n	b5dec <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b5de2:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b5de4:	a806      	add	r0, sp, #24
   b5de6:	f7ff ffbb 	bl	b5d60 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b5dea:	e026      	b.n	b5e3a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b5dec:	2b0a      	cmp	r3, #10
   b5dee:	d124      	bne.n	b5e3a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b5df0:	2211      	movs	r2, #17
   b5df2:	4629      	mov	r1, r5
   b5df4:	a801      	add	r0, sp, #4
   b5df6:	f000 fd8b 	bl	b6910 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5dfa:	68a3      	ldr	r3, [r4, #8]
   b5dfc:	2b00      	cmp	r3, #0
   b5dfe:	d038      	beq.n	b5e72 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5e00:	f104 0308 	add.w	r3, r4, #8
   b5e04:	f10d 0c04 	add.w	ip, sp, #4
   b5e08:	3418      	adds	r4, #24
   b5e0a:	6818      	ldr	r0, [r3, #0]
   b5e0c:	6859      	ldr	r1, [r3, #4]
   b5e0e:	4662      	mov	r2, ip
   b5e10:	c203      	stmia	r2!, {r0, r1}
   b5e12:	3308      	adds	r3, #8
   b5e14:	42a3      	cmp	r3, r4
   b5e16:	4694      	mov	ip, r2
   b5e18:	d1f7      	bne.n	b5e0a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b5e1a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5e1c:	a901      	add	r1, sp, #4
   b5e1e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b5e20:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5e24:	f7ff fd98 	bl	b5958 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5e28:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b5e2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5e30:	ac07      	add	r4, sp, #28
   b5e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e34:	f8dc 3000 	ldr.w	r3, [ip]
   b5e38:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b5e3a:	a806      	add	r0, sp, #24
   b5e3c:	f7ff fd9e 	bl	b597c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5e40:	b180      	cbz	r0, b5e64 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b5e42:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b5e44:	ad07      	add	r5, sp, #28
   b5e46:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b5e4a:	4b12      	ldr	r3, [pc, #72]	; (b5e94 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b5e4c:	930c      	str	r3, [sp, #48]	; 0x30
   b5e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e50:	ac0d      	add	r4, sp, #52	; 0x34
   b5e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e54:	682b      	ldr	r3, [r5, #0]
   b5e56:	7023      	strb	r3, [r4, #0]
   b5e58:	463a      	mov	r2, r7
   b5e5a:	4643      	mov	r3, r8
   b5e5c:	a90c      	add	r1, sp, #48	; 0x30
   b5e5e:	4630      	mov	r0, r6
   b5e60:	47c8      	blx	r9
   b5e62:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b5e64:	9800      	ldr	r0, [sp, #0]
   b5e66:	f7fe ffd3 	bl	b4e10 <netdb_freeaddrinfo>
}
   b5e6a:	4628      	mov	r0, r5
   b5e6c:	b013      	add	sp, #76	; 0x4c
   b5e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5e72:	68e3      	ldr	r3, [r4, #12]
   b5e74:	2b00      	cmp	r3, #0
   b5e76:	d1c3      	bne.n	b5e00 <_ZN9TCPClient7connectEPKctm+0x64>
   b5e78:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5e7c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b5e80:	f7ff f846 	bl	b4f10 <inet_htonl>
   b5e84:	4581      	cmp	r9, r0
   b5e86:	d1bb      	bne.n	b5e00 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b5e88:	f104 0114 	add.w	r1, r4, #20
   b5e8c:	e7aa      	b.n	b5de4 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5e8e:	4625      	mov	r5, r4
   b5e90:	e7e8      	b.n	b5e64 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5e92:	bf00      	nop
   b5e94:	000b7080 	.word	0x000b7080

000b5e98 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b5e98:	b538      	push	{r3, r4, r5, lr}
   b5e9a:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b5e9c:	681a      	ldr	r2, [r3, #0]
   b5e9e:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b5ea0:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b5ea2:	da10      	bge.n	b5ec6 <_ZN9TCPClient9connectedEv+0x2e>
   b5ea4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5ea8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5eac:	429a      	cmp	r2, r3
   b5eae:	d10a      	bne.n	b5ec6 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b5eb0:	6803      	ldr	r3, [r0, #0]
   b5eb2:	691b      	ldr	r3, [r3, #16]
   b5eb4:	4798      	blx	r3
        if (!rv) {
   b5eb6:	4604      	mov	r4, r0
   b5eb8:	b928      	cbnz	r0, b5ec6 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b5eba:	682b      	ldr	r3, [r5, #0]
   b5ebc:	4628      	mov	r0, r5
   b5ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5ec0:	4798      	blx	r3
        rv = available();
   b5ec2:	4620      	mov	r0, r4
}
   b5ec4:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b5ec6:	2001      	movs	r0, #1
   b5ec8:	e7fc      	b.n	b5ec4 <_ZN9TCPClient9connectedEv+0x2c>

000b5eca <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b5eca:	b510      	push	{r4, lr}
   b5ecc:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5ece:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5ed2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5ed6:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b5ed8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5eda:	d005      	beq.n	b5ee8 <_ZN9TCPClient4peekEv+0x1e>
   b5edc:	6963      	ldr	r3, [r4, #20]
   b5ede:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5ee2:	4413      	add	r3, r2
   b5ee4:	7918      	ldrb	r0, [r3, #4]
}
   b5ee6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5ee8:	6803      	ldr	r3, [r0, #0]
   b5eea:	691b      	ldr	r3, [r3, #16]
   b5eec:	4798      	blx	r3
   b5eee:	2800      	cmp	r0, #0
   b5ef0:	d1f4      	bne.n	b5edc <_ZN9TCPClient4peekEv+0x12>
   b5ef2:	f04f 30ff 	mov.w	r0, #4294967295
   b5ef6:	e7f6      	b.n	b5ee6 <_ZN9TCPClient4peekEv+0x1c>

000b5ef8 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5efa:	6943      	ldr	r3, [r0, #20]
   b5efc:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b5efe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5f02:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5f06:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5f08:	4605      	mov	r5, r0
   b5f0a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5f0c:	d016      	beq.n	b5f3c <_ZN9TCPClient4readEPhj+0x44>
   b5f0e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b5f10:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b5f14:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5f18:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5f1a:	42bc      	cmp	r4, r7
   b5f1c:	bf28      	it	cs
   b5f1e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5f20:	3304      	adds	r3, #4
   b5f22:	4622      	mov	r2, r4
   b5f24:	4419      	add	r1, r3
   b5f26:	4630      	mov	r0, r6
   b5f28:	f000 fcca 	bl	b68c0 <memcpy>
   b5f2c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b5f2e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b5f32:	4423      	add	r3, r4
   b5f34:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5f38:	4620      	mov	r0, r4
   b5f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5f3c:	6803      	ldr	r3, [r0, #0]
   b5f3e:	691b      	ldr	r3, [r3, #16]
   b5f40:	4798      	blx	r3
   b5f42:	2800      	cmp	r0, #0
   b5f44:	d1e3      	bne.n	b5f0e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b5f46:	f04f 34ff 	mov.w	r4, #4294967295
   b5f4a:	e7f5      	b.n	b5f38 <_ZN9TCPClient4readEPhj+0x40>

000b5f4c <_ZN9TCPClient12flush_bufferEv>:
   b5f4c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b5f4e:	2300      	movs	r3, #0
   b5f50:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b5f54:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b5f56:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b5f5a:	4770      	bx	lr

000b5f5c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5f60:	461f      	mov	r7, r3
    stop();
   b5f62:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5f64:	460c      	mov	r4, r1
    stop();
   b5f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5f68:	b08a      	sub	sp, #40	; 0x28
   b5f6a:	4605      	mov	r5, r0
   b5f6c:	4616      	mov	r6, r2
    stop();
   b5f6e:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b5f70:	7d23      	ldrb	r3, [r4, #20]
   b5f72:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b5f76:	2b04      	cmp	r3, #4
   b5f78:	bf0c      	ite	eq
   b5f7a:	2002      	moveq	r0, #2
   b5f7c:	200a      	movne	r0, #10
   b5f7e:	2206      	movs	r2, #6
   b5f80:	2101      	movs	r1, #1
   b5f82:	f7ff f875 	bl	b5070 <sock_socket>
   b5f86:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b5f8a:	696b      	ldr	r3, [r5, #20]
   b5f8c:	681b      	ldr	r3, [r3, #0]
   b5f8e:	2b00      	cmp	r3, #0
   b5f90:	da08      	bge.n	b5fa4 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b5f92:	682b      	ldr	r3, [r5, #0]
   b5f94:	4628      	mov	r0, r5
   b5f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5f98:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b5f9a:	4798      	blx	r3
}
   b5f9c:	4620      	mov	r0, r4
   b5f9e:	b00a      	add	sp, #40	; 0x28
   b5fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5fa4:	4628      	mov	r0, r5
   b5fa6:	f7ff ffd1 	bl	b5f4c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b5faa:	b1b7      	cbz	r7, b5fda <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5fac:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5fae:	a903      	add	r1, sp, #12
   b5fb0:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b5fb2:	9303      	str	r3, [sp, #12]
   b5fb4:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5fb8:	f7fe ff6a 	bl	b4e90 <if_index_to_name>
   b5fbc:	2800      	cmp	r0, #0
   b5fbe:	d1e8      	bne.n	b5f92 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5fc0:	6968      	ldr	r0, [r5, #20]
   b5fc2:	2306      	movs	r3, #6
   b5fc4:	9300      	str	r3, [sp, #0]
   b5fc6:	6800      	ldr	r0, [r0, #0]
   b5fc8:	ab03      	add	r3, sp, #12
   b5fca:	f241 020b 	movw	r2, #4107	; 0x100b
   b5fce:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5fd2:	f7ff f825 	bl	b5020 <sock_setsockopt>
   b5fd6:	2800      	cmp	r0, #0
   b5fd8:	d1db      	bne.n	b5f92 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b5fda:	221c      	movs	r2, #28
   b5fdc:	2100      	movs	r1, #0
   b5fde:	a803      	add	r0, sp, #12
   b5fe0:	f000 fc96 	bl	b6910 <memset>
    if (ip.version() == 4) {
   b5fe4:	7d23      	ldrb	r3, [r4, #20]
   b5fe6:	2b04      	cmp	r3, #4
   b5fe8:	d11d      	bne.n	b6026 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b5fea:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5fee:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5ff0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5ff4:	f7fe ff94 	bl	b4f20 <inet_htons>
   b5ff8:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5ffc:	6860      	ldr	r0, [r4, #4]
   b5ffe:	f7fe ff87 	bl	b4f10 <inet_htonl>
   b6002:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b6004:	696b      	ldr	r3, [r5, #20]
   b6006:	221c      	movs	r2, #28
   b6008:	6818      	ldr	r0, [r3, #0]
   b600a:	a903      	add	r1, sp, #12
   b600c:	f7ff f818 	bl	b5040 <sock_connect>
   b6010:	2800      	cmp	r0, #0
   b6012:	d1be      	bne.n	b5f92 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b6014:	3404      	adds	r4, #4
   b6016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6018:	696d      	ldr	r5, [r5, #20]
   b601a:	358c      	adds	r5, #140	; 0x8c
   b601c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b601e:	6823      	ldr	r3, [r4, #0]
   b6020:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b6022:	2401      	movs	r4, #1
   b6024:	e7ba      	b.n	b5f9c <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b6026:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b602a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b602c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b6030:	f7fe ff76 	bl	b4f20 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6034:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b6036:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b603a:	1d23      	adds	r3, r4, #4
   b603c:	f104 0714 	add.w	r7, r4, #20
   b6040:	6818      	ldr	r0, [r3, #0]
   b6042:	6859      	ldr	r1, [r3, #4]
   b6044:	4632      	mov	r2, r6
   b6046:	c203      	stmia	r2!, {r0, r1}
   b6048:	3308      	adds	r3, #8
   b604a:	42bb      	cmp	r3, r7
   b604c:	4616      	mov	r6, r2
   b604e:	d1f7      	bne.n	b6040 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b6050:	e7d8      	b.n	b6004 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b6054 <_ZN9TCPClient9availableEv>:
{
   b6054:	b530      	push	{r4, r5, lr}
   b6056:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b6058:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b605c:	b08b      	sub	sp, #44	; 0x2c
   b605e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b6060:	b12b      	cbz	r3, b606e <_ZN9TCPClient9availableEv+0x1a>
   b6062:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b6066:	429a      	cmp	r2, r3
   b6068:	d101      	bne.n	b606e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b606a:	f7ff ff6f 	bl	b5f4c <_ZN9TCPClient12flush_bufferEv>
   b606e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b6070:	6808      	ldr	r0, [r1, #0]
   b6072:	2800      	cmp	r0, #0
   b6074:	db18      	blt.n	b60a8 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b6076:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b607a:	2d7f      	cmp	r5, #127	; 0x7f
   b607c:	d814      	bhi.n	b60a8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b607e:	3104      	adds	r1, #4
   b6080:	2308      	movs	r3, #8
   b6082:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b6086:	4429      	add	r1, r5
   b6088:	f7fe ffe2 	bl	b5050 <sock_recv>
            if (ret > 0) {
   b608c:	2800      	cmp	r0, #0
   b608e:	dd13      	ble.n	b60b8 <_ZN9TCPClient9availableEv+0x64>
   b6090:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b6092:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6096:	b90a      	cbnz	r2, b609c <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b6098:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b609c:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b609e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b60a2:	4410      	add	r0, r2
   b60a4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b60a8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b60aa:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b60ae:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b60b2:	1ac0      	subs	r0, r0, r3
   b60b4:	b00b      	add	sp, #44	; 0x2c
   b60b6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b60b8:	f7ff f91e 	bl	b52f8 <__errno>
   b60bc:	6803      	ldr	r3, [r0, #0]
   b60be:	2b0b      	cmp	r3, #11
   b60c0:	d0f2      	beq.n	b60a8 <_ZN9TCPClient9availableEv+0x54>
   b60c2:	f7ff f919 	bl	b52f8 <__errno>
   b60c6:	6803      	ldr	r3, [r0, #0]
   b60c8:	2b0b      	cmp	r3, #11
   b60ca:	d0ed      	beq.n	b60a8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b60cc:	2320      	movs	r3, #32
   b60ce:	2500      	movs	r5, #0
   b60d0:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b60d4:	f7ff f910 	bl	b52f8 <__errno>
   b60d8:	6803      	ldr	r3, [r0, #0]
   b60da:	9301      	str	r3, [sp, #4]
   b60dc:	4b08      	ldr	r3, [pc, #32]	; (b6100 <_ZN9TCPClient9availableEv+0xac>)
   b60de:	4909      	ldr	r1, [pc, #36]	; (b6104 <_ZN9TCPClient9availableEv+0xb0>)
   b60e0:	9300      	str	r3, [sp, #0]
   b60e2:	aa02      	add	r2, sp, #8
   b60e4:	462b      	mov	r3, r5
   b60e6:	2032      	movs	r0, #50	; 0x32
   b60e8:	f7ff f82a 	bl	b5140 <log_message>
                    sock_close(d_->sock);
   b60ec:	6963      	ldr	r3, [r4, #20]
   b60ee:	6818      	ldr	r0, [r3, #0]
   b60f0:	f7fe ff9e 	bl	b5030 <sock_close>
   b60f4:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b60f6:	f04f 32ff 	mov.w	r2, #4294967295
   b60fa:	601a      	str	r2, [r3, #0]
   b60fc:	e7d4      	b.n	b60a8 <_ZN9TCPClient9availableEv+0x54>
   b60fe:	bf00      	nop
   b6100:	000b711b 	.word	0x000b711b
   b6104:	000b7114 	.word	0x000b7114

000b6108 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6108:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b610a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b610c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b610e:	6818      	ldr	r0, [r3, #0]
   b6110:	2800      	cmp	r0, #0
   b6112:	db01      	blt.n	b6118 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6114:	f7fe ff8c 	bl	b5030 <sock_close>
   b6118:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b611a:	f04f 32ff 	mov.w	r2, #4294967295
   b611e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6120:	6960      	ldr	r0, [r4, #20]
   b6122:	2211      	movs	r2, #17
   b6124:	2100      	movs	r1, #0
   b6126:	308c      	adds	r0, #140	; 0x8c
   b6128:	f000 fbf2 	bl	b6910 <memset>
    flush_buffer();
   b612c:	4620      	mov	r0, r4
}
   b612e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b6132:	f7ff bf0b 	b.w	b5f4c <_ZN9TCPClient12flush_bufferEv>

000b6136 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b6136:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b6138:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b613a:	4604      	mov	r4, r0
          total(0) {
   b613c:	6001      	str	r1, [r0, #0]
   b613e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b6142:	3088      	adds	r0, #136	; 0x88
   b6144:	f7ff fbfa 	bl	b593c <_ZN9IPAddressC1Ev>
}
   b6148:	4620      	mov	r0, r4
   b614a:	bd10      	pop	{r4, pc}

000b614c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b614c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b614e:	2300      	movs	r3, #0
   b6150:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6154:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b6158:	4a0e      	ldr	r2, [pc, #56]	; (b6194 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b615a:	6103      	str	r3, [r0, #16]
   b615c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b615e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b6160:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6162:	20ac      	movs	r0, #172	; 0xac
   b6164:	9101      	str	r1, [sp, #4]
   b6166:	f7fd ff94 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b616a:	1e05      	subs	r5, r0, #0
   b616c:	f105 060c 	add.w	r6, r5, #12
   b6170:	d008      	beq.n	b6184 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b6172:	2301      	movs	r3, #1
   b6174:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6178:	4b07      	ldr	r3, [pc, #28]	; (b6198 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b617a:	9901      	ldr	r1, [sp, #4]
   b617c:	602b      	str	r3, [r5, #0]
   b617e:	4630      	mov	r0, r6
   b6180:	f7ff ffd9 	bl	b6136 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b6184:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b6186:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b618a:	f7ff fedf 	bl	b5f4c <_ZN9TCPClient12flush_bufferEv>
}
   b618e:	b002      	add	sp, #8
   b6190:	bd70      	pop	{r4, r5, r6, pc}
   b6192:	bf00      	nop
   b6194:	000b7150 	.word	0x000b7150
   b6198:	000b7134 	.word	0x000b7134

000b619c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b619c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b619e:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b61a2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b61a4:	f7ff ffd2 	bl	b614c <_ZN9TCPClientC1Ei>
}
   b61a8:	4620      	mov	r0, r4
   b61aa:	bd10      	pop	{r4, pc}

000b61ac <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b61ac:	b510      	push	{r4, lr}
   b61ae:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b61b0:	6800      	ldr	r0, [r0, #0]
   b61b2:	2800      	cmp	r0, #0
   b61b4:	db01      	blt.n	b61ba <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b61b6:	f7fe ff3b 	bl	b5030 <sock_close>
    }
}
   b61ba:	4620      	mov	r0, r4
   b61bc:	bd10      	pop	{r4, pc}

000b61be <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b61be:	300c      	adds	r0, #12
   b61c0:	f7ff bff4 	b.w	b61ac <_ZN9TCPClient4DataD1Ev>

000b61c4 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv>:
                results[index++] = *result;
            }
        }

    protected:
        static void callback(WiFiAccessPoint* result, void* cookie)
   b61c4:	b530      	push	{r4, r5, lr}
            if (index<count) {
   b61c6:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   b61ca:	4293      	cmp	r3, r2
   b61cc:	da10      	bge.n	b61f0 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv+0x2c>
                results[index++] = *result;
   b61ce:	680d      	ldr	r5, [r1, #0]
   b61d0:	1c5a      	adds	r2, r3, #1
   b61d2:	604a      	str	r2, [r1, #4]
   b61d4:	4604      	mov	r4, r0
   b61d6:	2238      	movs	r2, #56	; 0x38
   b61d8:	fb02 5503 	mla	r5, r2, r3, r5
   b61dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b61de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b61e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b61e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b61e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b61e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b61e8:	e894 0003 	ldmia.w	r4, {r0, r1}
   b61ec:	e885 0003 	stmia.w	r5, {r0, r1}
        {
            ((APArrayPopulator*)cookie)->addResult(result);
        }
   b61f0:	bd30      	pop	{r4, r5, pc}

000b61f2 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b61f2:	2200      	movs	r2, #0
   b61f4:	6840      	ldr	r0, [r0, #4]
   b61f6:	4611      	mov	r1, r2
   b61f8:	f7fe bfee 	b.w	b51d8 <network_ready>

000b61fc <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b61fc:	2200      	movs	r2, #0
   b61fe:	6840      	ldr	r0, [r0, #4]
   b6200:	4611      	mov	r1, r2
   b6202:	f7ff b809 	b.w	b5218 <network_listening>

000b6206 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6206:	2200      	movs	r2, #0
   b6208:	6840      	ldr	r0, [r0, #4]
   b620a:	4611      	mov	r1, r2
   b620c:	f7ff b82c 	b.w	b5268 <network_get_listen_timeout>

000b6210 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6210:	6840      	ldr	r0, [r0, #4]
   b6212:	2200      	movs	r2, #0
   b6214:	f7ff b820 	b.w	b5258 <network_set_listen_timeout>

000b6218 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6218:	6840      	ldr	r0, [r0, #4]
   b621a:	2200      	movs	r2, #0
   b621c:	f081 0101 	eor.w	r1, r1, #1
   b6220:	f7fe bff2 	b.w	b5208 <network_listen>

000b6224 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6224:	2300      	movs	r3, #0
   b6226:	6840      	ldr	r0, [r0, #4]
   b6228:	461a      	mov	r2, r3
   b622a:	4619      	mov	r1, r3
   b622c:	f7fe bfe4 	b.w	b51f8 <network_off>

000b6230 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6230:	2300      	movs	r3, #0
   b6232:	6840      	ldr	r0, [r0, #4]
   b6234:	461a      	mov	r2, r3
   b6236:	4619      	mov	r1, r3
   b6238:	f7fe bfd6 	b.w	b51e8 <network_on>

000b623c <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b623c:	2200      	movs	r2, #0
   b623e:	6840      	ldr	r0, [r0, #4]
   b6240:	4611      	mov	r1, r2
   b6242:	f7fe bfb9 	b.w	b51b8 <network_connecting>

000b6246 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6246:	6840      	ldr	r0, [r0, #4]
   b6248:	2200      	movs	r2, #0
   b624a:	2102      	movs	r1, #2
   b624c:	f7fe bfbc 	b.w	b51c8 <network_disconnect>

000b6250 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6250:	2300      	movs	r3, #0
   b6252:	6840      	ldr	r0, [r0, #4]
   b6254:	461a      	mov	r2, r3
   b6256:	f7fe bfa7 	b.w	b51a8 <network_connect>
	...

000b625c <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>:
        APScan apScan(results, result_count);
        return apScan.start();
    }

#if !HAL_PLATFORM_WIFI_SCAN_ONLY
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
   b625c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
            this->index = 0;
   b625e:	2300      	movs	r3, #0
            this->results = results;
   b6260:	9101      	str	r1, [sp, #4]
            return std::min(count, wlan_get_credentials(callback, this));
   b6262:	4806      	ldr	r0, [pc, #24]	; (b627c <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj+0x20>)
            this->index = 0;
   b6264:	9302      	str	r3, [sp, #8]
            return std::min(count, wlan_get_credentials(callback, this));
   b6266:	a901      	add	r1, sp, #4
            this->count = size;
   b6268:	9203      	str	r2, [sp, #12]
            return std::min(count, wlan_get_credentials(callback, this));
   b626a:	f7fe ff59 	bl	b5120 <wlan_get_credentials>
        APList apList(results, result_count);
        return apList.start();
    }
   b626e:	9b03      	ldr	r3, [sp, #12]
   b6270:	4298      	cmp	r0, r3
   b6272:	bfa8      	it	ge
   b6274:	4618      	movge	r0, r3
   b6276:	b005      	add	sp, #20
   b6278:	f85d fb04 	ldr.w	pc, [sp], #4
   b627c:	000b61c5 	.word	0x000b61c5

000b6280 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6280:	4b02      	ldr	r3, [pc, #8]	; (b628c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6282:	2204      	movs	r2, #4
   b6284:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6286:	4a02      	ldr	r2, [pc, #8]	; (b6290 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6288:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b628a:	4770      	bx	lr
   b628c:	2003e70c 	.word	0x2003e70c
   b6290:	000b719c 	.word	0x000b719c

000b6294 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6294:	2300      	movs	r3, #0
   b6296:	6840      	ldr	r0, [r0, #4]
   b6298:	461a      	mov	r2, r3
   b629a:	f7fe bf85 	b.w	b51a8 <network_connect>

000b629e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b629e:	6840      	ldr	r0, [r0, #4]
   b62a0:	2200      	movs	r2, #0
   b62a2:	2102      	movs	r1, #2
   b62a4:	f7fe bf90 	b.w	b51c8 <network_disconnect>

000b62a8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b62a8:	2200      	movs	r2, #0
   b62aa:	6840      	ldr	r0, [r0, #4]
   b62ac:	4611      	mov	r1, r2
   b62ae:	f7fe bf83 	b.w	b51b8 <network_connecting>

000b62b2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b62b2:	2200      	movs	r2, #0
   b62b4:	6840      	ldr	r0, [r0, #4]
   b62b6:	4611      	mov	r1, r2
   b62b8:	f7fe bf8e 	b.w	b51d8 <network_ready>

000b62bc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b62bc:	2300      	movs	r3, #0
   b62be:	6840      	ldr	r0, [r0, #4]
   b62c0:	461a      	mov	r2, r3
   b62c2:	4619      	mov	r1, r3
   b62c4:	f7fe bf90 	b.w	b51e8 <network_on>

000b62c8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b62c8:	2300      	movs	r3, #0
   b62ca:	6840      	ldr	r0, [r0, #4]
   b62cc:	461a      	mov	r2, r3
   b62ce:	4619      	mov	r1, r3
   b62d0:	f7fe bf92 	b.w	b51f8 <network_off>

000b62d4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b62d4:	6840      	ldr	r0, [r0, #4]
   b62d6:	2100      	movs	r1, #0
   b62d8:	f7fe bfce 	b.w	b5278 <network_is_on>

000b62dc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b62dc:	6840      	ldr	r0, [r0, #4]
   b62de:	2100      	movs	r1, #0
   b62e0:	f7fe bfd2 	b.w	b5288 <network_is_off>

000b62e4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b62e4:	6840      	ldr	r0, [r0, #4]
   b62e6:	2200      	movs	r2, #0
   b62e8:	f081 0101 	eor.w	r1, r1, #1
   b62ec:	f7fe bf8c 	b.w	b5208 <network_listen>

000b62f0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b62f0:	6840      	ldr	r0, [r0, #4]
   b62f2:	2200      	movs	r2, #0
   b62f4:	f7fe bfb0 	b.w	b5258 <network_set_listen_timeout>

000b62f8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b62f8:	2200      	movs	r2, #0
   b62fa:	6840      	ldr	r0, [r0, #4]
   b62fc:	4611      	mov	r1, r2
   b62fe:	f7fe bfb3 	b.w	b5268 <network_get_listen_timeout>

000b6302 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6302:	2200      	movs	r2, #0
   b6304:	6840      	ldr	r0, [r0, #4]
   b6306:	4611      	mov	r1, r2
   b6308:	f7fe bf86 	b.w	b5218 <network_listening>

000b630c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b630c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6310:	b095      	sub	sp, #84	; 0x54
   b6312:	4614      	mov	r4, r2
   b6314:	460d      	mov	r5, r1
   b6316:	4607      	mov	r7, r0
    IPAddress addr;
   b6318:	f7ff fb10 	bl	b593c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b631c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b631e:	221c      	movs	r2, #28
   b6320:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6322:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6324:	f000 faf4 	bl	b6910 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6328:	2340      	movs	r3, #64	; 0x40
   b632a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b632c:	4620      	mov	r0, r4
   b632e:	466b      	mov	r3, sp
   b6330:	aa0c      	add	r2, sp, #48	; 0x30
   b6332:	2100      	movs	r1, #0
   b6334:	f7fe fd74 	bl	b4e20 <netdb_getaddrinfo>
    if (!r) {
   b6338:	4604      	mov	r4, r0
   b633a:	2800      	cmp	r0, #0
   b633c:	d14b      	bne.n	b63d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b633e:	4602      	mov	r2, r0
   b6340:	2101      	movs	r1, #1
   b6342:	6868      	ldr	r0, [r5, #4]
   b6344:	f7fe ff48 	bl	b51d8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6348:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b634a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b634c:	4622      	mov	r2, r4
   b634e:	6868      	ldr	r0, [r5, #4]
   b6350:	f7fe ff42 	bl	b51d8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6354:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6356:	4681      	mov	r9, r0
        bool ok = false;
   b6358:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b635a:	2e00      	cmp	r6, #0
   b635c:	d03b      	beq.n	b63d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b635e:	2900      	cmp	r1, #0
   b6360:	d139      	bne.n	b63d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6362:	6873      	ldr	r3, [r6, #4]
   b6364:	2b02      	cmp	r3, #2
   b6366:	d003      	beq.n	b6370 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6368:	2b0a      	cmp	r3, #10
   b636a:	d011      	beq.n	b6390 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b636c:	69f6      	ldr	r6, [r6, #28]
   b636e:	e7f4      	b.n	b635a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6370:	f1b8 0f00 	cmp.w	r8, #0
   b6374:	d0fa      	beq.n	b636c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6376:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6378:	a806      	add	r0, sp, #24
   b637a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b637c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b637e:	f7ff fb21 	bl	b59c4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6384:	1d3c      	adds	r4, r7, #4
   b6386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6388:	682b      	ldr	r3, [r5, #0]
   b638a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b638c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b638e:	e7ed      	b.n	b636c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6390:	f1b9 0f00 	cmp.w	r9, #0
   b6394:	d0ea      	beq.n	b636c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6396:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6398:	2210      	movs	r2, #16
   b639a:	a801      	add	r0, sp, #4
   b639c:	f000 fab8 	bl	b6910 <memset>
                    a.v = 6;
   b63a0:	2306      	movs	r3, #6
   b63a2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b63a6:	ad01      	add	r5, sp, #4
   b63a8:	f104 0308 	add.w	r3, r4, #8
   b63ac:	3418      	adds	r4, #24
   b63ae:	6818      	ldr	r0, [r3, #0]
   b63b0:	6859      	ldr	r1, [r3, #4]
   b63b2:	462a      	mov	r2, r5
   b63b4:	c203      	stmia	r2!, {r0, r1}
   b63b6:	3308      	adds	r3, #8
   b63b8:	42a3      	cmp	r3, r4
   b63ba:	4615      	mov	r5, r2
   b63bc:	d1f7      	bne.n	b63ae <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b63be:	a901      	add	r1, sp, #4
   b63c0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b63c2:	ad07      	add	r5, sp, #28
   b63c4:	f7ff fac8 	bl	b5958 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b63c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b63ca:	1d3c      	adds	r4, r7, #4
   b63cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b63ce:	682b      	ldr	r3, [r5, #0]
   b63d0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b63d2:	4649      	mov	r1, r9
   b63d4:	e7ca      	b.n	b636c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b63d6:	9800      	ldr	r0, [sp, #0]
   b63d8:	f7fe fd1a 	bl	b4e10 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b63dc:	4638      	mov	r0, r7
   b63de:	b015      	add	sp, #84	; 0x54
   b63e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b63e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b63e4:	4b02      	ldr	r3, [pc, #8]	; (b63f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b63e6:	4a03      	ldr	r2, [pc, #12]	; (b63f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b63e8:	601a      	str	r2, [r3, #0]
   b63ea:	2200      	movs	r2, #0
   b63ec:	605a      	str	r2, [r3, #4]

} // spark
   b63ee:	4770      	bx	lr
   b63f0:	2003e714 	.word	0x2003e714
   b63f4:	000b71d8 	.word	0x000b71d8

000b63f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b63f8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b63fa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b63fc:	d902      	bls.n	b6404 <pinAvailable+0xc>
    return false;
   b63fe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6400:	b002      	add	sp, #8
   b6402:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6404:	f1a0 030b 	sub.w	r3, r0, #11
   b6408:	2b02      	cmp	r3, #2
   b640a:	d81a      	bhi.n	b6442 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b640c:	4c17      	ldr	r4, [pc, #92]	; (b646c <pinAvailable+0x74>)
   b640e:	7821      	ldrb	r1, [r4, #0]
   b6410:	f3bf 8f5b 	dmb	ish
   b6414:	f011 0101 	ands.w	r1, r1, #1
   b6418:	d10b      	bne.n	b6432 <pinAvailable+0x3a>
   b641a:	4620      	mov	r0, r4
   b641c:	9101      	str	r1, [sp, #4]
   b641e:	f7fd fe4b 	bl	b40b8 <__cxa_guard_acquire>
   b6422:	9901      	ldr	r1, [sp, #4]
   b6424:	b128      	cbz	r0, b6432 <pinAvailable+0x3a>
   b6426:	4812      	ldr	r0, [pc, #72]	; (b6470 <pinAvailable+0x78>)
   b6428:	f7fe ffbc 	bl	b53a4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b642c:	4620      	mov	r0, r4
   b642e:	f7fd fe48 	bl	b40c2 <__cxa_guard_release>
   b6432:	4b0f      	ldr	r3, [pc, #60]	; (b6470 <pinAvailable+0x78>)
   b6434:	7818      	ldrb	r0, [r3, #0]
   b6436:	f7fe fe2b 	bl	b5090 <hal_spi_is_enabled>
   b643a:	2800      	cmp	r0, #0
   b643c:	d1df      	bne.n	b63fe <pinAvailable+0x6>
  return true; // 'pin' is available
   b643e:	2001      	movs	r0, #1
   b6440:	e7de      	b.n	b6400 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6442:	2801      	cmp	r0, #1
   b6444:	d809      	bhi.n	b645a <pinAvailable+0x62>
   b6446:	f000 f8e9 	bl	b661c <_Z19__fetch_global_Wirev>
   b644a:	2100      	movs	r1, #0
   b644c:	7c00      	ldrb	r0, [r0, #16]
   b644e:	f7fe fdd7 	bl	b5000 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6452:	f080 0001 	eor.w	r0, r0, #1
   b6456:	b2c0      	uxtb	r0, r0
   b6458:	e7d2      	b.n	b6400 <pinAvailable+0x8>
   b645a:	3809      	subs	r0, #9
   b645c:	2801      	cmp	r0, #1
   b645e:	d8ee      	bhi.n	b643e <pinAvailable+0x46>
   b6460:	f000 f89c 	bl	b659c <_Z22__fetch_global_Serial1v>
   b6464:	7c00      	ldrb	r0, [r0, #16]
   b6466:	f7fe fd8b 	bl	b4f80 <hal_usart_is_enabled>
   b646a:	e7f2      	b.n	b6452 <pinAvailable+0x5a>
   b646c:	2003e71c 	.word	0x2003e71c
   b6470:	2003e720 	.word	0x2003e720

000b6474 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6474:	2823      	cmp	r0, #35	; 0x23
{
   b6476:	b538      	push	{r3, r4, r5, lr}
   b6478:	4604      	mov	r4, r0
   b647a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b647c:	d80a      	bhi.n	b6494 <pinMode+0x20>
   b647e:	29ff      	cmp	r1, #255	; 0xff
   b6480:	d008      	beq.n	b6494 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6482:	f7ff ffb9 	bl	b63f8 <pinAvailable>
   b6486:	b128      	cbz	r0, b6494 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6488:	4629      	mov	r1, r5
   b648a:	4620      	mov	r0, r4
}
   b648c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6490:	f7fe bcd6 	b.w	b4e40 <HAL_Pin_Mode>
}
   b6494:	bd38      	pop	{r3, r4, r5, pc}

000b6496 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6496:	b538      	push	{r3, r4, r5, lr}
   b6498:	4604      	mov	r4, r0
   b649a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b649c:	f7fe fcd8 	bl	b4e50 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b64a0:	28ff      	cmp	r0, #255	; 0xff
   b64a2:	d010      	beq.n	b64c6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b64a4:	2806      	cmp	r0, #6
   b64a6:	d804      	bhi.n	b64b2 <digitalWrite+0x1c>
   b64a8:	234d      	movs	r3, #77	; 0x4d
   b64aa:	fa23 f000 	lsr.w	r0, r3, r0
   b64ae:	07c3      	lsls	r3, r0, #31
   b64b0:	d409      	bmi.n	b64c6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b64b2:	4620      	mov	r0, r4
   b64b4:	f7ff ffa0 	bl	b63f8 <pinAvailable>
   b64b8:	b128      	cbz	r0, b64c6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b64ba:	4629      	mov	r1, r5
   b64bc:	4620      	mov	r0, r4
}
   b64be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b64c2:	f7fe bccd 	b.w	b4e60 <HAL_GPIO_Write>
}
   b64c6:	bd38      	pop	{r3, r4, r5, pc}

000b64c8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b64c8:	b510      	push	{r4, lr}
   b64ca:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b64cc:	f7fe fcc0 	bl	b4e50 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b64d0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b64d2:	b2db      	uxtb	r3, r3
   b64d4:	2b01      	cmp	r3, #1
   b64d6:	d908      	bls.n	b64ea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b64d8:	4620      	mov	r0, r4
   b64da:	f7ff ff8d 	bl	b63f8 <pinAvailable>
   b64de:	b120      	cbz	r0, b64ea <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b64e0:	4620      	mov	r0, r4
}
   b64e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b64e6:	f7fe bcc3 	b.w	b4e70 <HAL_GPIO_Read>
}
   b64ea:	2000      	movs	r0, #0
   b64ec:	bd10      	pop	{r4, pc}

000b64ee <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b64ee:	280d      	cmp	r0, #13
{
   b64f0:	b510      	push	{r4, lr}
   b64f2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b64f4:	bf9c      	itt	ls
   b64f6:	340e      	addls	r4, #14
   b64f8:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b64fa:	4620      	mov	r0, r4
   b64fc:	f7ff ff7c 	bl	b63f8 <pinAvailable>
   b6500:	b150      	cbz	r0, b6518 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b6502:	2103      	movs	r1, #3
   b6504:	4620      	mov	r0, r4
   b6506:	f7fe fc93 	bl	b4e30 <HAL_Validate_Pin_Function>
   b650a:	2803      	cmp	r0, #3
   b650c:	d104      	bne.n	b6518 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b650e:	4620      	mov	r0, r4
}
   b6510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b6514:	f7fe bcb4 	b.w	b4e80 <hal_adc_read>
}
   b6518:	2000      	movs	r0, #0
   b651a:	bd10      	pop	{r4, pc}

000b651c <shiftIn>:
  }

  return hal_pwm_get_max_frequency(pin);
}

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
   b651c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6520:	4690      	mov	r8, r2
   b6522:	2507      	movs	r5, #7
  uint8_t value = 0;
   b6524:	2400      	movs	r4, #0
  uint8_t i;

  for (i = 0; i < 8; ++i) {
    digitalWrite(clockPin, HIGH);
   b6526:	460e      	mov	r6, r1
    if (bitOrder == LSBFIRST)
      value |= digitalRead(dataPin) << i;
   b6528:	4607      	mov	r7, r0
    digitalWrite(clockPin, HIGH);
   b652a:	4630      	mov	r0, r6
   b652c:	2101      	movs	r1, #1
   b652e:	f7ff ffb2 	bl	b6496 <digitalWrite>
    if (bitOrder == LSBFIRST)
   b6532:	f1c5 0907 	rsb	r9, r5, #7
      value |= digitalRead(dataPin) << i;
   b6536:	b264      	sxtb	r4, r4
   b6538:	4638      	mov	r0, r7
    if (bitOrder == LSBFIRST)
   b653a:	f1b8 0f00 	cmp.w	r8, #0
   b653e:	d10e      	bne.n	b655e <shiftIn+0x42>
      value |= digitalRead(dataPin) << i;
   b6540:	f7ff ffc2 	bl	b64c8 <digitalRead>
   b6544:	fa00 f009 	lsl.w	r0, r0, r9
    else
      value |= digitalRead(dataPin) << (7 - i);
   b6548:	4304      	orrs	r4, r0
    digitalWrite(clockPin, LOW);
   b654a:	2100      	movs	r1, #0
   b654c:	4630      	mov	r0, r6
   b654e:	f7ff ffa2 	bl	b6496 <digitalWrite>
  for (i = 0; i < 8; ++i) {
   b6552:	3d01      	subs	r5, #1
      value |= digitalRead(dataPin) << (7 - i);
   b6554:	b2e4      	uxtb	r4, r4
  for (i = 0; i < 8; ++i) {
   b6556:	d2e8      	bcs.n	b652a <shiftIn+0xe>
  }
  return value;
}
   b6558:	4620      	mov	r0, r4
   b655a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      value |= digitalRead(dataPin) << (7 - i);
   b655e:	f7ff ffb3 	bl	b64c8 <digitalRead>
   b6562:	40a8      	lsls	r0, r5
   b6564:	e7f0      	b.n	b6548 <shiftIn+0x2c>

000b6566 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6566:	4770      	bx	lr

000b6568 <_Z20acquireSerial1Bufferv>:
{
   b6568:	b538      	push	{r3, r4, r5, lr}
   b656a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b656c:	2514      	movs	r5, #20
   b656e:	462a      	mov	r2, r5
   b6570:	2100      	movs	r1, #0
   b6572:	f000 f9cd 	bl	b6910 <memset>
   b6576:	8025      	strh	r5, [r4, #0]
   b6578:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b657a:	4907      	ldr	r1, [pc, #28]	; (b6598 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b657c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b657e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6580:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6582:	f000 f86f 	bl	b6664 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6586:	4904      	ldr	r1, [pc, #16]	; (b6598 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6588:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b658a:	4628      	mov	r0, r5
   b658c:	f000 f86a 	bl	b6664 <_ZnajRKSt9nothrow_t>
    };
   b6590:	60e0      	str	r0, [r4, #12]
}
   b6592:	4620      	mov	r0, r4
   b6594:	bd38      	pop	{r3, r4, r5, pc}
   b6596:	bf00      	nop
   b6598:	000b720c 	.word	0x000b720c

000b659c <_Z22__fetch_global_Serial1v>:
{
   b659c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b659e:	4d0e      	ldr	r5, [pc, #56]	; (b65d8 <_Z22__fetch_global_Serial1v+0x3c>)
   b65a0:	7829      	ldrb	r1, [r5, #0]
   b65a2:	f3bf 8f5b 	dmb	ish
   b65a6:	f011 0401 	ands.w	r4, r1, #1
{
   b65aa:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b65ac:	d111      	bne.n	b65d2 <_Z22__fetch_global_Serial1v+0x36>
   b65ae:	4628      	mov	r0, r5
   b65b0:	f7fd fd82 	bl	b40b8 <__cxa_guard_acquire>
   b65b4:	b168      	cbz	r0, b65d2 <_Z22__fetch_global_Serial1v+0x36>
   b65b6:	a801      	add	r0, sp, #4
   b65b8:	f7ff ffd6 	bl	b6568 <_Z20acquireSerial1Bufferv>
   b65bc:	aa01      	add	r2, sp, #4
   b65be:	4621      	mov	r1, r4
   b65c0:	4806      	ldr	r0, [pc, #24]	; (b65dc <_Z22__fetch_global_Serial1v+0x40>)
   b65c2:	f7ff fad5 	bl	b5b70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b65c6:	4628      	mov	r0, r5
   b65c8:	f7fd fd7b 	bl	b40c2 <__cxa_guard_release>
   b65cc:	4804      	ldr	r0, [pc, #16]	; (b65e0 <_Z22__fetch_global_Serial1v+0x44>)
   b65ce:	f000 f95d 	bl	b688c <atexit>
    return serial1;
}
   b65d2:	4802      	ldr	r0, [pc, #8]	; (b65dc <_Z22__fetch_global_Serial1v+0x40>)
   b65d4:	b007      	add	sp, #28
   b65d6:	bd30      	pop	{r4, r5, pc}
   b65d8:	2003e728 	.word	0x2003e728
   b65dc:	2003e72c 	.word	0x2003e72c
   b65e0:	000b6567 	.word	0x000b6567

000b65e4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b65e4:	4770      	bx	lr
	...

000b65e8 <_Z17acquireWireBufferv>:
{
   b65e8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b65ea:	4b0a      	ldr	r3, [pc, #40]	; (b6614 <_Z17acquireWireBufferv+0x2c>)
   b65ec:	6003      	str	r3, [r0, #0]
   b65ee:	2301      	movs	r3, #1
{
   b65f0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b65f2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b65f4:	4908      	ldr	r1, [pc, #32]	; (b6618 <_Z17acquireWireBufferv+0x30>)
   b65f6:	2020      	movs	r0, #32
   b65f8:	f000 f834 	bl	b6664 <_ZnajRKSt9nothrow_t>
	};
   b65fc:	2520      	movs	r5, #32
   b65fe:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6600:	4905      	ldr	r1, [pc, #20]	; (b6618 <_Z17acquireWireBufferv+0x30>)
	};
   b6602:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6604:	4628      	mov	r0, r5
   b6606:	f000 f82d 	bl	b6664 <_ZnajRKSt9nothrow_t>
	};
   b660a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b660e:	4620      	mov	r0, r4
   b6610:	bd38      	pop	{r3, r4, r5, pc}
   b6612:	bf00      	nop
   b6614:	00010018 	.word	0x00010018
   b6618:	000b720c 	.word	0x000b720c

000b661c <_Z19__fetch_global_Wirev>:
{
   b661c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b661e:	4d0e      	ldr	r5, [pc, #56]	; (b6658 <_Z19__fetch_global_Wirev+0x3c>)
   b6620:	7829      	ldrb	r1, [r5, #0]
   b6622:	f3bf 8f5b 	dmb	ish
   b6626:	f011 0401 	ands.w	r4, r1, #1
{
   b662a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b662c:	d111      	bne.n	b6652 <_Z19__fetch_global_Wirev+0x36>
   b662e:	4628      	mov	r0, r5
   b6630:	f7fd fd42 	bl	b40b8 <__cxa_guard_acquire>
   b6634:	b168      	cbz	r0, b6652 <_Z19__fetch_global_Wirev+0x36>
   b6636:	4668      	mov	r0, sp
   b6638:	f7ff ffd6 	bl	b65e8 <_Z17acquireWireBufferv>
   b663c:	466a      	mov	r2, sp
   b663e:	4621      	mov	r1, r4
   b6640:	4806      	ldr	r0, [pc, #24]	; (b665c <_Z19__fetch_global_Wirev+0x40>)
   b6642:	f7ff fad5 	bl	b5bf0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6646:	4628      	mov	r0, r5
   b6648:	f7fd fd3b 	bl	b40c2 <__cxa_guard_release>
   b664c:	4804      	ldr	r0, [pc, #16]	; (b6660 <_Z19__fetch_global_Wirev+0x44>)
   b664e:	f000 f91d 	bl	b688c <atexit>
	return wire;
}
   b6652:	4802      	ldr	r0, [pc, #8]	; (b665c <_Z19__fetch_global_Wirev+0x40>)
   b6654:	b007      	add	sp, #28
   b6656:	bd30      	pop	{r4, r5, pc}
   b6658:	2003e744 	.word	0x2003e744
   b665c:	2003e748 	.word	0x2003e748
   b6660:	000b65e5 	.word	0x000b65e5

000b6664 <_ZnajRKSt9nothrow_t>:
   b6664:	f7fd bd17 	b.w	b4096 <_Znaj>

000b6668 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6668:	4901      	ldr	r1, [pc, #4]	; (b6670 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b666a:	f000 b8f9 	b.w	b6860 <_ZNKSt9type_infoeqERKS_>
   b666e:	bf00      	nop
   b6670:	000b7228 	.word	0x000b7228

000b6674 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6674:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6676:	2400      	movs	r4, #0
   b6678:	2310      	movs	r3, #16
   b667a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b667e:	6803      	ldr	r3, [r0, #0]
   b6680:	4615      	mov	r5, r2
   b6682:	699e      	ldr	r6, [r3, #24]
   b6684:	6812      	ldr	r2, [r2, #0]
   b6686:	466b      	mov	r3, sp
   b6688:	e9cd 4400 	strd	r4, r4, [sp]
   b668c:	47b0      	blx	r6
   b668e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6692:	f003 0306 	and.w	r3, r3, #6
   b6696:	2b06      	cmp	r3, #6
   b6698:	bf03      	ittte	eq
   b669a:	9b00      	ldreq	r3, [sp, #0]
   b669c:	602b      	streq	r3, [r5, #0]
   b669e:	2001      	moveq	r0, #1
   b66a0:	4620      	movne	r0, r4
   b66a2:	b004      	add	sp, #16
   b66a4:	bd70      	pop	{r4, r5, r6, pc}

000b66a6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b66a6:	9800      	ldr	r0, [sp, #0]
   b66a8:	4290      	cmp	r0, r2
   b66aa:	bf14      	ite	ne
   b66ac:	2001      	movne	r0, #1
   b66ae:	2006      	moveq	r0, #6
   b66b0:	4770      	bx	lr
	...

000b66b4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b66b4:	b510      	push	{r4, lr}
   b66b6:	4b03      	ldr	r3, [pc, #12]	; (b66c4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b66b8:	6003      	str	r3, [r0, #0]
   b66ba:	4604      	mov	r4, r0
   b66bc:	f000 f8cd 	bl	b685a <_ZNSt9type_infoD1Ev>
   b66c0:	4620      	mov	r0, r4
   b66c2:	bd10      	pop	{r4, pc}
   b66c4:	000b7268 	.word	0x000b7268

000b66c8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b66c8:	b510      	push	{r4, lr}
   b66ca:	4604      	mov	r4, r0
   b66cc:	f7ff fff2 	bl	b66b4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b66d0:	4620      	mov	r0, r4
   b66d2:	2108      	movs	r1, #8
   b66d4:	f7fd fce1 	bl	b409a <_ZdlPvj>
   b66d8:	4620      	mov	r0, r4
   b66da:	bd10      	pop	{r4, pc}

000b66dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b66dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b66e0:	461f      	mov	r7, r3
   b66e2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b66e6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b66ea:	4598      	cmp	r8, r3
   b66ec:	4606      	mov	r6, r0
   b66ee:	4615      	mov	r5, r2
   b66f0:	d107      	bne.n	b6702 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b66f2:	9907      	ldr	r1, [sp, #28]
   b66f4:	f000 f8b4 	bl	b6860 <_ZNKSt9type_infoeqERKS_>
   b66f8:	b118      	cbz	r0, b6702 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b66fa:	7165      	strb	r5, [r4, #5]
   b66fc:	2000      	movs	r0, #0
   b66fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6702:	4639      	mov	r1, r7
   b6704:	4630      	mov	r0, r6
   b6706:	f000 f8ab 	bl	b6860 <_ZNKSt9type_infoeqERKS_>
   b670a:	2800      	cmp	r0, #0
   b670c:	d0f6      	beq.n	b66fc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b670e:	2301      	movs	r3, #1
   b6710:	f8c4 8000 	str.w	r8, [r4]
   b6714:	7125      	strb	r5, [r4, #4]
   b6716:	71a3      	strb	r3, [r4, #6]
   b6718:	e7f0      	b.n	b66fc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b671a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b671a:	b538      	push	{r3, r4, r5, lr}
   b671c:	4615      	mov	r5, r2
   b671e:	461c      	mov	r4, r3
   b6720:	f000 f89e 	bl	b6860 <_ZNKSt9type_infoeqERKS_>
   b6724:	b120      	cbz	r0, b6730 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b6726:	2308      	movs	r3, #8
   b6728:	60e3      	str	r3, [r4, #12]
   b672a:	2306      	movs	r3, #6
   b672c:	6025      	str	r5, [r4, #0]
   b672e:	7123      	strb	r3, [r4, #4]
   b6730:	bd38      	pop	{r3, r4, r5, pc}

000b6732 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b6732:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6734:	4605      	mov	r5, r0
   b6736:	460c      	mov	r4, r1
   b6738:	9201      	str	r2, [sp, #4]
   b673a:	461e      	mov	r6, r3
   b673c:	f000 f890 	bl	b6860 <_ZNKSt9type_infoeqERKS_>
   b6740:	b950      	cbnz	r0, b6758 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6742:	2e03      	cmp	r6, #3
   b6744:	d808      	bhi.n	b6758 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6746:	6823      	ldr	r3, [r4, #0]
   b6748:	9a01      	ldr	r2, [sp, #4]
   b674a:	695b      	ldr	r3, [r3, #20]
   b674c:	4629      	mov	r1, r5
   b674e:	4620      	mov	r0, r4
   b6750:	b002      	add	sp, #8
   b6752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6756:	4718      	bx	r3
   b6758:	b002      	add	sp, #8
   b675a:	bd70      	pop	{r4, r5, r6, pc}

000b675c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b675c:	b510      	push	{r4, lr}
   b675e:	4b03      	ldr	r3, [pc, #12]	; (b676c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b6760:	6003      	str	r3, [r0, #0]
   b6762:	4604      	mov	r4, r0
   b6764:	f7ff ffa6 	bl	b66b4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6768:	4620      	mov	r0, r4
   b676a:	bd10      	pop	{r4, pc}
   b676c:	000b72c8 	.word	0x000b72c8

000b6770 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b6770:	b510      	push	{r4, lr}
   b6772:	4604      	mov	r4, r0
   b6774:	f7ff fff2 	bl	b675c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6778:	4620      	mov	r0, r4
   b677a:	210c      	movs	r1, #12
   b677c:	f7fd fc8d 	bl	b409a <_ZdlPvj>
   b6780:	4620      	mov	r0, r4
   b6782:	bd10      	pop	{r4, pc}

000b6784 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6786:	9f08      	ldr	r7, [sp, #32]
   b6788:	4297      	cmp	r7, r2
   b678a:	4605      	mov	r5, r0
   b678c:	460e      	mov	r6, r1
   b678e:	4614      	mov	r4, r2
   b6790:	d00a      	beq.n	b67a8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b6792:	68a8      	ldr	r0, [r5, #8]
   b6794:	6802      	ldr	r2, [r0, #0]
   b6796:	9708      	str	r7, [sp, #32]
   b6798:	6a15      	ldr	r5, [r2, #32]
   b679a:	4631      	mov	r1, r6
   b679c:	4622      	mov	r2, r4
   b679e:	46ac      	mov	ip, r5
   b67a0:	b003      	add	sp, #12
   b67a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b67a6:	4760      	bx	ip
   b67a8:	4619      	mov	r1, r3
   b67aa:	9301      	str	r3, [sp, #4]
   b67ac:	f000 f858 	bl	b6860 <_ZNKSt9type_infoeqERKS_>
   b67b0:	9b01      	ldr	r3, [sp, #4]
   b67b2:	2800      	cmp	r0, #0
   b67b4:	d0ed      	beq.n	b6792 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b67b6:	2006      	movs	r0, #6
   b67b8:	b003      	add	sp, #12
   b67ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b67bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b67bc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b67c0:	460d      	mov	r5, r1
   b67c2:	4619      	mov	r1, r3
   b67c4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b67c8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b67cc:	4681      	mov	r9, r0
   b67ce:	4617      	mov	r7, r2
   b67d0:	4698      	mov	r8, r3
   b67d2:	f000 f845 	bl	b6860 <_ZNKSt9type_infoeqERKS_>
   b67d6:	b190      	cbz	r0, b67fe <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b67d8:	2d00      	cmp	r5, #0
   b67da:	6034      	str	r4, [r6, #0]
   b67dc:	7137      	strb	r7, [r6, #4]
   b67de:	db09      	blt.n	b67f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b67e0:	1961      	adds	r1, r4, r5
   b67e2:	458a      	cmp	sl, r1
   b67e4:	bf0c      	ite	eq
   b67e6:	2106      	moveq	r1, #6
   b67e8:	2101      	movne	r1, #1
   b67ea:	71b1      	strb	r1, [r6, #6]
   b67ec:	2000      	movs	r0, #0
   b67ee:	b001      	add	sp, #4
   b67f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b67f4:	3502      	adds	r5, #2
   b67f6:	d1f9      	bne.n	b67ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b67f8:	2301      	movs	r3, #1
   b67fa:	71b3      	strb	r3, [r6, #6]
   b67fc:	e7f6      	b.n	b67ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b67fe:	4554      	cmp	r4, sl
   b6800:	d106      	bne.n	b6810 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6802:	4659      	mov	r1, fp
   b6804:	4648      	mov	r0, r9
   b6806:	f000 f82b 	bl	b6860 <_ZNKSt9type_infoeqERKS_>
   b680a:	b108      	cbz	r0, b6810 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b680c:	7177      	strb	r7, [r6, #5]
   b680e:	e7ed      	b.n	b67ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6810:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6814:	6803      	ldr	r3, [r0, #0]
   b6816:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b681a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b681e:	69dc      	ldr	r4, [r3, #28]
   b6820:	463a      	mov	r2, r7
   b6822:	4643      	mov	r3, r8
   b6824:	4629      	mov	r1, r5
   b6826:	46a4      	mov	ip, r4
   b6828:	b001      	add	sp, #4
   b682a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b682e:	4760      	bx	ip

000b6830 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b6830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6834:	4607      	mov	r7, r0
   b6836:	460c      	mov	r4, r1
   b6838:	4615      	mov	r5, r2
   b683a:	461e      	mov	r6, r3
   b683c:	f7ff ff6d 	bl	b671a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b6840:	b948      	cbnz	r0, b6856 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b6842:	68b8      	ldr	r0, [r7, #8]
   b6844:	6803      	ldr	r3, [r0, #0]
   b6846:	699f      	ldr	r7, [r3, #24]
   b6848:	462a      	mov	r2, r5
   b684a:	4633      	mov	r3, r6
   b684c:	4621      	mov	r1, r4
   b684e:	46bc      	mov	ip, r7
   b6850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6854:	4760      	bx	ip
   b6856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b685a <_ZNSt9type_infoD1Ev>:
   b685a:	4770      	bx	lr

000b685c <_ZNKSt9type_info14__is_pointer_pEv>:
   b685c:	2000      	movs	r0, #0
   b685e:	4770      	bx	lr

000b6860 <_ZNKSt9type_infoeqERKS_>:
   b6860:	4281      	cmp	r1, r0
   b6862:	b508      	push	{r3, lr}
   b6864:	d00e      	beq.n	b6884 <_ZNKSt9type_infoeqERKS_+0x24>
   b6866:	6840      	ldr	r0, [r0, #4]
   b6868:	7803      	ldrb	r3, [r0, #0]
   b686a:	2b2a      	cmp	r3, #42	; 0x2a
   b686c:	d00c      	beq.n	b6888 <_ZNKSt9type_infoeqERKS_+0x28>
   b686e:	6849      	ldr	r1, [r1, #4]
   b6870:	780b      	ldrb	r3, [r1, #0]
   b6872:	2b2a      	cmp	r3, #42	; 0x2a
   b6874:	bf08      	it	eq
   b6876:	3101      	addeq	r1, #1
   b6878:	f000 f880 	bl	b697c <strcmp>
   b687c:	fab0 f080 	clz	r0, r0
   b6880:	0940      	lsrs	r0, r0, #5
   b6882:	bd08      	pop	{r3, pc}
   b6884:	2001      	movs	r0, #1
   b6886:	e7fc      	b.n	b6882 <_ZNKSt9type_infoeqERKS_+0x22>
   b6888:	2000      	movs	r0, #0
   b688a:	e7fa      	b.n	b6882 <_ZNKSt9type_infoeqERKS_+0x22>

000b688c <atexit>:
   b688c:	2300      	movs	r3, #0
   b688e:	4601      	mov	r1, r0
   b6890:	461a      	mov	r2, r3
   b6892:	4618      	mov	r0, r3
   b6894:	f000 b8a0 	b.w	b69d8 <__register_exitproc>

000b6898 <ldiv>:
   b6898:	2900      	cmp	r1, #0
   b689a:	b510      	push	{r4, lr}
   b689c:	fb91 f4f2 	sdiv	r4, r1, r2
   b68a0:	fb02 1314 	mls	r3, r2, r4, r1
   b68a4:	db06      	blt.n	b68b4 <ldiv+0x1c>
   b68a6:	2b00      	cmp	r3, #0
   b68a8:	da01      	bge.n	b68ae <ldiv+0x16>
   b68aa:	3401      	adds	r4, #1
   b68ac:	1a9b      	subs	r3, r3, r2
   b68ae:	e9c0 4300 	strd	r4, r3, [r0]
   b68b2:	bd10      	pop	{r4, pc}
   b68b4:	2b00      	cmp	r3, #0
   b68b6:	bfc4      	itt	gt
   b68b8:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b68bc:	189b      	addgt	r3, r3, r2
   b68be:	e7f6      	b.n	b68ae <ldiv+0x16>

000b68c0 <memcpy>:
   b68c0:	440a      	add	r2, r1
   b68c2:	4291      	cmp	r1, r2
   b68c4:	f100 33ff 	add.w	r3, r0, #4294967295
   b68c8:	d100      	bne.n	b68cc <memcpy+0xc>
   b68ca:	4770      	bx	lr
   b68cc:	b510      	push	{r4, lr}
   b68ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   b68d2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b68d6:	4291      	cmp	r1, r2
   b68d8:	d1f9      	bne.n	b68ce <memcpy+0xe>
   b68da:	bd10      	pop	{r4, pc}

000b68dc <memmove>:
   b68dc:	4288      	cmp	r0, r1
   b68de:	b510      	push	{r4, lr}
   b68e0:	eb01 0402 	add.w	r4, r1, r2
   b68e4:	d902      	bls.n	b68ec <memmove+0x10>
   b68e6:	4284      	cmp	r4, r0
   b68e8:	4623      	mov	r3, r4
   b68ea:	d807      	bhi.n	b68fc <memmove+0x20>
   b68ec:	1e43      	subs	r3, r0, #1
   b68ee:	42a1      	cmp	r1, r4
   b68f0:	d008      	beq.n	b6904 <memmove+0x28>
   b68f2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b68f6:	f803 2f01 	strb.w	r2, [r3, #1]!
   b68fa:	e7f8      	b.n	b68ee <memmove+0x12>
   b68fc:	4402      	add	r2, r0
   b68fe:	4601      	mov	r1, r0
   b6900:	428a      	cmp	r2, r1
   b6902:	d100      	bne.n	b6906 <memmove+0x2a>
   b6904:	bd10      	pop	{r4, pc}
   b6906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b690a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b690e:	e7f7      	b.n	b6900 <memmove+0x24>

000b6910 <memset>:
   b6910:	4402      	add	r2, r0
   b6912:	4603      	mov	r3, r0
   b6914:	4293      	cmp	r3, r2
   b6916:	d100      	bne.n	b691a <memset+0xa>
   b6918:	4770      	bx	lr
   b691a:	f803 1b01 	strb.w	r1, [r3], #1
   b691e:	e7f9      	b.n	b6914 <memset+0x4>

000b6920 <srand>:
   b6920:	b538      	push	{r3, r4, r5, lr}
   b6922:	4b10      	ldr	r3, [pc, #64]	; (b6964 <srand+0x44>)
   b6924:	681d      	ldr	r5, [r3, #0]
   b6926:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6928:	4604      	mov	r4, r0
   b692a:	b9b3      	cbnz	r3, b695a <srand+0x3a>
   b692c:	2018      	movs	r0, #24
   b692e:	f7fe fcc3 	bl	b52b8 <malloc>
   b6932:	4602      	mov	r2, r0
   b6934:	63a8      	str	r0, [r5, #56]	; 0x38
   b6936:	b920      	cbnz	r0, b6942 <srand+0x22>
   b6938:	4b0b      	ldr	r3, [pc, #44]	; (b6968 <srand+0x48>)
   b693a:	480c      	ldr	r0, [pc, #48]	; (b696c <srand+0x4c>)
   b693c:	2142      	movs	r1, #66	; 0x42
   b693e:	f7fe fce3 	bl	b5308 <__assert_func>
   b6942:	490b      	ldr	r1, [pc, #44]	; (b6970 <srand+0x50>)
   b6944:	4b0b      	ldr	r3, [pc, #44]	; (b6974 <srand+0x54>)
   b6946:	e9c0 1300 	strd	r1, r3, [r0]
   b694a:	4b0b      	ldr	r3, [pc, #44]	; (b6978 <srand+0x58>)
   b694c:	6083      	str	r3, [r0, #8]
   b694e:	230b      	movs	r3, #11
   b6950:	8183      	strh	r3, [r0, #12]
   b6952:	2100      	movs	r1, #0
   b6954:	2001      	movs	r0, #1
   b6956:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b695a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b695c:	2200      	movs	r2, #0
   b695e:	611c      	str	r4, [r3, #16]
   b6960:	615a      	str	r2, [r3, #20]
   b6962:	bd38      	pop	{r3, r4, r5, pc}
   b6964:	2003e4f8 	.word	0x2003e4f8
   b6968:	000b7301 	.word	0x000b7301
   b696c:	000b7318 	.word	0x000b7318
   b6970:	abcd330e 	.word	0xabcd330e
   b6974:	e66d1234 	.word	0xe66d1234
   b6978:	0005deec 	.word	0x0005deec

000b697c <strcmp>:
   b697c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6980:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6984:	2a01      	cmp	r2, #1
   b6986:	bf28      	it	cs
   b6988:	429a      	cmpcs	r2, r3
   b698a:	d0f7      	beq.n	b697c <strcmp>
   b698c:	1ad0      	subs	r0, r2, r3
   b698e:	4770      	bx	lr

000b6990 <strcpy>:
   b6990:	4603      	mov	r3, r0
   b6992:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6996:	f803 2b01 	strb.w	r2, [r3], #1
   b699a:	2a00      	cmp	r2, #0
   b699c:	d1f9      	bne.n	b6992 <strcpy+0x2>
   b699e:	4770      	bx	lr

000b69a0 <strlen>:
   b69a0:	4603      	mov	r3, r0
   b69a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b69a6:	2a00      	cmp	r2, #0
   b69a8:	d1fb      	bne.n	b69a2 <strlen+0x2>
   b69aa:	1a18      	subs	r0, r3, r0
   b69ac:	3801      	subs	r0, #1
   b69ae:	4770      	bx	lr

000b69b0 <strncpy>:
   b69b0:	b510      	push	{r4, lr}
   b69b2:	3901      	subs	r1, #1
   b69b4:	4603      	mov	r3, r0
   b69b6:	b132      	cbz	r2, b69c6 <strncpy+0x16>
   b69b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b69bc:	f803 4b01 	strb.w	r4, [r3], #1
   b69c0:	3a01      	subs	r2, #1
   b69c2:	2c00      	cmp	r4, #0
   b69c4:	d1f7      	bne.n	b69b6 <strncpy+0x6>
   b69c6:	441a      	add	r2, r3
   b69c8:	2100      	movs	r1, #0
   b69ca:	4293      	cmp	r3, r2
   b69cc:	d100      	bne.n	b69d0 <strncpy+0x20>
   b69ce:	bd10      	pop	{r4, pc}
   b69d0:	f803 1b01 	strb.w	r1, [r3], #1
   b69d4:	e7f9      	b.n	b69ca <strncpy+0x1a>
	...

000b69d8 <__register_exitproc>:
   b69d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b69dc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6a98 <__register_exitproc+0xc0>
   b69e0:	4606      	mov	r6, r0
   b69e2:	f8d8 0000 	ldr.w	r0, [r8]
   b69e6:	461f      	mov	r7, r3
   b69e8:	460d      	mov	r5, r1
   b69ea:	4691      	mov	r9, r2
   b69ec:	f000 f856 	bl	b6a9c <__retarget_lock_acquire_recursive>
   b69f0:	4b25      	ldr	r3, [pc, #148]	; (b6a88 <__register_exitproc+0xb0>)
   b69f2:	681c      	ldr	r4, [r3, #0]
   b69f4:	b934      	cbnz	r4, b6a04 <__register_exitproc+0x2c>
   b69f6:	4c25      	ldr	r4, [pc, #148]	; (b6a8c <__register_exitproc+0xb4>)
   b69f8:	601c      	str	r4, [r3, #0]
   b69fa:	4b25      	ldr	r3, [pc, #148]	; (b6a90 <__register_exitproc+0xb8>)
   b69fc:	b113      	cbz	r3, b6a04 <__register_exitproc+0x2c>
   b69fe:	681b      	ldr	r3, [r3, #0]
   b6a00:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6a04:	6863      	ldr	r3, [r4, #4]
   b6a06:	2b1f      	cmp	r3, #31
   b6a08:	dd07      	ble.n	b6a1a <__register_exitproc+0x42>
   b6a0a:	f8d8 0000 	ldr.w	r0, [r8]
   b6a0e:	f000 f847 	bl	b6aa0 <__retarget_lock_release_recursive>
   b6a12:	f04f 30ff 	mov.w	r0, #4294967295
   b6a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6a1a:	b34e      	cbz	r6, b6a70 <__register_exitproc+0x98>
   b6a1c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6a20:	b988      	cbnz	r0, b6a46 <__register_exitproc+0x6e>
   b6a22:	4b1c      	ldr	r3, [pc, #112]	; (b6a94 <__register_exitproc+0xbc>)
   b6a24:	b923      	cbnz	r3, b6a30 <__register_exitproc+0x58>
   b6a26:	f8d8 0000 	ldr.w	r0, [r8]
   b6a2a:	f000 f838 	bl	b6a9e <__retarget_lock_release>
   b6a2e:	e7f0      	b.n	b6a12 <__register_exitproc+0x3a>
   b6a30:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6a34:	f7fe fc40 	bl	b52b8 <malloc>
   b6a38:	2800      	cmp	r0, #0
   b6a3a:	d0f4      	beq.n	b6a26 <__register_exitproc+0x4e>
   b6a3c:	2300      	movs	r3, #0
   b6a3e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6a42:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6a46:	6863      	ldr	r3, [r4, #4]
   b6a48:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6a4c:	2201      	movs	r2, #1
   b6a4e:	409a      	lsls	r2, r3
   b6a50:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6a54:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6a58:	4313      	orrs	r3, r2
   b6a5a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6a5e:	2e02      	cmp	r6, #2
   b6a60:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6a64:	bf02      	ittt	eq
   b6a66:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6a6a:	4313      	orreq	r3, r2
   b6a6c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6a70:	6863      	ldr	r3, [r4, #4]
   b6a72:	f8d8 0000 	ldr.w	r0, [r8]
   b6a76:	1c5a      	adds	r2, r3, #1
   b6a78:	3302      	adds	r3, #2
   b6a7a:	6062      	str	r2, [r4, #4]
   b6a7c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6a80:	f000 f80e 	bl	b6aa0 <__retarget_lock_release_recursive>
   b6a84:	2000      	movs	r0, #0
   b6a86:	e7c6      	b.n	b6a16 <__register_exitproc+0x3e>
   b6a88:	2003e7e8 	.word	0x2003e7e8
   b6a8c:	2003e75c 	.word	0x2003e75c
   b6a90:	00000000 	.word	0x00000000
   b6a94:	000b52b9 	.word	0x000b52b9
   b6a98:	2003e55c 	.word	0x2003e55c

000b6a9c <__retarget_lock_acquire_recursive>:
   b6a9c:	4770      	bx	lr

000b6a9e <__retarget_lock_release>:
   b6a9e:	4770      	bx	lr

000b6aa0 <__retarget_lock_release_recursive>:
   b6aa0:	4770      	bx	lr

000b6aa2 <link_code_end>:
	...

000b6aa4 <dynalib_user>:
   b6aa4:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6ab4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b6ac4:	7620 7269 7574 6c61 5700 414c 5f4e 4553      virtual.WLAN_SE
   b6ad4:	5f43 4e55 4553 0043 4c57 4e41 535f 4345     C_UNSEC.WLAN_SEC
   b6ae4:	575f 5045 5700 414c 5f4e 4553 5f43 5057     _WEP.WLAN_SEC_WP
   b6af4:	0041 4c57 4e41 535f 4345 575f 4150 0032     A.WLAN_SEC_WPA2.
   b6b04:	4c57 4e41 535f 4345 575f 4150 455f 544e     WLAN_SEC_WPA_ENT
   b6b14:	5245 5250 5349 0045 4c57 4e41 535f 4345     ERPRISE.WLAN_SEC
   b6b24:	575f 4150 5f32 4e45 4554 5052 4952 4553     _WPA2_ENTERPRISE
   b6b34:	4e00 412f 5700 414c 5f4e 4943 4850 5245     .N/A.WLAN_CIPHER
   b6b44:	415f 5345 5700 414c 5f4e 4943 4850 5245     _AES.WLAN_CIPHER
   b6b54:	545f 494b 0050 4c57 4e41 435f 5049 4548     _TKIP.WLAN_CIPHE
   b6b64:	5f52 4541 5f53 4b54 5049 5300 6163 206e     R_AES_TKIP.Scan 
   b6b74:	7241 6f67 206e 6f66 2072 6957 6946 4920     Argon for WiFi I
   b6b84:	666e 726f 616d 6974 6e6f 0a20 6900 2070     nformation ..ip 
   b6b94:	6461 7264 7365 3a73 2520 2073 000a 7243     address: %s ..Cr
   b6ba4:	6465 6e65 6974 6c61 2073 6f66 2072 6425     edentials for %d
   b6bb4:	4120 6363 7365 2073 6f50 6e69 7374 4620      Access Points F
   b6bc4:	756f 646e 0a20 4100 2550 2064 202d 7373     ound ..AP%d - ss
   b6bd4:	6469 203a 7325 0a20 4100 2550 2064 202d     id: %s ..AP%d - 
   b6be4:	616d 3a63 2520 3230 3a58 3025 5832 253a     mac: %02X:%02X:%
   b6bf4:	3230 3a58 3025 5832 253a 3230 3a58 3025     02X:%02X:%02X:%0
   b6c04:	5832 0a20 4100 2550 2064 202d 6573 7563     2X ..AP%d - secu
   b6c14:	6972 7974 203a 6425 2820 6573 7563 6972     rity: %d (securi
   b6c24:	7974 2520 2973 0a20 4100 2550 2064 202d     ty %s) ..AP%d - 
   b6c34:	6963 6870 7265 203a 2020 6425 2820 6963     cipher:   %d (ci
   b6c44:	6870 7265 2520 2973 0a20 000a 6f4d 7369     pher %s) ...Mois
   b6c54:	7574 6572 7220 6165 6964 676e 6920 2073     ture reading is 
   b6c64:	6925 0a20 4800 7361 4320 6572 6564 746e     %i ..Has Credent
   b6c74:	6169 736c 3d20 2520 0a69 000a 6464 4963     ials = %i...ddcI
   b6c84:	544f 3032 3032 4400 4344 4f49 0054 7553     OT2020.DDCIOT.Su
   b6c94:	6176 6639 6a69 0069 6150 6572 746e 6f48     va9fiji.ParentHo
   b6ca4:	7375 0065 6f43 6e6e 6365 6974 676e 7420     use.Connecting t
   b6cb4:	206f 514d 5454 2e2e 202e 4500 7272 726f     o MQTT... .Error
   b6cc4:	4320 646f 2065 7325 000a 6552 7274 6979      Code %s..Retryi
   b6cd4:	676e 4d20 5451 2054 6f63 6e6e 6365 6974     ng MQTT connecti
   b6ce4:	6e6f 6920 206e 2035 6573 6f63 646e 2e73     on in 5 seconds.
   b6cf4:	2e2e 000a 514d 5454 4320 6e6f 656e 7463     ....MQTT Connect
   b6d04:	6465 0a21 5000 6e69 6967 676e 4d20 5451     ed!..Pinging MQT
   b6d14:	2054 000a 6944 6373 6e6f 656e 7463 6e69     T ..Disconnectin
   b6d24:	2067 000a 6173 746e 6465 0037 6f69 612e     g ..santed7.io.a
   b6d34:	6164 7266 6975 2e74 6f63 006d 6961 5f6f     dafruit.com.aio_
   b6d44:	4f66 6557 3637 4c72 4a47 7772 4e43 4b67     fOWe76rLGJrwCNgK
   b6d54:	646a 586d 5942 787a 5674 5770 7300 6e61     jdmXBYzxtVpW.san
   b6d64:	6574 3764 662f 6565 7364 732f 7675 6261     ted7/feeds/suvab
   b6d74:	7475 6f74 6f6e 6f6e 6666 7300 6e61 6574     uttononoff.sante
   b6d84:	3764 662f 6565 7364 732f 696f 656c 746e     d7/feeds/soilent
   b6d94:	7247 6565 006e 0000                         Green...

000b6d9c <_ZTV19Adafruit_MQTT_SPARK>:
	...
   b6da4:	4719 000b 47a5 000b 46c5 000b 4773 000b     .G...G...F..sG..
   b6db4:	47b3 000b 46d9 000b 471b 000b 7244 706f     .G...F...G..Drop
   b6dc4:	6570 2064 2061 6170 6b63 7465 5500 6b6e     ped a packet.Unk
   b6dd4:	6f6e 6e77 6520 7272 726f 4d00 5451 0054     nown error.MQTT.
   b6de4:	6146 6c69 6465 7420 206f 7573 7362 7263     Failed to subscr
   b6df4:	6269 0065 6f43 6e6e 6365 6974 6e6f 6620     ibe.Connection f
   b6e04:	6961 656c 0064 6854 2065 6553 7672 7265     ailed.The Server
   b6e14:	6420 656f 2073 6f6e 2074 7573 7070 726f      does not suppor
   b6e24:	2074 6874 2065 656c 6576 206c 666f 7420     t the level of t
   b6e34:	6568 4d20 5451 2054 7270 746f 636f 6c6f     he MQTT protocol
   b6e44:	7220 7165 6575 7473 6465 5400 6568 4320      requested.The C
   b6e54:	696c 6e65 2074 6469 6e65 6974 6966 7265     lient identifier
   b6e64:	6920 2073 6f63 7272 6365 2074 5455 2d46      is correct UTF-
   b6e74:	2038 7562 2074 6f6e 2074 6c61 6f6c 6577     8 but not allowe
   b6e84:	2064 7962 7420 6568 5320 7265 6576 0072     d by the Server.
   b6e94:	6854 2065 514d 5454 7320 7265 6976 6563     The MQTT service
   b6ea4:	6920 2073 6e75 7661 6961 616c 6c62 0065      is unavailable.
   b6eb4:	6854 2065 6164 6174 6920 206e 6874 2065     The data in the 
   b6ec4:	7375 7265 6e20 6d61 2065 726f 7020 7361     user name or pas
   b6ed4:	7773 726f 2064 7369 6d20 6c61 6f66 6d72     sword is malform
   b6ee4:	6465 4e00 746f 6120 7475 6f68 6972 657a     ed.Not authorize
   b6ef4:	2064 6f74 6320 6e6f 656e 7463 4500 6378     d to connect.Exc
   b6f04:	6565 6564 2064 6572 6f63 6e6e 6365 2074     eeded reconnect 
   b6f14:	6172 6574 6c20 6d69 7469 202e 6c50 6165     rate limit. Plea
   b6f24:	6573 7420 7972 6120 6167 6e69 6c20 7461     se try again lat
   b6f34:	7265 002e 6f59 2075 6168 6576 6220 6565     er..You have bee
   b6f44:	206e 6162 6e6e 6465 6620 6f72 206d 6f63     n banned from co
   b6f54:	6e6e 6365 6974 676e 202e 6c50 6165 6573     nnecting. Please
   b6f64:	6320 6e6f 6174 7463 7420 6568 4d20 5451      contact the MQT
   b6f74:	2054 6573 7672 7265 6120 6d64 6e69 7369     T server adminis
   b6f84:	7274 7461 726f 6620 726f 6d20 726f 2065     trator for more 
   b6f94:	6564 6174 6c69 2e73 0000 0000               details.....

000b6fa0 <_ZTV13Adafruit_MQTT>:
	...
   b6fb0:	40a1 000b 40a1 000b 40a1 000b 40a1 000b     .@...@...@...@..
   b6fc0:	40a1 000b                                   .@..

000b6fc4 <CSWTCH.45>:
   b6fc4:	6de4 000b 6df8 000b 6dd1 000b 6e0a 000b     .m...m...m...n..
   b6fd4:	6e4f 000b 6e94 000b 6eb4 000b 6ee7 000b     On...n...n...n..
   b6fe4:	6f01 000b 6f38 000b                         .o..8o..

000b6fec <_ZTV5HX711>:
	...
   b6ff4:	4d0f 000b 4d11 000b                         .M...M..

000b6ffc <_ZTVN5spark13EthernetClassE>:
	...
   b7004:	5387 000b 537d 000b 5373 000b 5369 000b     .S..}S..sS..iS..
   b7014:	535d 000b 5351 000b 62d5 000b 62dd 000b     ]S..QS...b...b..
   b7024:	5345 000b 533d 000b 5333 000b 5329 000b     ES..=S..3S..)S..
   b7034:	630d 000b                                   .c..

000b7038 <_ZTV21StringPrintableHelper>:
	...
   b7040:	5465 000b 5467 000b 558f 000b 5561 000b     eT..gT...U..aU..

000b7050 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b7058:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b7068:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b7078 <_ZTV9IPAddress>:
	...
   b7080:	58d9 000b 58c9 000b 58cb 000b               .X...X...X..

000b708c <_ZTV9USBSerial>:
	...
   b7094:	59eb 000b 5a53 000b 5a29 000b 5605 000b     .Y..SZ..)Z...V..
   b70a4:	5a1b 000b 59ed 000b 59fd 000b 5a4d 000b     .Z...Y...Y..MZ..
   b70b4:	5a0d 000b 59e5 000b                         .Z...Y..

000b70bc <_ZTV11USARTSerial>:
	...
   b70c4:	5af5 000b 5b61 000b 5b39 000b 5605 000b     .Z..a[..9[...V..
   b70d4:	5b09 000b 5b25 000b 5b17 000b 5b33 000b     .[..%[...[..3[..
   b70e4:	5af7 000b 5afb 000b                         .Z...Z..

000b70ec <_ZTV7TwoWire>:
	...
   b70f4:	5b99 000b 5be3 000b 5bbb 000b 5b9b 000b     .[...[...[...[..
   b7104:	5bc3 000b 5bcb 000b 5bd3 000b 5bdb 000b     .[...[...[...[..
   b7114:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b7124:	2072 203d 6425 0000                         r = %d..

000b712c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7134:	5cb1 000b 5cd5 000b 61bf 000b 5ce3 000b     .\...\...a...\..
   b7144:	5cb5 000b                                   .\..

000b7148 <_ZTV9TCPClient>:
	...
   b7150:	5759 000b 5771 000b 5c2d 000b 5c47 000b     YW..qW..-\..G\..
   b7160:	6055 000b 5c71 000b 5ecb 000b 5ca5 000b     U`..q\...^...\..
   b7170:	5f5d 000b 5d9d 000b 5ef9 000b 6109 000b     ]_...]...^...a..
   b7180:	5e99 000b 5ca7 000b 5c59 000b 5ce9 000b     .^...\..Y\...\..
   b7190:	5d7d 000b                                   }]..

000b7194 <_ZTVN5spark9WiFiClassE>:
	...
   b719c:	6251 000b 6247 000b 623d 000b 61f3 000b     Qb..Gb..=b...a..
   b71ac:	6231 000b 6225 000b 62d5 000b 62dd 000b     1b..%b...b...b..
   b71bc:	6219 000b 6211 000b 6207 000b 61fd 000b     .b...b...b...a..
   b71cc:	630d 000b                                   .c..

000b71d0 <_ZTVN5spark12NetworkClassE>:
	...
   b71d8:	6295 000b 629f 000b 62a9 000b 62b3 000b     .b...b...b...b..
   b71e8:	62bd 000b 62c9 000b 62d5 000b 62dd 000b     .b...b...b...b..
   b71f8:	62e5 000b 62f1 000b 62f9 000b 6303 000b     .b...b...b...c..
   b7208:	630d 000b                                   .c..

000b720c <_ZSt7nothrow>:
	...

000b720d <_ZTSSt19_Sp_make_shared_tag>:
   b720d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b721d:	6572 5f64 6174 0067 0000                     red_tag....

000b7228 <_ZTISt19_Sp_make_shared_tag>:
   b7228:	7268 000b 720d 000b                         hr...r..

000b7230 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7230:	72c8 000b 723c 000b 72ec 000b               .r..<r...r..

000b723c <_ZTSN10__cxxabiv117__class_type_infoE>:
   b723c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b724c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b725c:	0045 0000                                   E...

000b7260 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7260:	0000 0000 7230 000b 66b5 000b 66c9 000b     ....0r...f...f..
   b7270:	685d 000b 685d 000b 6733 000b 6675 000b     ]h..]h..3g..uf..
   b7280:	671b 000b 66dd 000b 66a7 000b               .g...f...f..

000b728c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b728c:	72c8 000b 7298 000b 7230 000b               .r...r..0r..

000b7298 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b7298:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b72a8:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b72b8:	666e 456f 0000 0000                         nfoE....

000b72c0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b72c0:	0000 0000 728c 000b 675d 000b 6771 000b     .....r..]g..qg..
   b72d0:	685d 000b 685d 000b 6733 000b 6675 000b     ]h..]h..3g..uf..
   b72e0:	6831 000b 67bd 000b 6785 000b               1h...g...g..

000b72ec <_ZTISt9type_info>:
   b72ec:	7268 000b 72f4 000b                         hr...r..

000b72f4 <_ZTSSt9type_info>:
   b72f4:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b7304:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b7314:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b7324:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b7334:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b7344:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7354:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7364:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b7374:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7384:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7395 <link_const_variable_data_end>:
   b7395:	00          	.byte	0x00
	...

000b7398 <link_constructors_location>:
   b7398:	000b4631 	.word	0x000b4631
   b739c:	000b5391 	.word	0x000b5391
   b73a0:	000b53b9 	.word	0x000b53b9
   b73a4:	000b55f5 	.word	0x000b55f5
   b73a8:	000b572d 	.word	0x000b572d
   b73ac:	000b573d 	.word	0x000b573d
   b73b0:	000b5785 	.word	0x000b5785
   b73b4:	000b6281 	.word	0x000b6281
   b73b8:	000b63e5 	.word	0x000b63e5

000b73bc <link_constructors_end>:
   b73bc:	00000000 	.word	0x00000000
